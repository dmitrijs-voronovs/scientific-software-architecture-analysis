id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/issues/13461:42,deployability,patch,patches,42,> > Trying to build the head of `v6-28-00-patches` (currently [281a162](https://github.com/root-project/root/commit/281a162ace152062e40ff1a7018176e173e664a9)) to reproduce against. > . > Does not build currently... @greenc-FNAL Thanks for reporting this and providing a reproducer! Any chance that you can try with ROOT from the `master` branch too?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13461
https://github.com/root-project/root/issues/13461:196,deployability,build,build,196,> > Trying to build the head of `v6-28-00-patches` (currently [281a162](https://github.com/root-project/root/commit/281a162ace152062e40ff1a7018176e173e664a9)) to reproduce against. > . > Does not build currently... @greenc-FNAL Thanks for reporting this and providing a reproducer! Any chance that you can try with ROOT from the `master` branch too?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13461
https://github.com/root-project/root/issues/13461:52,energy efficiency,current,currently,52,> > Trying to build the head of `v6-28-00-patches` (currently [281a162](https://github.com/root-project/root/commit/281a162ace152062e40ff1a7018176e173e664a9)) to reproduce against. > . > Does not build currently... @greenc-FNAL Thanks for reporting this and providing a reproducer! Any chance that you can try with ROOT from the `master` branch too?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13461
https://github.com/root-project/root/issues/13461:202,energy efficiency,current,currently,202,> > Trying to build the head of `v6-28-00-patches` (currently [281a162](https://github.com/root-project/root/commit/281a162ace152062e40ff1a7018176e173e664a9)) to reproduce against. > . > Does not build currently... @greenc-FNAL Thanks for reporting this and providing a reproducer! Any chance that you can try with ROOT from the `master` branch too?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13461
https://github.com/root-project/root/issues/13461:216,energy efficiency,green,greenc-FNAL,216,> > Trying to build the head of `v6-28-00-patches` (currently [281a162](https://github.com/root-project/root/commit/281a162ace152062e40ff1a7018176e173e664a9)) to reproduce against. > . > Does not build currently... @greenc-FNAL Thanks for reporting this and providing a reproducer! Any chance that you can try with ROOT from the `master` branch too?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13461
https://github.com/root-project/root/issues/13461:187,reliability,Doe,Does,187,> > Trying to build the head of `v6-28-00-patches` (currently [281a162](https://github.com/root-project/root/commit/281a162ace152062e40ff1a7018176e173e664a9)) to reproduce against. > . > Does not build currently... @greenc-FNAL Thanks for reporting this and providing a reproducer! Any chance that you can try with ROOT from the `master` branch too?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13461
https://github.com/root-project/root/issues/13461:42,safety,patch,patches,42,> > Trying to build the head of `v6-28-00-patches` (currently [281a162](https://github.com/root-project/root/commit/281a162ace152062e40ff1a7018176e173e664a9)) to reproduce against. > . > Does not build currently... @greenc-FNAL Thanks for reporting this and providing a reproducer! Any chance that you can try with ROOT from the `master` branch too?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13461
https://github.com/root-project/root/issues/13461:42,security,patch,patches,42,> > Trying to build the head of `v6-28-00-patches` (currently [281a162](https://github.com/root-project/root/commit/281a162ace152062e40ff1a7018176e173e664a9)) to reproduce against. > . > Does not build currently... @greenc-FNAL Thanks for reporting this and providing a reproducer! Any chance that you can try with ROOT from the `master` branch too?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13461
https://github.com/root-project/root/issues/13461:66,deployability,version,version,66,There is no reason for this to be fixed in the master (since LLVM version is not changed yet),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13461
https://github.com/root-project/root/issues/13461:66,integrability,version,version,66,There is no reason for this to be fixed in the master (since LLVM version is not changed yet),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13461
https://github.com/root-project/root/issues/13461:66,modifiability,version,version,66,There is no reason for this to be fixed in the master (since LLVM version is not changed yet),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13461
https://github.com/root-project/root/issues/13461:16,deployability,build,build,16,"> > > Trying to build the head of `v6-28-00-patches` (currently [281a162](https://github.com/root-project/root/commit/281a162ace152062e40ff1a7018176e173e664a9)) to reproduce against. > > . > > . > > Does not build currently... > . > @greenc-FNAL Thanks for reporting this and providing a reproducer! Any chance that you can try with ROOT from the `master` branch too? Might take me a while, but I'll get on it. Is the HEAD generally reasonable, or is there a particular commit I should build from?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13461
https://github.com/root-project/root/issues/13461:44,deployability,patch,patches,44,"> > > Trying to build the head of `v6-28-00-patches` (currently [281a162](https://github.com/root-project/root/commit/281a162ace152062e40ff1a7018176e173e664a9)) to reproduce against. > > . > > . > > Does not build currently... > . > @greenc-FNAL Thanks for reporting this and providing a reproducer! Any chance that you can try with ROOT from the `master` branch too? Might take me a while, but I'll get on it. Is the HEAD generally reasonable, or is there a particular commit I should build from?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13461
https://github.com/root-project/root/issues/13461:208,deployability,build,build,208,"> > > Trying to build the head of `v6-28-00-patches` (currently [281a162](https://github.com/root-project/root/commit/281a162ace152062e40ff1a7018176e173e664a9)) to reproduce against. > > . > > . > > Does not build currently... > . > @greenc-FNAL Thanks for reporting this and providing a reproducer! Any chance that you can try with ROOT from the `master` branch too? Might take me a while, but I'll get on it. Is the HEAD generally reasonable, or is there a particular commit I should build from?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13461
https://github.com/root-project/root/issues/13461:486,deployability,build,build,486,"> > > Trying to build the head of `v6-28-00-patches` (currently [281a162](https://github.com/root-project/root/commit/281a162ace152062e40ff1a7018176e173e664a9)) to reproduce against. > > . > > . > > Does not build currently... > . > @greenc-FNAL Thanks for reporting this and providing a reproducer! Any chance that you can try with ROOT from the `master` branch too? Might take me a while, but I'll get on it. Is the HEAD generally reasonable, or is there a particular commit I should build from?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13461
https://github.com/root-project/root/issues/13461:54,energy efficiency,current,currently,54,"> > > Trying to build the head of `v6-28-00-patches` (currently [281a162](https://github.com/root-project/root/commit/281a162ace152062e40ff1a7018176e173e664a9)) to reproduce against. > > . > > . > > Does not build currently... > . > @greenc-FNAL Thanks for reporting this and providing a reproducer! Any chance that you can try with ROOT from the `master` branch too? Might take me a while, but I'll get on it. Is the HEAD generally reasonable, or is there a particular commit I should build from?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13461
https://github.com/root-project/root/issues/13461:214,energy efficiency,current,currently,214,"> > > Trying to build the head of `v6-28-00-patches` (currently [281a162](https://github.com/root-project/root/commit/281a162ace152062e40ff1a7018176e173e664a9)) to reproduce against. > > . > > . > > Does not build currently... > . > @greenc-FNAL Thanks for reporting this and providing a reproducer! Any chance that you can try with ROOT from the `master` branch too? Might take me a while, but I'll get on it. Is the HEAD generally reasonable, or is there a particular commit I should build from?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13461
https://github.com/root-project/root/issues/13461:234,energy efficiency,green,greenc-FNAL,234,"> > > Trying to build the head of `v6-28-00-patches` (currently [281a162](https://github.com/root-project/root/commit/281a162ace152062e40ff1a7018176e173e664a9)) to reproduce against. > > . > > . > > Does not build currently... > . > @greenc-FNAL Thanks for reporting this and providing a reproducer! Any chance that you can try with ROOT from the `master` branch too? Might take me a while, but I'll get on it. Is the HEAD generally reasonable, or is there a particular commit I should build from?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13461
https://github.com/root-project/root/issues/13461:199,reliability,Doe,Does,199,"> > > Trying to build the head of `v6-28-00-patches` (currently [281a162](https://github.com/root-project/root/commit/281a162ace152062e40ff1a7018176e173e664a9)) to reproduce against. > > . > > . > > Does not build currently... > . > @greenc-FNAL Thanks for reporting this and providing a reproducer! Any chance that you can try with ROOT from the `master` branch too? Might take me a while, but I'll get on it. Is the HEAD generally reasonable, or is there a particular commit I should build from?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13461
https://github.com/root-project/root/issues/13461:44,safety,patch,patches,44,"> > > Trying to build the head of `v6-28-00-patches` (currently [281a162](https://github.com/root-project/root/commit/281a162ace152062e40ff1a7018176e173e664a9)) to reproduce against. > > . > > . > > Does not build currently... > . > @greenc-FNAL Thanks for reporting this and providing a reproducer! Any chance that you can try with ROOT from the `master` branch too? Might take me a while, but I'll get on it. Is the HEAD generally reasonable, or is there a particular commit I should build from?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13461
https://github.com/root-project/root/issues/13461:44,security,patch,patches,44,"> > > Trying to build the head of `v6-28-00-patches` (currently [281a162](https://github.com/root-project/root/commit/281a162ace152062e40ff1a7018176e173e664a9)) to reproduce against. > > . > > . > > Does not build currently... > . > @greenc-FNAL Thanks for reporting this and providing a reproducer! Any chance that you can try with ROOT from the `master` branch too? Might take me a while, but I'll get on it. Is the HEAD generally reasonable, or is there a particular commit I should build from?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13461
https://github.com/root-project/root/pull/13463:29,safety,test,test,29,"We might want to task CMS to test this one, just to check if it fixes https://github.com/root-project/root/issues/13429...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:29,testability,test,test,29,"We might want to task CMS to test this one, just to check if it fixes https://github.com/root-project/root/issues/13429...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:132,deployability,updat,update,132,"> We might want to task CMS to test this one, just to check if it fixes #13429... @hahnjo let's wait until we merge the latest ROOT update in https://github.com/cms-sw/cmsdist/pull/8650 (hopefully in a couple of hours) and I will start the testing. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:202,integrability,coupl,couple,202,"> We might want to task CMS to test this one, just to check if it fixes #13429... @hahnjo let's wait until we merge the latest ROOT update in https://github.com/cms-sw/cmsdist/pull/8650 (hopefully in a couple of hours) and I will start the testing. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:202,modifiability,coupl,couple,202,"> We might want to task CMS to test this one, just to check if it fixes #13429... @hahnjo let's wait until we merge the latest ROOT update in https://github.com/cms-sw/cmsdist/pull/8650 (hopefully in a couple of hours) and I will start the testing. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:31,safety,test,test,31,"> We might want to task CMS to test this one, just to check if it fixes #13429... @hahnjo let's wait until we merge the latest ROOT update in https://github.com/cms-sw/cmsdist/pull/8650 (hopefully in a couple of hours) and I will start the testing. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:132,safety,updat,update,132,"> We might want to task CMS to test this one, just to check if it fixes #13429... @hahnjo let's wait until we merge the latest ROOT update in https://github.com/cms-sw/cmsdist/pull/8650 (hopefully in a couple of hours) and I will start the testing. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:240,safety,test,testing,240,"> We might want to task CMS to test this one, just to check if it fixes #13429... @hahnjo let's wait until we merge the latest ROOT update in https://github.com/cms-sw/cmsdist/pull/8650 (hopefully in a couple of hours) and I will start the testing. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:132,security,updat,update,132,"> We might want to task CMS to test this one, just to check if it fixes #13429... @hahnjo let's wait until we merge the latest ROOT update in https://github.com/cms-sw/cmsdist/pull/8650 (hopefully in a couple of hours) and I will start the testing. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:31,testability,test,test,31,"> We might want to task CMS to test this one, just to check if it fixes #13429... @hahnjo let's wait until we merge the latest ROOT update in https://github.com/cms-sw/cmsdist/pull/8650 (hopefully in a couple of hours) and I will start the testing. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:202,testability,coupl,couple,202,"> We might want to task CMS to test this one, just to check if it fixes #13429... @hahnjo let's wait until we merge the latest ROOT update in https://github.com/cms-sw/cmsdist/pull/8650 (hopefully in a couple of hours) and I will start the testing. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:240,testability,test,testing,240,"> We might want to task CMS to test this one, just to check if it fixes #13429... @hahnjo let's wait until we merge the latest ROOT update in https://github.com/cms-sw/cmsdist/pull/8650 (hopefully in a couple of hours) and I will start the testing. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:22,safety,test,test,22,@pcanal can we have a test for this? This sounds pretty terrible to get wrong...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:22,testability,test,test,22,@pcanal can we have a test for this? This sounds pretty terrible to get wrong...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:83,availability,ping,ping,83,"> @pcanal can we have a test for this? This sounds pretty terrible to get wrong... ping? Unless I'm blind, I don't think we have a test for this...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:24,safety,test,test,24,"> @pcanal can we have a test for this? This sounds pretty terrible to get wrong... ping? Unless I'm blind, I don't think we have a test for this...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:131,safety,test,test,131,"> @pcanal can we have a test for this? This sounds pretty terrible to get wrong... ping? Unless I'm blind, I don't think we have a test for this...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:24,testability,test,test,24,"> @pcanal can we have a test for this? This sounds pretty terrible to get wrong... ping? Unless I'm blind, I don't think we have a test for this...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:131,testability,test,test,131,"> @pcanal can we have a test for this? This sounds pretty terrible to get wrong... ping? Unless I'm blind, I don't think we have a test for this...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:52,deployability,updat,update,52,> @hahnjo let's wait until we merge the latest ROOT update in https://github.com/cms-sw/cmsdist/pull/8650 (hopefully in a couple of hours) and I will start the testing. Thanks! @aandvalenzuela Did you get a chance to test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:122,integrability,coupl,couple,122,> @hahnjo let's wait until we merge the latest ROOT update in https://github.com/cms-sw/cmsdist/pull/8650 (hopefully in a couple of hours) and I will start the testing. Thanks! @aandvalenzuela Did you get a chance to test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:122,modifiability,coupl,couple,122,> @hahnjo let's wait until we merge the latest ROOT update in https://github.com/cms-sw/cmsdist/pull/8650 (hopefully in a couple of hours) and I will start the testing. Thanks! @aandvalenzuela Did you get a chance to test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:52,safety,updat,update,52,> @hahnjo let's wait until we merge the latest ROOT update in https://github.com/cms-sw/cmsdist/pull/8650 (hopefully in a couple of hours) and I will start the testing. Thanks! @aandvalenzuela Did you get a chance to test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:160,safety,test,testing,160,> @hahnjo let's wait until we merge the latest ROOT update in https://github.com/cms-sw/cmsdist/pull/8650 (hopefully in a couple of hours) and I will start the testing. Thanks! @aandvalenzuela Did you get a chance to test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:217,safety,test,test,217,> @hahnjo let's wait until we merge the latest ROOT update in https://github.com/cms-sw/cmsdist/pull/8650 (hopefully in a couple of hours) and I will start the testing. Thanks! @aandvalenzuela Did you get a chance to test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:52,security,updat,update,52,> @hahnjo let's wait until we merge the latest ROOT update in https://github.com/cms-sw/cmsdist/pull/8650 (hopefully in a couple of hours) and I will start the testing. Thanks! @aandvalenzuela Did you get a chance to test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:122,testability,coupl,couple,122,> @hahnjo let's wait until we merge the latest ROOT update in https://github.com/cms-sw/cmsdist/pull/8650 (hopefully in a couple of hours) and I will start the testing. Thanks! @aandvalenzuela Did you get a chance to test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:160,testability,test,testing,160,> @hahnjo let's wait until we merge the latest ROOT update in https://github.com/cms-sw/cmsdist/pull/8650 (hopefully in a couple of hours) and I will start the testing. Thanks! @aandvalenzuela Did you get a chance to test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:217,testability,test,test,217,> @hahnjo let's wait until we merge the latest ROOT update in https://github.com/cms-sw/cmsdist/pull/8650 (hopefully in a couple of hours) and I will start the testing. Thanks! @aandvalenzuela Did you get a chance to test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:329,availability,failur,failures,329,"> > @hahnjo let's wait until we merge the latest ROOT update in [cms-sw/cmsdist#8650](https://github.com/cms-sw/cmsdist/pull/8650) (hopefully in a couple of hours) and I will start the testing. Thanks! > . > @aandvalenzuela Did you get a chance to test? Yes! I tested it at https://github.com/cms-sw/root/pull/186, but unit test failures are still present",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:54,deployability,updat,update,54,"> > @hahnjo let's wait until we merge the latest ROOT update in [cms-sw/cmsdist#8650](https://github.com/cms-sw/cmsdist/pull/8650) (hopefully in a couple of hours) and I will start the testing. Thanks! > . > @aandvalenzuela Did you get a chance to test? Yes! I tested it at https://github.com/cms-sw/root/pull/186, but unit test failures are still present",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:329,deployability,fail,failures,329,"> > @hahnjo let's wait until we merge the latest ROOT update in [cms-sw/cmsdist#8650](https://github.com/cms-sw/cmsdist/pull/8650) (hopefully in a couple of hours) and I will start the testing. Thanks! > . > @aandvalenzuela Did you get a chance to test? Yes! I tested it at https://github.com/cms-sw/root/pull/186, but unit test failures are still present",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:147,integrability,coupl,couple,147,"> > @hahnjo let's wait until we merge the latest ROOT update in [cms-sw/cmsdist#8650](https://github.com/cms-sw/cmsdist/pull/8650) (hopefully in a couple of hours) and I will start the testing. Thanks! > . > @aandvalenzuela Did you get a chance to test? Yes! I tested it at https://github.com/cms-sw/root/pull/186, but unit test failures are still present",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:147,modifiability,coupl,couple,147,"> > @hahnjo let's wait until we merge the latest ROOT update in [cms-sw/cmsdist#8650](https://github.com/cms-sw/cmsdist/pull/8650) (hopefully in a couple of hours) and I will start the testing. Thanks! > . > @aandvalenzuela Did you get a chance to test? Yes! I tested it at https://github.com/cms-sw/root/pull/186, but unit test failures are still present",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:329,performance,failur,failures,329,"> > @hahnjo let's wait until we merge the latest ROOT update in [cms-sw/cmsdist#8650](https://github.com/cms-sw/cmsdist/pull/8650) (hopefully in a couple of hours) and I will start the testing. Thanks! > . > @aandvalenzuela Did you get a chance to test? Yes! I tested it at https://github.com/cms-sw/root/pull/186, but unit test failures are still present",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:329,reliability,fail,failures,329,"> > @hahnjo let's wait until we merge the latest ROOT update in [cms-sw/cmsdist#8650](https://github.com/cms-sw/cmsdist/pull/8650) (hopefully in a couple of hours) and I will start the testing. Thanks! > . > @aandvalenzuela Did you get a chance to test? Yes! I tested it at https://github.com/cms-sw/root/pull/186, but unit test failures are still present",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:54,safety,updat,update,54,"> > @hahnjo let's wait until we merge the latest ROOT update in [cms-sw/cmsdist#8650](https://github.com/cms-sw/cmsdist/pull/8650) (hopefully in a couple of hours) and I will start the testing. Thanks! > . > @aandvalenzuela Did you get a chance to test? Yes! I tested it at https://github.com/cms-sw/root/pull/186, but unit test failures are still present",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:185,safety,test,testing,185,"> > @hahnjo let's wait until we merge the latest ROOT update in [cms-sw/cmsdist#8650](https://github.com/cms-sw/cmsdist/pull/8650) (hopefully in a couple of hours) and I will start the testing. Thanks! > . > @aandvalenzuela Did you get a chance to test? Yes! I tested it at https://github.com/cms-sw/root/pull/186, but unit test failures are still present",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:248,safety,test,test,248,"> > @hahnjo let's wait until we merge the latest ROOT update in [cms-sw/cmsdist#8650](https://github.com/cms-sw/cmsdist/pull/8650) (hopefully in a couple of hours) and I will start the testing. Thanks! > . > @aandvalenzuela Did you get a chance to test? Yes! I tested it at https://github.com/cms-sw/root/pull/186, but unit test failures are still present",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:261,safety,test,tested,261,"> > @hahnjo let's wait until we merge the latest ROOT update in [cms-sw/cmsdist#8650](https://github.com/cms-sw/cmsdist/pull/8650) (hopefully in a couple of hours) and I will start the testing. Thanks! > . > @aandvalenzuela Did you get a chance to test? Yes! I tested it at https://github.com/cms-sw/root/pull/186, but unit test failures are still present",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:324,safety,test,test,324,"> > @hahnjo let's wait until we merge the latest ROOT update in [cms-sw/cmsdist#8650](https://github.com/cms-sw/cmsdist/pull/8650) (hopefully in a couple of hours) and I will start the testing. Thanks! > . > @aandvalenzuela Did you get a chance to test? Yes! I tested it at https://github.com/cms-sw/root/pull/186, but unit test failures are still present",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:54,security,updat,update,54,"> > @hahnjo let's wait until we merge the latest ROOT update in [cms-sw/cmsdist#8650](https://github.com/cms-sw/cmsdist/pull/8650) (hopefully in a couple of hours) and I will start the testing. Thanks! > . > @aandvalenzuela Did you get a chance to test? Yes! I tested it at https://github.com/cms-sw/root/pull/186, but unit test failures are still present",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:147,testability,coupl,couple,147,"> > @hahnjo let's wait until we merge the latest ROOT update in [cms-sw/cmsdist#8650](https://github.com/cms-sw/cmsdist/pull/8650) (hopefully in a couple of hours) and I will start the testing. Thanks! > . > @aandvalenzuela Did you get a chance to test? Yes! I tested it at https://github.com/cms-sw/root/pull/186, but unit test failures are still present",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:185,testability,test,testing,185,"> > @hahnjo let's wait until we merge the latest ROOT update in [cms-sw/cmsdist#8650](https://github.com/cms-sw/cmsdist/pull/8650) (hopefully in a couple of hours) and I will start the testing. Thanks! > . > @aandvalenzuela Did you get a chance to test? Yes! I tested it at https://github.com/cms-sw/root/pull/186, but unit test failures are still present",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:248,testability,test,test,248,"> > @hahnjo let's wait until we merge the latest ROOT update in [cms-sw/cmsdist#8650](https://github.com/cms-sw/cmsdist/pull/8650) (hopefully in a couple of hours) and I will start the testing. Thanks! > . > @aandvalenzuela Did you get a chance to test? Yes! I tested it at https://github.com/cms-sw/root/pull/186, but unit test failures are still present",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:261,testability,test,tested,261,"> > @hahnjo let's wait until we merge the latest ROOT update in [cms-sw/cmsdist#8650](https://github.com/cms-sw/cmsdist/pull/8650) (hopefully in a couple of hours) and I will start the testing. Thanks! > . > @aandvalenzuela Did you get a chance to test? Yes! I tested it at https://github.com/cms-sw/root/pull/186, but unit test failures are still present",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:319,testability,unit,unit,319,"> > @hahnjo let's wait until we merge the latest ROOT update in [cms-sw/cmsdist#8650](https://github.com/cms-sw/cmsdist/pull/8650) (hopefully in a couple of hours) and I will start the testing. Thanks! > . > @aandvalenzuela Did you get a chance to test? Yes! I tested it at https://github.com/cms-sw/root/pull/186, but unit test failures are still present",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13463:324,testability,test,test,324,"> > @hahnjo let's wait until we merge the latest ROOT update in [cms-sw/cmsdist#8650](https://github.com/cms-sw/cmsdist/pull/8650) (hopefully in a couple of hours) and I will start the testing. Thanks! > . > @aandvalenzuela Did you get a chance to test? Yes! I tested it at https://github.com/cms-sw/root/pull/186, but unit test failures are still present",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13463
https://github.com/root-project/root/pull/13466:220,availability,ERROR,ERROR,220,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:373,availability,ERROR,ERROR,373,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:526,availability,ERROR,ERROR,526,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:919,availability,ERROR,ERROR,919,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:990,availability,Error,Error,990,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:1014,availability,Error,Error,1014,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:239,deployability,Fail,Failed,239,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:269,deployability,Fail,Failed,269,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:392,deployability,Fail,Failed,392,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:422,deployability,Fail,Failed,422,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:545,deployability,Fail,Failed,545,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:575,deployability,Fail,Failed,575,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:721,deployability,manag,manager,721,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:1298,deployability,Fail,Fail,1298,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:721,energy efficiency,manag,manager,721,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:886,energy efficiency,gpu,gpu-process,886,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:140,interoperability,share,shared,140,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:290,interoperability,socket,socket,290,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:443,interoperability,socket,socket,443,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:596,interoperability,socket,socket,596,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:147,performance,memor,memory,147,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:220,performance,ERROR,ERROR,220,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:373,performance,ERROR,ERROR,373,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:526,performance,ERROR,ERROR,526,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:886,performance,gpu,gpu-process,886,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:919,performance,ERROR,ERROR,919,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:990,performance,Error,Error,990,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:1014,performance,Error,Error,1014,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:172,reliability,doe,doesn,172,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:239,reliability,Fail,Failed,239,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:269,reliability,Fail,Failed,269,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:392,reliability,Fail,Failed,392,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:422,reliability,Fail,Failed,422,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:545,reliability,Fail,Failed,545,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:575,reliability,Fail,Failed,575,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:1298,reliability,Fail,Fail,1298,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:1373,reliability,rca,rcanvas-rline,1373,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:220,safety,ERROR,ERROR,220,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:373,safety,ERROR,ERROR,373,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:526,safety,ERROR,ERROR,526,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:721,safety,manag,manager,721,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:919,safety,ERROR,ERROR,919,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:990,safety,Error,Error,990,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:1014,safety,Error,Error,1014,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:290,security,soc,socket,290,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:443,security,soc,socket,443,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:596,security,soc,socket,596,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:147,usability,memor,memory,147,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:180,usability,help,help,180,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:220,usability,ERROR,ERROR,220,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:373,usability,ERROR,ERROR,373,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:526,usability,ERROR,ERROR,526,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:919,usability,ERROR,ERROR,919,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:990,usability,Error,Error,990,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:1014,usability,Error,Error,1014,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```. [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory. [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable. [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW. ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:18,availability,error,error,18,"I have no idea if error ` Failed to connect to socket /run/dbus/system_bus_socket` critical or not. As I can see, all 4 webgui tests failing - not only `rline.cxx` with creation of png file using chromium. It would be much easier if I can be able to reproduce such docker on my machine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:26,deployability,Fail,Failed,26,"I have no idea if error ` Failed to connect to socket /run/dbus/system_bus_socket` critical or not. As I can see, all 4 webgui tests failing - not only `rline.cxx` with creation of png file using chromium. It would be much easier if I can be able to reproduce such docker on my machine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:133,deployability,fail,failing,133,"I have no idea if error ` Failed to connect to socket /run/dbus/system_bus_socket` critical or not. As I can see, all 4 webgui tests failing - not only `rline.cxx` with creation of png file using chromium. It would be much easier if I can be able to reproduce such docker on my machine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:47,interoperability,socket,socket,47,"I have no idea if error ` Failed to connect to socket /run/dbus/system_bus_socket` critical or not. As I can see, all 4 webgui tests failing - not only `rline.cxx` with creation of png file using chromium. It would be much easier if I can be able to reproduce such docker on my machine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:18,performance,error,error,18,"I have no idea if error ` Failed to connect to socket /run/dbus/system_bus_socket` critical or not. As I can see, all 4 webgui tests failing - not only `rline.cxx` with creation of png file using chromium. It would be much easier if I can be able to reproduce such docker on my machine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:26,reliability,Fail,Failed,26,"I have no idea if error ` Failed to connect to socket /run/dbus/system_bus_socket` critical or not. As I can see, all 4 webgui tests failing - not only `rline.cxx` with creation of png file using chromium. It would be much easier if I can be able to reproduce such docker on my machine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:133,reliability,fail,failing,133,"I have no idea if error ` Failed to connect to socket /run/dbus/system_bus_socket` critical or not. As I can see, all 4 webgui tests failing - not only `rline.cxx` with creation of png file using chromium. It would be much easier if I can be able to reproduce such docker on my machine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:18,safety,error,error,18,"I have no idea if error ` Failed to connect to socket /run/dbus/system_bus_socket` critical or not. As I can see, all 4 webgui tests failing - not only `rline.cxx` with creation of png file using chromium. It would be much easier if I can be able to reproduce such docker on my machine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:127,safety,test,tests,127,"I have no idea if error ` Failed to connect to socket /run/dbus/system_bus_socket` critical or not. As I can see, all 4 webgui tests failing - not only `rline.cxx` with creation of png file using chromium. It would be much easier if I can be able to reproduce such docker on my machine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:47,security,soc,socket,47,"I have no idea if error ` Failed to connect to socket /run/dbus/system_bus_socket` critical or not. As I can see, all 4 webgui tests failing - not only `rline.cxx` with creation of png file using chromium. It would be much easier if I can be able to reproduce such docker on my machine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:127,testability,test,tests,127,"I have no idea if error ` Failed to connect to socket /run/dbus/system_bus_socket` critical or not. As I can see, all 4 webgui tests failing - not only `rline.cxx` with creation of png file using chromium. It would be much easier if I can be able to reproduce such docker on my machine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:18,usability,error,error,18,"I have no idea if error ` Failed to connect to socket /run/dbus/system_bus_socket` critical or not. As I can see, all 4 webgui tests failing - not only `rline.cxx` with creation of png file using chromium. It would be much easier if I can be able to reproduce such docker on my machine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:22,deployability,log,log,22,"You can! See the full log, and look for `docker run --rm -it registry.cern.ch/root-ci/<image>:buildready` - in this case it's `fedora37`. Following the subsequent steps should get you there!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:94,deployability,build,buildready,94,"You can! See the full log, and look for `docker run --rm -it registry.cern.ch/root-ci/<image>:buildready` - in this case it's `fedora37`. Following the subsequent steps should get you there!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:152,integrability,sub,subsequent,152,"You can! See the full log, and look for `docker run --rm -it registry.cern.ch/root-ci/<image>:buildready` - in this case it's `fedora37`. Following the subsequent steps should get you there!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:61,interoperability,registr,registry,61,"You can! See the full log, and look for `docker run --rm -it registry.cern.ch/root-ci/<image>:buildready` - in this case it's `fedora37`. Following the subsequent steps should get you there!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:22,safety,log,log,22,"You can! See the full log, and look for `docker run --rm -it registry.cern.ch/root-ci/<image>:buildready` - in this case it's `fedora37`. Following the subsequent steps should get you there!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:22,security,log,log,22,"You can! See the full log, and look for `docker run --rm -it registry.cern.ch/root-ci/<image>:buildready` - in this case it's `fedora37`. Following the subsequent steps should get you there!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:22,testability,log,log,22,"You can! See the full log, and look for `docker run --rm -it registry.cern.ch/root-ci/<image>:buildready` - in this case it's `fedora37`. Following the subsequent steps should get you there!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:201,availability,ERROR,ERROR,201,"I run `fedora37` image on my machine - all webgui tests work properly. From the log output produce by headless chromimum, I see only one additional message on github actions:. ```. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. ```. But why it happens, that is missing - I have no idea. . Most probably some configuration of host system (from github) affects docker image and makes problem running chromium. I will try to add `--no-sandbox` argument to the headless chrome, maybe it be better.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:80,deployability,log,log,80,"I run `fedora37` image on my machine - all webgui tests work properly. From the log output produce by headless chromimum, I see only one additional message on github actions:. ```. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. ```. But why it happens, that is missing - I have no idea. . Most probably some configuration of host system (from github) affects docker image and makes problem running chromium. I will try to add `--no-sandbox` argument to the headless chrome, maybe it be better.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:352,deployability,configurat,configuration,352,"I run `fedora37` image on my machine - all webgui tests work properly. From the log output produce by headless chromimum, I see only one additional message on github actions:. ```. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. ```. But why it happens, that is missing - I have no idea. . Most probably some configuration of host system (from github) affects docker image and makes problem running chromium. I will try to add `--no-sandbox` argument to the headless chrome, maybe it be better.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:148,integrability,messag,message,148,"I run `fedora37` image on my machine - all webgui tests work properly. From the log output produce by headless chromimum, I see only one additional message on github actions:. ```. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. ```. But why it happens, that is missing - I have no idea. . Most probably some configuration of host system (from github) affects docker image and makes problem running chromium. I will try to add `--no-sandbox` argument to the headless chrome, maybe it be better.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:352,integrability,configur,configuration,352,"I run `fedora37` image on my machine - all webgui tests work properly. From the log output produce by headless chromimum, I see only one additional message on github actions:. ```. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. ```. But why it happens, that is missing - I have no idea. . Most probably some configuration of host system (from github) affects docker image and makes problem running chromium. I will try to add `--no-sandbox` argument to the headless chrome, maybe it be better.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:148,interoperability,messag,message,148,"I run `fedora37` image on my machine - all webgui tests work properly. From the log output produce by headless chromimum, I see only one additional message on github actions:. ```. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. ```. But why it happens, that is missing - I have no idea. . Most probably some configuration of host system (from github) affects docker image and makes problem running chromium. I will try to add `--no-sandbox` argument to the headless chrome, maybe it be better.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:352,modifiability,configur,configuration,352,"I run `fedora37` image on my machine - all webgui tests work properly. From the log output produce by headless chromimum, I see only one additional message on github actions:. ```. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. ```. But why it happens, that is missing - I have no idea. . Most probably some configuration of host system (from github) affects docker image and makes problem running chromium. I will try to add `--no-sandbox` argument to the headless chrome, maybe it be better.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:201,performance,ERROR,ERROR,201,"I run `fedora37` image on my machine - all webgui tests work properly. From the log output produce by headless chromimum, I see only one additional message on github actions:. ```. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. ```. But why it happens, that is missing - I have no idea. . Most probably some configuration of host system (from github) affects docker image and makes problem running chromium. I will try to add `--no-sandbox` argument to the headless chrome, maybe it be better.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:50,safety,test,tests,50,"I run `fedora37` image on my machine - all webgui tests work properly. From the log output produce by headless chromimum, I see only one additional message on github actions:. ```. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. ```. But why it happens, that is missing - I have no idea. . Most probably some configuration of host system (from github) affects docker image and makes problem running chromium. I will try to add `--no-sandbox` argument to the headless chrome, maybe it be better.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:80,safety,log,log,80,"I run `fedora37` image on my machine - all webgui tests work properly. From the log output produce by headless chromimum, I see only one additional message on github actions:. ```. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. ```. But why it happens, that is missing - I have no idea. . Most probably some configuration of host system (from github) affects docker image and makes problem running chromium. I will try to add `--no-sandbox` argument to the headless chrome, maybe it be better.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:201,safety,ERROR,ERROR,201,"I run `fedora37` image on my machine - all webgui tests work properly. From the log output produce by headless chromimum, I see only one additional message on github actions:. ```. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. ```. But why it happens, that is missing - I have no idea. . Most probably some configuration of host system (from github) affects docker image and makes problem running chromium. I will try to add `--no-sandbox` argument to the headless chrome, maybe it be better.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:80,security,log,log,80,"I run `fedora37` image on my machine - all webgui tests work properly. From the log output produce by headless chromimum, I see only one additional message on github actions:. ```. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. ```. But why it happens, that is missing - I have no idea. . Most probably some configuration of host system (from github) affects docker image and makes problem running chromium. I will try to add `--no-sandbox` argument to the headless chrome, maybe it be better.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:352,security,configur,configuration,352,"I run `fedora37` image on my machine - all webgui tests work properly. From the log output produce by headless chromimum, I see only one additional message on github actions:. ```. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. ```. But why it happens, that is missing - I have no idea. . Most probably some configuration of host system (from github) affects docker image and makes problem running chromium. I will try to add `--no-sandbox` argument to the headless chrome, maybe it be better.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:476,security,sandbox,sandbox,476,"I run `fedora37` image on my machine - all webgui tests work properly. From the log output produce by headless chromimum, I see only one additional message on github actions:. ```. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. ```. But why it happens, that is missing - I have no idea. . Most probably some configuration of host system (from github) affects docker image and makes problem running chromium. I will try to add `--no-sandbox` argument to the headless chrome, maybe it be better.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:50,testability,test,tests,50,"I run `fedora37` image on my machine - all webgui tests work properly. From the log output produce by headless chromimum, I see only one additional message on github actions:. ```. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. ```. But why it happens, that is missing - I have no idea. . Most probably some configuration of host system (from github) affects docker image and makes problem running chromium. I will try to add `--no-sandbox` argument to the headless chrome, maybe it be better.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:80,testability,log,log,80,"I run `fedora37` image on my machine - all webgui tests work properly. From the log output produce by headless chromimum, I see only one additional message on github actions:. ```. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. ```. But why it happens, that is missing - I have no idea. . Most probably some configuration of host system (from github) affects docker image and makes problem running chromium. I will try to add `--no-sandbox` argument to the headless chrome, maybe it be better.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:201,usability,ERROR,ERROR,201,"I run `fedora37` image on my machine - all webgui tests work properly. From the log output produce by headless chromimum, I see only one additional message on github actions:. ```. [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination. ```. But why it happens, that is missing - I have no idea. . Most probably some configuration of host system (from github) affects docker image and makes problem running chromium. I will try to add `--no-sandbox` argument to the headless chrome, maybe it be better.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:198,deployability,log,log,198,"That's really terrible news that you cannot reproduce it :-(. https://bugs.chromium.org/p/chromium/issues/detail?id=842679 might be related? Rather than a shot in the dark maybe try to increase the log level and see whether it's related to something the world knows about already, so we know what to follow?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:198,safety,log,log,198,"That's really terrible news that you cannot reproduce it :-(. https://bugs.chromium.org/p/chromium/issues/detail?id=842679 might be related? Rather than a shot in the dark maybe try to increase the log level and see whether it's related to something the world knows about already, so we know what to follow?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:198,security,log,log,198,"That's really terrible news that you cannot reproduce it :-(. https://bugs.chromium.org/p/chromium/issues/detail?id=842679 might be related? Rather than a shot in the dark maybe try to increase the log level and see whether it's related to something the world knows about already, so we know what to follow?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:198,testability,log,log,198,"That's really terrible news that you cannot reproduce it :-(. https://bugs.chromium.org/p/chromium/issues/detail?id=842679 might be related? Rather than a shot in the dark maybe try to increase the log level and see whether it's related to something the world knows about already, so we know what to follow?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:22,availability,ping,ping,22,"Maybe. If I just run `ping.cxx` test, I see that chromium uses more than `1G` of virtual memory. May be one should also set/increase this parameter for the docker?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:138,modifiability,paramet,parameter,138,"Maybe. If I just run `ping.cxx` test, I see that chromium uses more than `1G` of virtual memory. May be one should also set/increase this parameter for the docker?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:89,performance,memor,memory,89,"Maybe. If I just run `ping.cxx` test, I see that chromium uses more than `1G` of virtual memory. May be one should also set/increase this parameter for the docker?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:32,safety,test,test,32,"Maybe. If I just run `ping.cxx` test, I see that chromium uses more than `1G` of virtual memory. May be one should also set/increase this parameter for the docker?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:32,testability,test,test,32,"Maybe. If I just run `ping.cxx` test, I see that chromium uses more than `1G` of virtual memory. May be one should also set/increase this parameter for the docker?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:89,usability,memor,memory,89,"Maybe. If I just run `ping.cxx` test, I see that chromium uses more than `1G` of virtual memory. May be one should also set/increase this parameter for the docker?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:4,interoperability,share,shared,4,And shared memory on my docker session is only 64M. Seems to be it is not a critical parameter.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:85,modifiability,paramet,parameter,85,And shared memory on my docker session is only 64M. Seems to be it is not a critical parameter.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:11,performance,memor,memory,11,And shared memory on my docker session is only 64M. Seems to be it is not a critical parameter.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:31,security,session,session,31,And shared memory on my docker session is only 64M. Seems to be it is not a critical parameter.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13466:11,usability,memor,memory,11,And shared memory on my docker session is only 64M. Seems to be it is not a critical parameter.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466
https://github.com/root-project/root/pull/13471:119,deployability,log,log,119,"FWIW this breaks `print_shell_log()` when called via `die()`, ie the use case it would actually be relevant to get the log printed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13471
https://github.com/root-project/root/pull/13471:119,safety,log,log,119,"FWIW this breaks `print_shell_log()` when called via `die()`, ie the use case it would actually be relevant to get the log printed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13471
https://github.com/root-project/root/pull/13471:119,security,log,log,119,"FWIW this breaks `print_shell_log()` when called via `die()`, ie the use case it would actually be relevant to get the log printed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13471
https://github.com/root-project/root/pull/13471:119,testability,log,log,119,"FWIW this breaks `print_shell_log()` when called via `die()`, ie the use case it would actually be relevant to get the log printed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13471
https://github.com/root-project/root/pull/13472:48,modifiability,required chang,required changes,48,"@Axel-Naumann Thanks for the review! I made the required changes, if you want to review again...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13472
https://github.com/root-project/root/pull/13472:29,safety,review,review,29,"@Axel-Naumann Thanks for the review! I made the required changes, if you want to review again...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13472
https://github.com/root-project/root/pull/13472:81,safety,review,review,81,"@Axel-Naumann Thanks for the review! I made the required changes, if you want to review again...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13472
https://github.com/root-project/root/pull/13472:29,testability,review,review,29,"@Axel-Naumann Thanks for the review! I made the required changes, if you want to review again...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13472
https://github.com/root-project/root/pull/13472:81,testability,review,review,81,"@Axel-Naumann Thanks for the review! I made the required changes, if you want to review again...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13472
https://github.com/root-project/root/pull/13473:89,availability,failur,failures,89,"FWIW I think this ""only"" fixes the test on Windows, this is no explanation on the random failures on various Linux platforms...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13473
https://github.com/root-project/root/pull/13473:89,deployability,fail,failures,89,"FWIW I think this ""only"" fixes the test on Windows, this is no explanation on the random failures on various Linux platforms...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13473
https://github.com/root-project/root/pull/13473:115,interoperability,platform,platforms,115,"FWIW I think this ""only"" fixes the test on Windows, this is no explanation on the random failures on various Linux platforms...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13473
https://github.com/root-project/root/pull/13473:89,performance,failur,failures,89,"FWIW I think this ""only"" fixes the test on Windows, this is no explanation on the random failures on various Linux platforms...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13473
https://github.com/root-project/root/pull/13473:89,reliability,fail,failures,89,"FWIW I think this ""only"" fixes the test on Windows, this is no explanation on the random failures on various Linux platforms...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13473
https://github.com/root-project/root/pull/13473:35,safety,test,test,35,"FWIW I think this ""only"" fixes the test on Windows, this is no explanation on the random failures on various Linux platforms...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13473
https://github.com/root-project/root/pull/13473:35,testability,test,test,35,"FWIW I think this ""only"" fixes the test on Windows, this is no explanation on the random failures on various Linux platforms...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13473
https://github.com/root-project/root/pull/13473:91,availability,failur,failures,91,"> FWIW I think this ""only"" fixes the test on Windows, this is no explanation on the random failures on various Linux platforms... indeed",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13473
https://github.com/root-project/root/pull/13473:91,deployability,fail,failures,91,"> FWIW I think this ""only"" fixes the test on Windows, this is no explanation on the random failures on various Linux platforms... indeed",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13473
https://github.com/root-project/root/pull/13473:117,interoperability,platform,platforms,117,"> FWIW I think this ""only"" fixes the test on Windows, this is no explanation on the random failures on various Linux platforms... indeed",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13473
https://github.com/root-project/root/pull/13473:91,performance,failur,failures,91,"> FWIW I think this ""only"" fixes the test on Windows, this is no explanation on the random failures on various Linux platforms... indeed",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13473
https://github.com/root-project/root/pull/13473:91,reliability,fail,failures,91,"> FWIW I think this ""only"" fixes the test on Windows, this is no explanation on the random failures on various Linux platforms... indeed",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13473
https://github.com/root-project/root/pull/13473:37,safety,test,test,37,"> FWIW I think this ""only"" fixes the test on Windows, this is no explanation on the random failures on various Linux platforms... indeed",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13473
https://github.com/root-project/root/pull/13473:37,testability,test,test,37,"> FWIW I think this ""only"" fixes the test on Windows, this is no explanation on the random failures on various Linux platforms... indeed",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13473
https://github.com/root-project/root/pull/13476:153,deployability,contain,contains,153,"Can you see with @bellenot or someone he recommends (I can think of e.g. Bernhard) to straighten out the commit history of this PR, please? IIUC this PR contains commits from the master branch, has a merge commit - I think we only want the latest commit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13476
https://github.com/root-project/root/pull/13476:23,testability,coverag,coverage,23,"> LGTM, let's see what coverage says now :-). Hopefully something great 🙌",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13476
https://github.com/root-project/root/pull/13476:77,availability,error,error,77,I'm unsubscribing myself as reviewer. I think there might have been a rebase error that requested reviews from 8 additional people. 🙂,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13476
https://github.com/root-project/root/pull/13476:77,performance,error,error,77,I'm unsubscribing myself as reviewer. I think there might have been a rebase error that requested reviews from 8 additional people. 🙂,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13476
https://github.com/root-project/root/pull/13476:28,safety,review,reviewer,28,I'm unsubscribing myself as reviewer. I think there might have been a rebase error that requested reviews from 8 additional people. 🙂,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13476
https://github.com/root-project/root/pull/13476:77,safety,error,error,77,I'm unsubscribing myself as reviewer. I think there might have been a rebase error that requested reviews from 8 additional people. 🙂,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13476
https://github.com/root-project/root/pull/13476:98,safety,review,reviews,98,I'm unsubscribing myself as reviewer. I think there might have been a rebase error that requested reviews from 8 additional people. 🙂,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13476
https://github.com/root-project/root/pull/13476:28,testability,review,reviewer,28,I'm unsubscribing myself as reviewer. I think there might have been a rebase error that requested reviews from 8 additional people. 🙂,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13476
https://github.com/root-project/root/pull/13476:98,testability,review,reviews,98,I'm unsubscribing myself as reviewer. I think there might have been a rebase error that requested reviews from 8 additional people. 🙂,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13476
https://github.com/root-project/root/pull/13476:77,usability,error,error,77,I'm unsubscribing myself as reviewer. I think there might have been a rebase error that requested reviews from 8 additional people. 🙂,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13476
https://github.com/root-project/root/pull/13478:75,safety,test,test,75,See roottest PR https://github.com/root-project/roottest/pull/1001 for the test,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13478
https://github.com/root-project/root/pull/13478:75,testability,test,test,75,See roottest PR https://github.com/root-project/roottest/pull/1001 for the test,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13478
https://github.com/root-project/root/pull/13478:123,availability,servic,services,123,This PR could also be used to update the reference file for [roottest_root_core_recursive_recursivewarning](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/182593/testReport/projectroot.roottest.root.core/recursive/roottest_root_core_recursive_recursivewarning/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13478
https://github.com/root-project/root/pull/13478:30,deployability,updat,update,30,This PR could also be used to update the reference file for [roottest_root_core_recursive_recursivewarning](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/182593/testReport/projectroot.roottest.root.core/recursive/roottest_root_core_recursive_recursivewarning/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13478
https://github.com/root-project/root/pull/13478:123,deployability,servic,services,123,This PR could also be used to update the reference file for [roottest_root_core_recursive_recursivewarning](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/182593/testReport/projectroot.roottest.root.core/recursive/roottest_root_core_recursive_recursivewarning/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13478
https://github.com/root-project/root/pull/13478:175,deployability,build,build,175,This PR could also be used to update the reference file for [roottest_root_core_recursive_recursivewarning](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/182593/testReport/projectroot.roottest.root.core/recursive/roottest_root_core_recursive_recursivewarning/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13478
https://github.com/root-project/root/pull/13478:225,energy efficiency,core,core,225,This PR could also be used to update the reference file for [roottest_root_core_recursive_recursivewarning](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/182593/testReport/projectroot.roottest.root.core/recursive/roottest_root_core_recursive_recursivewarning/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13478
https://github.com/root-project/root/pull/13478:123,integrability,servic,services,123,This PR could also be used to update the reference file for [roottest_root_core_recursive_recursivewarning](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/182593/testReport/projectroot.roottest.root.core/recursive/roottest_root_core_recursive_recursivewarning/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13478
https://github.com/root-project/root/pull/13478:123,modifiability,servic,services,123,This PR could also be used to update the reference file for [roottest_root_core_recursive_recursivewarning](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/182593/testReport/projectroot.roottest.root.core/recursive/roottest_root_core_recursive_recursivewarning/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13478
https://github.com/root-project/root/pull/13478:30,safety,updat,update,30,This PR could also be used to update the reference file for [roottest_root_core_recursive_recursivewarning](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/182593/testReport/projectroot.roottest.root.core/recursive/roottest_root_core_recursive_recursivewarning/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13478
https://github.com/root-project/root/pull/13478:188,safety,test,testReport,188,This PR could also be used to update the reference file for [roottest_root_core_recursive_recursivewarning](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/182593/testReport/projectroot.roottest.root.core/recursive/roottest_root_core_recursive_recursivewarning/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13478
https://github.com/root-project/root/pull/13478:30,security,updat,update,30,This PR could also be used to update the reference file for [roottest_root_core_recursive_recursivewarning](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/182593/testReport/projectroot.roottest.root.core/recursive/roottest_root_core_recursive_recursivewarning/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13478
https://github.com/root-project/root/pull/13478:188,testability,test,testReport,188,This PR could also be used to update the reference file for [roottest_root_core_recursive_recursivewarning](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/182593/testReport/projectroot.roottest.root.core/recursive/roottest_root_core_recursive_recursivewarning/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13478
https://github.com/root-project/root/pull/13478:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13478
https://github.com/root-project/root/pull/13478:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13478
https://github.com/root-project/root/pull/13483:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13483
https://github.com/root-project/root/pull/13487:64,safety,reme,remember,64,"Runaway comment: I'm not sure whether it's the case here, but I remember seeing some usages of `R__ASSERT` in RNTuple that should have just been `assert`s (because they check for implementation bugs, not for well-formed inputs or similar). Might have been addressed already. If so, sorry for the noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13487
https://github.com/root-project/root/pull/13487:220,safety,input,inputs,220,"Runaway comment: I'm not sure whether it's the case here, but I remember seeing some usages of `R__ASSERT` in RNTuple that should have just been `assert`s (because they check for implementation bugs, not for well-formed inputs or similar). Might have been addressed already. If so, sorry for the noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13487
https://github.com/root-project/root/pull/13487:146,testability,assert,assert,146,"Runaway comment: I'm not sure whether it's the case here, but I remember seeing some usages of `R__ASSERT` in RNTuple that should have just been `assert`s (because they check for implementation bugs, not for well-formed inputs or similar). Might have been addressed already. If so, sorry for the noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13487
https://github.com/root-project/root/pull/13487:220,usability,input,inputs,220,"Runaway comment: I'm not sure whether it's the case here, but I remember seeing some usages of `R__ASSERT` in RNTuple that should have just been `assert`s (because they check for implementation bugs, not for well-formed inputs or similar). Might have been addressed already. If so, sorry for the noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13487
https://github.com/root-project/root/pull/13487:66,safety,reme,remember,66,"> Runaway comment: I'm not sure whether it's the case here, but I remember seeing some usages of `R__ASSERT` in RNTuple that should have just been `assert`s (because they check for implementation bugs, not for well-formed inputs or similar). > . > Might have been addressed already. If so, sorry for the noise. Thanks for mentioning, @eguiraud! That's #10618 and can be addressed separately :wink:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13487
https://github.com/root-project/root/pull/13487:222,safety,input,inputs,222,"> Runaway comment: I'm not sure whether it's the case here, but I remember seeing some usages of `R__ASSERT` in RNTuple that should have just been `assert`s (because they check for implementation bugs, not for well-formed inputs or similar). > . > Might have been addressed already. If so, sorry for the noise. Thanks for mentioning, @eguiraud! That's #10618 and can be addressed separately :wink:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13487
https://github.com/root-project/root/pull/13487:148,testability,assert,assert,148,"> Runaway comment: I'm not sure whether it's the case here, but I remember seeing some usages of `R__ASSERT` in RNTuple that should have just been `assert`s (because they check for implementation bugs, not for well-formed inputs or similar). > . > Might have been addressed already. If so, sorry for the noise. Thanks for mentioning, @eguiraud! That's #10618 and can be addressed separately :wink:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13487
https://github.com/root-project/root/pull/13487:222,usability,input,inputs,222,"> Runaway comment: I'm not sure whether it's the case here, but I remember seeing some usages of `R__ASSERT` in RNTuple that should have just been `assert`s (because they check for implementation bugs, not for well-formed inputs or similar). > . > Might have been addressed already. If so, sorry for the noise. Thanks for mentioning, @eguiraud! That's #10618 and can be addressed separately :wink:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13487
https://github.com/root-project/root/pull/13487:2,safety,compl,completely,2,I completely forgot I had opened an issue about it :man_facepalming: sorry for the noise!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13487
https://github.com/root-project/root/pull/13487:2,security,compl,completely,2,I completely forgot I had opened an issue about it :man_facepalming: sorry for the noise!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13487
https://github.com/root-project/root/pull/13488:236,integrability,sub,subprocess,236,"I'd be very happy to walk you through and hear your ideas! I don't like that we have this dualism of GH workflow steps vs the python script running steps - I'd prefer that any invocation of a binary is from GH steps rather than Python `subprocess`. That's certainly one of the things I see as problematic. For the rest I'm all ears! Maybe I'll do another presentation at the ROOT meeting where I introduce people to the interface, and then a PPP where I explain the implementation and pick up comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13488
https://github.com/root-project/root/pull/13488:420,integrability,interfac,interface,420,"I'd be very happy to walk you through and hear your ideas! I don't like that we have this dualism of GH workflow steps vs the python script running steps - I'd prefer that any invocation of a binary is from GH steps rather than Python `subprocess`. That's certainly one of the things I see as problematic. For the rest I'm all ears! Maybe I'll do another presentation at the ROOT meeting where I introduce people to the interface, and then a PPP where I explain the implementation and pick up comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13488
https://github.com/root-project/root/pull/13488:420,interoperability,interfac,interface,420,"I'd be very happy to walk you through and hear your ideas! I don't like that we have this dualism of GH workflow steps vs the python script running steps - I'd prefer that any invocation of a binary is from GH steps rather than Python `subprocess`. That's certainly one of the things I see as problematic. For the rest I'm all ears! Maybe I'll do another presentation at the ROOT meeting where I introduce people to the interface, and then a PPP where I explain the implementation and pick up comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13488
https://github.com/root-project/root/pull/13488:420,modifiability,interfac,interface,420,"I'd be very happy to walk you through and hear your ideas! I don't like that we have this dualism of GH workflow steps vs the python script running steps - I'd prefer that any invocation of a binary is from GH steps rather than Python `subprocess`. That's certainly one of the things I see as problematic. For the rest I'm all ears! Maybe I'll do another presentation at the ROOT meeting where I introduce people to the interface, and then a PPP where I explain the implementation and pick up comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13488
https://github.com/root-project/root/pull/13488:104,usability,workflow,workflow,104,"I'd be very happy to walk you through and hear your ideas! I don't like that we have this dualism of GH workflow steps vs the python script running steps - I'd prefer that any invocation of a binary is from GH steps rather than Python `subprocess`. That's certainly one of the things I see as problematic. For the rest I'm all ears! Maybe I'll do another presentation at the ROOT meeting where I introduce people to the interface, and then a PPP where I explain the implementation and pick up comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13488
https://github.com/root-project/root/pull/13488:160,usability,prefer,prefer,160,"I'd be very happy to walk you through and hear your ideas! I don't like that we have this dualism of GH workflow steps vs the python script running steps - I'd prefer that any invocation of a binary is from GH steps rather than Python `subprocess`. That's certainly one of the things I see as problematic. For the rest I'm all ears! Maybe I'll do another presentation at the ROOT meeting where I introduce people to the interface, and then a PPP where I explain the implementation and pick up comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13488
https://github.com/root-project/root/pull/13491:11,deployability,build,build,11,@phsft-bot build also on mac13arm/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13491
https://github.com/root-project/root/pull/13492:16,testability,understand,understand,16,"@linev I do not understand your point. I did not add +-0.1, I made a % ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13492
https://github.com/root-project/root/pull/13492:113,reliability,doe,does,113,"> @linev I do not understand your point. I did not add +-0.1, I made a % .... Sorry, it is really %. But then it does not work for 0.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13492
https://github.com/root-project/root/pull/13492:18,testability,understand,understand,18,"> @linev I do not understand your point. I did not add +-0.1, I made a % .... Sorry, it is really %. But then it does not work for 0.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13492
https://github.com/root-project/root/issues/13497:0,usability,Close,Closed,0,Closed by:. * https://github.com/root-project/root/pull/13321,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13503:2359,availability,operat,operator,2359,"ator_traits<std::allocator<void> >::destroy<HepMC3::ReaderPlugin> (__p=0x55cb53cb5e50) at /usr/include/c++/12/bits/alloc_traits.h:648. #14 0x00007fe345e350df in std::_Sp_counted_ptr_inplace<HepMC3::ReaderPlugin, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x55cb53cb5e40) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #15 0x00007fe36b71e887 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libRIO.so. #16 0x00007fe356ee7fcd in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7fff8c03a978, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #17 0x00007fe345e21200 in std::__shared_ptr<HepMC3::Reader, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x7fff8c03a970, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #18 0x00007fe345e266d4 in std::__shared_ptr<HepMC3::Reader, (__gnu_cxx::_Lock_policy)2>::operator= (this=0x55cb53cb4a48, __r=...) at /usr/include/c++/12/bits/shared_ptr_base.h:1620. #19 0x00007fe345e233f0 in std::shared_ptr<HepMC3::Reader>::operator= (this=0x55cb53cb4a48, __r=...) at /usr/include/c++/12/bits/shared_ptr.h:440. #20 0x00007fe345e1ce84 in dd4hep::sim::HEPMC3FileReader::HEPMC3FileReader (this=0x55cb53cb49d0, nam=...) at /home/wdconinc/git/DD4hep/DDG4/hepmc/HepMC3FileReader.cpp:140. #21 0x00007fe345e1d6ff in (anonymous namespace)::Factory<dd4hep::sim::HEPMC3FileReader, dd4hep::sim::Geant4EventReader*(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>::call(std::string) (a0=...) at /home/wdconinc/git/DD4hep/DDG4/include/DDG4/Factories.h:176. #22 0x00007fe34cccafcc in dd4hep::PluginService::Create<dd4hep::sim::Geant4EventReader*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > (id=...) at /home/wdconinc/git/DD4hep/DDCore/include/DD4hep/Plugins.h:102. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:2511,availability,operat,operator,2511,"ator_traits<std::allocator<void> >::destroy<HepMC3::ReaderPlugin> (__p=0x55cb53cb5e50) at /usr/include/c++/12/bits/alloc_traits.h:648. #14 0x00007fe345e350df in std::_Sp_counted_ptr_inplace<HepMC3::ReaderPlugin, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x55cb53cb5e40) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #15 0x00007fe36b71e887 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libRIO.so. #16 0x00007fe356ee7fcd in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7fff8c03a978, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #17 0x00007fe345e21200 in std::__shared_ptr<HepMC3::Reader, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x7fff8c03a970, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #18 0x00007fe345e266d4 in std::__shared_ptr<HepMC3::Reader, (__gnu_cxx::_Lock_policy)2>::operator= (this=0x55cb53cb4a48, __r=...) at /usr/include/c++/12/bits/shared_ptr_base.h:1620. #19 0x00007fe345e233f0 in std::shared_ptr<HepMC3::Reader>::operator= (this=0x55cb53cb4a48, __r=...) at /usr/include/c++/12/bits/shared_ptr.h:440. #20 0x00007fe345e1ce84 in dd4hep::sim::HEPMC3FileReader::HEPMC3FileReader (this=0x55cb53cb49d0, nam=...) at /home/wdconinc/git/DD4hep/DDG4/hepmc/HepMC3FileReader.cpp:140. #21 0x00007fe345e1d6ff in (anonymous namespace)::Factory<dd4hep::sim::HEPMC3FileReader, dd4hep::sim::Geant4EventReader*(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>::call(std::string) (a0=...) at /home/wdconinc/git/DD4hep/DDG4/include/DDG4/Factories.h:176. #22 0x00007fe34cccafcc in dd4hep::PluginService::Create<dd4hep::sim::Geant4EventReader*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > (id=...) at /home/wdconinc/git/DD4hep/DDCore/include/DD4hep/Plugins.h:102. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:30,deployability,stack,stacktrace,30,"Thanks, @veprbl . Copying the stacktrace from the original, linked report:. ```. #6 <signal handler called>. #7 0x00007fe343359b6a in XrdCl::File::Close(XrdCl::ResponseHandler*, unsigned short) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/xrootd-5.6.1-4hhj2qxu72su5ur6i2x5as7tabayobgz/lib/libXrdCl.so.3. #8 0x00007fe343359c85 in XrdCl::File::Close(unsigned short) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/xrootd-5.6.1-4hhj2qxu72su5ur6i2x5as7tabayobgz/lib/libXrdCl.so.3. #9 0x00007fe3462e24d3 in TNetXNGFile::Close(char const*) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libNetxNG.so.6.28.04. #10 0x00007fe346ac1377 in HepMC3::ReaderRootTree::close (this=0x55cb53cbff00) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/rootIO/src/ReaderRootTree.cc:114. #11 0x00007fe34385b7ee in HepMC3::ReaderPlugin::~ReaderPlugin (this=0x55cb53cb5e50, __in_chrg=<optimized out>) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/src/ReaderPlugin.cc:68. #12 0x00007fe345e35994 in std::_Destroy<HepMC3::ReaderPlugin> (__pointer=0x55cb53cb5e50) at /usr/include/c++/12/bits/stl_construct.h:151. #13 0x00007fe345e358ec in std::allocator_traits<std::allocator<void> >::destroy<HepMC3::ReaderPlugin> (__p=0x55cb53cb5e50) at /usr/include/c++/12/bits/alloc_traits.h:648. #14 0x00007fe345e350df in std::_Sp_counted_ptr_inplace<HepMC3::ReaderPlugin, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x55cb53cb5e40) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #15 0x00007fe36b71e887 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libRIO.so. #16 0x00007fe356ee7fcd in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7fff8c03a978, __in_chrg=<op",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:788,deployability,stage,stage,788,"Thanks, @veprbl . Copying the stacktrace from the original, linked report:. ```. #6 <signal handler called>. #7 0x00007fe343359b6a in XrdCl::File::Close(XrdCl::ResponseHandler*, unsigned short) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/xrootd-5.6.1-4hhj2qxu72su5ur6i2x5as7tabayobgz/lib/libXrdCl.so.3. #8 0x00007fe343359c85 in XrdCl::File::Close(unsigned short) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/xrootd-5.6.1-4hhj2qxu72su5ur6i2x5as7tabayobgz/lib/libXrdCl.so.3. #9 0x00007fe3462e24d3 in TNetXNGFile::Close(char const*) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libNetxNG.so.6.28.04. #10 0x00007fe346ac1377 in HepMC3::ReaderRootTree::close (this=0x55cb53cbff00) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/rootIO/src/ReaderRootTree.cc:114. #11 0x00007fe34385b7ee in HepMC3::ReaderPlugin::~ReaderPlugin (this=0x55cb53cb5e50, __in_chrg=<optimized out>) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/src/ReaderPlugin.cc:68. #12 0x00007fe345e35994 in std::_Destroy<HepMC3::ReaderPlugin> (__pointer=0x55cb53cb5e50) at /usr/include/c++/12/bits/stl_construct.h:151. #13 0x00007fe345e358ec in std::allocator_traits<std::allocator<void> >::destroy<HepMC3::ReaderPlugin> (__p=0x55cb53cb5e50) at /usr/include/c++/12/bits/alloc_traits.h:648. #14 0x00007fe345e350df in std::_Sp_counted_ptr_inplace<HepMC3::ReaderPlugin, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x55cb53cb5e40) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #15 0x00007fe36b71e887 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libRIO.so. #16 0x00007fe356ee7fcd in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7fff8c03a978, __in_chrg=<op",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:809,deployability,stage,stage-,809,"Thanks, @veprbl . Copying the stacktrace from the original, linked report:. ```. #6 <signal handler called>. #7 0x00007fe343359b6a in XrdCl::File::Close(XrdCl::ResponseHandler*, unsigned short) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/xrootd-5.6.1-4hhj2qxu72su5ur6i2x5as7tabayobgz/lib/libXrdCl.so.3. #8 0x00007fe343359c85 in XrdCl::File::Close(unsigned short) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/xrootd-5.6.1-4hhj2qxu72su5ur6i2x5as7tabayobgz/lib/libXrdCl.so.3. #9 0x00007fe3462e24d3 in TNetXNGFile::Close(char const*) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libNetxNG.so.6.28.04. #10 0x00007fe346ac1377 in HepMC3::ReaderRootTree::close (this=0x55cb53cbff00) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/rootIO/src/ReaderRootTree.cc:114. #11 0x00007fe34385b7ee in HepMC3::ReaderPlugin::~ReaderPlugin (this=0x55cb53cb5e50, __in_chrg=<optimized out>) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/src/ReaderPlugin.cc:68. #12 0x00007fe345e35994 in std::_Destroy<HepMC3::ReaderPlugin> (__pointer=0x55cb53cb5e50) at /usr/include/c++/12/bits/stl_construct.h:151. #13 0x00007fe345e358ec in std::allocator_traits<std::allocator<void> >::destroy<HepMC3::ReaderPlugin> (__p=0x55cb53cb5e50) at /usr/include/c++/12/bits/alloc_traits.h:648. #14 0x00007fe345e350df in std::_Sp_counted_ptr_inplace<HepMC3::ReaderPlugin, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x55cb53cb5e40) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #15 0x00007fe36b71e887 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libRIO.so. #16 0x00007fe356ee7fcd in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7fff8c03a978, __in_chrg=<op",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:1031,deployability,stage,stage,1031,"ktrace from the original, linked report:. ```. #6 <signal handler called>. #7 0x00007fe343359b6a in XrdCl::File::Close(XrdCl::ResponseHandler*, unsigned short) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/xrootd-5.6.1-4hhj2qxu72su5ur6i2x5as7tabayobgz/lib/libXrdCl.so.3. #8 0x00007fe343359c85 in XrdCl::File::Close(unsigned short) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/xrootd-5.6.1-4hhj2qxu72su5ur6i2x5as7tabayobgz/lib/libXrdCl.so.3. #9 0x00007fe3462e24d3 in TNetXNGFile::Close(char const*) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libNetxNG.so.6.28.04. #10 0x00007fe346ac1377 in HepMC3::ReaderRootTree::close (this=0x55cb53cbff00) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/rootIO/src/ReaderRootTree.cc:114. #11 0x00007fe34385b7ee in HepMC3::ReaderPlugin::~ReaderPlugin (this=0x55cb53cb5e50, __in_chrg=<optimized out>) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/src/ReaderPlugin.cc:68. #12 0x00007fe345e35994 in std::_Destroy<HepMC3::ReaderPlugin> (__pointer=0x55cb53cb5e50) at /usr/include/c++/12/bits/stl_construct.h:151. #13 0x00007fe345e358ec in std::allocator_traits<std::allocator<void> >::destroy<HepMC3::ReaderPlugin> (__p=0x55cb53cb5e50) at /usr/include/c++/12/bits/alloc_traits.h:648. #14 0x00007fe345e350df in std::_Sp_counted_ptr_inplace<HepMC3::ReaderPlugin, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x55cb53cb5e40) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #15 0x00007fe36b71e887 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libRIO.so. #16 0x00007fe356ee7fcd in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7fff8c03a978, __in_chrg=<optimized out>) at /usr/include/c++/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:1052,deployability,stage,stage-,1052,"nal, linked report:. ```. #6 <signal handler called>. #7 0x00007fe343359b6a in XrdCl::File::Close(XrdCl::ResponseHandler*, unsigned short) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/xrootd-5.6.1-4hhj2qxu72su5ur6i2x5as7tabayobgz/lib/libXrdCl.so.3. #8 0x00007fe343359c85 in XrdCl::File::Close(unsigned short) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/xrootd-5.6.1-4hhj2qxu72su5ur6i2x5as7tabayobgz/lib/libXrdCl.so.3. #9 0x00007fe3462e24d3 in TNetXNGFile::Close(char const*) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libNetxNG.so.6.28.04. #10 0x00007fe346ac1377 in HepMC3::ReaderRootTree::close (this=0x55cb53cbff00) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/rootIO/src/ReaderRootTree.cc:114. #11 0x00007fe34385b7ee in HepMC3::ReaderPlugin::~ReaderPlugin (this=0x55cb53cb5e50, __in_chrg=<optimized out>) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/src/ReaderPlugin.cc:68. #12 0x00007fe345e35994 in std::_Destroy<HepMC3::ReaderPlugin> (__pointer=0x55cb53cb5e50) at /usr/include/c++/12/bits/stl_construct.h:151. #13 0x00007fe345e358ec in std::allocator_traits<std::allocator<void> >::destroy<HepMC3::ReaderPlugin> (__p=0x55cb53cb5e50) at /usr/include/c++/12/bits/alloc_traits.h:648. #14 0x00007fe345e350df in std::_Sp_counted_ptr_inplace<HepMC3::ReaderPlugin, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x55cb53cb5e40) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #15 0x00007fe36b71e887 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libRIO.so. #16 0x00007fe356ee7fcd in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7fff8c03a978, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_ba",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:1000,energy efficiency,optim,optimized,1000,"s, @veprbl . Copying the stacktrace from the original, linked report:. ```. #6 <signal handler called>. #7 0x00007fe343359b6a in XrdCl::File::Close(XrdCl::ResponseHandler*, unsigned short) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/xrootd-5.6.1-4hhj2qxu72su5ur6i2x5as7tabayobgz/lib/libXrdCl.so.3. #8 0x00007fe343359c85 in XrdCl::File::Close(unsigned short) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/xrootd-5.6.1-4hhj2qxu72su5ur6i2x5as7tabayobgz/lib/libXrdCl.so.3. #9 0x00007fe3462e24d3 in TNetXNGFile::Close(char const*) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libNetxNG.so.6.28.04. #10 0x00007fe346ac1377 in HepMC3::ReaderRootTree::close (this=0x55cb53cbff00) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/rootIO/src/ReaderRootTree.cc:114. #11 0x00007fe34385b7ee in HepMC3::ReaderPlugin::~ReaderPlugin (this=0x55cb53cb5e50, __in_chrg=<optimized out>) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/src/ReaderPlugin.cc:68. #12 0x00007fe345e35994 in std::_Destroy<HepMC3::ReaderPlugin> (__pointer=0x55cb53cb5e50) at /usr/include/c++/12/bits/stl_construct.h:151. #13 0x00007fe345e358ec in std::allocator_traits<std::allocator<void> >::destroy<HepMC3::ReaderPlugin> (__p=0x55cb53cb5e50) at /usr/include/c++/12/bits/alloc_traits.h:648. #14 0x00007fe345e350df in std::_Sp_counted_ptr_inplace<HepMC3::ReaderPlugin, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x55cb53cb5e40) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #15 0x00007fe36b71e887 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libRIO.so. #16 0x00007fe356ee7fcd in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7fff8c03a978, __in_chrg=<optimiz",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:1329,energy efficiency,alloc,allocator,1329,"59c85 in XrdCl::File::Close(unsigned short) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/xrootd-5.6.1-4hhj2qxu72su5ur6i2x5as7tabayobgz/lib/libXrdCl.so.3. #9 0x00007fe3462e24d3 in TNetXNGFile::Close(char const*) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libNetxNG.so.6.28.04. #10 0x00007fe346ac1377 in HepMC3::ReaderRootTree::close (this=0x55cb53cbff00) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/rootIO/src/ReaderRootTree.cc:114. #11 0x00007fe34385b7ee in HepMC3::ReaderPlugin::~ReaderPlugin (this=0x55cb53cb5e50, __in_chrg=<optimized out>) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/src/ReaderPlugin.cc:68. #12 0x00007fe345e35994 in std::_Destroy<HepMC3::ReaderPlugin> (__pointer=0x55cb53cb5e50) at /usr/include/c++/12/bits/stl_construct.h:151. #13 0x00007fe345e358ec in std::allocator_traits<std::allocator<void> >::destroy<HepMC3::ReaderPlugin> (__p=0x55cb53cb5e50) at /usr/include/c++/12/bits/alloc_traits.h:648. #14 0x00007fe345e350df in std::_Sp_counted_ptr_inplace<HepMC3::ReaderPlugin, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x55cb53cb5e40) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #15 0x00007fe36b71e887 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libRIO.so. #16 0x00007fe356ee7fcd in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7fff8c03a978, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #17 0x00007fe345e21200 in std::__shared_ptr<HepMC3::Reader, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x7fff8c03a970, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #18 0x00007fe345e266d4 in std::__shared_ptr<HepMC3::Reader, (__g",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:1529,energy efficiency,alloc,allocator,1529,"File::Close(char const*) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libNetxNG.so.6.28.04. #10 0x00007fe346ac1377 in HepMC3::ReaderRootTree::close (this=0x55cb53cbff00) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/rootIO/src/ReaderRootTree.cc:114. #11 0x00007fe34385b7ee in HepMC3::ReaderPlugin::~ReaderPlugin (this=0x55cb53cb5e50, __in_chrg=<optimized out>) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/src/ReaderPlugin.cc:68. #12 0x00007fe345e35994 in std::_Destroy<HepMC3::ReaderPlugin> (__pointer=0x55cb53cb5e50) at /usr/include/c++/12/bits/stl_construct.h:151. #13 0x00007fe345e358ec in std::allocator_traits<std::allocator<void> >::destroy<HepMC3::ReaderPlugin> (__p=0x55cb53cb5e50) at /usr/include/c++/12/bits/alloc_traits.h:648. #14 0x00007fe345e350df in std::_Sp_counted_ptr_inplace<HepMC3::ReaderPlugin, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x55cb53cb5e40) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #15 0x00007fe36b71e887 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libRIO.so. #16 0x00007fe356ee7fcd in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7fff8c03a978, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #17 0x00007fe345e21200 in std::__shared_ptr<HepMC3::Reader, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x7fff8c03a970, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #18 0x00007fe345e266d4 in std::__shared_ptr<HepMC3::Reader, (__gnu_cxx::_Lock_policy)2>::operator= (this=0x55cb53cb4a48, __r=...) at /usr/include/c++/12/bits/shared_ptr_base.h:1620. #19 0x00007fe345e233f0 in std::shared_ptr<HepMC3::Reader>::operator= (this=0x55cb5",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:1998,energy efficiency,optim,optimized,1998,"imized out>) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/src/ReaderPlugin.cc:68. #12 0x00007fe345e35994 in std::_Destroy<HepMC3::ReaderPlugin> (__pointer=0x55cb53cb5e50) at /usr/include/c++/12/bits/stl_construct.h:151. #13 0x00007fe345e358ec in std::allocator_traits<std::allocator<void> >::destroy<HepMC3::ReaderPlugin> (__p=0x55cb53cb5e50) at /usr/include/c++/12/bits/alloc_traits.h:648. #14 0x00007fe345e350df in std::_Sp_counted_ptr_inplace<HepMC3::ReaderPlugin, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x55cb53cb5e40) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #15 0x00007fe36b71e887 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libRIO.so. #16 0x00007fe356ee7fcd in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7fff8c03a978, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #17 0x00007fe345e21200 in std::__shared_ptr<HepMC3::Reader, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x7fff8c03a970, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #18 0x00007fe345e266d4 in std::__shared_ptr<HepMC3::Reader, (__gnu_cxx::_Lock_policy)2>::operator= (this=0x55cb53cb4a48, __r=...) at /usr/include/c++/12/bits/shared_ptr_base.h:1620. #19 0x00007fe345e233f0 in std::shared_ptr<HepMC3::Reader>::operator= (this=0x55cb53cb4a48, __r=...) at /usr/include/c++/12/bits/shared_ptr.h:440. #20 0x00007fe345e1ce84 in dd4hep::sim::HEPMC3FileReader::HEPMC3FileReader (this=0x55cb53cb49d0, nam=...) at /home/wdconinc/git/DD4hep/DDG4/hepmc/HepMC3FileReader.cpp:140. #21 0x00007fe345e1d6ff in (anonymous namespace)::Factory<dd4hep::sim::HEPMC3FileReader, dd4hep::sim::Geant4EventReader*(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>::call(std::string) (a0=...) at /",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:2202,energy efficiency,optim,optimized,2202,"ter=0x55cb53cb5e50) at /usr/include/c++/12/bits/stl_construct.h:151. #13 0x00007fe345e358ec in std::allocator_traits<std::allocator<void> >::destroy<HepMC3::ReaderPlugin> (__p=0x55cb53cb5e50) at /usr/include/c++/12/bits/alloc_traits.h:648. #14 0x00007fe345e350df in std::_Sp_counted_ptr_inplace<HepMC3::ReaderPlugin, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x55cb53cb5e40) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #15 0x00007fe36b71e887 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libRIO.so. #16 0x00007fe356ee7fcd in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7fff8c03a978, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #17 0x00007fe345e21200 in std::__shared_ptr<HepMC3::Reader, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x7fff8c03a970, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #18 0x00007fe345e266d4 in std::__shared_ptr<HepMC3::Reader, (__gnu_cxx::_Lock_policy)2>::operator= (this=0x55cb53cb4a48, __r=...) at /usr/include/c++/12/bits/shared_ptr_base.h:1620. #19 0x00007fe345e233f0 in std::shared_ptr<HepMC3::Reader>::operator= (this=0x55cb53cb4a48, __r=...) at /usr/include/c++/12/bits/shared_ptr.h:440. #20 0x00007fe345e1ce84 in dd4hep::sim::HEPMC3FileReader::HEPMC3FileReader (this=0x55cb53cb49d0, nam=...) at /home/wdconinc/git/DD4hep/DDG4/hepmc/HepMC3FileReader.cpp:140. #21 0x00007fe345e1d6ff in (anonymous namespace)::Factory<dd4hep::sim::HEPMC3FileReader, dd4hep::sim::Geant4EventReader*(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>::call(std::string) (a0=...) at /home/wdconinc/git/DD4hep/DDG4/include/DDG4/Factories.h:176. #22 0x00007fe34cccafcc in dd4hep::PluginService::Create<dd4hep::sim::Geant4EventReader*, std::__cxx11::basic_string<char, std::char_traits<char>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:2951,energy efficiency,alloc,allocator,2951,"ator_traits<std::allocator<void> >::destroy<HepMC3::ReaderPlugin> (__p=0x55cb53cb5e50) at /usr/include/c++/12/bits/alloc_traits.h:648. #14 0x00007fe345e350df in std::_Sp_counted_ptr_inplace<HepMC3::ReaderPlugin, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x55cb53cb5e40) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #15 0x00007fe36b71e887 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libRIO.so. #16 0x00007fe356ee7fcd in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7fff8c03a978, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #17 0x00007fe345e21200 in std::__shared_ptr<HepMC3::Reader, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x7fff8c03a970, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #18 0x00007fe345e266d4 in std::__shared_ptr<HepMC3::Reader, (__gnu_cxx::_Lock_policy)2>::operator= (this=0x55cb53cb4a48, __r=...) at /usr/include/c++/12/bits/shared_ptr_base.h:1620. #19 0x00007fe345e233f0 in std::shared_ptr<HepMC3::Reader>::operator= (this=0x55cb53cb4a48, __r=...) at /usr/include/c++/12/bits/shared_ptr.h:440. #20 0x00007fe345e1ce84 in dd4hep::sim::HEPMC3FileReader::HEPMC3FileReader (this=0x55cb53cb49d0, nam=...) at /home/wdconinc/git/DD4hep/DDG4/hepmc/HepMC3FileReader.cpp:140. #21 0x00007fe345e1d6ff in (anonymous namespace)::Factory<dd4hep::sim::HEPMC3FileReader, dd4hep::sim::Geant4EventReader*(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>::call(std::string) (a0=...) at /home/wdconinc/git/DD4hep/DDG4/include/DDG4/Factories.h:176. #22 0x00007fe34cccafcc in dd4hep::PluginService::Create<dd4hep::sim::Geant4EventReader*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > (id=...) at /home/wdconinc/git/DD4hep/DDCore/include/DD4hep/Plugins.h:102. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:3214,energy efficiency,alloc,allocator,3214,"ator_traits<std::allocator<void> >::destroy<HepMC3::ReaderPlugin> (__p=0x55cb53cb5e50) at /usr/include/c++/12/bits/alloc_traits.h:648. #14 0x00007fe345e350df in std::_Sp_counted_ptr_inplace<HepMC3::ReaderPlugin, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x55cb53cb5e40) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #15 0x00007fe36b71e887 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libRIO.so. #16 0x00007fe356ee7fcd in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7fff8c03a978, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #17 0x00007fe345e21200 in std::__shared_ptr<HepMC3::Reader, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x7fff8c03a970, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #18 0x00007fe345e266d4 in std::__shared_ptr<HepMC3::Reader, (__gnu_cxx::_Lock_policy)2>::operator= (this=0x55cb53cb4a48, __r=...) at /usr/include/c++/12/bits/shared_ptr_base.h:1620. #19 0x00007fe345e233f0 in std::shared_ptr<HepMC3::Reader>::operator= (this=0x55cb53cb4a48, __r=...) at /usr/include/c++/12/bits/shared_ptr.h:440. #20 0x00007fe345e1ce84 in dd4hep::sim::HEPMC3FileReader::HEPMC3FileReader (this=0x55cb53cb49d0, nam=...) at /home/wdconinc/git/DD4hep/DDG4/hepmc/HepMC3FileReader.cpp:140. #21 0x00007fe345e1d6ff in (anonymous namespace)::Factory<dd4hep::sim::HEPMC3FileReader, dd4hep::sim::Geant4EventReader*(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>::call(std::string) (a0=...) at /home/wdconinc/git/DD4hep/DDG4/include/DDG4/Factories.h:176. #22 0x00007fe34cccafcc in dd4hep::PluginService::Create<dd4hep::sim::Geant4EventReader*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > (id=...) at /home/wdconinc/git/DD4hep/DDCore/include/DD4hep/Plugins.h:102. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:3097,interoperability,Plug,PluginService,3097,"ator_traits<std::allocator<void> >::destroy<HepMC3::ReaderPlugin> (__p=0x55cb53cb5e50) at /usr/include/c++/12/bits/alloc_traits.h:648. #14 0x00007fe345e350df in std::_Sp_counted_ptr_inplace<HepMC3::ReaderPlugin, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x55cb53cb5e40) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #15 0x00007fe36b71e887 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libRIO.so. #16 0x00007fe356ee7fcd in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7fff8c03a978, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #17 0x00007fe345e21200 in std::__shared_ptr<HepMC3::Reader, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x7fff8c03a970, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #18 0x00007fe345e266d4 in std::__shared_ptr<HepMC3::Reader, (__gnu_cxx::_Lock_policy)2>::operator= (this=0x55cb53cb4a48, __r=...) at /usr/include/c++/12/bits/shared_ptr_base.h:1620. #19 0x00007fe345e233f0 in std::shared_ptr<HepMC3::Reader>::operator= (this=0x55cb53cb4a48, __r=...) at /usr/include/c++/12/bits/shared_ptr.h:440. #20 0x00007fe345e1ce84 in dd4hep::sim::HEPMC3FileReader::HEPMC3FileReader (this=0x55cb53cb49d0, nam=...) at /home/wdconinc/git/DD4hep/DDG4/hepmc/HepMC3FileReader.cpp:140. #21 0x00007fe345e1d6ff in (anonymous namespace)::Factory<dd4hep::sim::HEPMC3FileReader, dd4hep::sim::Geant4EventReader*(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>::call(std::string) (a0=...) at /home/wdconinc/git/DD4hep/DDG4/include/DDG4/Factories.h:176. #22 0x00007fe34cccafcc in dd4hep::PluginService::Create<dd4hep::sim::Geant4EventReader*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > (id=...) at /home/wdconinc/git/DD4hep/DDCore/include/DD4hep/Plugins.h:102. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:3294,interoperability,Plug,Plugins,3294,"ator_traits<std::allocator<void> >::destroy<HepMC3::ReaderPlugin> (__p=0x55cb53cb5e50) at /usr/include/c++/12/bits/alloc_traits.h:648. #14 0x00007fe345e350df in std::_Sp_counted_ptr_inplace<HepMC3::ReaderPlugin, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x55cb53cb5e40) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #15 0x00007fe36b71e887 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libRIO.so. #16 0x00007fe356ee7fcd in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7fff8c03a978, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #17 0x00007fe345e21200 in std::__shared_ptr<HepMC3::Reader, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x7fff8c03a970, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #18 0x00007fe345e266d4 in std::__shared_ptr<HepMC3::Reader, (__gnu_cxx::_Lock_policy)2>::operator= (this=0x55cb53cb4a48, __r=...) at /usr/include/c++/12/bits/shared_ptr_base.h:1620. #19 0x00007fe345e233f0 in std::shared_ptr<HepMC3::Reader>::operator= (this=0x55cb53cb4a48, __r=...) at /usr/include/c++/12/bits/shared_ptr.h:440. #20 0x00007fe345e1ce84 in dd4hep::sim::HEPMC3FileReader::HEPMC3FileReader (this=0x55cb53cb49d0, nam=...) at /home/wdconinc/git/DD4hep/DDG4/hepmc/HepMC3FileReader.cpp:140. #21 0x00007fe345e1d6ff in (anonymous namespace)::Factory<dd4hep::sim::HEPMC3FileReader, dd4hep::sim::Geant4EventReader*(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>::call(std::string) (a0=...) at /home/wdconinc/git/DD4hep/DDG4/include/DDG4/Factories.h:176. #22 0x00007fe34cccafcc in dd4hep::PluginService::Create<dd4hep::sim::Geant4EventReader*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > (id=...) at /home/wdconinc/git/DD4hep/DDCore/include/DD4hep/Plugins.h:102. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:1000,performance,optimiz,optimized,1000,"s, @veprbl . Copying the stacktrace from the original, linked report:. ```. #6 <signal handler called>. #7 0x00007fe343359b6a in XrdCl::File::Close(XrdCl::ResponseHandler*, unsigned short) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/xrootd-5.6.1-4hhj2qxu72su5ur6i2x5as7tabayobgz/lib/libXrdCl.so.3. #8 0x00007fe343359c85 in XrdCl::File::Close(unsigned short) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/xrootd-5.6.1-4hhj2qxu72su5ur6i2x5as7tabayobgz/lib/libXrdCl.so.3. #9 0x00007fe3462e24d3 in TNetXNGFile::Close(char const*) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libNetxNG.so.6.28.04. #10 0x00007fe346ac1377 in HepMC3::ReaderRootTree::close (this=0x55cb53cbff00) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/rootIO/src/ReaderRootTree.cc:114. #11 0x00007fe34385b7ee in HepMC3::ReaderPlugin::~ReaderPlugin (this=0x55cb53cb5e50, __in_chrg=<optimized out>) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/src/ReaderPlugin.cc:68. #12 0x00007fe345e35994 in std::_Destroy<HepMC3::ReaderPlugin> (__pointer=0x55cb53cb5e50) at /usr/include/c++/12/bits/stl_construct.h:151. #13 0x00007fe345e358ec in std::allocator_traits<std::allocator<void> >::destroy<HepMC3::ReaderPlugin> (__p=0x55cb53cb5e50) at /usr/include/c++/12/bits/alloc_traits.h:648. #14 0x00007fe345e350df in std::_Sp_counted_ptr_inplace<HepMC3::ReaderPlugin, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x55cb53cb5e40) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #15 0x00007fe36b71e887 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libRIO.so. #16 0x00007fe356ee7fcd in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7fff8c03a978, __in_chrg=<optimiz",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:1998,performance,optimiz,optimized,1998,"imized out>) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/src/ReaderPlugin.cc:68. #12 0x00007fe345e35994 in std::_Destroy<HepMC3::ReaderPlugin> (__pointer=0x55cb53cb5e50) at /usr/include/c++/12/bits/stl_construct.h:151. #13 0x00007fe345e358ec in std::allocator_traits<std::allocator<void> >::destroy<HepMC3::ReaderPlugin> (__p=0x55cb53cb5e50) at /usr/include/c++/12/bits/alloc_traits.h:648. #14 0x00007fe345e350df in std::_Sp_counted_ptr_inplace<HepMC3::ReaderPlugin, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x55cb53cb5e40) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #15 0x00007fe36b71e887 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libRIO.so. #16 0x00007fe356ee7fcd in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7fff8c03a978, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #17 0x00007fe345e21200 in std::__shared_ptr<HepMC3::Reader, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x7fff8c03a970, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #18 0x00007fe345e266d4 in std::__shared_ptr<HepMC3::Reader, (__gnu_cxx::_Lock_policy)2>::operator= (this=0x55cb53cb4a48, __r=...) at /usr/include/c++/12/bits/shared_ptr_base.h:1620. #19 0x00007fe345e233f0 in std::shared_ptr<HepMC3::Reader>::operator= (this=0x55cb53cb4a48, __r=...) at /usr/include/c++/12/bits/shared_ptr.h:440. #20 0x00007fe345e1ce84 in dd4hep::sim::HEPMC3FileReader::HEPMC3FileReader (this=0x55cb53cb49d0, nam=...) at /home/wdconinc/git/DD4hep/DDG4/hepmc/HepMC3FileReader.cpp:140. #21 0x00007fe345e1d6ff in (anonymous namespace)::Factory<dd4hep::sim::HEPMC3FileReader, dd4hep::sim::Geant4EventReader*(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>::call(std::string) (a0=...) at /",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:2202,performance,optimiz,optimized,2202,"ter=0x55cb53cb5e50) at /usr/include/c++/12/bits/stl_construct.h:151. #13 0x00007fe345e358ec in std::allocator_traits<std::allocator<void> >::destroy<HepMC3::ReaderPlugin> (__p=0x55cb53cb5e50) at /usr/include/c++/12/bits/alloc_traits.h:648. #14 0x00007fe345e350df in std::_Sp_counted_ptr_inplace<HepMC3::ReaderPlugin, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x55cb53cb5e40) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #15 0x00007fe36b71e887 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libRIO.so. #16 0x00007fe356ee7fcd in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7fff8c03a978, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #17 0x00007fe345e21200 in std::__shared_ptr<HepMC3::Reader, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x7fff8c03a970, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #18 0x00007fe345e266d4 in std::__shared_ptr<HepMC3::Reader, (__gnu_cxx::_Lock_policy)2>::operator= (this=0x55cb53cb4a48, __r=...) at /usr/include/c++/12/bits/shared_ptr_base.h:1620. #19 0x00007fe345e233f0 in std::shared_ptr<HepMC3::Reader>::operator= (this=0x55cb53cb4a48, __r=...) at /usr/include/c++/12/bits/shared_ptr.h:440. #20 0x00007fe345e1ce84 in dd4hep::sim::HEPMC3FileReader::HEPMC3FileReader (this=0x55cb53cb49d0, nam=...) at /home/wdconinc/git/DD4hep/DDG4/hepmc/HepMC3FileReader.cpp:140. #21 0x00007fe345e1d6ff in (anonymous namespace)::Factory<dd4hep::sim::HEPMC3FileReader, dd4hep::sim::Geant4EventReader*(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>::call(std::string) (a0=...) at /home/wdconinc/git/DD4hep/DDG4/include/DDG4/Factories.h:176. #22 0x00007fe34cccafcc in dd4hep::PluginService::Create<dd4hep::sim::Geant4EventReader*, std::__cxx11::basic_string<char, std::char_traits<char>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:85,security,sign,signal,85,"Thanks, @veprbl . Copying the stacktrace from the original, linked report:. ```. #6 <signal handler called>. #7 0x00007fe343359b6a in XrdCl::File::Close(XrdCl::ResponseHandler*, unsigned short) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/xrootd-5.6.1-4hhj2qxu72su5ur6i2x5as7tabayobgz/lib/libXrdCl.so.3. #8 0x00007fe343359c85 in XrdCl::File::Close(unsigned short) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/xrootd-5.6.1-4hhj2qxu72su5ur6i2x5as7tabayobgz/lib/libXrdCl.so.3. #9 0x00007fe3462e24d3 in TNetXNGFile::Close(char const*) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libNetxNG.so.6.28.04. #10 0x00007fe346ac1377 in HepMC3::ReaderRootTree::close (this=0x55cb53cbff00) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/rootIO/src/ReaderRootTree.cc:114. #11 0x00007fe34385b7ee in HepMC3::ReaderPlugin::~ReaderPlugin (this=0x55cb53cb5e50, __in_chrg=<optimized out>) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/src/ReaderPlugin.cc:68. #12 0x00007fe345e35994 in std::_Destroy<HepMC3::ReaderPlugin> (__pointer=0x55cb53cb5e50) at /usr/include/c++/12/bits/stl_construct.h:151. #13 0x00007fe345e358ec in std::allocator_traits<std::allocator<void> >::destroy<HepMC3::ReaderPlugin> (__p=0x55cb53cb5e50) at /usr/include/c++/12/bits/alloc_traits.h:648. #14 0x00007fe345e350df in std::_Sp_counted_ptr_inplace<HepMC3::ReaderPlugin, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x55cb53cb5e40) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #15 0x00007fe36b71e887 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libRIO.so. #16 0x00007fe356ee7fcd in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7fff8c03a978, __in_chrg=<op",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:147,usability,Close,Close,147,"Thanks, @veprbl . Copying the stacktrace from the original, linked report:. ```. #6 <signal handler called>. #7 0x00007fe343359b6a in XrdCl::File::Close(XrdCl::ResponseHandler*, unsigned short) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/xrootd-5.6.1-4hhj2qxu72su5ur6i2x5as7tabayobgz/lib/libXrdCl.so.3. #8 0x00007fe343359c85 in XrdCl::File::Close(unsigned short) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/xrootd-5.6.1-4hhj2qxu72su5ur6i2x5as7tabayobgz/lib/libXrdCl.so.3. #9 0x00007fe3462e24d3 in TNetXNGFile::Close(char const*) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libNetxNG.so.6.28.04. #10 0x00007fe346ac1377 in HepMC3::ReaderRootTree::close (this=0x55cb53cbff00) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/rootIO/src/ReaderRootTree.cc:114. #11 0x00007fe34385b7ee in HepMC3::ReaderPlugin::~ReaderPlugin (this=0x55cb53cb5e50, __in_chrg=<optimized out>) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/src/ReaderPlugin.cc:68. #12 0x00007fe345e35994 in std::_Destroy<HepMC3::ReaderPlugin> (__pointer=0x55cb53cb5e50) at /usr/include/c++/12/bits/stl_construct.h:151. #13 0x00007fe345e358ec in std::allocator_traits<std::allocator<void> >::destroy<HepMC3::ReaderPlugin> (__p=0x55cb53cb5e50) at /usr/include/c++/12/bits/alloc_traits.h:648. #14 0x00007fe345e350df in std::_Sp_counted_ptr_inplace<HepMC3::ReaderPlugin, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x55cb53cb5e40) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #15 0x00007fe36b71e887 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libRIO.so. #16 0x00007fe356ee7fcd in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7fff8c03a978, __in_chrg=<op",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:356,usability,Close,Close,356,"Thanks, @veprbl . Copying the stacktrace from the original, linked report:. ```. #6 <signal handler called>. #7 0x00007fe343359b6a in XrdCl::File::Close(XrdCl::ResponseHandler*, unsigned short) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/xrootd-5.6.1-4hhj2qxu72su5ur6i2x5as7tabayobgz/lib/libXrdCl.so.3. #8 0x00007fe343359c85 in XrdCl::File::Close(unsigned short) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/xrootd-5.6.1-4hhj2qxu72su5ur6i2x5as7tabayobgz/lib/libXrdCl.so.3. #9 0x00007fe3462e24d3 in TNetXNGFile::Close(char const*) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libNetxNG.so.6.28.04. #10 0x00007fe346ac1377 in HepMC3::ReaderRootTree::close (this=0x55cb53cbff00) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/rootIO/src/ReaderRootTree.cc:114. #11 0x00007fe34385b7ee in HepMC3::ReaderPlugin::~ReaderPlugin (this=0x55cb53cb5e50, __in_chrg=<optimized out>) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/src/ReaderPlugin.cc:68. #12 0x00007fe345e35994 in std::_Destroy<HepMC3::ReaderPlugin> (__pointer=0x55cb53cb5e50) at /usr/include/c++/12/bits/stl_construct.h:151. #13 0x00007fe345e358ec in std::allocator_traits<std::allocator<void> >::destroy<HepMC3::ReaderPlugin> (__p=0x55cb53cb5e50) at /usr/include/c++/12/bits/alloc_traits.h:648. #14 0x00007fe345e350df in std::_Sp_counted_ptr_inplace<HepMC3::ReaderPlugin, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x55cb53cb5e40) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #15 0x00007fe36b71e887 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libRIO.so. #16 0x00007fe356ee7fcd in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7fff8c03a978, __in_chrg=<op",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:540,usability,Close,Close,540,"Thanks, @veprbl . Copying the stacktrace from the original, linked report:. ```. #6 <signal handler called>. #7 0x00007fe343359b6a in XrdCl::File::Close(XrdCl::ResponseHandler*, unsigned short) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/xrootd-5.6.1-4hhj2qxu72su5ur6i2x5as7tabayobgz/lib/libXrdCl.so.3. #8 0x00007fe343359c85 in XrdCl::File::Close(unsigned short) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/xrootd-5.6.1-4hhj2qxu72su5ur6i2x5as7tabayobgz/lib/libXrdCl.so.3. #9 0x00007fe3462e24d3 in TNetXNGFile::Close(char const*) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libNetxNG.so.6.28.04. #10 0x00007fe346ac1377 in HepMC3::ReaderRootTree::close (this=0x55cb53cbff00) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/rootIO/src/ReaderRootTree.cc:114. #11 0x00007fe34385b7ee in HepMC3::ReaderPlugin::~ReaderPlugin (this=0x55cb53cb5e50, __in_chrg=<optimized out>) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/src/ReaderPlugin.cc:68. #12 0x00007fe345e35994 in std::_Destroy<HepMC3::ReaderPlugin> (__pointer=0x55cb53cb5e50) at /usr/include/c++/12/bits/stl_construct.h:151. #13 0x00007fe345e358ec in std::allocator_traits<std::allocator<void> >::destroy<HepMC3::ReaderPlugin> (__p=0x55cb53cb5e50) at /usr/include/c++/12/bits/alloc_traits.h:648. #14 0x00007fe345e350df in std::_Sp_counted_ptr_inplace<HepMC3::ReaderPlugin, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x55cb53cb5e40) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #15 0x00007fe36b71e887 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libRIO.so. #16 0x00007fe356ee7fcd in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7fff8c03a978, __in_chrg=<op",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:745,usability,close,close,745,"Thanks, @veprbl . Copying the stacktrace from the original, linked report:. ```. #6 <signal handler called>. #7 0x00007fe343359b6a in XrdCl::File::Close(XrdCl::ResponseHandler*, unsigned short) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/xrootd-5.6.1-4hhj2qxu72su5ur6i2x5as7tabayobgz/lib/libXrdCl.so.3. #8 0x00007fe343359c85 in XrdCl::File::Close(unsigned short) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/xrootd-5.6.1-4hhj2qxu72su5ur6i2x5as7tabayobgz/lib/libXrdCl.so.3. #9 0x00007fe3462e24d3 in TNetXNGFile::Close(char const*) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libNetxNG.so.6.28.04. #10 0x00007fe346ac1377 in HepMC3::ReaderRootTree::close (this=0x55cb53cbff00) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/rootIO/src/ReaderRootTree.cc:114. #11 0x00007fe34385b7ee in HepMC3::ReaderPlugin::~ReaderPlugin (this=0x55cb53cb5e50, __in_chrg=<optimized out>) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/src/ReaderPlugin.cc:68. #12 0x00007fe345e35994 in std::_Destroy<HepMC3::ReaderPlugin> (__pointer=0x55cb53cb5e50) at /usr/include/c++/12/bits/stl_construct.h:151. #13 0x00007fe345e358ec in std::allocator_traits<std::allocator<void> >::destroy<HepMC3::ReaderPlugin> (__p=0x55cb53cb5e50) at /usr/include/c++/12/bits/alloc_traits.h:648. #14 0x00007fe345e350df in std::_Sp_counted_ptr_inplace<HepMC3::ReaderPlugin, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x55cb53cb5e40) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #15 0x00007fe36b71e887 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libRIO.so. #16 0x00007fe356ee7fcd in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7fff8c03a978, __in_chrg=<op",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:65,usability,Close,Close,65,@amadio would you expect XrdClient to survive repeated calls to `Close()`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:85,deployability,releas,release,85,@Axel-Naumann I will see what can be done on our side about this and fix in the next release if I find a good solution.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:14,testability,simpl,simple,14,There is very simple fix to make `TNetXNGFile::Close()` reentrant. See PR: https://github.com/root-project/root/pull/13559 .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:14,usability,simpl,simple,14,There is very simple fix to make `TNetXNGFile::Close()` reentrant. See PR: https://github.com/root-project/root/pull/13559 .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:47,usability,Close,Close,47,There is very simple fix to make `TNetXNGFile::Close()` reentrant. See PR: https://github.com/root-project/root/pull/13559 .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/pull/13505:309,energy efficiency,current,currently,309,"I see you need to provide the list of canvases to be printed in an array. That's a useful way, but one needs du created an array and fill it. Don't you think it will be also useful to be able to do just something like:. ```. TCanvas::SaveAll(). ```. without parameters? in that case, all the created canvases currently in memory will be saved. The file name(s) could be generated from the canvas names.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13505
https://github.com/root-project/root/pull/13505:258,modifiability,paramet,parameters,258,"I see you need to provide the list of canvases to be printed in an array. That's a useful way, but one needs du created an array and fill it. Don't you think it will be also useful to be able to do just something like:. ```. TCanvas::SaveAll(). ```. without parameters? in that case, all the created canvases currently in memory will be saved. The file name(s) could be generated from the canvas names.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13505
https://github.com/root-project/root/pull/13505:322,performance,memor,memory,322,"I see you need to provide the list of canvases to be printed in an array. That's a useful way, but one needs du created an array and fill it. Don't you think it will be also useful to be able to do just something like:. ```. TCanvas::SaveAll(). ```. without parameters? in that case, all the created canvases currently in memory will be saved. The file name(s) could be generated from the canvas names.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13505
https://github.com/root-project/root/pull/13505:322,usability,memor,memory,322,"I see you need to provide the list of canvases to be printed in an array. That's a useful way, but one needs du created an array and fill it. Don't you think it will be also useful to be able to do just something like:. ```. TCanvas::SaveAll(). ```. without parameters? in that case, all the created canvases currently in memory will be saved. The file name(s) could be generated from the canvas names.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13505
https://github.com/root-project/root/pull/13505:271,modifiability,paramet,parameter,271,"> Don't you think it will be also useful to be able to do just something like `TCanvas::SaveAll()`. Why not. If input vector of pads is empty - just use all from `gROOT->GetListOfCanvases()`. . But for the moment it is not possible to store canvases using their names as parameter. Therefore I propose by default one can use ""allcanvas.pdf"" as output name.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13505
https://github.com/root-project/root/pull/13505:112,safety,input,input,112,"> Don't you think it will be also useful to be able to do just something like `TCanvas::SaveAll()`. Why not. If input vector of pads is empty - just use all from `gROOT->GetListOfCanvases()`. . But for the moment it is not possible to store canvases using their names as parameter. Therefore I propose by default one can use ""allcanvas.pdf"" as output name.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13505
https://github.com/root-project/root/pull/13505:112,usability,input,input,112,"> Don't you think it will be also useful to be able to do just something like `TCanvas::SaveAll()`. Why not. If input vector of pads is empty - just use all from `gROOT->GetListOfCanvases()`. . But for the moment it is not possible to store canvases using their names as parameter. Therefore I propose by default one can use ""allcanvas.pdf"" as output name.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13505
https://github.com/root-project/root/pull/13506:93,availability,error,error,93,"@pcanal . I rebase PR and add commit for TList::RecursiveRemove(). . I guess, it was logical error trying call recursive remove for object itself",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:85,deployability,log,logical,85,"@pcanal . I rebase PR and add commit for TList::RecursiveRemove(). . I guess, it was logical error trying call recursive remove for object itself",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:93,performance,error,error,93,"@pcanal . I rebase PR and add commit for TList::RecursiveRemove(). . I guess, it was logical error trying call recursive remove for object itself",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:85,safety,log,logical,85,"@pcanal . I rebase PR and add commit for TList::RecursiveRemove(). . I guess, it was logical error trying call recursive remove for object itself",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:93,safety,error,error,93,"@pcanal . I rebase PR and add commit for TList::RecursiveRemove(). . I guess, it was logical error trying call recursive remove for object itself",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:85,security,log,logical,85,"@pcanal . I rebase PR and add commit for TList::RecursiveRemove(). . I guess, it was logical error trying call recursive remove for object itself",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:85,testability,log,logical,85,"@pcanal . I rebase PR and add commit for TList::RecursiveRemove(). . I guess, it was logical error trying call recursive remove for object itself",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:93,usability,error,error,93,"@pcanal . I rebase PR and add commit for TList::RecursiveRemove(). . I guess, it was logical error trying call recursive remove for object itself",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:201,availability,restor,restored,201,Here is macro which reproduces the problem with simple histogram/latex drawing. [dupl.cxx.txt](https://github.com/root-project/root/files/12418698/dupl.cxx.txt). Important that canvas should be stored/restored from I/O. Only in such case `ROOT::Detail::HasBeenDeleted` fails,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:269,deployability,fail,fails,269,Here is macro which reproduces the problem with simple histogram/latex drawing. [dupl.cxx.txt](https://github.com/root-project/root/files/12418698/dupl.cxx.txt). Important that canvas should be stored/restored from I/O. Only in such case `ROOT::Detail::HasBeenDeleted` fails,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:71,energy efficiency,draw,drawing,71,Here is macro which reproduces the problem with simple histogram/latex drawing. [dupl.cxx.txt](https://github.com/root-project/root/files/12418698/dupl.cxx.txt). Important that canvas should be stored/restored from I/O. Only in such case `ROOT::Detail::HasBeenDeleted` fails,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:215,performance,I/O,I/O,215,Here is macro which reproduces the problem with simple histogram/latex drawing. [dupl.cxx.txt](https://github.com/root-project/root/files/12418698/dupl.cxx.txt). Important that canvas should be stored/restored from I/O. Only in such case `ROOT::Detail::HasBeenDeleted` fails,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:201,reliability,restor,restored,201,Here is macro which reproduces the problem with simple histogram/latex drawing. [dupl.cxx.txt](https://github.com/root-project/root/files/12418698/dupl.cxx.txt). Important that canvas should be stored/restored from I/O. Only in such case `ROOT::Detail::HasBeenDeleted` fails,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:269,reliability,fail,fails,269,Here is macro which reproduces the problem with simple histogram/latex drawing. [dupl.cxx.txt](https://github.com/root-project/root/files/12418698/dupl.cxx.txt). Important that canvas should be stored/restored from I/O. Only in such case `ROOT::Detail::HasBeenDeleted` fails,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:48,testability,simpl,simple,48,Here is macro which reproduces the problem with simple histogram/latex drawing. [dupl.cxx.txt](https://github.com/root-project/root/files/12418698/dupl.cxx.txt). Important that canvas should be stored/restored from I/O. Only in such case `ROOT::Detail::HasBeenDeleted` fails,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:48,usability,simpl,simple,48,Here is macro which reproduces the problem with simple histogram/latex drawing. [dupl.cxx.txt](https://github.com/root-project/root/files/12418698/dupl.cxx.txt). Important that canvas should be stored/restored from I/O. Only in such case `ROOT::Detail::HasBeenDeleted` fails,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:41,availability,restor,restored,41,"> Important that canvas should be stored/restored from I/O. That might actually indicated that there is (also) a problem in the I/O. Does it also fail if you store/restore from a ROOT file (instead of a JSON file)? And indeed. With some instrumentation, `Clear` see this the first time:. ```. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. TList::Clear for 0x5da71f0 see 0x5debc10 live must clean up. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. ```. and this after the I/O:. ```. TList::Clear for 0x5ff4e20 see 0x5fef530 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 live. TList::Clear for 0x5ff4e20 see 0x5ff5940 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 deleted. ```. Where the lack of 'MustClean' in leading to the second one not being cleaned-up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:164,availability,restor,restore,164,"> Important that canvas should be stored/restored from I/O. That might actually indicated that there is (also) a problem in the I/O. Does it also fail if you store/restore from a ROOT file (instead of a JSON file)? And indeed. With some instrumentation, `Clear` see this the first time:. ```. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. TList::Clear for 0x5da71f0 see 0x5debc10 live must clean up. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. ```. and this after the I/O:. ```. TList::Clear for 0x5ff4e20 see 0x5fef530 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 live. TList::Clear for 0x5ff4e20 see 0x5ff5940 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 deleted. ```. Where the lack of 'MustClean' in leading to the second one not being cleaned-up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:146,deployability,fail,fail,146,"> Important that canvas should be stored/restored from I/O. That might actually indicated that there is (also) a problem in the I/O. Does it also fail if you store/restore from a ROOT file (instead of a JSON file)? And indeed. With some instrumentation, `Clear` see this the first time:. ```. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. TList::Clear for 0x5da71f0 see 0x5debc10 live must clean up. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. ```. and this after the I/O:. ```. TList::Clear for 0x5ff4e20 see 0x5fef530 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 live. TList::Clear for 0x5ff4e20 see 0x5ff5940 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 deleted. ```. Where the lack of 'MustClean' in leading to the second one not being cleaned-up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:55,performance,I/O,I/O,55,"> Important that canvas should be stored/restored from I/O. That might actually indicated that there is (also) a problem in the I/O. Does it also fail if you store/restore from a ROOT file (instead of a JSON file)? And indeed. With some instrumentation, `Clear` see this the first time:. ```. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. TList::Clear for 0x5da71f0 see 0x5debc10 live must clean up. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. ```. and this after the I/O:. ```. TList::Clear for 0x5ff4e20 see 0x5fef530 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 live. TList::Clear for 0x5ff4e20 see 0x5ff5940 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 deleted. ```. Where the lack of 'MustClean' in leading to the second one not being cleaned-up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:128,performance,I/O,I/O,128,"> Important that canvas should be stored/restored from I/O. That might actually indicated that there is (also) a problem in the I/O. Does it also fail if you store/restore from a ROOT file (instead of a JSON file)? And indeed. With some instrumentation, `Clear` see this the first time:. ```. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. TList::Clear for 0x5da71f0 see 0x5debc10 live must clean up. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. ```. and this after the I/O:. ```. TList::Clear for 0x5ff4e20 see 0x5fef530 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 live. TList::Clear for 0x5ff4e20 see 0x5ff5940 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 deleted. ```. Where the lack of 'MustClean' in leading to the second one not being cleaned-up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:281,performance,time,time,281,"> Important that canvas should be stored/restored from I/O. That might actually indicated that there is (also) a problem in the I/O. Does it also fail if you store/restore from a ROOT file (instead of a JSON file)? And indeed. With some instrumentation, `Clear` see this the first time:. ```. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. TList::Clear for 0x5da71f0 see 0x5debc10 live must clean up. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. ```. and this after the I/O:. ```. TList::Clear for 0x5ff4e20 see 0x5fef530 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 live. TList::Clear for 0x5ff4e20 see 0x5ff5940 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 deleted. ```. Where the lack of 'MustClean' in leading to the second one not being cleaned-up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:500,performance,I/O,I/O,500,"> Important that canvas should be stored/restored from I/O. That might actually indicated that there is (also) a problem in the I/O. Does it also fail if you store/restore from a ROOT file (instead of a JSON file)? And indeed. With some instrumentation, `Clear` see this the first time:. ```. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. TList::Clear for 0x5da71f0 see 0x5debc10 live must clean up. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. ```. and this after the I/O:. ```. TList::Clear for 0x5ff4e20 see 0x5fef530 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 live. TList::Clear for 0x5ff4e20 see 0x5ff5940 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 deleted. ```. Where the lack of 'MustClean' in leading to the second one not being cleaned-up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:41,reliability,restor,restored,41,"> Important that canvas should be stored/restored from I/O. That might actually indicated that there is (also) a problem in the I/O. Does it also fail if you store/restore from a ROOT file (instead of a JSON file)? And indeed. With some instrumentation, `Clear` see this the first time:. ```. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. TList::Clear for 0x5da71f0 see 0x5debc10 live must clean up. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. ```. and this after the I/O:. ```. TList::Clear for 0x5ff4e20 see 0x5fef530 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 live. TList::Clear for 0x5ff4e20 see 0x5ff5940 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 deleted. ```. Where the lack of 'MustClean' in leading to the second one not being cleaned-up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:133,reliability,Doe,Does,133,"> Important that canvas should be stored/restored from I/O. That might actually indicated that there is (also) a problem in the I/O. Does it also fail if you store/restore from a ROOT file (instead of a JSON file)? And indeed. With some instrumentation, `Clear` see this the first time:. ```. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. TList::Clear for 0x5da71f0 see 0x5debc10 live must clean up. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. ```. and this after the I/O:. ```. TList::Clear for 0x5ff4e20 see 0x5fef530 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 live. TList::Clear for 0x5ff4e20 see 0x5ff5940 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 deleted. ```. Where the lack of 'MustClean' in leading to the second one not being cleaned-up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:146,reliability,fail,fail,146,"> Important that canvas should be stored/restored from I/O. That might actually indicated that there is (also) a problem in the I/O. Does it also fail if you store/restore from a ROOT file (instead of a JSON file)? And indeed. With some instrumentation, `Clear` see this the first time:. ```. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. TList::Clear for 0x5da71f0 see 0x5debc10 live must clean up. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. ```. and this after the I/O:. ```. TList::Clear for 0x5ff4e20 see 0x5fef530 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 live. TList::Clear for 0x5ff4e20 see 0x5ff5940 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 deleted. ```. Where the lack of 'MustClean' in leading to the second one not being cleaned-up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:164,reliability,restor,restore,164,"> Important that canvas should be stored/restored from I/O. That might actually indicated that there is (also) a problem in the I/O. Does it also fail if you store/restore from a ROOT file (instead of a JSON file)? And indeed. With some instrumentation, `Clear` see this the first time:. ```. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. TList::Clear for 0x5da71f0 see 0x5debc10 live must clean up. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. ```. and this after the I/O:. ```. TList::Clear for 0x5ff4e20 see 0x5fef530 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 live. TList::Clear for 0x5ff4e20 see 0x5ff5940 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 deleted. ```. Where the lack of 'MustClean' in leading to the second one not being cleaned-up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:237,testability,instrument,instrumentation,237,"> Important that canvas should be stored/restored from I/O. That might actually indicated that there is (also) a problem in the I/O. Does it also fail if you store/restore from a ROOT file (instead of a JSON file)? And indeed. With some instrumentation, `Clear` see this the first time:. ```. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. TList::Clear for 0x5da71f0 see 0x5debc10 live must clean up. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. ```. and this after the I/O:. ```. TList::Clear for 0x5ff4e20 see 0x5fef530 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 live. TList::Clear for 0x5ff4e20 see 0x5ff5940 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 deleted. ```. Where the lack of 'MustClean' in leading to the second one not being cleaned-up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:80,usability,indicat,indicated,80,"> Important that canvas should be stored/restored from I/O. That might actually indicated that there is (also) a problem in the I/O. Does it also fail if you store/restore from a ROOT file (instead of a JSON file)? And indeed. With some instrumentation, `Clear` see this the first time:. ```. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. TList::Clear for 0x5da71f0 see 0x5debc10 live must clean up. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. ```. and this after the I/O:. ```. TList::Clear for 0x5ff4e20 see 0x5fef530 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 live. TList::Clear for 0x5ff4e20 see 0x5ff5940 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 deleted. ```. Where the lack of 'MustClean' in leading to the second one not being cleaned-up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:255,usability,Clear,Clear,255,"> Important that canvas should be stored/restored from I/O. That might actually indicated that there is (also) a problem in the I/O. Does it also fail if you store/restore from a ROOT file (instead of a JSON file)? And indeed. With some instrumentation, `Clear` see this the first time:. ```. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. TList::Clear for 0x5da71f0 see 0x5debc10 live must clean up. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. ```. and this after the I/O:. ```. TList::Clear for 0x5ff4e20 see 0x5fef530 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 live. TList::Clear for 0x5ff4e20 see 0x5ff5940 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 deleted. ```. Where the lack of 'MustClean' in leading to the second one not being cleaned-up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:300,usability,Clear,Clear,300,"> Important that canvas should be stored/restored from I/O. That might actually indicated that there is (also) a problem in the I/O. Does it also fail if you store/restore from a ROOT file (instead of a JSON file)? And indeed. With some instrumentation, `Clear` see this the first time:. ```. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. TList::Clear for 0x5da71f0 see 0x5debc10 live must clean up. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. ```. and this after the I/O:. ```. TList::Clear for 0x5ff4e20 see 0x5fef530 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 live. TList::Clear for 0x5ff4e20 see 0x5ff5940 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 deleted. ```. Where the lack of 'MustClean' in leading to the second one not being cleaned-up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:361,usability,Clear,Clear,361,"> Important that canvas should be stored/restored from I/O. That might actually indicated that there is (also) a problem in the I/O. Does it also fail if you store/restore from a ROOT file (instead of a JSON file)? And indeed. With some instrumentation, `Clear` see this the first time:. ```. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. TList::Clear for 0x5da71f0 see 0x5debc10 live must clean up. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. ```. and this after the I/O:. ```. TList::Clear for 0x5ff4e20 see 0x5fef530 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 live. TList::Clear for 0x5ff4e20 see 0x5ff5940 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 deleted. ```. Where the lack of 'MustClean' in leading to the second one not being cleaned-up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:422,usability,Clear,Clear,422,"> Important that canvas should be stored/restored from I/O. That might actually indicated that there is (also) a problem in the I/O. Does it also fail if you store/restore from a ROOT file (instead of a JSON file)? And indeed. With some instrumentation, `Clear` see this the first time:. ```. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. TList::Clear for 0x5da71f0 see 0x5debc10 live must clean up. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. ```. and this after the I/O:. ```. TList::Clear for 0x5ff4e20 see 0x5fef530 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 live. TList::Clear for 0x5ff4e20 see 0x5ff5940 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 deleted. ```. Where the lack of 'MustClean' in leading to the second one not being cleaned-up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:518,usability,Clear,Clear,518,"> Important that canvas should be stored/restored from I/O. That might actually indicated that there is (also) a problem in the I/O. Does it also fail if you store/restore from a ROOT file (instead of a JSON file)? And indeed. With some instrumentation, `Clear` see this the first time:. ```. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. TList::Clear for 0x5da71f0 see 0x5debc10 live must clean up. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. ```. and this after the I/O:. ```. TList::Clear for 0x5ff4e20 see 0x5fef530 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 live. TList::Clear for 0x5ff4e20 see 0x5ff5940 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 deleted. ```. Where the lack of 'MustClean' in leading to the second one not being cleaned-up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:579,usability,Clear,Clear,579,"> Important that canvas should be stored/restored from I/O. That might actually indicated that there is (also) a problem in the I/O. Does it also fail if you store/restore from a ROOT file (instead of a JSON file)? And indeed. With some instrumentation, `Clear` see this the first time:. ```. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. TList::Clear for 0x5da71f0 see 0x5debc10 live must clean up. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. ```. and this after the I/O:. ```. TList::Clear for 0x5ff4e20 see 0x5fef530 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 live. TList::Clear for 0x5ff4e20 see 0x5ff5940 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 deleted. ```. Where the lack of 'MustClean' in leading to the second one not being cleaned-up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:626,usability,Clear,Clear,626,"> Important that canvas should be stored/restored from I/O. That might actually indicated that there is (also) a problem in the I/O. Does it also fail if you store/restore from a ROOT file (instead of a JSON file)? And indeed. With some instrumentation, `Clear` see this the first time:. ```. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. TList::Clear for 0x5da71f0 see 0x5debc10 live must clean up. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. ```. and this after the I/O:. ```. TList::Clear for 0x5ff4e20 see 0x5fef530 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 live. TList::Clear for 0x5ff4e20 see 0x5ff5940 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 deleted. ```. Where the lack of 'MustClean' in leading to the second one not being cleaned-up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:687,usability,Clear,Clear,687,"> Important that canvas should be stored/restored from I/O. That might actually indicated that there is (also) a problem in the I/O. Does it also fail if you store/restore from a ROOT file (instead of a JSON file)? And indeed. With some instrumentation, `Clear` see this the first time:. ```. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. TList::Clear for 0x5da71f0 see 0x5debc10 live must clean up. TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up. ```. and this after the I/O:. ```. TList::Clear for 0x5ff4e20 see 0x5fef530 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 live. TList::Clear for 0x5ff4e20 see 0x5ff5940 live must clean up. TList::Clear for 0x5ff4e20 see 0x5ff4e90 deleted. ```. Where the lack of 'MustClean' in leading to the second one not being cleaned-up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:39,reliability,doe,does,39,"And indeed, it is `TH1::Streamer` that does this change explicitly. Now checking why.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:24,deployability,patch,patch,24,"@linev I find that this patch solves the problem (at least in the reduced case):. ```. diff --git a/graf2d/gpad/src/TPad.cxx b/graf2d/gpad/src/TPad.cxx. index a63d3bb12d..7b60d75ae1 100644. --- a/graf2d/gpad/src/TPad.cxx. +++ b/graf2d/gpad/src/TPad.cxx. @@ -6585,6 +6585,9 @@ void TPad::Streamer(TBuffer &b). //is deleted all objects in the pad are deleted too. TIter next(fPrimitives);. while ((obj = next())) {. + // `TH1`'s Streamer clean the kMustCleanup flag and so. + // we need it to put it back (see also `TObject::AppendPad`). + obj->SetBit(kMustCleanup);. obj->SetBit(kCanDelete);. }. . ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:66,energy efficiency,reduc,reduced,66,"@linev I find that this patch solves the problem (at least in the reduced case):. ```. diff --git a/graf2d/gpad/src/TPad.cxx b/graf2d/gpad/src/TPad.cxx. index a63d3bb12d..7b60d75ae1 100644. --- a/graf2d/gpad/src/TPad.cxx. +++ b/graf2d/gpad/src/TPad.cxx. @@ -6585,6 +6585,9 @@ void TPad::Streamer(TBuffer &b). //is deleted all objects in the pad are deleted too. TIter next(fPrimitives);. while ((obj = next())) {. + // `TH1`'s Streamer clean the kMustCleanup flag and so. + // we need it to put it back (see also `TObject::AppendPad`). + obj->SetBit(kMustCleanup);. obj->SetBit(kCanDelete);. }. . ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:24,safety,patch,patch,24,"@linev I find that this patch solves the problem (at least in the reduced case):. ```. diff --git a/graf2d/gpad/src/TPad.cxx b/graf2d/gpad/src/TPad.cxx. index a63d3bb12d..7b60d75ae1 100644. --- a/graf2d/gpad/src/TPad.cxx. +++ b/graf2d/gpad/src/TPad.cxx. @@ -6585,6 +6585,9 @@ void TPad::Streamer(TBuffer &b). //is deleted all objects in the pad are deleted too. TIter next(fPrimitives);. while ((obj = next())) {. + // `TH1`'s Streamer clean the kMustCleanup flag and so. + // we need it to put it back (see also `TObject::AppendPad`). + obj->SetBit(kMustCleanup);. obj->SetBit(kCanDelete);. }. . ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:24,security,patch,patch,24,"@linev I find that this patch solves the problem (at least in the reduced case):. ```. diff --git a/graf2d/gpad/src/TPad.cxx b/graf2d/gpad/src/TPad.cxx. index a63d3bb12d..7b60d75ae1 100644. --- a/graf2d/gpad/src/TPad.cxx. +++ b/graf2d/gpad/src/TPad.cxx. @@ -6585,6 +6585,9 @@ void TPad::Streamer(TBuffer &b). //is deleted all objects in the pad are deleted too. TIter next(fPrimitives);. while ((obj = next())) {. + // `TH1`'s Streamer clean the kMustCleanup flag and so. + // we need it to put it back (see also `TObject::AppendPad`). + obj->SetBit(kMustCleanup);. obj->SetBit(kCanDelete);. }. . ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:19,deployability,patch,patch,19,"> I find that this patch solves the problem (at least in the reduced case):. Yes, this change solves the problem with original file with many RooFit canvases. It looks logical. I hope, it does not have other side effects. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:168,deployability,log,logical,168,"> I find that this patch solves the problem (at least in the reduced case):. Yes, this change solves the problem with original file with many RooFit canvases. It looks logical. I hope, it does not have other side effects. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:61,energy efficiency,reduc,reduced,61,"> I find that this patch solves the problem (at least in the reduced case):. Yes, this change solves the problem with original file with many RooFit canvases. It looks logical. I hope, it does not have other side effects. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:188,reliability,doe,does,188,"> I find that this patch solves the problem (at least in the reduced case):. Yes, this change solves the problem with original file with many RooFit canvases. It looks logical. I hope, it does not have other side effects. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:19,safety,patch,patch,19,"> I find that this patch solves the problem (at least in the reduced case):. Yes, this change solves the problem with original file with many RooFit canvases. It looks logical. I hope, it does not have other side effects. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:168,safety,log,logical,168,"> I find that this patch solves the problem (at least in the reduced case):. Yes, this change solves the problem with original file with many RooFit canvases. It looks logical. I hope, it does not have other side effects. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:19,security,patch,patch,19,"> I find that this patch solves the problem (at least in the reduced case):. Yes, this change solves the problem with original file with many RooFit canvases. It looks logical. I hope, it does not have other side effects. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:168,security,log,logical,168,"> I find that this patch solves the problem (at least in the reduced case):. Yes, this change solves the problem with original file with many RooFit canvases. It looks logical. I hope, it does not have other side effects. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:168,testability,log,logical,168,"> I find that this patch solves the problem (at least in the reduced case):. Yes, this change solves the problem with original file with many RooFit canvases. It looks logical. I hope, it does not have other side effects. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13508:17,deployability,build,build,17,"FYI, the windows build failed because the node was out of disk space. This is now fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13508
https://github.com/root-project/root/pull/13508:23,deployability,fail,failed,23,"FYI, the windows build failed because the node was out of disk space. This is now fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13508
https://github.com/root-project/root/pull/13508:58,performance,disk,disk,58,"FYI, the windows build failed because the node was out of disk space. This is now fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13508
https://github.com/root-project/root/pull/13508:23,reliability,fail,failed,23,"FYI, the windows build failed because the node was out of disk space. This is now fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13508
https://github.com/root-project/root/pull/13508:6,interoperability,conflict,conflicts,6,Fixed conflicts,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13508
https://github.com/root-project/root/issues/13511:50,availability,error,error,50,"> the TApplication works but the TMapFile got the error message. That is the 'correct' behavior, `libNew` is indeed required for `TMapFile`. > Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. . Can you copy/paste the entire output in that case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:200,availability,error,error,200,"> the TApplication works but the TMapFile got the error message. That is the 'correct' behavior, `libNew` is indeed required for `TMapFile`. > Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. . Can you copy/paste the entire output in that case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:230,availability,fault,fault,230,"> the TApplication works but the TMapFile got the error message. That is the 'correct' behavior, `libNew` is indeed required for `TMapFile`. > Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. . Can you copy/paste the entire output in that case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:230,energy efficiency,fault,fault,230,"> the TApplication works but the TMapFile got the error message. That is the 'correct' behavior, `libNew` is indeed required for `TMapFile`. > Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. . Can you copy/paste the entire output in that case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:56,integrability,messag,message,56,"> the TApplication works but the TMapFile got the error message. That is the 'correct' behavior, `libNew` is indeed required for `TMapFile`. > Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. . Can you copy/paste the entire output in that case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:206,integrability,messag,message,206,"> the TApplication works but the TMapFile got the error message. That is the 'correct' behavior, `libNew` is indeed required for `TMapFile`. > Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. . Can you copy/paste the entire output in that case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:56,interoperability,messag,message,56,"> the TApplication works but the TMapFile got the error message. That is the 'correct' behavior, `libNew` is indeed required for `TMapFile`. > Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. . Can you copy/paste the entire output in that case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:206,interoperability,messag,message,206,"> the TApplication works but the TMapFile got the error message. That is the 'correct' behavior, `libNew` is indeed required for `TMapFile`. > Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. . Can you copy/paste the entire output in that case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:50,performance,error,error,50,"> the TApplication works but the TMapFile got the error message. That is the 'correct' behavior, `libNew` is indeed required for `TMapFile`. > Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. . Can you copy/paste the entire output in that case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:200,performance,error,error,200,"> the TApplication works but the TMapFile got the error message. That is the 'correct' behavior, `libNew` is indeed required for `TMapFile`. > Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. . Can you copy/paste the entire output in that case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:230,performance,fault,fault,230,"> the TApplication works but the TMapFile got the error message. That is the 'correct' behavior, `libNew` is indeed required for `TMapFile`. > Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. . Can you copy/paste the entire output in that case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:182,reliability,doe,doesn,182,"> the TApplication works but the TMapFile got the error message. That is the 'correct' behavior, `libNew` is indeed required for `TMapFile`. > Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. . Can you copy/paste the entire output in that case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:230,reliability,fault,fault,230,"> the TApplication works but the TMapFile got the error message. That is the 'correct' behavior, `libNew` is indeed required for `TMapFile`. > Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. . Can you copy/paste the entire output in that case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:50,safety,error,error,50,"> the TApplication works but the TMapFile got the error message. That is the 'correct' behavior, `libNew` is indeed required for `TMapFile`. > Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. . Can you copy/paste the entire output in that case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:200,safety,error,error,200,"> the TApplication works but the TMapFile got the error message. That is the 'correct' behavior, `libNew` is indeed required for `TMapFile`. > Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. . Can you copy/paste the entire output in that case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:230,safety,fault,fault,230,"> the TApplication works but the TMapFile got the error message. That is the 'correct' behavior, `libNew` is indeed required for `TMapFile`. > Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. . Can you copy/paste the entire output in that case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:50,usability,error,error,50,"> the TApplication works but the TMapFile got the error message. That is the 'correct' behavior, `libNew` is indeed required for `TMapFile`. > Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. . Can you copy/paste the entire output in that case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:87,usability,behavi,behavior,87,"> the TApplication works but the TMapFile got the error message. That is the 'correct' behavior, `libNew` is indeed required for `TMapFile`. > Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. . Can you copy/paste the entire output in that case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:200,usability,error,error,200,"> the TApplication works but the TMapFile got the error message. That is the 'correct' behavior, `libNew` is indeed required for `TMapFile`. > Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. . Can you copy/paste the entire output in that case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:677,deployability,stack,stack,677,"With ROOT 6.12.06 on Ubuntu 20.04.2 LTS, the output of running ./hisprod is as following,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisprod . Memory mapped file: hsimple.map. Title: Demo memory mapped file with histograms. Option: CREATE. Mapped Memory region: 0x7fad65114000 - 0x7fad65209000 (0.96 MB). Current breakval: 0x7fad6511f000. Object Class Size . hpx TH1F 1024 . hpxpy TH2F 8971 . hprof TProfile 8584 . ```. The output of running ./hisplot in another terminal is listed below,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisplot . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f7e7ce9fc3a in __GI___wait4 (pid=6666, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f7e7ce9fbfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0) at waitpid.c:38. #2 0x00007f7e7ce0ef67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f7e7dcd1ff5 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2118. #4 TUnixSystem::StackTrace (this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2412. #5 0x00007f7e7dccf2dc in TUnixSystem::DispatchSignals (this=0x5573d91fe848, sig=kSigSegmentationViolation) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:3643. #6 <signal handler called>. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/sr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1366,deployability,Stack,StackTrace,1366," . hpxpy TH2F 8971 . hprof TProfile 8584 . ```. The output of running ./hisplot in another terminal is listed below,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisplot . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f7e7ce9fc3a in __GI___wait4 (pid=6666, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f7e7ce9fbfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0) at waitpid.c:38. #2 0x00007f7e7ce0ef67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f7e7dcd1ff5 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2118. #4 TUnixSystem::StackTrace (this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2412. #5 0x00007f7e7dccf2dc in TUnixSystem::DispatchSignals (this=0x5573d91fe848, sig=kSigSegmentationViolation) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:3643. #6 <signal handler called>. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2349,deployability,build,build,2349," TUnixSystem::StackTrace (this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2412. #5 0x00007f7e7dccf2dc in TUnixSystem::DispatchSignals (this=0x5573d91fe848, sig=kSigSegmentationViolation) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:3643. #6 <signal handler called>. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplicati",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2541,deployability,build,build,2541,"8, sig=kSigSegmentationViolation) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:3643. #6 <signal handler called>. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2713,deployability,build,build,2713,":Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2852,deployability,build,build,2852,"m::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ====",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2997,deployability,build,build,2997,"c/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3150,deployability,build,build,3150,"acling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Plea",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4172,deployability,stack,stack,4172,"ger.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5013,deployability,build,build,5013,"//root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplicati",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5205,deployability,build,build,5205,"ment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5377,deployability,build,build,5377,":Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5516,deployability,build,build,5516,"m::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ====",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5661,deployability,build,build,5661,"me/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ===========================================================. huagen@ikp191:~/Codes/root_debug$ . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5814,deployability,build,build,5814,"me/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ===========================================================. huagen@ikp191:~/Codes/root_debug$ . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:304,energy efficiency,Current,Current,304,"With ROOT 6.12.06 on Ubuntu 20.04.2 LTS, the output of running ./hisprod is as following,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisprod . Memory mapped file: hsimple.map. Title: Demo memory mapped file with histograms. Option: CREATE. Mapped Memory region: 0x7fad65114000 - 0x7fad65209000 (0.96 MB). Current breakval: 0x7fad6511f000. Object Class Size . hpx TH1F 1024 . hpxpy TH2F 8971 . hprof TProfile 8584 . ```. The output of running ./hisplot in another terminal is listed below,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisplot . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f7e7ce9fc3a in __GI___wait4 (pid=6666, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f7e7ce9fbfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0) at waitpid.c:38. #2 0x00007f7e7ce0ef67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f7e7dcd1ff5 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2118. #4 TUnixSystem::StackTrace (this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2412. #5 0x00007f7e7dccf2dc in TUnixSystem::DispatchSignals (this=0x5573d91fe848, sig=kSigSegmentationViolation) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:3643. #6 <signal handler called>. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/sr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:995,energy efficiency,optim,optimized,995,"With ROOT 6.12.06 on Ubuntu 20.04.2 LTS, the output of running ./hisprod is as following,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisprod . Memory mapped file: hsimple.map. Title: Demo memory mapped file with histograms. Option: CREATE. Mapped Memory region: 0x7fad65114000 - 0x7fad65209000 (0.96 MB). Current breakval: 0x7fad6511f000. Object Class Size . hpx TH1F 1024 . hpxpy TH2F 8971 . hprof TProfile 8584 . ```. The output of running ./hisplot in another terminal is listed below,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisplot . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f7e7ce9fc3a in __GI___wait4 (pid=6666, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f7e7ce9fbfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0) at waitpid.c:38. #2 0x00007f7e7ce0ef67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f7e7dcd1ff5 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2118. #4 TUnixSystem::StackTrace (this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2412. #5 0x00007f7e7dccf2dc in TUnixSystem::DispatchSignals (this=0x5573d91fe848, sig=kSigSegmentationViolation) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:3643. #6 <signal handler called>. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/sr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1137,energy efficiency,optim,optimized,1137,"Memory mapped file: hsimple.map. Title: Demo memory mapped file with histograms. Option: CREATE. Mapped Memory region: 0x7fad65114000 - 0x7fad65209000 (0.96 MB). Current breakval: 0x7fad6511f000. Object Class Size . hpx TH1F 1024 . hpxpy TH2F 8971 . hprof TProfile 8584 . ```. The output of running ./hisplot in another terminal is listed below,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisplot . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f7e7ce9fc3a in __GI___wait4 (pid=6666, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f7e7ce9fbfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0) at waitpid.c:38. #2 0x00007f7e7ce0ef67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f7e7dcd1ff5 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2118. #4 TUnixSystem::StackTrace (this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2412. #5 0x00007f7e7dccf2dc in TUnixSystem::DispatchSignals (this=0x5573d91fe848, sig=kSigSegmentationViolation) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:3643. #6 <signal handler called>. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/sour",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1241,energy efficiency,optim,optimized,1241,"Memory region: 0x7fad65114000 - 0x7fad65209000 (0.96 MB). Current breakval: 0x7fad6511f000. Object Class Size . hpx TH1F 1024 . hpxpy TH2F 8971 . hprof TProfile 8584 . ```. The output of running ./hisplot in another terminal is listed below,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisplot . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f7e7ce9fc3a in __GI___wait4 (pid=6666, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f7e7ce9fbfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0) at waitpid.c:38. #2 0x00007f7e7ce0ef67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f7e7dcd1ff5 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2118. #4 TUnixSystem::StackTrace (this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2412. #5 0x00007f7e7dccf2dc in TUnixSystem::DispatchSignals (this=0x5573d91fe848, sig=kSigSegmentationViolation) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:3643. #6 <signal handler called>. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1314,energy efficiency,core,core,1314,"kval: 0x7fad6511f000. Object Class Size . hpx TH1F 1024 . hpxpy TH2F 8971 . hprof TProfile 8584 . ```. The output of running ./hisplot in another terminal is listed below,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisplot . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f7e7ce9fc3a in __GI___wait4 (pid=6666, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f7e7ce9fbfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0) at waitpid.c:38. #2 0x00007f7e7ce0ef67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f7e7dcd1ff5 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2118. #4 TUnixSystem::StackTrace (this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2412. #5 0x00007f7e7dccf2dc in TUnixSystem::DispatchSignals (this=0x5573d91fe848, sig=kSigSegmentationViolation) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:3643. #6 <signal handler called>. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1435,energy efficiency,core,core,1435,"ing ./hisplot in another terminal is listed below,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisplot . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f7e7ce9fc3a in __GI___wait4 (pid=6666, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f7e7ce9fbfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0) at waitpid.c:38. #2 0x00007f7e7ce0ef67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f7e7dcd1ff5 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2118. #4 TUnixSystem::StackTrace (this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2412. #5 0x00007f7e7dccf2dc in TUnixSystem::DispatchSignals (this=0x5573d91fe848, sig=kSigSegmentationViolation) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:3643. #6 <signal handler called>. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, cha",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1614,energy efficiency,core,core,1614,"=====================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f7e7ce9fc3a in __GI___wait4 (pid=6666, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f7e7ce9fbfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0) at waitpid.c:38. #2 0x00007f7e7ce0ef67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f7e7dcd1ff5 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2118. #4 TUnixSystem::StackTrace (this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2412. #5 0x00007f7e7dccf2dc in TUnixSystem::DispatchSignals (this=0x5573d91fe848, sig=kSigSegmentationViolation) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:3643. #6 <signal handler called>. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2145,energy efficiency,core,core,2145,"out>) at ../sysdeps/posix/system.c:172. #3 0x00007f7e7dcd1ff5 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2118. #4 TUnixSystem::StackTrace (this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2412. #5 0x00007f7e7dccf2dc in TUnixSystem::DispatchSignals (this=0x5573d91fe848, sig=kSigSegmentationViolation) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:3643. #6 <signal handler called>. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2454,energy efficiency,optim,optimized,2454,"m.cxx:2412. #5 0x00007f7e7dccf2dc in TUnixSystem::DispatchSignals (this=0x5573d91fe848, sig=kSigSegmentationViolation) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:3643. #6 <signal handler called>. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2807,energy efficiency,optim,optimized,2807,"clude/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3204,energy efficiency,Load,LoadGraphicsLibs,3204,"in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3228,energy efficiency,optim,optimized,3228,"Func_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anyth",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3280,energy efficiency,core,core,3280,"=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3433,energy efficiency,core,core,3433,"har const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3564,energy efficiency,core,core,3564,"r.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3780,energy efficiency,core,core,3780,"st*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4809,energy efficiency,core,core,4809,"194. #20 0x00005573d8bb2cb6 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5118,energy efficiency,optim,optimized,5118,"http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5471,energy efficiency,optim,optimized,5471,"clude/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5868,energy efficiency,Load,LoadGraphicsLibs,5868,"me/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ===========================================================. huagen@ikp191:~/Codes/root_debug$ . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5892,energy efficiency,optim,optimized,5892,"me/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ===========================================================. huagen@ikp191:~/Codes/root_debug$ . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5944,energy efficiency,core,core,5944,"me/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ===========================================================. huagen@ikp191:~/Codes/root_debug$ . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:6097,energy efficiency,core,core,6097,"me/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ===========================================================. huagen@ikp191:~/Codes/root_debug$ . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:6228,energy efficiency,core,core,6228,"me/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ===========================================================. huagen@ikp191:~/Codes/root_debug$ . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:6444,energy efficiency,core,core,6444,"me/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ===========================================================. huagen@ikp191:~/Codes/root_debug$ . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4103,integrability,sub,submit,4103,"x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char con",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:142,performance,Memor,Memory,142,"With ROOT 6.12.06 on Ubuntu 20.04.2 LTS, the output of running ./hisprod is as following,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisprod . Memory mapped file: hsimple.map. Title: Demo memory mapped file with histograms. Option: CREATE. Mapped Memory region: 0x7fad65114000 - 0x7fad65209000 (0.96 MB). Current breakval: 0x7fad6511f000. Object Class Size . hpx TH1F 1024 . hpxpy TH2F 8971 . hprof TProfile 8584 . ```. The output of running ./hisplot in another terminal is listed below,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisplot . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f7e7ce9fc3a in __GI___wait4 (pid=6666, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f7e7ce9fbfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0) at waitpid.c:38. #2 0x00007f7e7ce0ef67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f7e7dcd1ff5 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2118. #4 TUnixSystem::StackTrace (this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2412. #5 0x00007f7e7dccf2dc in TUnixSystem::DispatchSignals (this=0x5573d91fe848, sig=kSigSegmentationViolation) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:3643. #6 <signal handler called>. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/sr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:187,performance,memor,memory,187,"With ROOT 6.12.06 on Ubuntu 20.04.2 LTS, the output of running ./hisprod is as following,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisprod . Memory mapped file: hsimple.map. Title: Demo memory mapped file with histograms. Option: CREATE. Mapped Memory region: 0x7fad65114000 - 0x7fad65209000 (0.96 MB). Current breakval: 0x7fad6511f000. Object Class Size . hpx TH1F 1024 . hpxpy TH2F 8971 . hprof TProfile 8584 . ```. The output of running ./hisplot in another terminal is listed below,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisplot . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f7e7ce9fc3a in __GI___wait4 (pid=6666, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f7e7ce9fbfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0) at waitpid.c:38. #2 0x00007f7e7ce0ef67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f7e7dcd1ff5 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2118. #4 TUnixSystem::StackTrace (this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2412. #5 0x00007f7e7dccf2dc in TUnixSystem::DispatchSignals (this=0x5573d91fe848, sig=kSigSegmentationViolation) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:3643. #6 <signal handler called>. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/sr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:246,performance,Memor,Memory,246,"With ROOT 6.12.06 on Ubuntu 20.04.2 LTS, the output of running ./hisprod is as following,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisprod . Memory mapped file: hsimple.map. Title: Demo memory mapped file with histograms. Option: CREATE. Mapped Memory region: 0x7fad65114000 - 0x7fad65209000 (0.96 MB). Current breakval: 0x7fad6511f000. Object Class Size . hpx TH1F 1024 . hpxpy TH2F 8971 . hprof TProfile 8584 . ```. The output of running ./hisplot in another terminal is listed below,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisplot . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f7e7ce9fc3a in __GI___wait4 (pid=6666, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f7e7ce9fbfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0) at waitpid.c:38. #2 0x00007f7e7ce0ef67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f7e7dcd1ff5 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2118. #4 TUnixSystem::StackTrace (this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2412. #5 0x00007f7e7dccf2dc in TUnixSystem::DispatchSignals (this=0x5573d91fe848, sig=kSigSegmentationViolation) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:3643. #6 <signal handler called>. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/sr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:995,performance,optimiz,optimized,995,"With ROOT 6.12.06 on Ubuntu 20.04.2 LTS, the output of running ./hisprod is as following,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisprod . Memory mapped file: hsimple.map. Title: Demo memory mapped file with histograms. Option: CREATE. Mapped Memory region: 0x7fad65114000 - 0x7fad65209000 (0.96 MB). Current breakval: 0x7fad6511f000. Object Class Size . hpx TH1F 1024 . hpxpy TH2F 8971 . hprof TProfile 8584 . ```. The output of running ./hisplot in another terminal is listed below,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisplot . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f7e7ce9fc3a in __GI___wait4 (pid=6666, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f7e7ce9fbfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0) at waitpid.c:38. #2 0x00007f7e7ce0ef67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f7e7dcd1ff5 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2118. #4 TUnixSystem::StackTrace (this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2412. #5 0x00007f7e7dccf2dc in TUnixSystem::DispatchSignals (this=0x5573d91fe848, sig=kSigSegmentationViolation) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:3643. #6 <signal handler called>. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/sr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1137,performance,optimiz,optimized,1137,"Memory mapped file: hsimple.map. Title: Demo memory mapped file with histograms. Option: CREATE. Mapped Memory region: 0x7fad65114000 - 0x7fad65209000 (0.96 MB). Current breakval: 0x7fad6511f000. Object Class Size . hpx TH1F 1024 . hpxpy TH2F 8971 . hprof TProfile 8584 . ```. The output of running ./hisplot in another terminal is listed below,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisplot . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f7e7ce9fc3a in __GI___wait4 (pid=6666, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f7e7ce9fbfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0) at waitpid.c:38. #2 0x00007f7e7ce0ef67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f7e7dcd1ff5 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2118. #4 TUnixSystem::StackTrace (this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2412. #5 0x00007f7e7dccf2dc in TUnixSystem::DispatchSignals (this=0x5573d91fe848, sig=kSigSegmentationViolation) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:3643. #6 <signal handler called>. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/sour",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1241,performance,optimiz,optimized,1241,"Memory region: 0x7fad65114000 - 0x7fad65209000 (0.96 MB). Current breakval: 0x7fad6511f000. Object Class Size . hpx TH1F 1024 . hpxpy TH2F 8971 . hprof TProfile 8584 . ```. The output of running ./hisplot in another terminal is listed below,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisplot . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f7e7ce9fc3a in __GI___wait4 (pid=6666, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f7e7ce9fbfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0) at waitpid.c:38. #2 0x00007f7e7ce0ef67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f7e7dcd1ff5 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2118. #4 TUnixSystem::StackTrace (this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2412. #5 0x00007f7e7dccf2dc in TUnixSystem::DispatchSignals (this=0x5573d91fe848, sig=kSigSegmentationViolation) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:3643. #6 <signal handler called>. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2454,performance,optimiz,optimized,2454,"m.cxx:2412. #5 0x00007f7e7dccf2dc in TUnixSystem::DispatchSignals (this=0x5573d91fe848, sig=kSigSegmentationViolation) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:3643. #6 <signal handler called>. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2807,performance,optimiz,optimized,2807,"clude/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3204,performance,Load,LoadGraphicsLibs,3204,"in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3228,performance,optimiz,optimized,3228,"Func_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anyth",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5118,performance,optimiz,optimized,5118,"http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5471,performance,optimiz,optimized,5471,"clude/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5868,performance,Load,LoadGraphicsLibs,5868,"me/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ===========================================================. huagen@ikp191:~/Codes/root_debug$ . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5892,performance,optimiz,optimized,5892,"me/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:355. #13 TMethodCall::SetParams<char const*, char const*> (this=<optimized out>) at /home/huagen/root/6.12.06/build/include/TMethodCall.h:106. #14 TPluginHandler::ExecPluginImpl<char const*, char const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ===========================================================. huagen@ikp191:~/Codes/root_debug$ . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1654,security,sign,signal,1654," This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f7e7ce9fc3a in __GI___wait4 (pid=6666, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f7e7ce9fbfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0) at waitpid.c:38. #2 0x00007f7e7ce0ef67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f7e7dcd1ff5 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2118. #4 TUnixSystem::StackTrace (this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2412. #5 0x00007f7e7dccf2dc in TUnixSystem::DispatchSignals (this=0x5573d91fe848, sig=kSigSegmentationViolation) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:3643. #6 <signal handler called>. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter::CallFunc_SetArguments<char const*, char const*> (func=0x5573da64",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:683,testability,trace,trace,683,"With ROOT 6.12.06 on Ubuntu 20.04.2 LTS, the output of running ./hisprod is as following,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisprod . Memory mapped file: hsimple.map. Title: Demo memory mapped file with histograms. Option: CREATE. Mapped Memory region: 0x7fad65114000 - 0x7fad65209000 (0.96 MB). Current breakval: 0x7fad6511f000. Object Class Size . hpx TH1F 1024 . hpxpy TH2F 8971 . hprof TProfile 8584 . ```. The output of running ./hisplot in another terminal is listed below,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisplot . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f7e7ce9fc3a in __GI___wait4 (pid=6666, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f7e7ce9fbfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0) at waitpid.c:38. #2 0x00007f7e7ce0ef67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f7e7dcd1ff5 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2118. #4 TUnixSystem::StackTrace (this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2412. #5 0x00007f7e7dccf2dc in TUnixSystem::DispatchSignals (this=0x5573d91fe848, sig=kSigSegmentationViolation) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:3643. #6 <signal handler called>. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/sr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4178,testability,trace,trace,4178,"174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /h",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:142,usability,Memor,Memory,142,"With ROOT 6.12.06 on Ubuntu 20.04.2 LTS, the output of running ./hisprod is as following,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisprod . Memory mapped file: hsimple.map. Title: Demo memory mapped file with histograms. Option: CREATE. Mapped Memory region: 0x7fad65114000 - 0x7fad65209000 (0.96 MB). Current breakval: 0x7fad6511f000. Object Class Size . hpx TH1F 1024 . hpxpy TH2F 8971 . hprof TProfile 8584 . ```. The output of running ./hisplot in another terminal is listed below,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisplot . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f7e7ce9fc3a in __GI___wait4 (pid=6666, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f7e7ce9fbfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0) at waitpid.c:38. #2 0x00007f7e7ce0ef67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f7e7dcd1ff5 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2118. #4 TUnixSystem::StackTrace (this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2412. #5 0x00007f7e7dccf2dc in TUnixSystem::DispatchSignals (this=0x5573d91fe848, sig=kSigSegmentationViolation) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:3643. #6 <signal handler called>. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/sr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:187,usability,memor,memory,187,"With ROOT 6.12.06 on Ubuntu 20.04.2 LTS, the output of running ./hisprod is as following,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisprod . Memory mapped file: hsimple.map. Title: Demo memory mapped file with histograms. Option: CREATE. Mapped Memory region: 0x7fad65114000 - 0x7fad65209000 (0.96 MB). Current breakval: 0x7fad6511f000. Object Class Size . hpx TH1F 1024 . hpxpy TH2F 8971 . hprof TProfile 8584 . ```. The output of running ./hisplot in another terminal is listed below,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisplot . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f7e7ce9fc3a in __GI___wait4 (pid=6666, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f7e7ce9fbfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0) at waitpid.c:38. #2 0x00007f7e7ce0ef67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f7e7dcd1ff5 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2118. #4 TUnixSystem::StackTrace (this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2412. #5 0x00007f7e7dccf2dc in TUnixSystem::DispatchSignals (this=0x5573d91fe848, sig=kSigSegmentationViolation) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:3643. #6 <signal handler called>. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/sr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:246,usability,Memor,Memory,246,"With ROOT 6.12.06 on Ubuntu 20.04.2 LTS, the output of running ./hisprod is as following,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisprod . Memory mapped file: hsimple.map. Title: Demo memory mapped file with histograms. Option: CREATE. Mapped Memory region: 0x7fad65114000 - 0x7fad65209000 (0.96 MB). Current breakval: 0x7fad6511f000. Object Class Size . hpx TH1F 1024 . hpxpy TH2F 8971 . hprof TProfile 8584 . ```. The output of running ./hisplot in another terminal is listed below,. ```. huagen@ikp191:~/Codes/root_debug$ ./hisplot . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f7e7ce9fc3a in __GI___wait4 (pid=6666, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f7e7ce9fbfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffedba85938, options=options. entry=0) at waitpid.c:38. #2 0x00007f7e7ce0ef67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f7e7dcd1ff5 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2118. #4 TUnixSystem::StackTrace (this=0x5573d91fe848) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:2412. #5 0x00007f7e7dccf2dc in TUnixSystem::DispatchSignals (this=0x5573d91fe848, sig=kSigSegmentationViolation) at /home/huagen/root/6.12.06/source/core/unix/src/TUnixSystem.cxx:3643. #6 <signal handler called>. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/sr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3934,usability,hint,hint,3934,"r const*> (this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 """,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3978,usability,help,help,3978,"gen/root/6.12.06/build/include/TPluginManager.h:159. #15 TPluginHandler::ExecPlugin<char const*, char const*> (nargs=2, this=0x5573da070668) at /home/huagen/root/6.12.06/build/include/TPluginManager.h:174. #16 TApplication::LoadGraphicsLibs (this=<optimized out>) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4254,usability,help,help,4254,"gen/root/6.12.06/source/core/base/src/TApplication.cxx:680. #17 0x00007f7e7db9c45e in TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:277. #18 TApplication::InitializeGraphics (this=0x5573da058cf8) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:267. #19 0x00007f7e7db9ea79 in TApplication::TApplication (this=0x5573da058cf8, appClassName=0x5573d8bb4309 ""app"", argc=0x0, argv=0x0, numOptions=0) at /home/huagen/root/6.12.06/source/core/base/src/TApplication.cxx:194. #20 0x00005573d8bb2cb6 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f7e798e7375 in cling::Value::Value (other=..., this=0x5573da647f58) at /home/huagen/root/6.12.06/source/interpreter/cling/include/cling/Interpreter/Value.h:175. #8 llvm::SmallVectorTemplateBase<cling::Value, false>::push_back (Elt=..., this=0x5573da647f38) at /home/huagen/root/6.12.06/source/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:221. #9 TClingCallFunc::SetArg (this=0x5573da647f08, param=140732583677033) at /home/huagen/root/6.12.06/source/core/metacling/src/TClingCallFunc.cxx:2254. #10 0x00007f7e7db9ad97 in TInterpreter::CallFunc_SetArg<char> (arg=0x7ffedba88c69 ""X11"", func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:343. #11 TInterpreter::CallFunc_SetArgImpl<char const*, char const*> (head=<optimized out>, func=0x5573da647f08, this=0x5573d927fe38) at /home/huagen/root/6.12.06/build/include/TInterpreter.h:345. #12 TInterpreter:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:35,deployability,contain,contains,35,I noticed that the code you upload contains:. ```. gROOT->Reset();. ```. This call is only valid when used in an unnamed macro. In all other scenario it has the potential of being harmful (undo/reset too many things). Please try again after removing those lines.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:141,modifiability,scenario,scenario,141,I noticed that the code you upload contains:. ```. gROOT->Reset();. ```. This call is only valid when used in an unnamed macro. In all other scenario it has the potential of being harmful (undo/reset too many things). Please try again after removing those lines.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:91,safety,valid,valid,91,I noticed that the code you upload contains:. ```. gROOT->Reset();. ```. This call is only valid when used in an unnamed macro. In all other scenario it has the potential of being harmful (undo/reset too many things). Please try again after removing those lines.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:189,usability,undo,undo,189,I noticed that the code you upload contains:. ```. gROOT->Reset();. ```. This call is only valid when used in an unnamed macro. In all other scenario it has the potential of being harmful (undo/reset too many things). Please try again after removing those lines.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:18,deployability,version,version,18,"In addition on my version of Ubuntu the default linker behavior is to drop library that it deems 'not needed` because there is no explicit symbol requested. `libNew` is such a library. And indeed in my case doing:. ```. ldd ./hisprod | grep libNew. ```. shows nothing. . To fix this I use this line in your Makefile:. ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. And after that it works perfectly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:18,integrability,version,version,18,"In addition on my version of Ubuntu the default linker behavior is to drop library that it deems 'not needed` because there is no explicit symbol requested. `libNew` is such a library. And indeed in my case doing:. ```. ldd ./hisprod | grep libNew. ```. shows nothing. . To fix this I use this line in your Makefile:. ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. And after that it works perfectly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:18,modifiability,version,version,18,"In addition on my version of Ubuntu the default linker behavior is to drop library that it deems 'not needed` because there is no explicit symbol requested. `libNew` is such a library. And indeed in my case doing:. ```. ldd ./hisprod | grep libNew. ```. shows nothing. . To fix this I use this line in your Makefile:. ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. And after that it works perfectly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:55,usability,behavi,behavior,55,"In addition on my version of Ubuntu the default linker behavior is to drop library that it deems 'not needed` because there is no explicit symbol requested. `libNew` is such a library. And indeed in my case doing:. ```. ldd ./hisprod | grep libNew. ```. shows nothing. . To fix this I use this line in your Makefile:. ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. And after that it works perfectly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:83,deployability,updat,update,83,"Many thanks for your effort, I would try your tipps on different Ubuntu system and update to you soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:83,safety,updat,update,83,"Many thanks for your effort, I would try your tipps on different Ubuntu system and update to you soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:83,security,updat,update,83,"Many thanks for your effort, I would try your tipps on different Ubuntu system and update to you soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:46,usability,tip,tipps,46,"Many thanks for your effort, I would try your tipps on different Ubuntu system and update to you soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:720,availability,error,error,720,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1001,availability,error,error,1001,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1118,availability,error,error,1118,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1467,availability,error,error,1467,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1661,availability,error,error,1661,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:166,deployability,version,versions,166,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:286,deployability,fail,failed,286,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:473,deployability,fail,failed,473,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:536,deployability,fail,failed,536,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:599,deployability,fail,failed,599,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:662,deployability,fail,failed,662,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:888,deployability,log,log,888,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1076,deployability,fail,failed,1076,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1354,deployability,log,log,1354,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1542,deployability,fail,failed,1542,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:166,integrability,version,versions,166,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:166,modifiability,version,versions,166,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:720,performance,error,error,720,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1001,performance,error,error,1001,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1118,performance,error,error,1118,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1467,performance,error,error,1467,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1661,performance,error,error,1661,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:286,reliability,fail,failed,286,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:473,reliability,fail,failed,473,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:536,reliability,fail,failed,536,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:599,reliability,fail,failed,599,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:662,reliability,fail,failed,662,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1076,reliability,fail,failed,1076,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1542,reliability,fail,failed,1542,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:720,safety,error,error,720,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:888,safety,log,log,888,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1001,safety,error,error,1001,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1118,safety,error,error,1118,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1354,safety,log,log,1354,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1467,safety,error,error,1467,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1661,safety,error,error,1661,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:888,security,log,log,888,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1354,security,log,log,1354,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:888,testability,log,log,888,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1354,testability,log,log,1354,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:720,usability,error,error,720,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1001,usability,error,error,1001,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1027,usability,statu,status,1027,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1118,usability,error,error,1118,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1467,usability,error,error,1467,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1493,usability,statu,status,1493,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1661,usability,error,error,1661,"Compiling the codes with . ```. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. ```. ( gRoot->Reset() was removed). The results of the OS and Root versions, only Root 6.11.02 and 6.12.04 work on Ubuntu 16.04.1. OS: Ubuntu 16.04.1. ROOT: 6.14.06 (compiled); TMapFile: failed; TApplication: works. ROOT: 6.11.02 (binary); TMapFile: works; TApplication: works. ROOT: 6.12.04 (binary); TMapFile: works; TApplication: works. ROOT: 6.13.08 (binary); TMapFile: failed; TApplication: works. ROOT: 6.14.06 (binary); TMapFile: failed; TApplication: works. ROOT: 6.16.00 (binary); TMapFile: failed; TApplication: works. ROOT: 6.18.04 (binary); TMapFile: failed; TApplication: works. ROOT: 6.20.00 (binary); Make error,. ```. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary); Make error,. ```. ROOTDataFrame -pthread -lm -ldl -rdynamic -lNew -Wl,--no-as-needed. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.22.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:28: recipe for target 'hisprod' failed. ```. ROOT: 6.22.00 (binary), 6.24.8 (binary), 6.26.10 (binary) and 6.28.04 (binary) came across the same “Make error” as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:49,availability,error,error,49,"OS: Ubuntu 18.04.6. ROOT: 6.13.08 (binary); Make error. ROOT: 6.14.06 (binary); Make error. ROOT: 6.16.00 (binary): TMapFile: works, TApplication: failed. ```. Error in <TExMap::Add>: key 140702651440656 is not unique. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007ff7e1a5e337 in __GI___waitpid (pid=4208, stat_loc=stat_loc. entry=0x7ffd6b4ee5e8, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007ff7e19c9047 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007ff7e40dde83 in TUnixSystem::StackTrace() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #3 0x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:85,availability,error,error,85,"OS: Ubuntu 18.04.6. ROOT: 6.13.08 (binary); Make error. ROOT: 6.14.06 (binary); Make error. ROOT: 6.16.00 (binary): TMapFile: works, TApplication: failed. ```. Error in <TExMap::Add>: key 140702651440656 is not unique. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007ff7e1a5e337 in __GI___waitpid (pid=4208, stat_loc=stat_loc. entry=0x7ffd6b4ee5e8, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007ff7e19c9047 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007ff7e40dde83 in TUnixSystem::StackTrace() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #3 0x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:160,availability,Error,Error,160,"OS: Ubuntu 18.04.6. ROOT: 6.13.08 (binary); Make error. ROOT: 6.14.06 (binary); Make error. ROOT: 6.16.00 (binary): TMapFile: works, TApplication: failed. ```. Error in <TExMap::Add>: key 140702651440656 is not unique. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007ff7e1a5e337 in __GI___waitpid (pid=4208, stat_loc=stat_loc. entry=0x7ffd6b4ee5e8, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007ff7e19c9047 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007ff7e40dde83 in TUnixSystem::StackTrace() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #3 0x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2626,availability,error,error,2626,"the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocato",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2675,availability,error,error,2675," you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3015,availability,error,error,3015,"Arg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hispro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3118,availability,Error,Error,3118,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3161,availability,error,error,3161,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3214,availability,error,error,3214,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3267,availability,error,error,3267,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3320,availability,error,error,3320,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3946,availability,error,error,3946,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4049,availability,Error,Error,4049,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:147,deployability,fail,failed,147,"OS: Ubuntu 18.04.6. ROOT: 6.13.08 (binary); Make error. ROOT: 6.14.06 (binary); Make error. ROOT: 6.16.00 (binary): TMapFile: works, TApplication: failed. ```. Error in <TExMap::Add>: key 140702651440656 is not unique. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007ff7e1a5e337 in __GI___waitpid (pid=4208, stat_loc=stat_loc. entry=0x7ffd6b4ee5e8, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007ff7e19c9047 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007ff7e40dde83 in TUnixSystem::StackTrace() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #3 0x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:356,deployability,stack,stack,356,"OS: Ubuntu 18.04.6. ROOT: 6.13.08 (binary); Make error. ROOT: 6.14.06 (binary); Make error. ROOT: 6.16.00 (binary): TMapFile: works, TApplication: failed. ```. Error in <TExMap::Add>: key 140702651440656 is not unique. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007ff7e1a5e337 in __GI___waitpid (pid=4208, stat_loc=stat_loc. entry=0x7ffd6b4ee5e8, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007ff7e19c9047 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007ff7e40dde83 in TUnixSystem::StackTrace() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #3 0x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:738,deployability,Stack,StackTrace,738,"OS: Ubuntu 18.04.6. ROOT: 6.13.08 (binary); Make error. ROOT: 6.14.06 (binary); Make error. ROOT: 6.16.00 (binary): TMapFile: works, TApplication: failed. ```. Error in <TExMap::Add>: key 140702651440656 is not unique. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007ff7e1a5e337 in __GI___waitpid (pid=4208, stat_loc=stat_loc. entry=0x7ffd6b4ee5e8, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007ff7e19c9047 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007ff7e40dde83 in TUnixSystem::StackTrace() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #3 0x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1804,deployability,stack,stack,1804,". #3 0x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined refer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2613,deployability,fail,failed,2613,"by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2902,deployability,log,log,2902,"s issue. ===========================================================. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3090,deployability,fail,failed,3090,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3833,deployability,log,log,3833,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4021,deployability,fail,failed,4021,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:650,energy efficiency,optim,optimized,650,"OS: Ubuntu 18.04.6. ROOT: 6.13.08 (binary); Make error. ROOT: 6.14.06 (binary); Make error. ROOT: 6.16.00 (binary): TMapFile: works, TApplication: failed. ```. Error in <TExMap::Add>: key 140702651440656 is not unique. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007ff7e1a5e337 in __GI___waitpid (pid=4208, stat_loc=stat_loc. entry=0x7ffd6b4ee5e8, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007ff7e19c9047 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007ff7e40dde83 in TUnixSystem::StackTrace() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #3 0x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1106,energy efficiency,Load,LoadGraphicsLibs,1106,": TMapFile: works, TApplication: failed. ```. Error in <TExMap::Add>: key 140702651440656 is not unique. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007ff7e1a5e337 in __GI___waitpid (pid=4208, stat_loc=stat_loc. entry=0x7ffd6b4ee5e8, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007ff7e19c9047 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007ff7e40dde83 in TUnixSystem::StackTrace() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #3 0x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplic",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2121,energy efficiency,Load,LoadGraphicsLibs,2121,"rom /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ``",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3621,energy efficiency,alloc,allocator,3621,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1736,integrability,sub,submit,1736,"tackTrace() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #3 0x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:49,performance,error,error,49,"OS: Ubuntu 18.04.6. ROOT: 6.13.08 (binary); Make error. ROOT: 6.14.06 (binary); Make error. ROOT: 6.16.00 (binary): TMapFile: works, TApplication: failed. ```. Error in <TExMap::Add>: key 140702651440656 is not unique. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007ff7e1a5e337 in __GI___waitpid (pid=4208, stat_loc=stat_loc. entry=0x7ffd6b4ee5e8, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007ff7e19c9047 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007ff7e40dde83 in TUnixSystem::StackTrace() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #3 0x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:85,performance,error,error,85,"OS: Ubuntu 18.04.6. ROOT: 6.13.08 (binary); Make error. ROOT: 6.14.06 (binary); Make error. ROOT: 6.16.00 (binary): TMapFile: works, TApplication: failed. ```. Error in <TExMap::Add>: key 140702651440656 is not unique. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007ff7e1a5e337 in __GI___waitpid (pid=4208, stat_loc=stat_loc. entry=0x7ffd6b4ee5e8, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007ff7e19c9047 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007ff7e40dde83 in TUnixSystem::StackTrace() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #3 0x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:160,performance,Error,Error,160,"OS: Ubuntu 18.04.6. ROOT: 6.13.08 (binary); Make error. ROOT: 6.14.06 (binary); Make error. ROOT: 6.16.00 (binary): TMapFile: works, TApplication: failed. ```. Error in <TExMap::Add>: key 140702651440656 is not unique. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007ff7e1a5e337 in __GI___waitpid (pid=4208, stat_loc=stat_loc. entry=0x7ffd6b4ee5e8, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007ff7e19c9047 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007ff7e40dde83 in TUnixSystem::StackTrace() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #3 0x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:650,performance,optimiz,optimized,650,"OS: Ubuntu 18.04.6. ROOT: 6.13.08 (binary); Make error. ROOT: 6.14.06 (binary); Make error. ROOT: 6.16.00 (binary): TMapFile: works, TApplication: failed. ```. Error in <TExMap::Add>: key 140702651440656 is not unique. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007ff7e1a5e337 in __GI___waitpid (pid=4208, stat_loc=stat_loc. entry=0x7ffd6b4ee5e8, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007ff7e19c9047 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007ff7e40dde83 in TUnixSystem::StackTrace() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #3 0x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1106,performance,Load,LoadGraphicsLibs,1106,": TMapFile: works, TApplication: failed. ```. Error in <TExMap::Add>: key 140702651440656 is not unique. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007ff7e1a5e337 in __GI___waitpid (pid=4208, stat_loc=stat_loc. entry=0x7ffd6b4ee5e8, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007ff7e19c9047 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007ff7e40dde83 in TUnixSystem::StackTrace() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #3 0x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplic",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2121,performance,Load,LoadGraphicsLibs,2121,"rom /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ``",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2626,performance,error,error,2626,"the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocato",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2675,performance,error,error,2675," you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3015,performance,error,error,3015,"Arg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hispro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3118,performance,Error,Error,3118,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3161,performance,error,error,3161,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3214,performance,error,error,3214,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3267,performance,error,error,3267,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3320,performance,error,error,3320,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3946,performance,error,error,3946,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4049,performance,Error,Error,4049,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:147,reliability,fail,failed,147,"OS: Ubuntu 18.04.6. ROOT: 6.13.08 (binary); Make error. ROOT: 6.14.06 (binary); Make error. ROOT: 6.16.00 (binary): TMapFile: works, TApplication: failed. ```. Error in <TExMap::Add>: key 140702651440656 is not unique. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007ff7e1a5e337 in __GI___waitpid (pid=4208, stat_loc=stat_loc. entry=0x7ffd6b4ee5e8, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007ff7e19c9047 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007ff7e40dde83 in TUnixSystem::StackTrace() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #3 0x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2613,reliability,fail,failed,2613,"by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3090,reliability,fail,failed,3090,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4021,reliability,fail,failed,4021,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:49,safety,error,error,49,"OS: Ubuntu 18.04.6. ROOT: 6.13.08 (binary); Make error. ROOT: 6.14.06 (binary); Make error. ROOT: 6.16.00 (binary): TMapFile: works, TApplication: failed. ```. Error in <TExMap::Add>: key 140702651440656 is not unique. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007ff7e1a5e337 in __GI___waitpid (pid=4208, stat_loc=stat_loc. entry=0x7ffd6b4ee5e8, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007ff7e19c9047 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007ff7e40dde83 in TUnixSystem::StackTrace() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #3 0x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:85,safety,error,error,85,"OS: Ubuntu 18.04.6. ROOT: 6.13.08 (binary); Make error. ROOT: 6.14.06 (binary); Make error. ROOT: 6.16.00 (binary): TMapFile: works, TApplication: failed. ```. Error in <TExMap::Add>: key 140702651440656 is not unique. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007ff7e1a5e337 in __GI___waitpid (pid=4208, stat_loc=stat_loc. entry=0x7ffd6b4ee5e8, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007ff7e19c9047 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007ff7e40dde83 in TUnixSystem::StackTrace() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #3 0x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:160,safety,Error,Error,160,"OS: Ubuntu 18.04.6. ROOT: 6.13.08 (binary); Make error. ROOT: 6.14.06 (binary); Make error. ROOT: 6.16.00 (binary): TMapFile: works, TApplication: failed. ```. Error in <TExMap::Add>: key 140702651440656 is not unique. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007ff7e1a5e337 in __GI___waitpid (pid=4208, stat_loc=stat_loc. entry=0x7ffd6b4ee5e8, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007ff7e19c9047 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007ff7e40dde83 in TUnixSystem::StackTrace() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #3 0x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2626,safety,error,error,2626,"the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocato",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2675,safety,error,error,2675," you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2902,safety,log,log,2902,"s issue. ===========================================================. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3015,safety,error,error,3015,"Arg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hispro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3118,safety,Error,Error,3118,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3161,safety,error,error,3161,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3214,safety,error,error,3214,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3267,safety,error,error,3267,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3320,safety,error,error,3320,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3833,safety,log,log,3833,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3946,safety,error,error,3946,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4049,safety,Error,Error,4049,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:935,security,sign,signal,935,"OS: Ubuntu 18.04.6. ROOT: 6.13.08 (binary); Make error. ROOT: 6.14.06 (binary); Make error. ROOT: 6.16.00 (binary): TMapFile: works, TApplication: failed. ```. Error in <TExMap::Add>: key 140702651440656 is not unique. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007ff7e1a5e337 in __GI___waitpid (pid=4208, stat_loc=stat_loc. entry=0x7ffd6b4ee5e8, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007ff7e19c9047 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007ff7e40dde83 in TUnixSystem::StackTrace() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #3 0x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2902,security,log,log,2902,"s issue. ===========================================================. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3833,security,log,log,3833,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:362,testability,trace,trace,362,"OS: Ubuntu 18.04.6. ROOT: 6.13.08 (binary); Make error. ROOT: 6.14.06 (binary); Make error. ROOT: 6.16.00 (binary): TMapFile: works, TApplication: failed. ```. Error in <TExMap::Add>: key 140702651440656 is not unique. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007ff7e1a5e337 in __GI___waitpid (pid=4208, stat_loc=stat_loc. entry=0x7ffd6b4ee5e8, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007ff7e19c9047 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007ff7e40dde83 in TUnixSystem::StackTrace() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #3 0x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1810,testability,trace,trace,1810,"x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2902,testability,log,log,2902,"s issue. ===========================================================. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3833,testability,log,log,3833,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:49,usability,error,error,49,"OS: Ubuntu 18.04.6. ROOT: 6.13.08 (binary); Make error. ROOT: 6.14.06 (binary); Make error. ROOT: 6.16.00 (binary): TMapFile: works, TApplication: failed. ```. Error in <TExMap::Add>: key 140702651440656 is not unique. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007ff7e1a5e337 in __GI___waitpid (pid=4208, stat_loc=stat_loc. entry=0x7ffd6b4ee5e8, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007ff7e19c9047 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007ff7e40dde83 in TUnixSystem::StackTrace() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #3 0x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:85,usability,error,error,85,"OS: Ubuntu 18.04.6. ROOT: 6.13.08 (binary); Make error. ROOT: 6.14.06 (binary); Make error. ROOT: 6.16.00 (binary): TMapFile: works, TApplication: failed. ```. Error in <TExMap::Add>: key 140702651440656 is not unique. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007ff7e1a5e337 in __GI___waitpid (pid=4208, stat_loc=stat_loc. entry=0x7ffd6b4ee5e8, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007ff7e19c9047 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007ff7e40dde83 in TUnixSystem::StackTrace() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #3 0x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:160,usability,Error,Error,160,"OS: Ubuntu 18.04.6. ROOT: 6.13.08 (binary); Make error. ROOT: 6.14.06 (binary); Make error. ROOT: 6.16.00 (binary): TMapFile: works, TApplication: failed. ```. Error in <TExMap::Add>: key 140702651440656 is not unique. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007ff7e1a5e337 in __GI___waitpid (pid=4208, stat_loc=stat_loc. entry=0x7ffd6b4ee5e8, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007ff7e19c9047 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007ff7e40dde83 in TUnixSystem::StackTrace() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #3 0x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1567,usability,hint,hint,1567,"/sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007ff7e19c9047 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007ff7e40dde83 in TUnixSystem::StackTrace() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #3 0x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1611,usability,help,help,1611,"00007ff7e19c9047 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007ff7e40dde83 in TUnixSystem::StackTrace() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #3 0x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1886,usability,help,help,1886,"oala/root/6.16.00.bin/lib/libCore.so.6.16. #4 <signal handler called>. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2626,usability,error,error,2626,"the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocato",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2675,usability,error,error,2675," you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3015,usability,error,error,3015,"Arg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hispro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3041,usability,statu,status,3041,"ala/root/6.16.00.bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3118,usability,Error,Error,3118,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3161,usability,error,error,3161,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3214,usability,error,error,3214,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3267,usability,error,error,3267,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3320,usability,error,error,3320,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3946,usability,error,error,3946,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3972,usability,statu,status,3972,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4049,usability,Error,Error,4049,"bin/lib/libCling.so. #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16. #9 0x0000560cc64cfdde in main (). ===========================================================. ROOT: 6.18.04 (binary) TMapFile: works TApplication: failed (same error as 6.16.00. . ROOT: 6.20.00 (binary), Make error,. DataFrame -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.20.00.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```. ROOT: 6.22.00 (binary), Make error, same as 6.20.00. ROOT: 6.24.08 (binary), Make error, same as 6.20.00. ROOT: 6.26.10 (binary), Make error, same as 6.20.00. ROOT: 6.28.04 (binary), Make error,. ```. ysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/koala/root/6.28.04.bin/lib -pthread -lm -ldl -rdynamic -Wl,--no-as-needed -lNew. /home/koala/root/6.28.04.bin/lib/libRIO.so: undefined reference to `std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()@GLIBCXX_3.4.26'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `exp@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `log@GLIBC_2.29'. /home/koala/root/6.28.04.bin/lib/libHist.so: undefined reference to `pow@GLIBC_2.29'. collect2: error: ld returned 1 exit status. Makefile:29: recipe for target 'hisprod' failed. make: *** [hisprod] Error 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:667,availability,error,error,667,"OS: Ubuntu 20.04.4. Only ROOT 6.28.04 works with the proposed ROOT-CONFIG. ROOT: 6.13.08 (binary); Compiling works, but missing libtinfo.so.5 for running. . ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . Fatal in <TROOT::InitInterpreter>: cannot load library libtinfo.so.5: cannot open shared object file: No such file or directory. ROOT: 6.14.06 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.16.00 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.18.04 (binary); Compiling works, but missing libtinfo.so.5 for running. ROOT: 6.20.00 (binary); Compiling works, TMapFile works, but TApplication failed with error,. huagen@ikp191:~/Codes/root_debug$ ./appdemo . ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths! Invoking:. x86_64-linux-gnu-g++-8 -O3 -DNDEBUG -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++/p' -e '}'. Results was:. With exit code 0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fd1435d9c3a in __GI___wait4 (pid=47601, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007fd1435d9bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0) at waitpid.c:38. #2 0x00007fd143548f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007fd1444a57e0 in TUnixSystem::StackTrace() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #4 0x00007fd1444a8244 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #5 <signal handler called>. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:721,availability,ERROR,ERROR,721,"OS: Ubuntu 20.04.4. Only ROOT 6.28.04 works with the proposed ROOT-CONFIG. ROOT: 6.13.08 (binary); Compiling works, but missing libtinfo.so.5 for running. . ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . Fatal in <TROOT::InitInterpreter>: cannot load library libtinfo.so.5: cannot open shared object file: No such file or directory. ROOT: 6.14.06 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.16.00 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.18.04 (binary); Compiling works, but missing libtinfo.so.5 for running. ROOT: 6.20.00 (binary); Compiling works, TMapFile works, but TApplication failed with error,. huagen@ikp191:~/Codes/root_debug$ ./appdemo . ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths! Invoking:. x86_64-linux-gnu-g++-8 -O3 -DNDEBUG -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++/p' -e '}'. Results was:. With exit code 0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fd1435d9c3a in __GI___wait4 (pid=47601, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007fd1435d9bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0) at waitpid.c:38. #2 0x00007fd143548f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007fd1444a57e0 in TUnixSystem::StackTrace() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #4 0x00007fd1444a8244 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #5 <signal handler called>. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7668,availability,error,error,7668,". #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. ```. ROOT 6.24.8 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.26.10 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.28.4 (binary); TMapFile: works; TApplication: works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7759,availability,error,error,7759,". #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. ```. ROOT 6.24.8 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.26.10 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.28.4 (binary); TMapFile: works; TApplication: works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:655,deployability,fail,failed,655,"OS: Ubuntu 20.04.4. Only ROOT 6.28.04 works with the proposed ROOT-CONFIG. ROOT: 6.13.08 (binary); Compiling works, but missing libtinfo.so.5 for running. . ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . Fatal in <TROOT::InitInterpreter>: cannot load library libtinfo.so.5: cannot open shared object file: No such file or directory. ROOT: 6.14.06 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.16.00 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.18.04 (binary); Compiling works, but missing libtinfo.so.5 for running. ROOT: 6.20.00 (binary); Compiling works, TMapFile works, but TApplication failed with error,. huagen@ikp191:~/Codes/root_debug$ ./appdemo . ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths! Invoking:. x86_64-linux-gnu-g++-8 -O3 -DNDEBUG -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++/p' -e '}'. Results was:. With exit code 0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fd1435d9c3a in __GI___wait4 (pid=47601, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007fd1435d9bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0) at waitpid.c:38. #2 0x00007fd143548f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007fd1444a57e0 in TUnixSystem::StackTrace() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #4 0x00007fd1444a8244 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #5 <signal handler called>. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1104,deployability,stack,stack,1104,"g works, but missing libtinfo.so.5 for running. . ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . Fatal in <TROOT::InitInterpreter>: cannot load library libtinfo.so.5: cannot open shared object file: No such file or directory. ROOT: 6.14.06 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.16.00 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.18.04 (binary); Compiling works, but missing libtinfo.so.5 for running. ROOT: 6.20.00 (binary); Compiling works, TMapFile works, but TApplication failed with error,. huagen@ikp191:~/Codes/root_debug$ ./appdemo . ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths! Invoking:. x86_64-linux-gnu-g++-8 -O3 -DNDEBUG -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++/p' -e '}'. Results was:. With exit code 0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fd1435d9c3a in __GI___wait4 (pid=47601, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007fd1435d9bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0) at waitpid.c:38. #2 0x00007fd143548f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007fd1444a57e0 in TUnixSystem::StackTrace() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #4 0x00007fd1444a8244 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #5 <signal handler called>. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007fd14446e452 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1653,deployability,Stack,StackTrace,1653,"led with error,. huagen@ikp191:~/Codes/root_debug$ ./appdemo . ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths! Invoking:. x86_64-linux-gnu-g++-8 -O3 -DNDEBUG -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++/p' -e '}'. Results was:. With exit code 0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fd1435d9c3a in __GI___wait4 (pid=47601, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007fd1435d9bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0) at waitpid.c:38. #2 0x00007fd143548f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007fd1444a57e0 in TUnixSystem::StackTrace() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #4 0x00007fd1444a8244 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #5 <signal handler called>. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007fd14446e452 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #8 0x00007fd144397703 in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #9 0x00007fd144397b93 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #10 0x00007fd14435c0c4 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #11 0x00007fd14435b67a in TApplication::InitializeGraphics() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #12 0x00007fd144361088 in TApplication::TApplication(char const*, int*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3092,deployability,stack,stack,3092,"Core.so.6.20. #8 0x00007fd144397703 in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #9 0x00007fd144397b93 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #10 0x00007fd14435c0c4 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #11 0x00007fd14435b67a in TApplication::InitializeGraphics() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #12 0x00007fd144361088 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #13 0x0000558ef4e6f2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007fd14446e452 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #8 0x00007fd144397703 in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #9 0x00007fd144397b93 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #10 0x00007fd14435c0c4 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #11 0x00007fd14435b67a in TApplication::InitializeGraphics() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #12 0x00007fd144361088 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.20.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4278,deployability,fail,failed,4278,"d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007fd14446e452 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #8 0x00007fd144397703 in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #9 0x00007fd144397b93 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #10 0x00007fd14435c0c4 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #11 0x00007fd14435b67a in TApplication::InitializeGraphics() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #12 0x00007fd144361088 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #13 0x0000558ef4e6f2cc in main (). ===========================================================. ```. ROOT 6.22.00 (binary); TMapFile: works, TApplication: failed. ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f3f00a51c3a in __GI___wait4 (pid=48533, stat_loc=stat_loc. entry=0x7fff7b0eece8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f3f00a51bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fff7b0eece8, options=options. entry=0) at waitpid.c:38. #2 0x00007f3f009c0f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f3f01963e2e in TUnixSystem::StackTrace() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #4 0x00007f3f01960cb5 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #5 <signal handler called>. #6 0x00007f3efcf2ec22 in TCling::Ca",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4474,deployability,stack,stack,4474,"/libCore.so.6.20. #8 0x00007fd144397703 in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #9 0x00007fd144397b93 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #10 0x00007fd14435c0c4 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #11 0x00007fd14435b67a in TApplication::InitializeGraphics() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #12 0x00007fd144361088 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #13 0x0000558ef4e6f2cc in main (). ===========================================================. ```. ROOT 6.22.00 (binary); TMapFile: works, TApplication: failed. ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f3f00a51c3a in __GI___wait4 (pid=48533, stat_loc=stat_loc. entry=0x7fff7b0eece8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f3f00a51bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fff7b0eece8, options=options. entry=0) at waitpid.c:38. #2 0x00007f3f009c0f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f3f01963e2e in TUnixSystem::StackTrace() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #4 0x00007f3f01960cb5 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #5 <signal handler called>. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5023,deployability,Stack,StackTrace,5023,"r const*, int*, char**, void*, int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #13 0x0000558ef4e6f2cc in main (). ===========================================================. ```. ROOT 6.22.00 (binary); TMapFile: works, TApplication: failed. ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f3f00a51c3a in __GI___wait4 (pid=48533, stat_loc=stat_loc. entry=0x7fff7b0eece8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f3f00a51bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fff7b0eece8, options=options. entry=0) at waitpid.c:38. #2 0x00007f3f009c0f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f3f01963e2e in TUnixSystem::StackTrace() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #4 0x00007f3f01960cb5 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #5 <signal handler called>. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:6462,deployability,stack,stack,6462,"Core.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7647,deployability,fail,failed,7647,". #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. ```. ROOT 6.24.8 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.26.10 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.28.4 (binary); TMapFile: works; TApplication: works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7738,deployability,fail,failed,7738,". #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. ```. ROOT 6.24.8 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.26.10 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.28.4 (binary); TMapFile: works; TApplication: works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:250,energy efficiency,load,load,250,"OS: Ubuntu 20.04.4. Only ROOT 6.28.04 works with the proposed ROOT-CONFIG. ROOT: 6.13.08 (binary); Compiling works, but missing libtinfo.so.5 for running. . ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . Fatal in <TROOT::InitInterpreter>: cannot load library libtinfo.so.5: cannot open shared object file: No such file or directory. ROOT: 6.14.06 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.16.00 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.18.04 (binary); Compiling works, but missing libtinfo.so.5 for running. ROOT: 6.20.00 (binary); Compiling works, TMapFile works, but TApplication failed with error,. huagen@ikp191:~/Codes/root_debug$ ./appdemo . ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths! Invoking:. x86_64-linux-gnu-g++-8 -O3 -DNDEBUG -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++/p' -e '}'. Results was:. With exit code 0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fd1435d9c3a in __GI___wait4 (pid=47601, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007fd1435d9bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0) at waitpid.c:38. #2 0x00007fd143548f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007fd1444a57e0 in TUnixSystem::StackTrace() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #4 0x00007fd1444a8244 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #5 <signal handler called>. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1423,energy efficiency,optim,optimized,1423,"6.00 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.18.04 (binary); Compiling works, but missing libtinfo.so.5 for running. ROOT: 6.20.00 (binary); Compiling works, TMapFile works, but TApplication failed with error,. huagen@ikp191:~/Codes/root_debug$ ./appdemo . ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths! Invoking:. x86_64-linux-gnu-g++-8 -O3 -DNDEBUG -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++/p' -e '}'. Results was:. With exit code 0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fd1435d9c3a in __GI___wait4 (pid=47601, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007fd1435d9bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0) at waitpid.c:38. #2 0x00007fd143548f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007fd1444a57e0 in TUnixSystem::StackTrace() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #4 0x00007fd1444a8244 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #5 <signal handler called>. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007fd14446e452 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #8 0x00007fd144397703 in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #9 0x00007fd144397b93 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #10 0x00007fd14435c0c4 in TApplication::LoadGraphicsLibs() () from /home/huagen/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1565,energy efficiency,optim,optimized,1565,"r running. ROOT: 6.20.00 (binary); Compiling works, TMapFile works, but TApplication failed with error,. huagen@ikp191:~/Codes/root_debug$ ./appdemo . ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths! Invoking:. x86_64-linux-gnu-g++-8 -O3 -DNDEBUG -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++/p' -e '}'. Results was:. With exit code 0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fd1435d9c3a in __GI___wait4 (pid=47601, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007fd1435d9bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0) at waitpid.c:38. #2 0x00007fd143548f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007fd1444a57e0 in TUnixSystem::StackTrace() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #4 0x00007fd1444a8244 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #5 <signal handler called>. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007fd14446e452 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #8 0x00007fd144397703 in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #9 0x00007fd144397b93 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #10 0x00007fd14435c0c4 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #11 0x00007fd14435b67a in TApplication::InitializeGraphics() () from /home/huagen/root/6.20.00.bin/lib/l",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2388,energy efficiency,Load,LoadGraphicsLibs,2388,"fb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0) at waitpid.c:38. #2 0x00007fd143548f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007fd1444a57e0 in TUnixSystem::StackTrace() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #4 0x00007fd1444a8244 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #5 <signal handler called>. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007fd14446e452 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #8 0x00007fd144397703 in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #9 0x00007fd144397b93 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #10 0x00007fd14435c0c4 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #11 0x00007fd14435b67a in TApplication::InitializeGraphics() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #12 0x00007fd144361088 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #13 0x0000558ef4e6f2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007fd14446e452",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3774,energy efficiency,Load,LoadGraphicsLibs,3774,"=================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007fd14446e452 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #8 0x00007fd144397703 in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #9 0x00007fd144397b93 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #10 0x00007fd14435c0c4 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #11 0x00007fd14435b67a in TApplication::InitializeGraphics() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #12 0x00007fd144361088 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #13 0x0000558ef4e6f2cc in main (). ===========================================================. ```. ROOT 6.22.00 (binary); TMapFile: works, TApplication: failed. ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f3f00a51c3a in __GI___wait4 (pid=48533, stat_loc=stat_loc. entry=0x7fff7b0eece8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f3f00a51bfb in __GI___wai",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4793,energy efficiency,optim,optimized,4793,"om /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #11 0x00007fd14435b67a in TApplication::InitializeGraphics() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #12 0x00007fd144361088 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #13 0x0000558ef4e6f2cc in main (). ===========================================================. ```. ROOT 6.22.00 (binary); TMapFile: works, TApplication: failed. ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f3f00a51c3a in __GI___wait4 (pid=48533, stat_loc=stat_loc. entry=0x7fff7b0eece8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f3f00a51bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fff7b0eece8, options=options. entry=0) at waitpid.c:38. #2 0x00007f3f009c0f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f3f01963e2e in TUnixSystem::StackTrace() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #4 0x00007f3f01960cb5 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #5 <signal handler called>. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4935,energy efficiency,optim,optimized,4935,".20.00.bin/lib/libCore.so.6.20. #12 0x00007fd144361088 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #13 0x0000558ef4e6f2cc in main (). ===========================================================. ```. ROOT 6.22.00 (binary); TMapFile: works, TApplication: failed. ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f3f00a51c3a in __GI___wait4 (pid=48533, stat_loc=stat_loc. entry=0x7fff7b0eece8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f3f00a51bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fff7b0eece8, options=options. entry=0) at waitpid.c:38. #2 0x00007f3f009c0f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f3f01963e2e in TUnixSystem::StackTrace() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #4 0x00007f3f01960cb5 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #5 <signal handler called>. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/l",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5758,energy efficiency,Load,LoadGraphicsLibs,5758,"fb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fff7b0eece8, options=options. entry=0) at waitpid.c:38. #2 0x00007f3f009c0f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f3f01963e2e in TUnixSystem::StackTrace() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #4 0x00007f3f01960cb5 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #5 <signal handler called>. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7144,energy efficiency,Load,LoadGraphicsLibs,7144,". #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. ```. ROOT 6.24.8 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.26.10 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.28.4 (binary); TMapFile: works; TApplication: works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3024,integrability,sub,submit,3024,"Init(TFunction const*) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #8 0x00007fd144397703 in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #9 0x00007fd144397b93 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #10 0x00007fd14435c0c4 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #11 0x00007fd14435b67a in TApplication::InitializeGraphics() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #12 0x00007fd144361088 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #13 0x0000558ef4e6f2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007fd14446e452 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #8 0x00007fd144397703 in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #9 0x00007fd144397b93 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #10 0x00007fd14435c0c4 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #11 0x00007fd14435b67a in TApplication::InitializeGraphics() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #12 0x00007fd144361088 in TApplication::TApplication(ch",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:6394,integrability,sub,submit,6394,"Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(ch",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:290,interoperability,share,shared,290,"OS: Ubuntu 20.04.4. Only ROOT 6.28.04 works with the proposed ROOT-CONFIG. ROOT: 6.13.08 (binary); Compiling works, but missing libtinfo.so.5 for running. . ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . Fatal in <TROOT::InitInterpreter>: cannot load library libtinfo.so.5: cannot open shared object file: No such file or directory. ROOT: 6.14.06 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.16.00 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.18.04 (binary); Compiling works, but missing libtinfo.so.5 for running. ROOT: 6.20.00 (binary); Compiling works, TMapFile works, but TApplication failed with error,. huagen@ikp191:~/Codes/root_debug$ ./appdemo . ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths! Invoking:. x86_64-linux-gnu-g++-8 -O3 -DNDEBUG -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++/p' -e '}'. Results was:. With exit code 0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fd1435d9c3a in __GI___wait4 (pid=47601, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007fd1435d9bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0) at waitpid.c:38. #2 0x00007fd143548f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007fd1444a57e0 in TUnixSystem::StackTrace() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #4 0x00007fd1444a8244 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #5 <signal handler called>. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:775,interoperability,standard,standard,775,"OS: Ubuntu 20.04.4. Only ROOT 6.28.04 works with the proposed ROOT-CONFIG. ROOT: 6.13.08 (binary); Compiling works, but missing libtinfo.so.5 for running. . ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . Fatal in <TROOT::InitInterpreter>: cannot load library libtinfo.so.5: cannot open shared object file: No such file or directory. ROOT: 6.14.06 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.16.00 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.18.04 (binary); Compiling works, but missing libtinfo.so.5 for running. ROOT: 6.20.00 (binary); Compiling works, TMapFile works, but TApplication failed with error,. huagen@ikp191:~/Codes/root_debug$ ./appdemo . ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths! Invoking:. x86_64-linux-gnu-g++-8 -O3 -DNDEBUG -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++/p' -e '}'. Results was:. With exit code 0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fd1435d9c3a in __GI___wait4 (pid=47601, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007fd1435d9bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0) at waitpid.c:38. #2 0x00007fd143548f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007fd1444a57e0 in TUnixSystem::StackTrace() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #4 0x00007fd1444a8244 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #5 <signal handler called>. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:250,performance,load,load,250,"OS: Ubuntu 20.04.4. Only ROOT 6.28.04 works with the proposed ROOT-CONFIG. ROOT: 6.13.08 (binary); Compiling works, but missing libtinfo.so.5 for running. . ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . Fatal in <TROOT::InitInterpreter>: cannot load library libtinfo.so.5: cannot open shared object file: No such file or directory. ROOT: 6.14.06 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.16.00 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.18.04 (binary); Compiling works, but missing libtinfo.so.5 for running. ROOT: 6.20.00 (binary); Compiling works, TMapFile works, but TApplication failed with error,. huagen@ikp191:~/Codes/root_debug$ ./appdemo . ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths! Invoking:. x86_64-linux-gnu-g++-8 -O3 -DNDEBUG -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++/p' -e '}'. Results was:. With exit code 0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fd1435d9c3a in __GI___wait4 (pid=47601, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007fd1435d9bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0) at waitpid.c:38. #2 0x00007fd143548f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007fd1444a57e0 in TUnixSystem::StackTrace() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #4 0x00007fd1444a8244 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #5 <signal handler called>. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:667,performance,error,error,667,"OS: Ubuntu 20.04.4. Only ROOT 6.28.04 works with the proposed ROOT-CONFIG. ROOT: 6.13.08 (binary); Compiling works, but missing libtinfo.so.5 for running. . ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . Fatal in <TROOT::InitInterpreter>: cannot load library libtinfo.so.5: cannot open shared object file: No such file or directory. ROOT: 6.14.06 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.16.00 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.18.04 (binary); Compiling works, but missing libtinfo.so.5 for running. ROOT: 6.20.00 (binary); Compiling works, TMapFile works, but TApplication failed with error,. huagen@ikp191:~/Codes/root_debug$ ./appdemo . ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths! Invoking:. x86_64-linux-gnu-g++-8 -O3 -DNDEBUG -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++/p' -e '}'. Results was:. With exit code 0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fd1435d9c3a in __GI___wait4 (pid=47601, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007fd1435d9bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0) at waitpid.c:38. #2 0x00007fd143548f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007fd1444a57e0 in TUnixSystem::StackTrace() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #4 0x00007fd1444a8244 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #5 <signal handler called>. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:721,performance,ERROR,ERROR,721,"OS: Ubuntu 20.04.4. Only ROOT 6.28.04 works with the proposed ROOT-CONFIG. ROOT: 6.13.08 (binary); Compiling works, but missing libtinfo.so.5 for running. . ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . Fatal in <TROOT::InitInterpreter>: cannot load library libtinfo.so.5: cannot open shared object file: No such file or directory. ROOT: 6.14.06 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.16.00 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.18.04 (binary); Compiling works, but missing libtinfo.so.5 for running. ROOT: 6.20.00 (binary); Compiling works, TMapFile works, but TApplication failed with error,. huagen@ikp191:~/Codes/root_debug$ ./appdemo . ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths! Invoking:. x86_64-linux-gnu-g++-8 -O3 -DNDEBUG -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++/p' -e '}'. Results was:. With exit code 0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fd1435d9c3a in __GI___wait4 (pid=47601, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007fd1435d9bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0) at waitpid.c:38. #2 0x00007fd143548f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007fd1444a57e0 in TUnixSystem::StackTrace() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #4 0x00007fd1444a8244 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #5 <signal handler called>. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1423,performance,optimiz,optimized,1423,"6.00 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.18.04 (binary); Compiling works, but missing libtinfo.so.5 for running. ROOT: 6.20.00 (binary); Compiling works, TMapFile works, but TApplication failed with error,. huagen@ikp191:~/Codes/root_debug$ ./appdemo . ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths! Invoking:. x86_64-linux-gnu-g++-8 -O3 -DNDEBUG -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++/p' -e '}'. Results was:. With exit code 0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fd1435d9c3a in __GI___wait4 (pid=47601, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007fd1435d9bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0) at waitpid.c:38. #2 0x00007fd143548f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007fd1444a57e0 in TUnixSystem::StackTrace() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #4 0x00007fd1444a8244 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #5 <signal handler called>. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007fd14446e452 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #8 0x00007fd144397703 in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #9 0x00007fd144397b93 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #10 0x00007fd14435c0c4 in TApplication::LoadGraphicsLibs() () from /home/huagen/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1565,performance,optimiz,optimized,1565,"r running. ROOT: 6.20.00 (binary); Compiling works, TMapFile works, but TApplication failed with error,. huagen@ikp191:~/Codes/root_debug$ ./appdemo . ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths! Invoking:. x86_64-linux-gnu-g++-8 -O3 -DNDEBUG -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++/p' -e '}'. Results was:. With exit code 0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fd1435d9c3a in __GI___wait4 (pid=47601, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007fd1435d9bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0) at waitpid.c:38. #2 0x00007fd143548f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007fd1444a57e0 in TUnixSystem::StackTrace() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #4 0x00007fd1444a8244 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #5 <signal handler called>. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007fd14446e452 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #8 0x00007fd144397703 in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #9 0x00007fd144397b93 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #10 0x00007fd14435c0c4 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #11 0x00007fd14435b67a in TApplication::InitializeGraphics() () from /home/huagen/root/6.20.00.bin/lib/l",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2388,performance,Load,LoadGraphicsLibs,2388,"fb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0) at waitpid.c:38. #2 0x00007fd143548f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007fd1444a57e0 in TUnixSystem::StackTrace() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #4 0x00007fd1444a8244 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #5 <signal handler called>. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007fd14446e452 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #8 0x00007fd144397703 in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #9 0x00007fd144397b93 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #10 0x00007fd14435c0c4 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #11 0x00007fd14435b67a in TApplication::InitializeGraphics() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #12 0x00007fd144361088 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #13 0x0000558ef4e6f2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007fd14446e452",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3774,performance,Load,LoadGraphicsLibs,3774,"=================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007fd14446e452 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #8 0x00007fd144397703 in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #9 0x00007fd144397b93 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #10 0x00007fd14435c0c4 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #11 0x00007fd14435b67a in TApplication::InitializeGraphics() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #12 0x00007fd144361088 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #13 0x0000558ef4e6f2cc in main (). ===========================================================. ```. ROOT 6.22.00 (binary); TMapFile: works, TApplication: failed. ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f3f00a51c3a in __GI___wait4 (pid=48533, stat_loc=stat_loc. entry=0x7fff7b0eece8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f3f00a51bfb in __GI___wai",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4793,performance,optimiz,optimized,4793,"om /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #11 0x00007fd14435b67a in TApplication::InitializeGraphics() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #12 0x00007fd144361088 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #13 0x0000558ef4e6f2cc in main (). ===========================================================. ```. ROOT 6.22.00 (binary); TMapFile: works, TApplication: failed. ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f3f00a51c3a in __GI___wait4 (pid=48533, stat_loc=stat_loc. entry=0x7fff7b0eece8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f3f00a51bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fff7b0eece8, options=options. entry=0) at waitpid.c:38. #2 0x00007f3f009c0f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f3f01963e2e in TUnixSystem::StackTrace() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #4 0x00007f3f01960cb5 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #5 <signal handler called>. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4935,performance,optimiz,optimized,4935,".20.00.bin/lib/libCore.so.6.20. #12 0x00007fd144361088 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #13 0x0000558ef4e6f2cc in main (). ===========================================================. ```. ROOT 6.22.00 (binary); TMapFile: works, TApplication: failed. ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f3f00a51c3a in __GI___wait4 (pid=48533, stat_loc=stat_loc. entry=0x7fff7b0eece8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f3f00a51bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fff7b0eece8, options=options. entry=0) at waitpid.c:38. #2 0x00007f3f009c0f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f3f01963e2e in TUnixSystem::StackTrace() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #4 0x00007f3f01960cb5 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #5 <signal handler called>. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/l",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5758,performance,Load,LoadGraphicsLibs,5758,"fb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fff7b0eece8, options=options. entry=0) at waitpid.c:38. #2 0x00007f3f009c0f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f3f01963e2e in TUnixSystem::StackTrace() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #4 0x00007f3f01960cb5 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #5 <signal handler called>. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7144,performance,Load,LoadGraphicsLibs,7144,". #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. ```. ROOT 6.24.8 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.26.10 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.28.4 (binary); TMapFile: works; TApplication: works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7668,performance,error,error,7668,". #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. ```. ROOT 6.24.8 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.26.10 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.28.4 (binary); TMapFile: works; TApplication: works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7759,performance,error,error,7759,". #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. ```. ROOT 6.24.8 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.26.10 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.28.4 (binary); TMapFile: works; TApplication: works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:655,reliability,fail,failed,655,"OS: Ubuntu 20.04.4. Only ROOT 6.28.04 works with the proposed ROOT-CONFIG. ROOT: 6.13.08 (binary); Compiling works, but missing libtinfo.so.5 for running. . ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . Fatal in <TROOT::InitInterpreter>: cannot load library libtinfo.so.5: cannot open shared object file: No such file or directory. ROOT: 6.14.06 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.16.00 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.18.04 (binary); Compiling works, but missing libtinfo.so.5 for running. ROOT: 6.20.00 (binary); Compiling works, TMapFile works, but TApplication failed with error,. huagen@ikp191:~/Codes/root_debug$ ./appdemo . ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths! Invoking:. x86_64-linux-gnu-g++-8 -O3 -DNDEBUG -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++/p' -e '}'. Results was:. With exit code 0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fd1435d9c3a in __GI___wait4 (pid=47601, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007fd1435d9bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0) at waitpid.c:38. #2 0x00007fd143548f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007fd1444a57e0 in TUnixSystem::StackTrace() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #4 0x00007fd1444a8244 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #5 <signal handler called>. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4278,reliability,fail,failed,4278,"d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007fd14446e452 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #8 0x00007fd144397703 in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #9 0x00007fd144397b93 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #10 0x00007fd14435c0c4 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #11 0x00007fd14435b67a in TApplication::InitializeGraphics() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #12 0x00007fd144361088 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #13 0x0000558ef4e6f2cc in main (). ===========================================================. ```. ROOT 6.22.00 (binary); TMapFile: works, TApplication: failed. ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f3f00a51c3a in __GI___wait4 (pid=48533, stat_loc=stat_loc. entry=0x7fff7b0eece8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f3f00a51bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fff7b0eece8, options=options. entry=0) at waitpid.c:38. #2 0x00007f3f009c0f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f3f01963e2e in TUnixSystem::StackTrace() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #4 0x00007f3f01960cb5 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #5 <signal handler called>. #6 0x00007f3efcf2ec22 in TCling::Ca",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7647,reliability,fail,failed,7647,". #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. ```. ROOT 6.24.8 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.26.10 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.28.4 (binary); TMapFile: works; TApplication: works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7738,reliability,fail,failed,7738,". #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. ```. ROOT 6.24.8 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.26.10 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.28.4 (binary); TMapFile: works; TApplication: works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:667,safety,error,error,667,"OS: Ubuntu 20.04.4. Only ROOT 6.28.04 works with the proposed ROOT-CONFIG. ROOT: 6.13.08 (binary); Compiling works, but missing libtinfo.so.5 for running. . ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . Fatal in <TROOT::InitInterpreter>: cannot load library libtinfo.so.5: cannot open shared object file: No such file or directory. ROOT: 6.14.06 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.16.00 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.18.04 (binary); Compiling works, but missing libtinfo.so.5 for running. ROOT: 6.20.00 (binary); Compiling works, TMapFile works, but TApplication failed with error,. huagen@ikp191:~/Codes/root_debug$ ./appdemo . ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths! Invoking:. x86_64-linux-gnu-g++-8 -O3 -DNDEBUG -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++/p' -e '}'. Results was:. With exit code 0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fd1435d9c3a in __GI___wait4 (pid=47601, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007fd1435d9bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0) at waitpid.c:38. #2 0x00007fd143548f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007fd1444a57e0 in TUnixSystem::StackTrace() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #4 0x00007fd1444a8244 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #5 <signal handler called>. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:721,safety,ERROR,ERROR,721,"OS: Ubuntu 20.04.4. Only ROOT 6.28.04 works with the proposed ROOT-CONFIG. ROOT: 6.13.08 (binary); Compiling works, but missing libtinfo.so.5 for running. . ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . Fatal in <TROOT::InitInterpreter>: cannot load library libtinfo.so.5: cannot open shared object file: No such file or directory. ROOT: 6.14.06 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.16.00 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.18.04 (binary); Compiling works, but missing libtinfo.so.5 for running. ROOT: 6.20.00 (binary); Compiling works, TMapFile works, but TApplication failed with error,. huagen@ikp191:~/Codes/root_debug$ ./appdemo . ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths! Invoking:. x86_64-linux-gnu-g++-8 -O3 -DNDEBUG -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++/p' -e '}'. Results was:. With exit code 0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fd1435d9c3a in __GI___wait4 (pid=47601, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007fd1435d9bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0) at waitpid.c:38. #2 0x00007fd143548f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007fd1444a57e0 in TUnixSystem::StackTrace() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #4 0x00007fd1444a8244 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #5 <signal handler called>. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7668,safety,error,error,7668,". #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. ```. ROOT 6.24.8 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.26.10 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.28.4 (binary); TMapFile: works; TApplication: works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7759,safety,error,error,7759,". #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. ```. ROOT 6.24.8 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.26.10 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.28.4 (binary); TMapFile: works; TApplication: works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1852,security,sign,signal,1852,"xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++/p' -e '}'. Results was:. With exit code 0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fd1435d9c3a in __GI___wait4 (pid=47601, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007fd1435d9bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0) at waitpid.c:38. #2 0x00007fd143548f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007fd1444a57e0 in TUnixSystem::StackTrace() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #4 0x00007fd1444a8244 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #5 <signal handler called>. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007fd14446e452 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #8 0x00007fd144397703 in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #9 0x00007fd144397b93 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #10 0x00007fd14435c0c4 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #11 0x00007fd14435b67a in TApplication::InitializeGraphics() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #12 0x00007fd144361088 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #13 0x0000558ef4e6f2cc in main (). ===========================================================. The lines below might ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5222,security,sign,signal,5222,"OOT 6.22.00 (binary); TMapFile: works, TApplication: failed. ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f3f00a51c3a in __GI___wait4 (pid=48533, stat_loc=stat_loc. entry=0x7fff7b0eece8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f3f00a51bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fff7b0eece8, options=options. entry=0) at waitpid.c:38. #2 0x00007f3f009c0f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f3f01963e2e in TUnixSystem::StackTrace() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #4 0x00007f3f01960cb5 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #5 <signal handler called>. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. The lines below might ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1110,testability,trace,trace,1110,"s, but missing libtinfo.so.5 for running. . ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . Fatal in <TROOT::InitInterpreter>: cannot load library libtinfo.so.5: cannot open shared object file: No such file or directory. ROOT: 6.14.06 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.16.00 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.18.04 (binary); Compiling works, but missing libtinfo.so.5 for running. ROOT: 6.20.00 (binary); Compiling works, TMapFile works, but TApplication failed with error,. huagen@ikp191:~/Codes/root_debug$ ./appdemo . ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths! Invoking:. x86_64-linux-gnu-g++-8 -O3 -DNDEBUG -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++/p' -e '}'. Results was:. With exit code 0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fd1435d9c3a in __GI___wait4 (pid=47601, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007fd1435d9bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0) at waitpid.c:38. #2 0x00007fd143548f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007fd1444a57e0 in TUnixSystem::StackTrace() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #4 0x00007fd1444a8244 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #5 <signal handler called>. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007fd14446e452 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #8 0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3098,testability,trace,trace,3098,"o.6.20. #8 0x00007fd144397703 in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #9 0x00007fd144397b93 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #10 0x00007fd14435c0c4 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #11 0x00007fd14435b67a in TApplication::InitializeGraphics() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #12 0x00007fd144361088 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #13 0x0000558ef4e6f2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007fd14446e452 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #8 0x00007fd144397703 in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #9 0x00007fd144397b93 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #10 0x00007fd14435c0c4 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #11 0x00007fd14435b67a in TApplication::InitializeGraphics() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #12 0x00007fd144361088 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.20.00.bin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4480,testability,trace,trace,4480,"re.so.6.20. #8 0x00007fd144397703 in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #9 0x00007fd144397b93 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #10 0x00007fd14435c0c4 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #11 0x00007fd14435b67a in TApplication::InitializeGraphics() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #12 0x00007fd144361088 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #13 0x0000558ef4e6f2cc in main (). ===========================================================. ```. ROOT 6.22.00 (binary); TMapFile: works, TApplication: failed. ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f3f00a51c3a in __GI___wait4 (pid=48533, stat_loc=stat_loc. entry=0x7fff7b0eece8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f3f00a51bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fff7b0eece8, options=options. entry=0) at waitpid.c:38. #2 0x00007f3f009c0f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f3f01963e2e in TUnixSystem::StackTrace() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #4 0x00007f3f01960cb5 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #5 <signal handler called>. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:6468,testability,trace,trace,6468,"o.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:667,usability,error,error,667,"OS: Ubuntu 20.04.4. Only ROOT 6.28.04 works with the proposed ROOT-CONFIG. ROOT: 6.13.08 (binary); Compiling works, but missing libtinfo.so.5 for running. . ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . Fatal in <TROOT::InitInterpreter>: cannot load library libtinfo.so.5: cannot open shared object file: No such file or directory. ROOT: 6.14.06 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.16.00 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.18.04 (binary); Compiling works, but missing libtinfo.so.5 for running. ROOT: 6.20.00 (binary); Compiling works, TMapFile works, but TApplication failed with error,. huagen@ikp191:~/Codes/root_debug$ ./appdemo . ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths! Invoking:. x86_64-linux-gnu-g++-8 -O3 -DNDEBUG -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++/p' -e '}'. Results was:. With exit code 0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fd1435d9c3a in __GI___wait4 (pid=47601, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007fd1435d9bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0) at waitpid.c:38. #2 0x00007fd143548f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007fd1444a57e0 in TUnixSystem::StackTrace() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #4 0x00007fd1444a8244 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #5 <signal handler called>. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:721,usability,ERROR,ERROR,721,"OS: Ubuntu 20.04.4. Only ROOT 6.28.04 works with the proposed ROOT-CONFIG. ROOT: 6.13.08 (binary); Compiling works, but missing libtinfo.so.5 for running. . ```. huagen@ikp191:~/Codes/root_debug$ ./appdemo . Fatal in <TROOT::InitInterpreter>: cannot load library libtinfo.so.5: cannot open shared object file: No such file or directory. ROOT: 6.14.06 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.16.00 (binary); Compiling works, but missing libtinfo.so.5 for running. . ROOT: 6.18.04 (binary); Compiling works, but missing libtinfo.so.5 for running. ROOT: 6.20.00 (binary); Compiling works, TMapFile works, but TApplication failed with error,. huagen@ikp191:~/Codes/root_debug$ ./appdemo . ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths! Invoking:. x86_64-linux-gnu-g++-8 -O3 -DNDEBUG -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++/p' -e '}'. Results was:. With exit code 0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fd1435d9c3a in __GI___wait4 (pid=47601, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007fd1435d9bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffc08d2908, options=options. entry=0) at waitpid.c:38. #2 0x00007fd143548f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007fd1444a57e0 in TUnixSystem::StackTrace() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #4 0x00007fd1444a8244 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #5 <signal handler called>. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2855,usability,hint,hint,2855,"l handler called>. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007fd14446e452 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #8 0x00007fd144397703 in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #9 0x00007fd144397b93 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #10 0x00007fd14435c0c4 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #11 0x00007fd14435b67a in TApplication::InitializeGraphics() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #12 0x00007fd144361088 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #13 0x0000558ef4e6f2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007fd14446e452 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #8 0x00007fd144397703 in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #9 0x00007fd144397b93 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #10 0x00007fd14435c0c4 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #11 0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2899,usability,help,help,2899,"TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007fd14446e452 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #8 0x00007fd144397703 in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #9 0x00007fd144397b93 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #10 0x00007fd14435c0c4 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #11 0x00007fd14435b67a in TApplication::InitializeGraphics() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #12 0x00007fd144361088 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #13 0x0000558ef4e6f2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007fd14446e452 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #8 0x00007fd144397703 in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #9 0x00007fd144397b93 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #10 0x00007fd14435c0c4 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #11 0x00007fd14435b67a in TApplication::Initializ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3174,usability,help,help,3174,"me/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #9 0x00007fd144397b93 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #10 0x00007fd14435c0c4 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #11 0x00007fd14435b67a in TApplication::InitializeGraphics() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #12 0x00007fd144361088 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #13 0x0000558ef4e6f2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so. #7 0x00007fd14446e452 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #8 0x00007fd144397703 in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #9 0x00007fd144397b93 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #10 0x00007fd14435c0c4 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #11 0x00007fd14435b67a in TApplication::InitializeGraphics() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #12 0x00007fd144361088 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20. #13 0x0000558ef4e6f2cc in main (). ==================",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:6225,usability,hint,hint,6225,"l handler called>. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:6269,usability,help,help,6269,"TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::Initializ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:6544,usability,help,help,6544,"me/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ==================",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7668,usability,error,error,7668,". #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. ```. ROOT 6.24.8 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.26.10 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.28.4 (binary); TMapFile: works; TApplication: works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7759,usability,error,error,7759,". #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f3efcf2ec22 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.22.00.bin/lib/libCling.so. #7 0x00007f3f01929332 in TMethodCall::Init(TFunction const*) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #8 0x00007f3f0184950b in TPluginHandler::SetupCallEnv() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #9 0x00007f3f018499c3 in TPluginHandler::CheckForExecPlugin(int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #10 0x00007f3f0180ed14 in TApplication::LoadGraphicsLibs() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #11 0x00007f3f0180e18e in TApplication::InitializeGraphics() () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #12 0x00007f3f01812be1 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/huagen/root/6.22.00.bin/lib/libCore.so.6.22. #13 0x00005563c9c9b2cc in main (). ===========================================================. ```. ROOT 6.24.8 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.26.10 (binary); TMapFile: works; TApplication: failed with the same error as above. ROOT 6.28.4 (binary); TMapFile: works; TApplication: works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:46,deployability,fail,failed,46,"Concerning the TApplication, somehow it often failed when the code was compiled with -lNew, which is required by TMapFile. Indeed with line below in the makefile,. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. it worked only with Root 6.28.04. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:0,modifiability,Concern,Concerning,0,"Concerning the TApplication, somehow it often failed when the code was compiled with -lNew, which is required by TMapFile. Indeed with line below in the makefile,. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. it worked only with Root 6.28.04. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:46,reliability,fail,failed,46,"Concerning the TApplication, somehow it often failed when the code was compiled with -lNew, which is required by TMapFile. Indeed with line below in the makefile,. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. it worked only with Root 6.28.04. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:0,testability,Concern,Concerning,0,"Concerning the TApplication, somehow it often failed when the code was compiled with -lNew, which is required by TMapFile. Indeed with line below in the makefile,. ROOTGLIBS = $(shell root-config --glibs) -Wl,--no-as-needed -lNew. it worked only with Root 6.28.04. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:333,availability,avail,available,333,"One more explicit example, on Ubuntu 18.04 LTS, . with root-config options w/o -lNew, i.e. ROOTGLIBS = $(shell root-config --glibs) -lNew, the TMapFile did not work but TApplication works fine. . If with ""-Wl,--no-as-needed -lNew"", the TMapFile works but TApplication fails with segmentation violation. Since TApplicatioin is always available for ROOT, is there any solution to make TApplication work when the option ""-Wl,--no-as-needed -lNew"" is introduced?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:268,deployability,fail,fails,268,"One more explicit example, on Ubuntu 18.04 LTS, . with root-config options w/o -lNew, i.e. ROOTGLIBS = $(shell root-config --glibs) -lNew, the TMapFile did not work but TApplication works fine. . If with ""-Wl,--no-as-needed -lNew"", the TMapFile works but TApplication fails with segmentation violation. Since TApplicatioin is always available for ROOT, is there any solution to make TApplication work when the option ""-Wl,--no-as-needed -lNew"" is introduced?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:268,reliability,fail,fails,268,"One more explicit example, on Ubuntu 18.04 LTS, . with root-config options w/o -lNew, i.e. ROOTGLIBS = $(shell root-config --glibs) -lNew, the TMapFile did not work but TApplication works fine. . If with ""-Wl,--no-as-needed -lNew"", the TMapFile works but TApplication fails with segmentation violation. Since TApplicatioin is always available for ROOT, is there any solution to make TApplication work when the option ""-Wl,--no-as-needed -lNew"" is introduced?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:333,reliability,availab,available,333,"One more explicit example, on Ubuntu 18.04 LTS, . with root-config options w/o -lNew, i.e. ROOTGLIBS = $(shell root-config --glibs) -lNew, the TMapFile did not work but TApplication works fine. . If with ""-Wl,--no-as-needed -lNew"", the TMapFile works but TApplication fails with segmentation violation. Since TApplicatioin is always available for ROOT, is there any solution to make TApplication work when the option ""-Wl,--no-as-needed -lNew"" is introduced?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:333,safety,avail,available,333,"One more explicit example, on Ubuntu 18.04 LTS, . with root-config options w/o -lNew, i.e. ROOTGLIBS = $(shell root-config --glibs) -lNew, the TMapFile did not work but TApplication works fine. . If with ""-Wl,--no-as-needed -lNew"", the TMapFile works but TApplication fails with segmentation violation. Since TApplicatioin is always available for ROOT, is there any solution to make TApplication work when the option ""-Wl,--no-as-needed -lNew"" is introduced?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:333,security,availab,available,333,"One more explicit example, on Ubuntu 18.04 LTS, . with root-config options w/o -lNew, i.e. ROOTGLIBS = $(shell root-config --glibs) -lNew, the TMapFile did not work but TApplication works fine. . If with ""-Wl,--no-as-needed -lNew"", the TMapFile works but TApplication fails with segmentation violation. Since TApplicatioin is always available for ROOT, is there any solution to make TApplication work when the option ""-Wl,--no-as-needed -lNew"" is introduced?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:227,availability,avail,available,227,"It works for me. In your example, Isee:. > Fatal in TROOT::InitInterpreter: cannot load library libtinfo.so.5: cannot open shared object file: No such file or directory. What is going on there? Do you have this `libtinfo.so.5` available in the LD_LIBRARY_PATH?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:83,energy efficiency,load,load,83,"It works for me. In your example, Isee:. > Fatal in TROOT::InitInterpreter: cannot load library libtinfo.so.5: cannot open shared object file: No such file or directory. What is going on there? Do you have this `libtinfo.so.5` available in the LD_LIBRARY_PATH?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:123,interoperability,share,shared,123,"It works for me. In your example, Isee:. > Fatal in TROOT::InitInterpreter: cannot load library libtinfo.so.5: cannot open shared object file: No such file or directory. What is going on there? Do you have this `libtinfo.so.5` available in the LD_LIBRARY_PATH?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:83,performance,load,load,83,"It works for me. In your example, Isee:. > Fatal in TROOT::InitInterpreter: cannot load library libtinfo.so.5: cannot open shared object file: No such file or directory. What is going on there? Do you have this `libtinfo.so.5` available in the LD_LIBRARY_PATH?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:227,reliability,availab,available,227,"It works for me. In your example, Isee:. > Fatal in TROOT::InitInterpreter: cannot load library libtinfo.so.5: cannot open shared object file: No such file or directory. What is going on there? Do you have this `libtinfo.so.5` available in the LD_LIBRARY_PATH?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:227,safety,avail,available,227,"It works for me. In your example, Isee:. > Fatal in TROOT::InitInterpreter: cannot load library libtinfo.so.5: cannot open shared object file: No such file or directory. What is going on there? Do you have this `libtinfo.so.5` available in the LD_LIBRARY_PATH?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:227,security,availab,available,227,"It works for me. In your example, Isee:. > Fatal in TROOT::InitInterpreter: cannot load library libtinfo.so.5: cannot open shared object file: No such file or directory. What is going on there? Do you have this `libtinfo.so.5` available in the LD_LIBRARY_PATH?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:178,availability,avail,availabe,178,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:227,availability,error,error,227,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:107,deployability,version,versions,107,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:429,deployability,version,version,429,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:474,deployability,version,versions,474,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:560,deployability,version,versions,560,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1010,deployability,updat,update,1010,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:107,integrability,version,versions,107,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:429,integrability,version,version,429,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:474,integrability,version,versions,474,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:560,integrability,version,versions,560,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:314,interoperability,specif,specific,314,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:107,modifiability,version,versions,107,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:429,modifiability,version,version,429,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:454,modifiability,Concern,Concerning,454,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:474,modifiability,version,versions,474,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:560,modifiability,version,versions,560,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:227,performance,error,error,227,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:178,reliability,availab,availabe,178,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:258,reliability,doe,does,258,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:178,safety,avail,availabe,178,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:227,safety,error,error,227,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:366,safety,test,tested,366,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:583,safety,test,tested,583,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:612,safety,except,except,612,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1010,safety,updat,update,1010,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:178,security,availab,availabe,178,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1010,security,updat,update,1010,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:366,testability,test,tested,366,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:454,testability,Concern,Concerning,454,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:583,testability,test,tested,583,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:227,usability,error,error,227,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:888,usability,close,closer,888,"Hi, Philippe,. Many thanks for your effort. Indeed, the case of missing libtinfo.so.5 happened to the root versions of 6.14.06, 6.16.00 and 6.18.04, however the libtinfo.so.6 is availabe on Ubuntu 20.04.4. From 6.20.00 on, the error of missing libtinfo.so.5 does not appere any more. . Maybe we could focus on one specific OS, for instance, Ubuntu 20.04.4. Have you tested the macros on Ubuntu 20.04.4? Or which system and which version have you used? . Concerning the ROOT versions (6.24.08, 6.26.10 and 6.28.04) on the Ubuntu 20.04.4 (gcc 9.4), those 3 ROOT versions all have been tested with gcc9.4, however, except for 6.28.04, the 6.24.08 and 6.26.10 both don't work with TApplication when the macro was compiled with the ROOT-CONFIG option of ""-Wl,--no-as-needed -lNew"". . Without the option ""-Wl,--no-as-needed -lNew"", the TApplication works properly as expected. Could you have a closer look at this issue? What I want is to have more working combinations of ROOT and Ubuntu, therefore I don't have to update each OS system and the EMS system, which is quite challenging. . Many thanks in advance. Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:245,availability,Error,Error,245,"Hi, Philippe,. Just an update to the issue, . after having upgraded the OS to Ubuntu 22.04 LTS, Root version 6.30.02. The compilation with ""-Wl, --no-as-needed -lNew"" works fine. . But problems still remain:. run the demo macro of TApplication, Error messages are as following,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:294,availability,operat,operator,294,"Hi, Philippe,. Just an update to the issue, . after having upgraded the OS to Ubuntu 22.04 LTS, Root version 6.30.02. The compilation with ""-Wl, --no-as-needed -lNew"" works fine. . But problems still remain:. run the demo macro of TApplication, Error messages are as following,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1062,availability,Error,ErrorHandler,1062,"the OS to Ubuntu 22.04 LTS, Root version 6.30.02. The compilation with ""-Wl, --no-as-needed -lNew"" works fine. . But problems still remain:. run the demo macro of TApplication, Error messages are as following,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1272,availability,operat,operator,1272,",. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f7902d6a47e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffeb2a74cf8, env=env. entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70. #13 0x00007f7902d6a568 in ca",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2572,availability,operat,operate,2572,"tion*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f7902d6a47e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffeb2a74cf8, env=env. entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2580,availability,operat,operate,2580," () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f7902d6a47e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffeb2a74cf8, env=env. entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2671,availability,error,error-skeleton,2671,"amespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f7902d6a47e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffeb2a74cf8, env=env. entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, o",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2943,availability,operat,operate,2943,"ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f7902d6a47e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffeb2a74cf8, env=env. entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_impl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2951,availability,operat,operate,2951," __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f7902d6a47e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffeb2a74cf8, env=env. entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementati",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3044,availability,error,error-skeleton,3044,"OT/root_v6.30.02/lib/libCling.so. #12 0x00007f7902d6a47e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffeb2a74cf8, env=env. entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:7",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3472,availability,operat,operate,3472,"init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3531,availability,error,error-skeleton,3531," (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3677,availability,operat,operate,3677,"eton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. **************************************************************************************************************************",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3736,availability,error,error-skeleton,3736,"b2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. `",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3798,availability,operat,operate,3798,"entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```. Fatal in <operator new>: with std::align_val_t is not i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3806,availability,operat,operate,3806,"7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```. Fatal in <operator new>: with std::align_val_t is not implement",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4726,availability,error,error,4726,"elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f1de22ea3ea in __GI___wait4 (pid=10442, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f1de22ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f1de2250bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1de3b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f1de39d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f1de3a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f1de3a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f1de3cb56",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4757,availability,operat,operator,4757," 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f1de22ea3ea in __GI___wait4 (pid=10442, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f1de22ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f1de2250bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1de3b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f1de39d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f1de3a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f1de3a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f1de3cb56ed in operator new(unsigned long",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5525,availability,Error,ErrorHandler,5525,"Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f1de22ea3ea in __GI___wait4 (pid=10442, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f1de22ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f1de2250bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1de3b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f1de39d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f1de3a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f1de3a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f1de3cb56ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f1de01f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f1de01f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f1de01f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f1ddc1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5735,availability,operat,operator,5735,",. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f1de22ea3ea in __GI___wait4 (pid=10442, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f1de22ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f1de2250bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1de3b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f1de39d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f1de3a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f1de3a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f1de3cb56ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f1de01f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f1de01f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f1de01f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f1ddc1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f1de3cc147e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffc77af7118, env=env. entry=0x7ffc77af7128) at ./elf/dl-init.c:70. #13 0x00007f1de3cc1568 in ca",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7035,availability,operat,operate,7035,"tion*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f1de01f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f1de01f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f1ddc1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f1de3cc147e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffc77af7118, env=env. entry=0x7ffc77af7128) at ./elf/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7043,availability,operat,operate,7043," () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f1de01f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f1de01f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f1ddc1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f1de3cc147e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffc77af7118, env=env. entry=0x7ffc77af7128) at ./elf/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7134,availability,error,error-skeleton,7134,"amespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f1de01f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f1ddc1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f1de3cc147e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffc77af7118, env=env. entry=0x7ffc77af7128) at ./elf/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, o",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7406,availability,operat,operate,7406,"ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f1de3cc147e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffc77af7118, env=env. entry=0x7ffc77af7128) at ./elf/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_impl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7414,availability,operat,operate,7414," __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f1de3cc147e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffc77af7118, env=env. entry=0x7ffc77af7128) at ./elf/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementati",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7507,availability,error,error-skeleton,7507,"OT/root_v6.30.02/lib/libCling.so. #12 0x00007f1de3cc147e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffc77af7118, env=env. entry=0x7ffc77af7128) at ./elf/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:7",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7935,availability,operat,operate,7935,"init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. **************************************************************",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7994,availability,error,error-skeleton,7994," (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ****************************************************************************************************************************",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:8140,availability,operat,operate,8140,"eton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar erro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:8199,availability,error,error-skeleton,8199,"77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no me",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:8261,availability,operat,operate,8261,"entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or lin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:8269,availability,operat,operate,8269,"7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link applic",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:9140,availability,error,error,9140,"-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and Happy New Year! Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:9170,availability,Error,Error,9170,"-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and Happy New Year! Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:9234,availability,avail,available,9234,"-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and Happy New Year! Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:23,deployability,updat,update,23,"Hi, Philippe,. Just an update to the issue, . after having upgraded the OS to Ubuntu 22.04 LTS, Root version 6.30.02. The compilation with ""-Wl, --no-as-needed -lNew"" works fine. . But problems still remain:. run the demo macro of TApplication, Error messages are as following,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:59,deployability,upgrad,upgraded,59,"Hi, Philippe,. Just an update to the issue, . after having upgraded the OS to Ubuntu 22.04 LTS, Root version 6.30.02. The compilation with ""-Wl, --no-as-needed -lNew"" works fine. . But problems still remain:. run the demo macro of TApplication, Error messages are as following,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:101,deployability,version,version,101,"Hi, Philippe,. Just an update to the issue, . after having upgraded the OS to Ubuntu 22.04 LTS, Root version 6.30.02. The compilation with ""-Wl, --no-as-needed -lNew"" works fine. . But problems still remain:. run the demo macro of TApplication, Error messages are as following,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:832,deployability,Stack,StackTrace,832,"Hi, Philippe,. Just an update to the issue, . after having upgraded the OS to Ubuntu 22.04 LTS, Root version 6.30.02. The compilation with ""-Wl, --no-as-needed -lNew"" works fine. . But problems still remain:. run the demo macro of TApplication, Error messages are as following,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5295,deployability,Stack,StackTrace,5295,"rom /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f1de22ea3ea in __GI___wait4 (pid=10442, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f1de22ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f1de2250bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1de3b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f1de39d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f1de3a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f1de3a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f1de3cb56ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f1de01f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f1de01f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f1de01f680",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:9339,deployability,version,version,9339,"-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and Happy New Year! Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:9356,deployability,version,version,9356,"-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and Happy New Year! Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:594,energy efficiency,optim,optimized,594,"Hi, Philippe,. Just an update to the issue, . after having upgraded the OS to Ubuntu 22.04 LTS, Root version 6.30.02. The compilation with ""-Wl, --no-as-needed -lNew"" works fine. . But problems still remain:. run the demo macro of TApplication, Error messages are as following,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:744,energy efficiency,optim,optimized,744,"Hi, Philippe,. Just an update to the issue, . after having upgraded the OS to Ubuntu 22.04 LTS, Root version 6.30.02. The compilation with ""-Wl, --no-as-needed -lNew"" works fine. . But problems still remain:. run the demo macro of TApplication, Error messages are as following,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2125,energy efficiency,optim,optimized,2125,"#6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f7902d6a47e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffeb2a74cf8, env=env. entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2337,energy efficiency,optim,optimized,2337,"/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f7902d6a47e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffeb2a74cf8, env=env. entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ff",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3108,energy efficiency,optim,optimized,3108,"ll_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffeb2a74cf8, env=env. entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3227,energy efficiency,optim,optimized,3227,"f/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/l",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3481,energy efficiency,optim,optimized,3481,". #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3503,energy efficiency,optim,optimized,3503,"05 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x0000",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3686,energy efficiency,optim,optimized,3686,". #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3708,energy efficiency,optim,optimized,3708,"f6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3970,energy efficiency,optim,optimized,3970,"71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f1de22ea3ea in __GI___wait4 (pid=10442, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0, usage=usage. entry=0x0) at ../",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3992,energy efficiency,optim,optimized,3992,", args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f1de22ea3ea in __GI___wait4 (pid=10442, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4014,energy efficiency,optim,optimized,4014,"ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f1de22ea3ea in __GI___wait4 (pid=10442, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x000",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4075,energy efficiency,optim,optimized,4075,"02d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f1de22ea3ea in __GI___wait4 (pid=10442, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f1de22ea3ab in __GI___waitpid (pid=<optimized out>, stat_lo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4097,energy efficiency,optim,optimized,4097,"file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f1de22ea3ea in __GI___wait4 (pid=10442, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f1de22ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4540,energy efficiency,core,core,4540,"ton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f1de22ea3ea in __GI___wait4 (pid=10442, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f1de22ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f1de2250bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1de3b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f1de39d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f1de3a96fe9 in ErrorHandler () f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5057,energy efficiency,optim,optimized,5057,"lopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f1de22ea3ea in __GI___wait4 (pid=10442, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f1de22ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f1de2250bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1de3b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f1de39d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f1de3a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f1de3a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f1de3cb56ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f1de01f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5207,energy efficiency,optim,optimized,5207,"/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f1de22ea3ea in __GI___wait4 (pid=10442, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f1de22ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f1de2250bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1de3b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f1de39d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f1de3a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f1de3a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f1de3cb56ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f1de01f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f1de01f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::Su",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:6588,energy efficiency,optim,optimized,6588,"#6 0x00007f1de3a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f1de3cb56ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f1de01f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f1de01f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f1de01f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f1ddc1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f1de3cc147e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffc77af7118, env=env. entry=0x7ffc77af7128) at ./elf/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:6800,energy efficiency,optim,optimized,6800,"/root_v6.30.02/lib/libNew.so. #8 0x00007f1de01f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f1de01f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f1de01f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f1ddc1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f1de3cc147e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffc77af7118, env=env. entry=0x7ffc77af7128) at ./elf/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ff",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7571,energy efficiency,optim,optimized,7571,"ll_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffc77af7118, env=env. entry=0x7ffc77af7128) at ./elf/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7690,energy efficiency,optim,optimized,7690,"f/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/l",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7944,energy efficiency,optim,optimized,7944,". #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ************************************************************************",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7966,energy efficiency,optim,optimized,7966,"05 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. **********************************************************************************************",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:8149,energy efficiency,optim,optimized,8149,". #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as befor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:8171,energy efficiency,optim,optimized,8171,"f6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:8433,energy efficiency,optim,optimized,8433,"c8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:8455,energy efficiency,optim,optimized,8455,", args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indee",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:8477,energy efficiency,optim,optimized,8477,"ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:8538,energy efficiency,optim,optimized,8538,"-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and Happy New Year! Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:8560,energy efficiency,optim,optimized,8560,"-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and Happy New Year! Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:8858,energy efficiency,core,core,8858,"-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and Happy New Year! Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:101,integrability,version,version,101,"Hi, Philippe,. Just an update to the issue, . after having upgraded the OS to Ubuntu 22.04 LTS, Root version 6.30.02. The compilation with ""-Wl, --no-as-needed -lNew"" works fine. . But problems still remain:. run the demo macro of TApplication, Error messages are as following,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:251,integrability,messag,messages,251,"Hi, Philippe,. Just an update to the issue, . after having upgraded the OS to Ubuntu 22.04 LTS, Root version 6.30.02. The compilation with ""-Wl, --no-as-needed -lNew"" works fine. . But problems still remain:. run the demo macro of TApplication, Error messages are as following,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1747,integrability,Sub,SubCommand,1747,"d out>) at ../sysdeps/posix/system.c:171. #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f7902d6a47e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffeb2a74cf8, env=env. entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:6210,integrability,Sub,SubCommand,6210,"d out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1de3b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f1de39d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f1de3a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f1de3a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f1de3cb56ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f1de01f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f1de01f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f1de01f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f1ddc1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f1de3cc147e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffc77af7118, env=env. entry=0x7ffc77af7128) at ./elf/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:9339,integrability,version,version,9339,"-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and Happy New Year! Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:9356,integrability,version,version,9356,"-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and Happy New Year! Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:251,interoperability,messag,messages,251,"Hi, Philippe,. Just an update to the issue, . after having upgraded the OS to Ubuntu 22.04 LTS, Root version 6.30.02. The compilation with ""-Wl, --no-as-needed -lNew"" works fine. . But problems still remain:. run the demo macro of TApplication, Error messages are as following,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2677,interoperability,skeleton,skeleton,2677,"space)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f7902d6a47e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffeb2a74cf8, env=env. entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, oper",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3050,interoperability,skeleton,skeleton,3050,"root_v6.30.02/lib/libCling.so. #12 0x00007f7902d6a47e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffeb2a74cf8, env=env. entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3537,interoperability,skeleton,skeleton,3537,"xception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3742,interoperability,skeleton,skeleton,3742,"746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7140,interoperability,skeleton,skeleton,7140,"space)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f1de01f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f1ddc1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f1de3cc147e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffc77af7118, env=env. entry=0x7ffc77af7128) at ./elf/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, oper",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7513,interoperability,skeleton,skeleton,7513,"root_v6.30.02/lib/libCling.so. #12 0x00007f1de3cc147e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffc77af7118, env=env. entry=0x7ffc77af7128) at ./elf/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:8000,interoperability,skeleton,skeleton,8000,"xception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. *******************************************************************************************************************************",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:8205,interoperability,skeleton,skeleton,8205,"f6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:59,modifiability,upgrad,upgraded,59,"Hi, Philippe,. Just an update to the issue, . after having upgraded the OS to Ubuntu 22.04 LTS, Root version 6.30.02. The compilation with ""-Wl, --no-as-needed -lNew"" works fine. . But problems still remain:. run the demo macro of TApplication, Error messages are as following,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:101,modifiability,version,version,101,"Hi, Philippe,. Just an update to the issue, . after having upgraded the OS to Ubuntu 22.04 LTS, Root version 6.30.02. The compilation with ""-Wl, --no-as-needed -lNew"" works fine. . But problems still remain:. run the demo macro of TApplication, Error messages are as following,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:9339,modifiability,version,version,9339,"-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and Happy New Year! Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:9356,modifiability,version,version,9356,"-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and Happy New Year! Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:245,performance,Error,Error,245,"Hi, Philippe,. Just an update to the issue, . after having upgraded the OS to Ubuntu 22.04 LTS, Root version 6.30.02. The compilation with ""-Wl, --no-as-needed -lNew"" works fine. . But problems still remain:. run the demo macro of TApplication, Error messages are as following,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:594,performance,optimiz,optimized,594,"Hi, Philippe,. Just an update to the issue, . after having upgraded the OS to Ubuntu 22.04 LTS, Root version 6.30.02. The compilation with ""-Wl, --no-as-needed -lNew"" works fine. . But problems still remain:. run the demo macro of TApplication, Error messages are as following,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:744,performance,optimiz,optimized,744,"Hi, Philippe,. Just an update to the issue, . after having upgraded the OS to Ubuntu 22.04 LTS, Root version 6.30.02. The compilation with ""-Wl, --no-as-needed -lNew"" works fine. . But problems still remain:. run the demo macro of TApplication, Error messages are as following,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1062,performance,Error,ErrorHandler,1062,"the OS to Ubuntu 22.04 LTS, Root version 6.30.02. The compilation with ""-Wl, --no-as-needed -lNew"" works fine. . But problems still remain:. run the demo macro of TApplication, Error messages are as following,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2125,performance,optimiz,optimized,2125,"#6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f7902d6a47e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffeb2a74cf8, env=env. entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2337,performance,optimiz,optimized,2337,"/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f7902d6a47e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffeb2a74cf8, env=env. entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ff",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2671,performance,error,error-skeleton,2671,"amespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f7902d6a47e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffeb2a74cf8, env=env. entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, o",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3044,performance,error,error-skeleton,3044,"OT/root_v6.30.02/lib/libCling.so. #12 0x00007f7902d6a47e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffeb2a74cf8, env=env. entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:7",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3108,performance,optimiz,optimized,3108,"ll_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffeb2a74cf8, env=env. entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3227,performance,optimiz,optimized,3227,"f/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/l",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3481,performance,optimiz,optimized,3481,". #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3503,performance,optimiz,optimized,3503,"05 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x0000",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3531,performance,error,error-skeleton,3531," (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3686,performance,optimiz,optimized,3686,". #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3708,performance,optimiz,optimized,3708,"f6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3736,performance,error,error-skeleton,3736,"b2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. `",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3970,performance,optimiz,optimized,3970,"71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f1de22ea3ea in __GI___wait4 (pid=10442, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0, usage=usage. entry=0x0) at ../",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3992,performance,optimiz,optimized,3992,", args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f1de22ea3ea in __GI___wait4 (pid=10442, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4014,performance,optimiz,optimized,4014,"ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f1de22ea3ea in __GI___wait4 (pid=10442, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x000",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4075,performance,optimiz,optimized,4075,"02d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f1de22ea3ea in __GI___wait4 (pid=10442, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f1de22ea3ab in __GI___waitpid (pid=<optimized out>, stat_lo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4097,performance,optimiz,optimized,4097,"file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f1de22ea3ea in __GI___wait4 (pid=10442, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f1de22ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4726,performance,error,error,4726,"elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f1de22ea3ea in __GI___wait4 (pid=10442, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f1de22ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f1de2250bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1de3b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f1de39d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f1de3a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f1de3a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f1de3cb56",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5057,performance,optimiz,optimized,5057,"lopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f1de22ea3ea in __GI___wait4 (pid=10442, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f1de22ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f1de2250bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1de3b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f1de39d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f1de3a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f1de3a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f1de3cb56ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f1de01f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5207,performance,optimiz,optimized,5207,"/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f1de22ea3ea in __GI___wait4 (pid=10442, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f1de22ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f1de2250bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1de3b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f1de39d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f1de3a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f1de3a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f1de3cb56ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f1de01f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f1de01f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::Su",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5525,performance,Error,ErrorHandler,5525,"Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f1de22ea3ea in __GI___wait4 (pid=10442, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f1de22ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f1de2250bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1de3b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f1de39d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f1de3a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f1de3a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f1de3cb56ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f1de01f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f1de01f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f1de01f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f1ddc1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:6588,performance,optimiz,optimized,6588,"#6 0x00007f1de3a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f1de3cb56ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f1de01f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f1de01f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f1de01f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f1ddc1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f1de3cc147e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffc77af7118, env=env. entry=0x7ffc77af7128) at ./elf/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:6800,performance,optimiz,optimized,6800,"/root_v6.30.02/lib/libNew.so. #8 0x00007f1de01f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f1de01f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f1de01f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f1ddc1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f1de3cc147e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffc77af7118, env=env. entry=0x7ffc77af7128) at ./elf/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ff",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7134,performance,error,error-skeleton,7134,"amespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f1de01f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f1ddc1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f1de3cc147e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffc77af7118, env=env. entry=0x7ffc77af7128) at ./elf/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, o",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7507,performance,error,error-skeleton,7507,"OT/root_v6.30.02/lib/libCling.so. #12 0x00007f1de3cc147e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffc77af7118, env=env. entry=0x7ffc77af7128) at ./elf/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:7",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7571,performance,optimiz,optimized,7571,"ll_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffc77af7118, env=env. entry=0x7ffc77af7128) at ./elf/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7690,performance,optimiz,optimized,7690,"f/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/l",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7944,performance,optimiz,optimized,7944,". #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ************************************************************************",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7966,performance,optimiz,optimized,7966,"05 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. **********************************************************************************************",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7994,performance,error,error-skeleton,7994," (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ****************************************************************************************************************************",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:8149,performance,optimiz,optimized,8149,". #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as befor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:8171,performance,optimiz,optimized,8171,"f6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:8199,performance,error,error-skeleton,8199,"77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no me",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:8433,performance,optimiz,optimized,8433,"c8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:8455,performance,optimiz,optimized,8455,", args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indee",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:8477,performance,optimiz,optimized,8477,"ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:8538,performance,optimiz,optimized,8538,"-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and Happy New Year! Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:8560,performance,optimiz,optimized,8560,"-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and Happy New Year! Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:9140,performance,error,error,9140,"-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and Happy New Year! Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:9170,performance,Error,Error,9170,"-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and Happy New Year! Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:9204,performance,memor,memory,9204,"-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and Happy New Year! Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:9234,reliability,availab,available,9234,"-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and Happy New Year! Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:23,safety,updat,update,23,"Hi, Philippe,. Just an update to the issue, . after having upgraded the OS to Ubuntu 22.04 LTS, Root version 6.30.02. The compilation with ""-Wl, --no-as-needed -lNew"" works fine. . But problems still remain:. run the demo macro of TApplication, Error messages are as following,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:245,safety,Error,Error,245,"Hi, Philippe,. Just an update to the issue, . after having upgraded the OS to Ubuntu 22.04 LTS, Root version 6.30.02. The compilation with ""-Wl, --no-as-needed -lNew"" works fine. . But problems still remain:. run the demo macro of TApplication, Error messages are as following,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1062,safety,Error,ErrorHandler,1062,"the OS to Ubuntu 22.04 LTS, Root version 6.30.02. The compilation with ""-Wl, --no-as-needed -lNew"" works fine. . But problems still remain:. run the demo macro of TApplication, Error messages are as following,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2540,safety,except,exception,2540,">(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f7902d6a47e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffeb2a74cf8, env=env. entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2550,safety,except,exception,2550,"ringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f7902d6a47e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffeb2a74cf8, env=env. entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #2",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2671,safety,error,error-skeleton,2671,"amespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f7902d6a47e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffeb2a74cf8, env=env. entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, o",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2900,safety,except,exception,2900,"6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f7902d6a47e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffeb2a74cf8, env=env. entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2910,safety,except,exception,2910,"b/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f7902d6a47e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffeb2a74cf8, env=env. entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3044,safety,error,error-skeleton,3044,"OT/root_v6.30.02/lib/libCling.so. #12 0x00007f7902d6a47e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffeb2a74cf8, env=env. entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:7",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3429,safety,except,exception,3429,"b2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, voi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3439,safety,except,exception,3439,"env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) (",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3531,safety,error,error-skeleton,3531," (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3736,safety,error,error-skeleton,3736,"b2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. `",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4726,safety,error,error,4726,"elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f1de22ea3ea in __GI___wait4 (pid=10442, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f1de22ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f1de2250bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1de3b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f1de39d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f1de3a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f1de3a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f1de3cb56",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5525,safety,Error,ErrorHandler,5525,"Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f1de22ea3ea in __GI___wait4 (pid=10442, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f1de22ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f1de2250bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1de3b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f1de39d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f1de3a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f1de3a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f1de3cb56ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f1de01f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f1de01f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f1de01f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f1ddc1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7003,safety,except,exception,7003,">(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f1de01f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f1de01f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f1ddc1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f1de3cc147e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffc77af7118, env=env. entry=0x7ffc77af7128) at ./elf/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7013,safety,except,exception,7013,"ringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f1de01f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f1de01f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f1ddc1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f1de3cc147e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffc77af7118, env=env. entry=0x7ffc77af7128) at ./elf/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #2",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7134,safety,error,error-skeleton,7134,"amespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f1de01f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f1ddc1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f1de3cc147e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffc77af7118, env=env. entry=0x7ffc77af7128) at ./elf/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, o",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7363,safety,except,exception,7363,"6.30.02/lib/libCling.so. #11 0x00007f1ddc1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f1de3cc147e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffc77af7118, env=env. entry=0x7ffc77af7128) at ./elf/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7373,safety,except,exception,7373,"b/libCling.so. #11 0x00007f1ddc1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f1de3cc147e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffc77af7118, env=env. entry=0x7ffc77af7128) at ./elf/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7507,safety,error,error-skeleton,7507,"OT/root_v6.30.02/lib/libCling.so. #12 0x00007f1de3cc147e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffc77af7118, env=env. entry=0x7ffc77af7128) at ./elf/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:7",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7892,safety,except,exception,7892,"77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ********************",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7902,safety,except,exception,7902,"env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ******************************",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7994,safety,error,error-skeleton,7994," (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ****************************************************************************************************************************",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:8199,safety,error,error-skeleton,8199,"77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no me",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:9140,safety,error,error,9140,"-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and Happy New Year! Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:9170,safety,Error,Error,9170,"-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and Happy New Year! Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:9234,safety,avail,available,9234,"-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and Happy New Year! Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:9320,safety,test,test,9320,"-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and Happy New Year! Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:23,security,updat,update,23,"Hi, Philippe,. Just an update to the issue, . after having upgraded the OS to Ubuntu 22.04 LTS, Root version 6.30.02. The compilation with ""-Wl, --no-as-needed -lNew"" works fine. . But problems still remain:. run the demo macro of TApplication, Error messages are as following,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:9234,security,availab,available,9234,"-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and Happy New Year! Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:9320,testability,test,test,9320,"-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and Happy New Year! Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:245,usability,Error,Error,245,"Hi, Philippe,. Just an update to the issue, . after having upgraded the OS to Ubuntu 22.04 LTS, Root version 6.30.02. The compilation with ""-Wl, --no-as-needed -lNew"" works fine. . But problems still remain:. run the demo macro of TApplication, Error messages are as following,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1062,usability,Error,ErrorHandler,1062,"the OS to Ubuntu 22.04 LTS, Root version 6.30.02. The compilation with ""-Wl, --no-as-needed -lNew"" works fine. . But problems still remain:. run the demo macro of TApplication, Error messages are as following,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffeb2a715a8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1689,usability,Command,CommandLineParser,1689,"38. #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f7902d6a47e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffeb2a74cf8, env=env. entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2671,usability,error,error-skeleton,2671,"amespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f7902d6a47e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffeb2a74cf8, env=env. entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, o",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3044,usability,error,error-skeleton,3044,"OT/root_v6.30.02/lib/libCling.so. #12 0x00007f7902d6a47e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffeb2a74cf8, env=env. entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70. #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117. #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:7",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3531,usability,error,error-skeleton,3531," (exception=exception. entry=0x0, operate=operate. entry=0x7f7902d71f40 <call_dl_init>, args=args. entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182. #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:3736,usability,error,error-skeleton,3736,"b2a746f0) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771. #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a746d0, operate=operate. entry=0x7f7902d71f60 <dl_open_worker>, args=args. entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208. #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f7902a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffeb2a74d08) at ./elf/dl-open.c:883. #20 0x00007f7901a9063c in dlopen_doit (a=a. entry=0x7ffeb2a74960) at ./dlfcn/dlopen.c:56. #21 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffeb2a748c0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. `",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:4726,usability,error,error,4726,"elf/dl-error-skeleton.c:227. #23 0x00007f7901a9012e in _dlerror_run (operate=operate. entry=0x7f7901a905e0 <dlopen_doit>, args=args. entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138. #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #29 0x00005572a86f2327 in main . Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f1de22ea3ea in __GI___wait4 (pid=10442, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f1de22ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f1de2250bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1de3b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f1de39d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f1de3a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f1de3a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f1de3cb56",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:5525,usability,Error,ErrorHandler,5525,"Aborted (core dumped). ```. *****************************************************************************************************************************. run the demo macro of TMapFile, similar error appears,. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. #0 0x00007f1de22ea3ea in __GI___wait4 (pid=10442, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f1de22ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffc77af3ad8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f1de2250bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1de3b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f1de39d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f1de3a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f1de3a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f1de3cb56ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f1de01f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f1de01f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f1de01f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f1ddc1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:6152,usability,Command,CommandLineParser,6152,"38. #2 0x00007f1de2250bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1de3b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #4 0x00007f1de39d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #5 0x00007f1de3a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #6 0x00007f1de3a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #7 0x00007f1de3cb56ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so. #8 0x00007f1de01f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #9 0x00007f1de01f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f1de01f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f1ddc1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f1de3cc147e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffc77af7118, env=env. entry=0x7ffc77af7128) at ./elf/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7134,usability,error,error-skeleton,7134,"amespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #10 0x00007f1de01f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #11 0x00007f1ddc1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so. #12 0x00007f1de3cc147e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffc77af7118, env=env. entry=0x7ffc77af7128) at ./elf/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, o",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7507,usability,error,error-skeleton,7507,"OT/root_v6.30.02/lib/libCling.so. #12 0x00007f1de3cc147e in call_init (l=<optimized out>, argc=argc. entry=1, argv=argv. entry=0x7ffc77af7118, env=env. entry=0x7ffc77af7128) at ./elf/dl-init.c:70. #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33. #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117. #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:7",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:7994,usability,error,error-skeleton,7994," (exception=exception. entry=0x0, operate=operate. entry=0x7f1de3cc8f40 <call_dl_init>, args=args. entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182. #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ****************************************************************************************************************************",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:8199,usability,error,error-skeleton,8199,"77af6c20) at ./elf/dl-open.c:808. #17 dl_open_worker (a=a. entry=0x7ffc77af6c20) at ./elf/dl-open.c:771. #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6c00, operate=operate. entry=0x7f1de3cc8f60 <dl_open_worker>, args=args. entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no me",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:9140,usability,error,error,9140,"-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and Happy New Year! Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:9170,usability,Error,Error,9170,"-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and Happy New Year! Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:9204,usability,memor,memory,9204,"-error-skeleton.c:208. #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen=0x7f1de3a01a07 <TROOT::InitInterpreter()+1031>, nsid=-2, argc=1, argv=<optimized out>, env=0x7ffc77af7128) at ./elf/dl-open.c:883. #20 0x00007f1de229063c in dlopen_doit (a=a. entry=0x7ffc77af6e90) at ./dlfcn/dlopen.c:56. #21 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception. entry=0x7ffc77af6df0, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:208. #22 0x00007f1de2374973 in __GI__dl_catch_error (objname=0x7ffc77af6e48, errstring=0x7ffc77af6e50, mallocedp=0x7ffc77af6e47, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227. #23 0x00007f1de229012e in _dlerror_run (operate=operate. entry=0x7f1de22905e0 <dlopen_doit>, args=args. entry=0x7ffc77af6e90) at ./dlfcn/dlerror.c:138. #24 0x00007f1de22906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71. #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81. #26 0x00007f1de3a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #27 0x00007f1de3a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so. #28 0x000055a9220122ec in main (). Aborted (core dumped). ```. ***************************************************************************************************************************************. With ""-lNew"" to compile the macro, the demo macro of TApplication works fine, but the demo macro of TMapFile shows the simiar error as before, i.e., . ```. Error in <TMapFile::TMapFile>: no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". ```. This is the latest test with newer OS version and ROOT version. It would be highly appreciated you could have a look at this after Christmas holidays:-). Indeed, Merry Christmas and Happy New Year! Huagen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:15,availability,operat,operator,15,```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. indicates that `libNew` is being used but that the C++ standard is too high for it (i.e. it needs some additional coding to support newer standard).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:136,interoperability,standard,standard,136,```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. indicates that `libNew` is being used but that the C++ standard is too high for it (i.e. it needs some additional coding to support newer standard).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:219,interoperability,standard,standard,219,```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. indicates that `libNew` is being used but that the C++ standard is too high for it (i.e. it needs some additional coding to support newer standard).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:81,usability,indicat,indicates,81,```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. indicates that `libNew` is being used but that the C++ standard is too high for it (i.e. it needs some additional coding to support newer standard).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:205,usability,support,support,205,```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. indicates that `libNew` is being used but that the C++ standard is too high for it (i.e. it needs some additional coding to support newer standard).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:81,availability,error,error,81,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:128,availability,operat,operator,128,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:475,availability,operat,operator,475,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:945,availability,down,downgrade,945,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1238,availability,down,downgrade,1238,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:6,deployability,upgrad,upgrading,6,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:766,deployability,version,version,766,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:859,deployability,version,version,859,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1044,deployability,version,version,1044,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1186,deployability,version,version,1186,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1369,deployability,releas,release,1369,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1411,deployability,releas,release-notes,1411,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1430,deployability,releas,release-,1430,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1455,deployability,version,version,1455,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1498,deployability,releas,release,1498,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:581,energy efficiency,current,currently,581,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:845,energy efficiency,current,current,845,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1178,energy efficiency,current,current,1178,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:766,integrability,version,version,766,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:859,integrability,version,version,859,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1044,integrability,version,version,1044,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1186,integrability,version,version,1186,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1455,integrability,version,version,1455,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:6,modifiability,upgrad,upgrading,6,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:766,modifiability,version,version,766,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:859,modifiability,version,version,859,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1044,modifiability,version,version,1044,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1186,modifiability,version,version,1186,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1455,modifiability,version,version,1455,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:81,performance,error,error,81,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1166,performance,time,time,1166,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1615,performance,time,time,1615,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:81,safety,error,error,81,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1523,security,sign,significant,1523,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:331,testability,understand,understand,331,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1349,testability,regress,regressions,1349,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1535,testability,regress,regressions,1535,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:81,usability,error,error,81,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1089,usability,support,supported,1089,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1639,usability,user,user,1639,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread. ```. Fatal in <operator new>: with std::align_val_t is not implemented yet. ```. A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew. - libNew is broken with -std=c++17 or higher (missing `operator new` overload). - ROOT 6.30 requires C++17. - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS. . If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/pull/13512:42,deployability,build,build,42,"You probably want to test with the ""clean build"" label to make sure it actually works; incremental builds don't seem to run `cmake` configuration again (because no options changed).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13512
https://github.com/root-project/root/pull/13512:99,deployability,build,builds,99,"You probably want to test with the ""clean build"" label to make sure it actually works; incremental builds don't seem to run `cmake` configuration again (because no options changed).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13512
https://github.com/root-project/root/pull/13512:132,deployability,configurat,configuration,132,"You probably want to test with the ""clean build"" label to make sure it actually works; incremental builds don't seem to run `cmake` configuration again (because no options changed).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13512
https://github.com/root-project/root/pull/13512:132,integrability,configur,configuration,132,"You probably want to test with the ""clean build"" label to make sure it actually works; incremental builds don't seem to run `cmake` configuration again (because no options changed).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13512
https://github.com/root-project/root/pull/13512:132,modifiability,configur,configuration,132,"You probably want to test with the ""clean build"" label to make sure it actually works; incremental builds don't seem to run `cmake` configuration again (because no options changed).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13512
https://github.com/root-project/root/pull/13512:21,safety,test,test,21,"You probably want to test with the ""clean build"" label to make sure it actually works; incremental builds don't seem to run `cmake` configuration again (because no options changed).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13512
https://github.com/root-project/root/pull/13512:132,security,configur,configuration,132,"You probably want to test with the ""clean build"" label to make sure it actually works; incremental builds don't seem to run `cmake` configuration again (because no options changed).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13512
https://github.com/root-project/root/pull/13512:21,testability,test,test,21,"You probably want to test with the ""clean build"" label to make sure it actually works; incremental builds don't seem to run `cmake` configuration again (because no options changed).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13512
https://github.com/root-project/root/pull/13515:27,security,garbl,garbled,27,Thanks @vepadulano - I saw garbled output before so I prefer to add some newlines...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13515
https://github.com/root-project/root/pull/13515:54,usability,prefer,prefer,54,Thanks @vepadulano - I saw garbled output before so I prefer to add some newlines...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13515
https://github.com/root-project/root/issues/13516:92,safety,test,testing,92,@ktf do you think you could have a look at this? Can we do without including a header from `testing/`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:92,testability,test,testing,92,@ktf do you think you could have a look at this? Can we do without including a header from `testing/`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:588,integrability,Messag,Message,588,"i will check later tonight. i think it might be trivial. Ciao,. Giulio. On Wed, Aug 23 2023 at 3:05 PM, Axel Naumann ***@***.***>. wrote:. > @ktf <https://github.com/ktf> do you think you could have a look at this? > Can we do without including a header from testing/? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/13516#issuecomment-1689929484>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AAACSMEGK6DEOKF546VM27TXWX5ZDANCNFSM6AAAAAA33LZWIQ>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:588,interoperability,Messag,Message,588,"i will check later tonight. i think it might be trivial. Ciao,. Giulio. On Wed, Aug 23 2023 at 3:05 PM, Axel Naumann ***@***.***>. wrote:. > @ktf <https://github.com/ktf> do you think you could have a look at this? > Can we do without including a header from testing/? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/13516#issuecomment-1689929484>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AAACSMEGK6DEOKF546VM27TXWX5ZDANCNFSM6AAAAAA33LZWIQ>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:259,safety,test,testing,259,"i will check later tonight. i think it might be trivial. Ciao,. Giulio. On Wed, Aug 23 2023 at 3:05 PM, Axel Naumann ***@***.***>. wrote:. > @ktf <https://github.com/ktf> do you think you could have a look at this? > Can we do without including a header from testing/? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/13516#issuecomment-1689929484>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AAACSMEGK6DEOKF546VM27TXWX5ZDANCNFSM6AAAAAA33LZWIQ>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:474,security,auth,auth,474,"i will check later tonight. i think it might be trivial. Ciao,. Giulio. On Wed, Aug 23 2023 at 3:05 PM, Axel Naumann ***@***.***>. wrote:. > @ktf <https://github.com/ktf> do you think you could have a look at this? > Can we do without including a header from testing/? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/13516#issuecomment-1689929484>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AAACSMEGK6DEOKF546VM27TXWX5ZDANCNFSM6AAAAAA33LZWIQ>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:259,testability,test,testing,259,"i will check later tonight. i think it might be trivial. Ciao,. Giulio. On Wed, Aug 23 2023 at 3:05 PM, Axel Naumann ***@***.***>. wrote:. > @ktf <https://github.com/ktf> do you think you could have a look at this? > Can we do without including a header from testing/? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/13516#issuecomment-1689929484>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AAACSMEGK6DEOKF546VM27TXWX5ZDANCNFSM6AAAAAA33LZWIQ>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/pull/13517:229,deployability,version,version,229,"Note that RooFit doesn't compile with GCC 6 + C++14 (more precisely `roofit/hs3/src/RooJSONFactoryWSTool.cxx`), but given that Bertrand was able to compile v6.28 with GCC 9.4.0, it may as well be a problem with that old compiler version so I'm not going to bother... @guitargeek",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13517
https://github.com/root-project/root/pull/13517:229,integrability,version,version,229,"Note that RooFit doesn't compile with GCC 6 + C++14 (more precisely `roofit/hs3/src/RooJSONFactoryWSTool.cxx`), but given that Bertrand was able to compile v6.28 with GCC 9.4.0, it may as well be a problem with that old compiler version so I'm not going to bother... @guitargeek",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13517
https://github.com/root-project/root/pull/13517:229,modifiability,version,version,229,"Note that RooFit doesn't compile with GCC 6 + C++14 (more precisely `roofit/hs3/src/RooJSONFactoryWSTool.cxx`), but given that Bertrand was able to compile v6.28 with GCC 9.4.0, it may as well be a problem with that old compiler version so I'm not going to bother... @guitargeek",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13517
https://github.com/root-project/root/pull/13517:17,reliability,doe,doesn,17,"Note that RooFit doesn't compile with GCC 6 + C++14 (more precisely `roofit/hs3/src/RooJSONFactoryWSTool.cxx`), but given that Bertrand was able to compile v6.28 with GCC 9.4.0, it may as well be a problem with that old compiler version so I'm not going to bother... @guitargeek",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13517
https://github.com/root-project/root/pull/13519:201,deployability,version,version,201,"> Would that style suit you? I see that the C++ tutorial is already formatted with the `.clang-format` style of ROOT, good 👍. Hey! Thanks a lot! Sure, I think I tried some formatting with the previous version and it looked a bit funny at times so I didn't do it again. I like the result of Black, just one question, which one is better - tab or lack of tab, for example like in line 48? (Black adds a tab). ![Screenshot 2023-10-17 at 14 48 03](https://github.com/root-project/root/assets/80402204/2d60a5bc-185b-4c1e-8b13-096e1ec6ee17). ![Screenshot 2023-10-17 at 14 48 19](https://github.com/root-project/root/assets/80402204/4bf6fd86-36df-4c30-ab7a-cb65e5f70a68).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13519:201,integrability,version,version,201,"> Would that style suit you? I see that the C++ tutorial is already formatted with the `.clang-format` style of ROOT, good 👍. Hey! Thanks a lot! Sure, I think I tried some formatting with the previous version and it looked a bit funny at times so I didn't do it again. I like the result of Black, just one question, which one is better - tab or lack of tab, for example like in line 48? (Black adds a tab). ![Screenshot 2023-10-17 at 14 48 03](https://github.com/root-project/root/assets/80402204/2d60a5bc-185b-4c1e-8b13-096e1ec6ee17). ![Screenshot 2023-10-17 at 14 48 19](https://github.com/root-project/root/assets/80402204/4bf6fd86-36df-4c30-ab7a-cb65e5f70a68).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13519:68,interoperability,format,formatted,68,"> Would that style suit you? I see that the C++ tutorial is already formatted with the `.clang-format` style of ROOT, good 👍. Hey! Thanks a lot! Sure, I think I tried some formatting with the previous version and it looked a bit funny at times so I didn't do it again. I like the result of Black, just one question, which one is better - tab or lack of tab, for example like in line 48? (Black adds a tab). ![Screenshot 2023-10-17 at 14 48 03](https://github.com/root-project/root/assets/80402204/2d60a5bc-185b-4c1e-8b13-096e1ec6ee17). ![Screenshot 2023-10-17 at 14 48 19](https://github.com/root-project/root/assets/80402204/4bf6fd86-36df-4c30-ab7a-cb65e5f70a68).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13519:95,interoperability,format,format,95,"> Would that style suit you? I see that the C++ tutorial is already formatted with the `.clang-format` style of ROOT, good 👍. Hey! Thanks a lot! Sure, I think I tried some formatting with the previous version and it looked a bit funny at times so I didn't do it again. I like the result of Black, just one question, which one is better - tab or lack of tab, for example like in line 48? (Black adds a tab). ![Screenshot 2023-10-17 at 14 48 03](https://github.com/root-project/root/assets/80402204/2d60a5bc-185b-4c1e-8b13-096e1ec6ee17). ![Screenshot 2023-10-17 at 14 48 19](https://github.com/root-project/root/assets/80402204/4bf6fd86-36df-4c30-ab7a-cb65e5f70a68).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13519:172,interoperability,format,formatting,172,"> Would that style suit you? I see that the C++ tutorial is already formatted with the `.clang-format` style of ROOT, good 👍. Hey! Thanks a lot! Sure, I think I tried some formatting with the previous version and it looked a bit funny at times so I didn't do it again. I like the result of Black, just one question, which one is better - tab or lack of tab, for example like in line 48? (Black adds a tab). ![Screenshot 2023-10-17 at 14 48 03](https://github.com/root-project/root/assets/80402204/2d60a5bc-185b-4c1e-8b13-096e1ec6ee17). ![Screenshot 2023-10-17 at 14 48 19](https://github.com/root-project/root/assets/80402204/4bf6fd86-36df-4c30-ab7a-cb65e5f70a68).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13519:201,modifiability,version,version,201,"> Would that style suit you? I see that the C++ tutorial is already formatted with the `.clang-format` style of ROOT, good 👍. Hey! Thanks a lot! Sure, I think I tried some formatting with the previous version and it looked a bit funny at times so I didn't do it again. I like the result of Black, just one question, which one is better - tab or lack of tab, for example like in line 48? (Black adds a tab). ![Screenshot 2023-10-17 at 14 48 03](https://github.com/root-project/root/assets/80402204/2d60a5bc-185b-4c1e-8b13-096e1ec6ee17). ![Screenshot 2023-10-17 at 14 48 19](https://github.com/root-project/root/assets/80402204/4bf6fd86-36df-4c30-ab7a-cb65e5f70a68).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13519:238,performance,time,times,238,"> Would that style suit you? I see that the C++ tutorial is already formatted with the `.clang-format` style of ROOT, good 👍. Hey! Thanks a lot! Sure, I think I tried some formatting with the previous version and it looked a bit funny at times so I didn't do it again. I like the result of Black, just one question, which one is better - tab or lack of tab, for example like in line 48? (Black adds a tab). ![Screenshot 2023-10-17 at 14 48 03](https://github.com/root-project/root/assets/80402204/2d60a5bc-185b-4c1e-8b13-096e1ec6ee17). ![Screenshot 2023-10-17 at 14 48 19](https://github.com/root-project/root/assets/80402204/4bf6fd86-36df-4c30-ab7a-cb65e5f70a68).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13519:178,availability,slo,slot,178,"It's indeed ugly with the tab I think :slightly_smiling_face:. What about this? ```python. code = """""". martamaja10 marked this conversation as resolved. float scale(unsigned int slot, const ROOT::RDF::RSampleInfo &id){. return id.Contains(""mc_363490.llll.4lep.root"") ? 1.3f : 1.0f;. }. """""". ROOT.gInterpreter.Declare(code). ```. Black is also happy with it, and it doesn't have more lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13519:159,deployability,scale,scale,159,"It's indeed ugly with the tab I think :slightly_smiling_face:. What about this? ```python. code = """""". martamaja10 marked this conversation as resolved. float scale(unsigned int slot, const ROOT::RDF::RSampleInfo &id){. return id.Contains(""mc_363490.llll.4lep.root"") ? 1.3f : 1.0f;. }. """""". ROOT.gInterpreter.Declare(code). ```. Black is also happy with it, and it doesn't have more lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13519:230,deployability,Contain,Contains,230,"It's indeed ugly with the tab I think :slightly_smiling_face:. What about this? ```python. code = """""". martamaja10 marked this conversation as resolved. float scale(unsigned int slot, const ROOT::RDF::RSampleInfo &id){. return id.Contains(""mc_363490.llll.4lep.root"") ? 1.3f : 1.0f;. }. """""". ROOT.gInterpreter.Declare(code). ```. Black is also happy with it, and it doesn't have more lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13519:159,energy efficiency,scale,scale,159,"It's indeed ugly with the tab I think :slightly_smiling_face:. What about this? ```python. code = """""". martamaja10 marked this conversation as resolved. float scale(unsigned int slot, const ROOT::RDF::RSampleInfo &id){. return id.Contains(""mc_363490.llll.4lep.root"") ? 1.3f : 1.0f;. }. """""". ROOT.gInterpreter.Declare(code). ```. Black is also happy with it, and it doesn't have more lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13519:127,interoperability,convers,conversation,127,"It's indeed ugly with the tab I think :slightly_smiling_face:. What about this? ```python. code = """""". martamaja10 marked this conversation as resolved. float scale(unsigned int slot, const ROOT::RDF::RSampleInfo &id){. return id.Contains(""mc_363490.llll.4lep.root"") ? 1.3f : 1.0f;. }. """""". ROOT.gInterpreter.Declare(code). ```. Black is also happy with it, and it doesn't have more lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13519:159,modifiability,scal,scale,159,"It's indeed ugly with the tab I think :slightly_smiling_face:. What about this? ```python. code = """""". martamaja10 marked this conversation as resolved. float scale(unsigned int slot, const ROOT::RDF::RSampleInfo &id){. return id.Contains(""mc_363490.llll.4lep.root"") ? 1.3f : 1.0f;. }. """""". ROOT.gInterpreter.Declare(code). ```. Black is also happy with it, and it doesn't have more lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13519:159,performance,scale,scale,159,"It's indeed ugly with the tab I think :slightly_smiling_face:. What about this? ```python. code = """""". martamaja10 marked this conversation as resolved. float scale(unsigned int slot, const ROOT::RDF::RSampleInfo &id){. return id.Contains(""mc_363490.llll.4lep.root"") ? 1.3f : 1.0f;. }. """""". ROOT.gInterpreter.Declare(code). ```. Black is also happy with it, and it doesn't have more lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13519:178,reliability,slo,slot,178,"It's indeed ugly with the tab I think :slightly_smiling_face:. What about this? ```python. code = """""". martamaja10 marked this conversation as resolved. float scale(unsigned int slot, const ROOT::RDF::RSampleInfo &id){. return id.Contains(""mc_363490.llll.4lep.root"") ? 1.3f : 1.0f;. }. """""". ROOT.gInterpreter.Declare(code). ```. Black is also happy with it, and it doesn't have more lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13519:365,reliability,doe,doesn,365,"It's indeed ugly with the tab I think :slightly_smiling_face:. What about this? ```python. code = """""". martamaja10 marked this conversation as resolved. float scale(unsigned int slot, const ROOT::RDF::RSampleInfo &id){. return id.Contains(""mc_363490.llll.4lep.root"") ? 1.3f : 1.0f;. }. """""". ROOT.gInterpreter.Declare(code). ```. Black is also happy with it, and it doesn't have more lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13519:201,security,RSa,RSampleInfo,201,"It's indeed ugly with the tab I think :slightly_smiling_face:. What about this? ```python. code = """""". martamaja10 marked this conversation as resolved. float scale(unsigned int slot, const ROOT::RDF::RSampleInfo &id){. return id.Contains(""mc_363490.llll.4lep.root"") ? 1.3f : 1.0f;. }. """""". ROOT.gInterpreter.Declare(code). ```. Black is also happy with it, and it doesn't have more lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13520:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13520
https://github.com/root-project/root/pull/13520:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13520
https://github.com/root-project/root/pull/13520:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13520
https://github.com/root-project/root/pull/13521:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13521
https://github.com/root-project/root/pull/13521:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13521
https://github.com/root-project/root/pull/13522:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13522
https://github.com/root-project/root/pull/13523:79,availability,error,errors,79,"Can someone have a look at the failing tests? Frankly, I cannot tell where the errors are...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:31,deployability,fail,failing,31,"Can someone have a look at the failing tests? Frankly, I cannot tell where the errors are...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:79,performance,error,errors,79,"Can someone have a look at the failing tests? Frankly, I cannot tell where the errors are...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:31,reliability,fail,failing,31,"Can someone have a look at the failing tests? Frankly, I cannot tell where the errors are...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:39,safety,test,tests,39,"Can someone have a look at the failing tests? Frankly, I cannot tell where the errors are...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:79,safety,error,errors,79,"Can someone have a look at the failing tests? Frankly, I cannot tell where the errors are...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:39,testability,test,tests,39,"Can someone have a look at the failing tests? Frankly, I cannot tell where the errors are...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:79,usability,error,errors,79,"Can someone have a look at the failing tests? Frankly, I cannot tell where the errors are...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:4,deployability,fail,failing,4,All failing tests have nothing to do with PR. One can merge it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:4,reliability,fail,failing,4,All failing tests have nothing to do with PR. One can merge it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:12,safety,test,tests,12,All failing tests have nothing to do with PR. One can merge it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:12,testability,test,tests,12,All failing tests have nothing to do with PR. One can merge it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13526:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13526
https://github.com/root-project/root/pull/13526:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13526
https://github.com/root-project/root/pull/13528:89,availability,error,errors,89,"Hi Will, thanks a lot for this! I was actually thinking just last week about setting the errors like this :+1:. There are some test failures, but there are only because the HS3 HistFactory implementation is not inconsistent. I will fix this, add the commit to this PR, and then merge",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13528
https://github.com/root-project/root/pull/13528:132,availability,failur,failures,132,"Hi Will, thanks a lot for this! I was actually thinking just last week about setting the errors like this :+1:. There are some test failures, but there are only because the HS3 HistFactory implementation is not inconsistent. I will fix this, add the commit to this PR, and then merge",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13528
https://github.com/root-project/root/pull/13528:132,deployability,fail,failures,132,"Hi Will, thanks a lot for this! I was actually thinking just last week about setting the errors like this :+1:. There are some test failures, but there are only because the HS3 HistFactory implementation is not inconsistent. I will fix this, add the commit to this PR, and then merge",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13528
https://github.com/root-project/root/pull/13528:89,performance,error,errors,89,"Hi Will, thanks a lot for this! I was actually thinking just last week about setting the errors like this :+1:. There are some test failures, but there are only because the HS3 HistFactory implementation is not inconsistent. I will fix this, add the commit to this PR, and then merge",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13528
https://github.com/root-project/root/pull/13528:132,performance,failur,failures,132,"Hi Will, thanks a lot for this! I was actually thinking just last week about setting the errors like this :+1:. There are some test failures, but there are only because the HS3 HistFactory implementation is not inconsistent. I will fix this, add the commit to this PR, and then merge",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13528
https://github.com/root-project/root/pull/13528:132,reliability,fail,failures,132,"Hi Will, thanks a lot for this! I was actually thinking just last week about setting the errors like this :+1:. There are some test failures, but there are only because the HS3 HistFactory implementation is not inconsistent. I will fix this, add the commit to this PR, and then merge",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13528
https://github.com/root-project/root/pull/13528:89,safety,error,errors,89,"Hi Will, thanks a lot for this! I was actually thinking just last week about setting the errors like this :+1:. There are some test failures, but there are only because the HS3 HistFactory implementation is not inconsistent. I will fix this, add the commit to this PR, and then merge",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13528
https://github.com/root-project/root/pull/13528:127,safety,test,test,127,"Hi Will, thanks a lot for this! I was actually thinking just last week about setting the errors like this :+1:. There are some test failures, but there are only because the HS3 HistFactory implementation is not inconsistent. I will fix this, add the commit to this PR, and then merge",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13528
https://github.com/root-project/root/pull/13528:127,testability,test,test,127,"Hi Will, thanks a lot for this! I was actually thinking just last week about setting the errors like this :+1:. There are some test failures, but there are only because the HS3 HistFactory implementation is not inconsistent. I will fix this, add the commit to this PR, and then merge",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13528
https://github.com/root-project/root/pull/13528:89,usability,error,errors,89,"Hi Will, thanks a lot for this! I was actually thinking just last week about setting the errors like this :+1:. There are some test failures, but there are only because the HS3 HistFactory implementation is not inconsistent. I will fix this, add the commit to this PR, and then merge",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13528
https://github.com/root-project/root/pull/13528:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13528
https://github.com/root-project/root/pull/13530:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13530
https://github.com/root-project/root/issues/13531:339,deployability,build,build,339,"PS by having a closer look at the `TFileMerger` class I think we should have here . https://github.com/root-project/root/blob/d286987139f8ba0833ab438c4523e388156deeb1/io/io/src/TFileMerger.cxx?plain=1#L893. the following lines . ```C++. // save modifications to the target directory. if (!(type&kIncremental)) {. // In case of incremental build, we will call Write on the top directory/file, so we do not need. // to call SaveSelf explicilty. target->SaveSelf(kTRUE);. if (target != fOutputFile){. // Delete target directory after writting it . // and avoid deleting output file if target is the output file . delete target;. }. }. ```. which is the equivalent lines that I have put in my `fasterCustomHadd` script .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:552,safety,avoid,avoid,552,"PS by having a closer look at the `TFileMerger` class I think we should have here . https://github.com/root-project/root/blob/d286987139f8ba0833ab438c4523e388156deeb1/io/io/src/TFileMerger.cxx?plain=1#L893. the following lines . ```C++. // save modifications to the target directory. if (!(type&kIncremental)) {. // In case of incremental build, we will call Write on the top directory/file, so we do not need. // to call SaveSelf explicilty. target->SaveSelf(kTRUE);. if (target != fOutputFile){. // Delete target directory after writting it . // and avoid deleting output file if target is the output file . delete target;. }. }. ```. which is the equivalent lines that I have put in my `fasterCustomHadd` script .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:245,security,modif,modifications,245,"PS by having a closer look at the `TFileMerger` class I think we should have here . https://github.com/root-project/root/blob/d286987139f8ba0833ab438c4523e388156deeb1/io/io/src/TFileMerger.cxx?plain=1#L893. the following lines . ```C++. // save modifications to the target directory. if (!(type&kIncremental)) {. // In case of incremental build, we will call Write on the top directory/file, so we do not need. // to call SaveSelf explicilty. target->SaveSelf(kTRUE);. if (target != fOutputFile){. // Delete target directory after writting it . // and avoid deleting output file if target is the output file . delete target;. }. }. ```. which is the equivalent lines that I have put in my `fasterCustomHadd` script .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:15,usability,close,closer,15,"PS by having a closer look at the `TFileMerger` class I think we should have here . https://github.com/root-project/root/blob/d286987139f8ba0833ab438c4523e388156deeb1/io/io/src/TFileMerger.cxx?plain=1#L893. the following lines . ```C++. // save modifications to the target directory. if (!(type&kIncremental)) {. // In case of incremental build, we will call Write on the top directory/file, so we do not need. // to call SaveSelf explicilty. target->SaveSelf(kTRUE);. if (target != fOutputFile){. // Delete target directory after writting it . // and avoid deleting output file if target is the output file . delete target;. }. }. ```. which is the equivalent lines that I have put in my `fasterCustomHadd` script .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:118,deployability,releas,release,118,"Dear @pcanal, . This is a kind reminder of this issue, it would be very nice to have a fix for it in an incoming ROOT release. . Many thanks in advance!!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/pull/13532:4,safety,test,test,4,The test can be found in roottest https://github.com/root-project/roottest/pull/1005,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13532
https://github.com/root-project/root/pull/13532:4,testability,test,test,4,The test can be found in roottest https://github.com/root-project/roottest/pull/1005,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13532
https://github.com/root-project/root/pull/13532:11,deployability,build,build,11,@phsft-bot build to pick up the new test in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13532
https://github.com/root-project/root/pull/13532:36,safety,test,test,36,@phsft-bot build to pick up the new test in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13532
https://github.com/root-project/root/pull/13532:36,testability,test,test,36,@phsft-bot build to pick up the new test in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13532
https://github.com/root-project/root/pull/13533:11,deployability,build,build,11,@phsft-bot build on ROOT-ubuntu2204/nortcxxmod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/issues/13536:2148,availability,reliab,reliably,2148,"+20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:192,deployability,modul,module,192,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:343,deployability,modul,modules,343,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:398,deployability,depend,depend,398,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:520,deployability,modul,module,520,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:854,deployability,build,build,854,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1031,deployability,depend,dependencies,1031,"uest. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that w",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1069,deployability,modul,modules,1069,"ectly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as w",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1122,deployability,modul,modules,1122,"blic-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1156,deployability,modul,modules,1156,"icture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1468,deployability,modul,module,1468," I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1475,deployability,depend,dependencies,1475,"s can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot ma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1565,deployability,modul,modules,1565,"ader files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1635,deployability,build,build,1635,"e because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1868,deployability,modul,modules,1868,"s basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dic",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1879,deployability,scale,scale,1879,"r our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary sy",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2051,deployability,roll,roll,2051,"re or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something bett",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2060,deployability,modul,modules,2060,"++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that ma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2105,deployability,scale,scale,2105," ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2118,deployability,modul,modules,2118,"modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim tha",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2187,deployability,modul,modularization,2187,"rd. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 module",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2236,deployability,modul,modularizing,2236,"ld use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more abo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2324,deployability,modul,modular,2324,"ncapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private depe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2353,deployability,observ,observed,2353,"is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported enti",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2373,deployability,modul,modularization,2373,"ransitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2669,deployability,observ,observed,2669,"ect files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2707,deployability,modul,modularization,2707,"anners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2930,deployability,build,build,2930,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2975,deployability,build,build,2975,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3027,deployability,modul,modules,3027,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3188,deployability,modul,modules,3188,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3324,deployability,depend,dependencies,3324,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:4,energy efficiency,green,greenc-FNAL,4,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1879,energy efficiency,scale,scale,1879,"r our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary sy",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2105,energy efficiency,scale,scale,2105," ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3596,energy efficiency,adapt,adapt,3596,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:124,integrability,pub,public-friendly,124,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:398,integrability,depend,depend,398,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1031,integrability,depend,dependencies,1031,"uest. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that w",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1327,integrability,encapsulat,encapsulation,1327,"ny C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1459,integrability,discover,discover,1459,"0 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The re",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1475,integrability,depend,dependencies,1475,"s can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot ma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1782,integrability,protocol,protocols,1782,"der file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic wo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2187,integrability,modular,modularization,2187,"rd. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 module",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2236,integrability,modular,modularizing,2236,"ld use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more abo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2324,integrability,modular,modular,2324,"ncapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private depe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2373,integrability,modular,modularization,2373,"ransitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2707,integrability,modular,modularization,2707,"anners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3153,integrability,interfac,interface,3153,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3163,integrability,encapsulat,encapsulation,3163,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3324,integrability,depend,dependencies,3324,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3596,integrability,adapt,adapt,3596,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:218,interoperability,specif,specific,218,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:699,interoperability,format,format,699,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:718,interoperability,standard,standard,718,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1188,interoperability,standard,standard,1188,"module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modul",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1459,interoperability,discover,discover,1459,"0 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The re",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1782,interoperability,protocol,protocols,1782,"der file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic wo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2087,interoperability,standard,standard,2087,"least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3153,interoperability,interfac,interface,3153,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3596,interoperability,adapt,adapt,3596,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:94,modifiability,concern,concerns,94,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:192,modifiability,modul,module,192,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:343,modifiability,modul,modules,343,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:398,modifiability,depend,depend,398,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:520,modifiability,modul,module,520,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1031,modifiability,depend,dependencies,1031,"uest. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that w",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1069,modifiability,modul,modules,1069,"ectly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as w",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1122,modifiability,modul,modules,1122,"blic-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1156,modifiability,modul,modules,1156,"icture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1327,modifiability,encapsul,encapsulation,1327,"ny C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1468,modifiability,modul,module,1468," I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1475,modifiability,depend,dependencies,1475,"s can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot ma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1565,modifiability,modul,modules,1565,"ader files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1868,modifiability,modul,modules,1868,"s basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dic",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1879,modifiability,scal,scale,1879,"r our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary sy",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2060,modifiability,modul,modules,2060,"++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that ma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2105,modifiability,scal,scale,2105," ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2118,modifiability,modul,modules,2118,"modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim tha",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2187,modifiability,modul,modularization,2187,"rd. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 module",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2236,modifiability,modul,modularizing,2236,"ld use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more abo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2324,modifiability,modul,modular,2324,"ncapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private depe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2373,modifiability,modul,modularization,2373,"ransitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2707,modifiability,modul,modularization,2707,"anners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3027,modifiability,modul,modules,3027,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3153,modifiability,interfac,interface,3153,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3163,modifiability,encapsul,encapsulation,3163,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3188,modifiability,modul,modules,3188,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3324,modifiability,depend,dependencies,3324,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3596,modifiability,adapt,adapt,3596,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3737,modifiability,concern,concerns,3737,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1616,performance,content,content,1616,"case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1879,performance,scale,scale,1879,"r our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary sy",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2105,performance,scale,scale,2105," ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3072,performance,I/O,I/O,3072,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3201,performance,I/O,I/O,3201,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:593,reliability,pra,practice,593,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1577,reliability,pra,practice,1577,"However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-15789",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2148,reliability,reliab,reliably,2148,"+20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3708,reliability,Doe,Does,3708,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:192,safety,modul,module,192,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:343,safety,modul,modules,343,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:398,safety,depend,depend,398,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:520,safety,modul,module,520,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1031,safety,depend,dependencies,1031,"uest. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that w",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1069,safety,modul,modules,1069,"ectly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as w",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1122,safety,modul,modules,1122,"blic-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1156,safety,modul,modules,1156,"icture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1468,safety,modul,module,1468," I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1475,safety,depend,dependencies,1475,"s can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot ma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1565,safety,modul,modules,1565,"ader files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1868,safety,modul,modules,1868,"s basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dic",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2060,safety,modul,modules,2060,"++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that ma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2118,safety,modul,modules,2118,"modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim tha",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2187,safety,modul,modularization,2187,"rd. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 module",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2236,safety,modul,modularizing,2236,"ld use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more abo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2324,safety,modul,modular,2324,"ncapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private depe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2373,safety,modul,modularization,2373,"ransitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2707,safety,modul,modularization,2707,"anners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3027,safety,modul,modules,3027,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3188,safety,modul,modules,3188,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3324,safety,depend,dependencies,3324,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1712,security,scanner,scanners,1712,"t standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modulariz",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:94,testability,concern,concerns,94,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:398,testability,depend,depend,398,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1031,testability,depend,dependencies,1031,"uest. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that w",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1475,testability,depend,dependencies,1475,"s can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot ma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2187,testability,modula,modularization,2187,"rd. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 module",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2236,testability,modula,modularizing,2236,"ld use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more abo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2324,testability,modula,modular,2324,"ncapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private depe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2353,testability,observ,observed,2353,"is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported enti",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2373,testability,modula,modularization,2373,"ransitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2669,testability,observ,observed,2669,"ect files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:2707,testability,modula,modularization,2707,"anners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3324,testability,depend,dependencies,3324,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3737,testability,concern,concerns,3737,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:275,usability,interact,interactions,275,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1459,usability,discov,discover,1459,"0 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The re",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1512,usability,tool,tooling,1512,"ing module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3010,usability,custom,custom,3010,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3451,usability,person,personally,3451,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3668,usability,user,user,3668,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:3690,usability,clear,clear,3690,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:169,deployability,modul,modules,169,"@vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:317,deployability,modul,modularization,317,"@vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:527,deployability,modul,modules,527,"@vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:786,deployability,modul,modules,786,"@vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:874,deployability,modul,modules,874,"@vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:317,integrability,modular,modularization,317,"@vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:625,integrability,sub,subject,625,"@vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:169,modifiability,modul,modules,169,"@vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:317,modifiability,modul,modularization,317,"@vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:527,modifiability,modul,modules,527,"@vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:786,modifiability,modul,modules,786,"@vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:874,modifiability,modul,modules,874,"@vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:637,reliability,doe,does,637,"@vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:169,safety,modul,modules,169,"@vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:317,safety,modul,modularization,317,"@vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:527,safety,modul,modules,527,"@vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:786,safety,modul,modules,786,"@vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:874,safety,modul,modules,874,"@vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:317,testability,modula,modularization,317,"@vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:373,testability,understand,understand,373,"@vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:475,usability,support,support,475,"@vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:483,usability,interact,interacting,483,"@vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:752,usability,support,support,752,"@vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:171,deployability,modul,modules,171,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:319,deployability,modul,modularization,319,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:529,deployability,modul,modules,529,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:965,deployability,modul,modules,965,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1053,deployability,modul,modules,1053,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1144,deployability,modul,modules,1144,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1199,deployability,modul,modules,1199,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1261,deployability,modul,modules,1261,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1376,deployability,modul,modulo,1376,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1482,deployability,modul,modules,1482,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:319,integrability,modular,modularization,319,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:804,integrability,sub,subject,804,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1325,integrability,standardiz,standardization,1325,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:590,interoperability,specif,specific,590,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1325,interoperability,standard,standardization,1325,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:171,modifiability,modul,modules,171,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:319,modifiability,modul,modularization,319,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:529,modifiability,modul,modules,529,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:965,modifiability,modul,modules,965,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1053,modifiability,modul,modules,1053,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1144,modifiability,modul,modules,1144,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1199,modifiability,modul,modules,1199,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1261,modifiability,modul,modules,1261,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1376,modifiability,modul,modulo,1376,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1482,modifiability,modul,modules,1482,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:816,reliability,doe,does,816,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1366,reliability,pra,practice,1366,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:171,safety,modul,modules,171,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:319,safety,modul,modularization,319,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:529,safety,modul,modules,529,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:965,safety,modul,modules,965,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1053,safety,modul,modules,1053,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1144,safety,modul,modules,1144,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1199,safety,modul,modules,1199,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1261,safety,modul,modules,1261,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1376,safety,modul,modulo,1376,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1482,safety,modul,modules,1482,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:659,security,iso,isocpp,659,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:705,security,iso,isocpp,705,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:319,testability,modula,modularization,319,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:375,testability,understand,understand,375,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:477,usability,support,support,477,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:485,usability,interact,interacting,485,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:931,usability,support,support,931,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1152,usability,support,support,1152,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1519,usability,close,close-to-production,1519,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1696,usability,support,support,1696,"> @vgvassilev Thanks for your detailed and thoughtful reply. I'm confused about one thing in particular though: in the light of https://en.cppreference.com/w/cpp/language/modules#Global_module_fragment (as pointed out to me by my colleague @knoepfel), it would not seem to be a given in the general case that bottom-up modularization is required (or even desired). I think I understand your argument re serialization, but I'm not sure how that impacts our request to have ROOT support interacting with externally-generated C++20 modules. That is correct since that is implementation/vendor-specific. You can follow the discussions on the [SG15](https://lists.isocpp.org/mailman/listinfo.cgi/sg15) side at isocpp. > I will look at the materials you reference and attempt to do some further reading on the subject. It does seem though, that there's something of a chicken-and-egg problem here: unless ROOT is proactive in developing support for external use of C++20 modules, then it becomes difficult for ROOT-using projects to even consider using C++20 modules in their own projects if it is likely to intersect with their use of ROOT. The C++ modules support in the dictionaries is based on ""Clang modules"". This is the very same implementation of the ""C++ 20 modules"". In the end the implementation in Clang has driven the standardization of the functionality. In practice, modulo the import/export syntax and a few quirks what ROOT uses is the basis of what you call here ""C++20 modules"". If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:324,deployability,version,version,324,"Thanks again for the thoughtful reply. > If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it. I would like to do this; the question I have is, against what ROOT version/branch would it be most useful to work? Is 6.28/04 sufficient with LLVM/Clang 13, or should I be using master or something else?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:324,integrability,version,version,324,"Thanks again for the thoughtful reply. > If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it. I would like to do this; the question I have is, against what ROOT version/branch would it be most useful to work? Is 6.28/04 sufficient with LLVM/Clang 13, or should I be using master or something else?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:324,modifiability,version,version,324,"Thanks again for the thoughtful reply. > If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it. I would like to do this; the question I have is, against what ROOT version/branch would it be most useful to work? Is 6.28/04 sufficient with LLVM/Clang 13, or should I be using master or something else?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:68,usability,close,close-to-production,68,"Thanks again for the thoughtful reply. > If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it. I would like to do this; the question I have is, against what ROOT version/branch would it be most useful to work? Is 6.28/04 sufficient with LLVM/Clang 13, or should I be using master or something else?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:245,usability,support,support,245,"Thanks again for the thoughtful reply. > If you provide a concrete, close-to-production example that works across various vendors (clang and gcc, lets exclude for now msvc) where ROOT is the blocker I can take a look at it and figure out how to support it. I would like to do this; the question I have is, against what ROOT version/branch would it be most useful to work? Is 6.28/04 sufficient with LLVM/Clang 13, or should I be using master or something else?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:40,usability,prefer,prefer,40,Either branch should be sufficient. I'd prefer the master.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:31,usability,close,closed,31,"Is this issue to be considered closed for 6.32, @vgvassilev ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:131,deployability,modul,modules,131,I do not think the outcome of the discussion was sufficient to make @greenc-FNAL happy. Although we should move their codes to use modules in dictionaries first …,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:69,energy efficiency,green,greenc-FNAL,69,I do not think the outcome of the discussion was sufficient to make @greenc-FNAL happy. Although we should move their codes to use modules in dictionaries first …,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:131,modifiability,modul,modules,131,I do not think the outcome of the discussion was sufficient to make @greenc-FNAL happy. Although we should move their codes to use modules in dictionaries first …,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:131,safety,modul,modules,131,I do not think the outcome of the discussion was sufficient to make @greenc-FNAL happy. Although we should move their codes to use modules in dictionaries first …,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:69,energy efficiency,green,greenc-FNAL,69,it's merged and happily working in master since more than one month @greenc-FNAL .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:44,energy efficiency,green,greenc-FNAL,44,"Following the comment above, I am closing. @greenc-FNAL please do not hesitate to re-open in case this is still an issue for you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/pull/13537:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13537
https://github.com/root-project/root/pull/13537:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13537
https://github.com/root-project/root/pull/13541:5,deployability,version,version,5,"This version of the PR is the result of some thinking and two test implementations, one with locks and one relying on TThreadedObject. Both solutions seem heavy and have impacts on runtime. The proposed changes, on the other hand, preserve the existing behaviour and allow thread safe access to the db, documenting well the properties of the TDatabasePDG component.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13541
https://github.com/root-project/root/pull/13541:5,integrability,version,version,5,"This version of the PR is the result of some thinking and two test implementations, one with locks and one relying on TThreadedObject. Both solutions seem heavy and have impacts on runtime. The proposed changes, on the other hand, preserve the existing behaviour and allow thread safe access to the db, documenting well the properties of the TDatabasePDG component.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13541
https://github.com/root-project/root/pull/13541:355,integrability,compon,component,355,"This version of the PR is the result of some thinking and two test implementations, one with locks and one relying on TThreadedObject. Both solutions seem heavy and have impacts on runtime. The proposed changes, on the other hand, preserve the existing behaviour and allow thread safe access to the db, documenting well the properties of the TDatabasePDG component.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13541
https://github.com/root-project/root/pull/13541:355,interoperability,compon,component,355,"This version of the PR is the result of some thinking and two test implementations, one with locks and one relying on TThreadedObject. Both solutions seem heavy and have impacts on runtime. The proposed changes, on the other hand, preserve the existing behaviour and allow thread safe access to the db, documenting well the properties of the TDatabasePDG component.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13541
https://github.com/root-project/root/pull/13541:5,modifiability,version,version,5,"This version of the PR is the result of some thinking and two test implementations, one with locks and one relying on TThreadedObject. Both solutions seem heavy and have impacts on runtime. The proposed changes, on the other hand, preserve the existing behaviour and allow thread safe access to the db, documenting well the properties of the TDatabasePDG component.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13541
https://github.com/root-project/root/pull/13541:355,modifiability,compon,component,355,"This version of the PR is the result of some thinking and two test implementations, one with locks and one relying on TThreadedObject. Both solutions seem heavy and have impacts on runtime. The proposed changes, on the other hand, preserve the existing behaviour and allow thread safe access to the db, documenting well the properties of the TDatabasePDG component.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13541
https://github.com/root-project/root/pull/13541:93,performance,lock,locks,93,"This version of the PR is the result of some thinking and two test implementations, one with locks and one relying on TThreadedObject. Both solutions seem heavy and have impacts on runtime. The proposed changes, on the other hand, preserve the existing behaviour and allow thread safe access to the db, documenting well the properties of the TDatabasePDG component.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13541
https://github.com/root-project/root/pull/13541:62,safety,test,test,62,"This version of the PR is the result of some thinking and two test implementations, one with locks and one relying on TThreadedObject. Both solutions seem heavy and have impacts on runtime. The proposed changes, on the other hand, preserve the existing behaviour and allow thread safe access to the db, documenting well the properties of the TDatabasePDG component.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13541
https://github.com/root-project/root/pull/13541:280,safety,safe,safe,280,"This version of the PR is the result of some thinking and two test implementations, one with locks and one relying on TThreadedObject. Both solutions seem heavy and have impacts on runtime. The proposed changes, on the other hand, preserve the existing behaviour and allow thread safe access to the db, documenting well the properties of the TDatabasePDG component.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13541
https://github.com/root-project/root/pull/13541:93,security,lock,locks,93,"This version of the PR is the result of some thinking and two test implementations, one with locks and one relying on TThreadedObject. Both solutions seem heavy and have impacts on runtime. The proposed changes, on the other hand, preserve the existing behaviour and allow thread safe access to the db, documenting well the properties of the TDatabasePDG component.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13541
https://github.com/root-project/root/pull/13541:285,security,access,access,285,"This version of the PR is the result of some thinking and two test implementations, one with locks and one relying on TThreadedObject. Both solutions seem heavy and have impacts on runtime. The proposed changes, on the other hand, preserve the existing behaviour and allow thread safe access to the db, documenting well the properties of the TDatabasePDG component.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13541
https://github.com/root-project/root/pull/13541:62,testability,test,test,62,"This version of the PR is the result of some thinking and two test implementations, one with locks and one relying on TThreadedObject. Both solutions seem heavy and have impacts on runtime. The proposed changes, on the other hand, preserve the existing behaviour and allow thread safe access to the db, documenting well the properties of the TDatabasePDG component.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13541
https://github.com/root-project/root/pull/13541:253,usability,behavi,behaviour,253,"This version of the PR is the result of some thinking and two test implementations, one with locks and one relying on TThreadedObject. Both solutions seem heavy and have impacts on runtime. The proposed changes, on the other hand, preserve the existing behaviour and allow thread safe access to the db, documenting well the properties of the TDatabasePDG component.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13541
https://github.com/root-project/root/pull/13541:303,usability,document,documenting,303,"This version of the PR is the result of some thinking and two test implementations, one with locks and one relying on TThreadedObject. Both solutions seem heavy and have impacts on runtime. The proposed changes, on the other hand, preserve the existing behaviour and allow thread safe access to the db, documenting well the properties of the TDatabasePDG component.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13541
https://github.com/root-project/root/pull/13541:11,interoperability,format,format,11,made clang-format happy.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13541
https://github.com/root-project/root/issues/13543:148,deployability,fail,fails,148,@vgvassilev It is a bit surprising that `rootlcing --reflex ... selection.xml` works but `rootcling ... selection.xml` partially works but silently fails. The current code will parse and use the selection.xml but a few internal part (of the selection.xml handling) are disabled without the `--reflex`. See `rootcling_impl.cxx:406` for example.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:159,energy efficiency,current,current,159,@vgvassilev It is a bit surprising that `rootlcing --reflex ... selection.xml` works but `rootcling ... selection.xml` partially works but silently fails. The current code will parse and use the selection.xml but a few internal part (of the selection.xml handling) are disabled without the `--reflex`. See `rootcling_impl.cxx:406` for example.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:74,interoperability,xml,xml,74,@vgvassilev It is a bit surprising that `rootlcing --reflex ... selection.xml` works but `rootcling ... selection.xml` partially works but silently fails. The current code will parse and use the selection.xml but a few internal part (of the selection.xml handling) are disabled without the `--reflex`. See `rootcling_impl.cxx:406` for example.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:114,interoperability,xml,xml,114,@vgvassilev It is a bit surprising that `rootlcing --reflex ... selection.xml` works but `rootcling ... selection.xml` partially works but silently fails. The current code will parse and use the selection.xml but a few internal part (of the selection.xml handling) are disabled without the `--reflex`. See `rootcling_impl.cxx:406` for example.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:205,interoperability,xml,xml,205,@vgvassilev It is a bit surprising that `rootlcing --reflex ... selection.xml` works but `rootcling ... selection.xml` partially works but silently fails. The current code will parse and use the selection.xml but a few internal part (of the selection.xml handling) are disabled without the `--reflex`. See `rootcling_impl.cxx:406` for example.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:251,interoperability,xml,xml,251,@vgvassilev It is a bit surprising that `rootlcing --reflex ... selection.xml` works but `rootcling ... selection.xml` partially works but silently fails. The current code will parse and use the selection.xml but a few internal part (of the selection.xml handling) are disabled without the `--reflex`. See `rootcling_impl.cxx:406` for example.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:148,reliability,fail,fails,148,@vgvassilev It is a bit surprising that `rootlcing --reflex ... selection.xml` works but `rootcling ... selection.xml` partially works but silently fails. The current code will parse and use the selection.xml but a few internal part (of the selection.xml handling) are disabled without the `--reflex`. See `rootcling_impl.cxx:406` for example.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:150,deployability,fail,fails,150,"> @vgvassilev It is a bit surprising that `rootlcing --reflex ... selection.xml` works but `rootcling ... selection.xml` partially works but silently fails. The current code will parse and use the selection.xml but a few internal part (of the selection.xml handling) are disabled without the `--reflex`. See `rootcling_impl.cxx:406` for example. Ah, yes, that makes sense. We have seen that on several occasions actually and that’s why we added this flag. Do you want to turn that logic on when we see selection.xml file? Is there a use case where we would want rootcling only behavior and still pass a selection.xml file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:481,deployability,log,logic,481,"> @vgvassilev It is a bit surprising that `rootlcing --reflex ... selection.xml` works but `rootcling ... selection.xml` partially works but silently fails. The current code will parse and use the selection.xml but a few internal part (of the selection.xml handling) are disabled without the `--reflex`. See `rootcling_impl.cxx:406` for example. Ah, yes, that makes sense. We have seen that on several occasions actually and that’s why we added this flag. Do you want to turn that logic on when we see selection.xml file? Is there a use case where we would want rootcling only behavior and still pass a selection.xml file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:161,energy efficiency,current,current,161,"> @vgvassilev It is a bit surprising that `rootlcing --reflex ... selection.xml` works but `rootcling ... selection.xml` partially works but silently fails. The current code will parse and use the selection.xml but a few internal part (of the selection.xml handling) are disabled without the `--reflex`. See `rootcling_impl.cxx:406` for example. Ah, yes, that makes sense. We have seen that on several occasions actually and that’s why we added this flag. Do you want to turn that logic on when we see selection.xml file? Is there a use case where we would want rootcling only behavior and still pass a selection.xml file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:76,interoperability,xml,xml,76,"> @vgvassilev It is a bit surprising that `rootlcing --reflex ... selection.xml` works but `rootcling ... selection.xml` partially works but silently fails. The current code will parse and use the selection.xml but a few internal part (of the selection.xml handling) are disabled without the `--reflex`. See `rootcling_impl.cxx:406` for example. Ah, yes, that makes sense. We have seen that on several occasions actually and that’s why we added this flag. Do you want to turn that logic on when we see selection.xml file? Is there a use case where we would want rootcling only behavior and still pass a selection.xml file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:116,interoperability,xml,xml,116,"> @vgvassilev It is a bit surprising that `rootlcing --reflex ... selection.xml` works but `rootcling ... selection.xml` partially works but silently fails. The current code will parse and use the selection.xml but a few internal part (of the selection.xml handling) are disabled without the `--reflex`. See `rootcling_impl.cxx:406` for example. Ah, yes, that makes sense. We have seen that on several occasions actually and that’s why we added this flag. Do you want to turn that logic on when we see selection.xml file? Is there a use case where we would want rootcling only behavior and still pass a selection.xml file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:207,interoperability,xml,xml,207,"> @vgvassilev It is a bit surprising that `rootlcing --reflex ... selection.xml` works but `rootcling ... selection.xml` partially works but silently fails. The current code will parse and use the selection.xml but a few internal part (of the selection.xml handling) are disabled without the `--reflex`. See `rootcling_impl.cxx:406` for example. Ah, yes, that makes sense. We have seen that on several occasions actually and that’s why we added this flag. Do you want to turn that logic on when we see selection.xml file? Is there a use case where we would want rootcling only behavior and still pass a selection.xml file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:253,interoperability,xml,xml,253,"> @vgvassilev It is a bit surprising that `rootlcing --reflex ... selection.xml` works but `rootcling ... selection.xml` partially works but silently fails. The current code will parse and use the selection.xml but a few internal part (of the selection.xml handling) are disabled without the `--reflex`. See `rootcling_impl.cxx:406` for example. Ah, yes, that makes sense. We have seen that on several occasions actually and that’s why we added this flag. Do you want to turn that logic on when we see selection.xml file? Is there a use case where we would want rootcling only behavior and still pass a selection.xml file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:512,interoperability,xml,xml,512,"> @vgvassilev It is a bit surprising that `rootlcing --reflex ... selection.xml` works but `rootcling ... selection.xml` partially works but silently fails. The current code will parse and use the selection.xml but a few internal part (of the selection.xml handling) are disabled without the `--reflex`. See `rootcling_impl.cxx:406` for example. Ah, yes, that makes sense. We have seen that on several occasions actually and that’s why we added this flag. Do you want to turn that logic on when we see selection.xml file? Is there a use case where we would want rootcling only behavior and still pass a selection.xml file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:613,interoperability,xml,xml,613,"> @vgvassilev It is a bit surprising that `rootlcing --reflex ... selection.xml` works but `rootcling ... selection.xml` partially works but silently fails. The current code will parse and use the selection.xml but a few internal part (of the selection.xml handling) are disabled without the `--reflex`. See `rootcling_impl.cxx:406` for example. Ah, yes, that makes sense. We have seen that on several occasions actually and that’s why we added this flag. Do you want to turn that logic on when we see selection.xml file? Is there a use case where we would want rootcling only behavior and still pass a selection.xml file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:150,reliability,fail,fails,150,"> @vgvassilev It is a bit surprising that `rootlcing --reflex ... selection.xml` works but `rootcling ... selection.xml` partially works but silently fails. The current code will parse and use the selection.xml but a few internal part (of the selection.xml handling) are disabled without the `--reflex`. See `rootcling_impl.cxx:406` for example. Ah, yes, that makes sense. We have seen that on several occasions actually and that’s why we added this flag. Do you want to turn that logic on when we see selection.xml file? Is there a use case where we would want rootcling only behavior and still pass a selection.xml file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:481,safety,log,logic,481,"> @vgvassilev It is a bit surprising that `rootlcing --reflex ... selection.xml` works but `rootcling ... selection.xml` partially works but silently fails. The current code will parse and use the selection.xml but a few internal part (of the selection.xml handling) are disabled without the `--reflex`. See `rootcling_impl.cxx:406` for example. Ah, yes, that makes sense. We have seen that on several occasions actually and that’s why we added this flag. Do you want to turn that logic on when we see selection.xml file? Is there a use case where we would want rootcling only behavior and still pass a selection.xml file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:481,security,log,logic,481,"> @vgvassilev It is a bit surprising that `rootlcing --reflex ... selection.xml` works but `rootcling ... selection.xml` partially works but silently fails. The current code will parse and use the selection.xml but a few internal part (of the selection.xml handling) are disabled without the `--reflex`. See `rootcling_impl.cxx:406` for example. Ah, yes, that makes sense. We have seen that on several occasions actually and that’s why we added this flag. Do you want to turn that logic on when we see selection.xml file? Is there a use case where we would want rootcling only behavior and still pass a selection.xml file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:481,testability,log,logic,481,"> @vgvassilev It is a bit surprising that `rootlcing --reflex ... selection.xml` works but `rootcling ... selection.xml` partially works but silently fails. The current code will parse and use the selection.xml but a few internal part (of the selection.xml handling) are disabled without the `--reflex`. See `rootcling_impl.cxx:406` for example. Ah, yes, that makes sense. We have seen that on several occasions actually and that’s why we added this flag. Do you want to turn that logic on when we see selection.xml file? Is there a use case where we would want rootcling only behavior and still pass a selection.xml file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:577,usability,behavi,behavior,577,"> @vgvassilev It is a bit surprising that `rootlcing --reflex ... selection.xml` works but `rootcling ... selection.xml` partially works but silently fails. The current code will parse and use the selection.xml but a few internal part (of the selection.xml handling) are disabled without the `--reflex`. See `rootcling_impl.cxx:406` for example. Ah, yes, that makes sense. We have seen that on several occasions actually and that’s why we added this flag. Do you want to turn that logic on when we see selection.xml file? Is there a use case where we would want rootcling only behavior and still pass a selection.xml file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:93,interoperability,xml,xml,93,> Is there a use case where we would want rootcling only behavior and still pass a selection.xml file? So far I don't see it. Worst the behavior as-is is very surprising because part of the selection.xml is used (the part selection classes) and the other is ignored. (I suppose that if this behavior is useful it should be opt-in (eg `--ignore-xml-attibutres-but-keep-the-selection` rather than the default).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:200,interoperability,xml,xml,200,> Is there a use case where we would want rootcling only behavior and still pass a selection.xml file? So far I don't see it. Worst the behavior as-is is very surprising because part of the selection.xml is used (the part selection classes) and the other is ignored. (I suppose that if this behavior is useful it should be opt-in (eg `--ignore-xml-attibutres-but-keep-the-selection` rather than the default).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:344,interoperability,xml,xml-attibutres-but-keep-the-selection,344,> Is there a use case where we would want rootcling only behavior and still pass a selection.xml file? So far I don't see it. Worst the behavior as-is is very surprising because part of the selection.xml is used (the part selection classes) and the other is ignored. (I suppose that if this behavior is useful it should be opt-in (eg `--ignore-xml-attibutres-but-keep-the-selection` rather than the default).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:57,usability,behavi,behavior,57,> Is there a use case where we would want rootcling only behavior and still pass a selection.xml file? So far I don't see it. Worst the behavior as-is is very surprising because part of the selection.xml is used (the part selection classes) and the other is ignored. (I suppose that if this behavior is useful it should be opt-in (eg `--ignore-xml-attibutres-but-keep-the-selection` rather than the default).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:136,usability,behavi,behavior,136,> Is there a use case where we would want rootcling only behavior and still pass a selection.xml file? So far I don't see it. Worst the behavior as-is is very surprising because part of the selection.xml is used (the part selection classes) and the other is ignored. (I suppose that if this behavior is useful it should be opt-in (eg `--ignore-xml-attibutres-but-keep-the-selection` rather than the default).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:291,usability,behavi,behavior,291,> Is there a use case where we would want rootcling only behavior and still pass a selection.xml file? So far I don't see it. Worst the behavior as-is is very surprising because part of the selection.xml is used (the part selection classes) and the other is ignored. (I suppose that if this behavior is useful it should be opt-in (eg `--ignore-xml-attibutres-but-keep-the-selection` rather than the default).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:203,interoperability,XML,XML,203,"I can confirm that replacing `--genreflex` with `--reflex` resolves my immediate issue. I would be in favor of removing the option in favor of activating the same behavior upon the presence of selection XML, however.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:6,usability,confirm,confirm,6,"I can confirm that replacing `--genreflex` with `--reflex` resolves my immediate issue. I would be in favor of removing the option in favor of activating the same behavior upon the presence of selection XML, however.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:163,usability,behavi,behavior,163,"I can confirm that replacing `--genreflex` with `--reflex` resolves my immediate issue. I would be in favor of removing the option in favor of activating the same behavior upon the presence of selection XML, however.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/pull/13544:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13544
https://github.com/root-project/root/pull/13546:227,integrability,sub,subsequent,227,"All tests pass except some which are related to something very different. A note about code formatting: I applied the suggestions of the bot, all but one, since I refuse to spreade a lambda function in a lambda function on two subsequent lines: the readability is severely affected.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:92,interoperability,format,formatting,92,"All tests pass except some which are related to something very different. A note about code formatting: I applied the suggestions of the bot, all but one, since I refuse to spreade a lambda function in a lambda function on two subsequent lines: the readability is severely affected.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:4,safety,test,tests,4,"All tests pass except some which are related to something very different. A note about code formatting: I applied the suggestions of the bot, all but one, since I refuse to spreade a lambda function in a lambda function on two subsequent lines: the readability is severely affected.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:15,safety,except,except,15,"All tests pass except some which are related to something very different. A note about code formatting: I applied the suggestions of the bot, all but one, since I refuse to spreade a lambda function in a lambda function on two subsequent lines: the readability is severely affected.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:4,testability,test,tests,4,"All tests pass except some which are related to something very different. A note about code formatting: I applied the suggestions of the bot, all but one, since I refuse to spreade a lambda function in a lambda function on two subsequent lines: the readability is severely affected.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:325,integrability,pub,public,325,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:386,integrability,pub,public,386,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:479,integrability,pub,public,479,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1626,integrability,event,event,1626,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1746,integrability,event,event,1746,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:242,performance,memor,memory,242,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1155,performance,Time,Time,1155,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:154,safety,test,test,154,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:549,safety,test,testVal,549,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:586,safety,test,testVal,586,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1067,safety,except,exceptionThrower,1067,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1201,safety,test,testVal,1201,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1231,safety,Test,Testing,1231,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1250,safety,test,testVal,1250,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1299,safety,test,testVal,1299,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1357,safety,except,exceptionThrower,1357,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1511,safety,Test,Testing,1511,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1530,safety,test,testVal,1530,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1590,safety,Test,Testing,1590,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1654,safety,Test,Testing,1654,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1710,safety,Test,Testing,1710,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1774,safety,Test,Testing,1774,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:20,testability,understand,understanding,20,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:154,testability,test,test,154,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:304,testability,Simpl,SimpleActionHelper,304,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:363,testability,Simpl,SimpleActionHelper,363,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:525,testability,Simpl,SimpleActionHelper,525,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:549,testability,test,testVal,549,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:586,testability,test,testVal,586,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:599,testability,Simpl,SimpleActionHelper,599,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:618,testability,Simpl,SimpleActionHelper,618,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:653,testability,Simpl,SimpleActionHelper,653,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:678,testability,Simpl,SimpleActionHelper,678,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:954,testability,Simpl,SimpleActionHelper,954,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1025,testability,Simpl,SimpleAction,1025,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1201,testability,test,testVal,1201,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1231,testability,Test,Testing,1231,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1250,testability,test,testVal,1250,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1273,testability,Simpl,SimpleActionHelper,1273,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1299,testability,test,testVal,1299,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1511,testability,Test,Testing,1511,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1530,testability,test,testVal,1530,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1590,testability,Test,Testing,1590,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1654,testability,Test,Testing,1654,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1710,testability,Test,Testing,1710,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1774,testability,Test,Testing,1774,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:242,usability,memor,memory,242,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:304,usability,Simpl,SimpleActionHelper,304,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:363,usability,Simpl,SimpleActionHelper,363,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:525,usability,Simpl,SimpleActionHelper,525,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:599,usability,Simpl,SimpleActionHelper,599,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:618,usability,Simpl,SimpleActionHelper,618,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:653,usability,Simpl,SimpleActionHelper,653,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:678,usability,Simpl,SimpleActionHelper,678,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:954,usability,Simpl,SimpleActionHelper,954,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1025,usability,Simpl,SimpleAction,1025,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1273,usability,Simpl,SimpleActionHelper,1273,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1292,usability,help,helper,1292,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:1430,usability,help,helper,1430,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RDFHelpers.hxx>. #include <memory>. #include <TTreeReader.h>. #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {. public:. using Result_t = int;. private:. std::shared_ptr<Result_t> fValue;. int &fTestVal;. public:. static constexpr int fgRefVal = 42;. SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}. SimpleActionHelper(SimpleActionHelper &&) = default;. SimpleActionHelper(const SimpleActionHelper &) = delete;. std::shared_ptr<int> GetResultPtr() const { return fValue; }. void Initialize() {}. void InitTask(TTreeReader *, unsigned int) {}. template <typename... ColumnTypes>. void Exec(unsigned int, ColumnTypes...). {. }. void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }. std::string GetActionName() { return ""SimpleAction""; }. };. int main(). {. auto exceptionThrower = [](ULong64_t ievt) {. if (ievt == 4) {. throw std::invalid_argument(""Time to throw."");. }. return int(0);. };. int testVal = 123;. std::cout << ""Testing value "" << testVal << std::endl;. SimpleActionHelper helper(testVal);. auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});. auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{. valRes.GetValue();. } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;. }. ```. Then. ```. ./repro_628.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 123. ```. ```. ./repro_danilo_patch.out . Testing value 123. RDataFrame::Run: event loop was interrupted. Testing value 42. ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:66,deployability,log,log,66,"> I am not sure that we should increment the number of fNRuns and log as if everything went fine if an exception was thrown during the event loop. a different message might be warranted. Indeed this could be a good idea, to further clarify that the RDF is not usable anymore and should just be thrown away",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:135,integrability,event,event,135,"> I am not sure that we should increment the number of fNRuns and log as if everything went fine if an exception was thrown during the event loop. a different message might be warranted. Indeed this could be a good idea, to further clarify that the RDF is not usable anymore and should just be thrown away",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:159,integrability,messag,message,159,"> I am not sure that we should increment the number of fNRuns and log as if everything went fine if an exception was thrown during the event loop. a different message might be warranted. Indeed this could be a good idea, to further clarify that the RDF is not usable anymore and should just be thrown away",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:159,interoperability,messag,message,159,"> I am not sure that we should increment the number of fNRuns and log as if everything went fine if an exception was thrown during the event loop. a different message might be warranted. Indeed this could be a good idea, to further clarify that the RDF is not usable anymore and should just be thrown away",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:66,safety,log,log,66,"> I am not sure that we should increment the number of fNRuns and log as if everything went fine if an exception was thrown during the event loop. a different message might be warranted. Indeed this could be a good idea, to further clarify that the RDF is not usable anymore and should just be thrown away",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:103,safety,except,exception,103,"> I am not sure that we should increment the number of fNRuns and log as if everything went fine if an exception was thrown during the event loop. a different message might be warranted. Indeed this could be a good idea, to further clarify that the RDF is not usable anymore and should just be thrown away",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:66,security,log,log,66,"> I am not sure that we should increment the number of fNRuns and log as if everything went fine if an exception was thrown during the event loop. a different message might be warranted. Indeed this could be a good idea, to further clarify that the RDF is not usable anymore and should just be thrown away",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:66,testability,log,log,66,"> I am not sure that we should increment the number of fNRuns and log as if everything went fine if an exception was thrown during the event loop. a different message might be warranted. Indeed this could be a good idea, to further clarify that the RDF is not usable anymore and should just be thrown away",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:260,usability,usab,usable,260,"> I am not sure that we should increment the number of fNRuns and log as if everything went fine if an exception was thrown during the event loop. a different message might be warranted. Indeed this could be a good idea, to further clarify that the RDF is not usable anymore and should just be thrown away",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:121,availability,state,state,121,"> Not exactly the same. Sorry, I meant it's the same in the context that I mentioned: the computation graph is left in a state that at least I do not completely understand and I cannot guarantee is fully usable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:121,integrability,state,state,121,"> Not exactly the same. Sorry, I meant it's the same in the context that I mentioned: the computation graph is left in a state that at least I do not completely understand and I cannot guarantee is fully usable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:150,safety,compl,completely,150,"> Not exactly the same. Sorry, I meant it's the same in the context that I mentioned: the computation graph is left in a state that at least I do not completely understand and I cannot guarantee is fully usable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:150,security,compl,completely,150,"> Not exactly the same. Sorry, I meant it's the same in the context that I mentioned: the computation graph is left in a state that at least I do not completely understand and I cannot guarantee is fully usable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:60,testability,context,context,60,"> Not exactly the same. Sorry, I meant it's the same in the context that I mentioned: the computation graph is left in a state that at least I do not completely understand and I cannot guarantee is fully usable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:161,testability,understand,understand,161,"> Not exactly the same. Sorry, I meant it's the same in the context that I mentioned: the computation graph is left in a state that at least I do not completely understand and I cannot guarantee is fully usable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:204,usability,usab,usable,204,"> Not exactly the same. Sorry, I meant it's the same in the context that I mentioned: the computation graph is left in a state that at least I do not completely understand and I cannot guarantee is fully usable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13547:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13547
https://github.com/root-project/root/pull/13555:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13555
https://github.com/root-project/root/pull/13558:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13558
https://github.com/root-project/root/pull/13558:16,deployability,updat,updates,16,@guitargeek any updates on this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13558
https://github.com/root-project/root/pull/13558:16,safety,updat,updates,16,@guitargeek any updates on this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13558
https://github.com/root-project/root/pull/13558:16,security,updat,updates,16,@guitargeek any updates on this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13558
https://github.com/root-project/root/pull/13558:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13558
https://github.com/root-project/root/pull/13559:28,safety,test,test,28,@linev could you also add a test along the lines of #13503 please?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13559
https://github.com/root-project/root/pull/13559:28,testability,test,test,28,@linev could you also add a test along the lines of #13503 please?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13559
https://github.com/root-project/root/pull/13559:62,safety,test,test,62,@vepadulano Do we have xrootd server permanently running with test file?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13559
https://github.com/root-project/root/pull/13559:62,testability,test,test,62,@vepadulano Do we have xrootd server permanently running with test file?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13559
https://github.com/root-project/root/issues/13560:124,safety,Test,Test,124,"I ran your macro on Mac. The generated file is attached. It can be opened without problem using the Mac utility ""Preview"". [Test.pdf](https://github.com/root-project/root/files/12463710/Test.pdf).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:186,safety,Test,Test,186,"I ran your macro on Mac. The generated file is attached. It can be opened without problem using the Mac utility ""Preview"". [Test.pdf](https://github.com/root-project/root/files/12463710/Test.pdf).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:124,testability,Test,Test,124,"I ran your macro on Mac. The generated file is attached. It can be opened without problem using the Mac utility ""Preview"". [Test.pdf](https://github.com/root-project/root/files/12463710/Test.pdf).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:186,testability,Test,Test,186,"I ran your macro on Mac. The generated file is attached. It can be opened without problem using the Mac utility ""Preview"". [Test.pdf](https://github.com/root-project/root/files/12463710/Test.pdf).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:295,deployability,continu,continue,295,"I do not see any warnings with `gs`:. ```. % gs Test.pdf. GPL Ghostscript 9.05 (2012-02-08). Copyright (C) 2010 Artifex Software, Inc. All rights reserved. This software comes with NO WARRANTY: see the file PUBLIC for details. Processing pages 1 through 1. Page 1. >>showpage, press <return> to continue<<. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:207,integrability,PUB,PUBLIC,207,"I do not see any warnings with `gs`:. ```. % gs Test.pdf. GPL Ghostscript 9.05 (2012-02-08). Copyright (C) 2010 Artifex Software, Inc. All rights reserved. This software comes with NO WARRANTY: see the file PUBLIC for details. Processing pages 1 through 1. Page 1. >>showpage, press <return> to continue<<. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:48,safety,Test,Test,48,"I do not see any warnings with `gs`:. ```. % gs Test.pdf. GPL Ghostscript 9.05 (2012-02-08). Copyright (C) 2010 Artifex Software, Inc. All rights reserved. This software comes with NO WARRANTY: see the file PUBLIC for details. Processing pages 1 through 1. Page 1. >>showpage, press <return> to continue<<. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:48,testability,Test,Test,48,"I do not see any warnings with `gs`:. ```. % gs Test.pdf. GPL Ghostscript 9.05 (2012-02-08). Copyright (C) 2010 Artifex Software, Inc. All rights reserved. This software comes with NO WARRANTY: see the file PUBLIC for details. Processing pages 1 through 1. Page 1. >>showpage, press <return> to continue<<. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:182,energy efficiency,Draw,Draw,182,"I get this:. ```. root [0] TCanvas *c1=new TCanvas(""c1"",""c1"");. root [1] double *a=new double[3];. root [2] a[0]=1;a[1]=2;a[2]=3;. root [3] TGraph *g=new TGraph(3,a,a);. root [4] g->Draw();. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:211,safety,Test,Test,211,"I get this:. ```. root [0] TCanvas *c1=new TCanvas(""c1"",""c1"");. root [1] double *a=new double[3];. root [2] a[0]=1;a[1]=2;a[2]=3;. root [3] TGraph *g=new TGraph(3,a,a);. root [4] g->Draw();. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:279,safety,Test,Test,279,"I get this:. ```. root [0] TCanvas *c1=new TCanvas(""c1"",""c1"");. root [1] double *a=new double[3];. root [2] a[0]=1;a[1]=2;a[2]=3;. root [3] TGraph *g=new TGraph(3,a,a);. root [4] g->Draw();. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:211,testability,Test,Test,211,"I get this:. ```. root [0] TCanvas *c1=new TCanvas(""c1"",""c1"");. root [1] double *a=new double[3];. root [2] a[0]=1;a[1]=2;a[2]=3;. root [3] TGraph *g=new TGraph(3,a,a);. root [4] g->Draw();. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:279,testability,Test,Test,279,"I get this:. ```. root [0] TCanvas *c1=new TCanvas(""c1"",""c1"");. root [1] double *a=new double[3];. root [2] a[0]=1;a[1]=2;a[2]=3;. root [3] TGraph *g=new TGraph(3,a,a);. root [4] g->Draw();. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:34,deployability,version,version,34,"Ok strange. Maybe it is due to gs version? I am using default centos7 version and i get the warnings. GPL Ghostscript 9.25 (2018-09-13). Copyright (C) 2018 Artifex Software, Inc. All rights reserved. This software comes with NO WARRANTY: see the file PUBLIC for details.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:70,deployability,version,version,70,"Ok strange. Maybe it is due to gs version? I am using default centos7 version and i get the warnings. GPL Ghostscript 9.25 (2018-09-13). Copyright (C) 2018 Artifex Software, Inc. All rights reserved. This software comes with NO WARRANTY: see the file PUBLIC for details.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:34,integrability,version,version,34,"Ok strange. Maybe it is due to gs version? I am using default centos7 version and i get the warnings. GPL Ghostscript 9.25 (2018-09-13). Copyright (C) 2018 Artifex Software, Inc. All rights reserved. This software comes with NO WARRANTY: see the file PUBLIC for details.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:70,integrability,version,version,70,"Ok strange. Maybe it is due to gs version? I am using default centos7 version and i get the warnings. GPL Ghostscript 9.25 (2018-09-13). Copyright (C) 2018 Artifex Software, Inc. All rights reserved. This software comes with NO WARRANTY: see the file PUBLIC for details.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:251,integrability,PUB,PUBLIC,251,"Ok strange. Maybe it is due to gs version? I am using default centos7 version and i get the warnings. GPL Ghostscript 9.25 (2018-09-13). Copyright (C) 2018 Artifex Software, Inc. All rights reserved. This software comes with NO WARRANTY: see the file PUBLIC for details.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:34,modifiability,version,version,34,"Ok strange. Maybe it is due to gs version? I am using default centos7 version and i get the warnings. GPL Ghostscript 9.25 (2018-09-13). Copyright (C) 2018 Artifex Software, Inc. All rights reserved. This software comes with NO WARRANTY: see the file PUBLIC for details.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:70,modifiability,version,version,70,"Ok strange. Maybe it is due to gs version? I am using default centos7 version and i get the warnings. GPL Ghostscript 9.25 (2018-09-13). Copyright (C) 2018 Artifex Software, Inc. All rights reserved. This software comes with NO WARRANTY: see the file PUBLIC for details.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:317,deployability,continu,continue,317,"> I do not see any warnings with `gs`:. > . > ```. > % gs Test.pdf. > GPL Ghostscript 9.05 (2012-02-08). > Copyright (C) 2010 Artifex Software, Inc. All rights reserved. > This software comes with NO WARRANTY: see the file PUBLIC for details. > Processing pages 1 through 1. > Page 1. > >>showpage, press <return> to continue<<. > ```. you version is defnitly different to mine. Maybe they changed something over the years and now these warnings apear.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:340,deployability,version,version,340,"> I do not see any warnings with `gs`:. > . > ```. > % gs Test.pdf. > GPL Ghostscript 9.05 (2012-02-08). > Copyright (C) 2010 Artifex Software, Inc. All rights reserved. > This software comes with NO WARRANTY: see the file PUBLIC for details. > Processing pages 1 through 1. > Page 1. > >>showpage, press <return> to continue<<. > ```. you version is defnitly different to mine. Maybe they changed something over the years and now these warnings apear.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:223,integrability,PUB,PUBLIC,223,"> I do not see any warnings with `gs`:. > . > ```. > % gs Test.pdf. > GPL Ghostscript 9.05 (2012-02-08). > Copyright (C) 2010 Artifex Software, Inc. All rights reserved. > This software comes with NO WARRANTY: see the file PUBLIC for details. > Processing pages 1 through 1. > Page 1. > >>showpage, press <return> to continue<<. > ```. you version is defnitly different to mine. Maybe they changed something over the years and now these warnings apear.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:340,integrability,version,version,340,"> I do not see any warnings with `gs`:. > . > ```. > % gs Test.pdf. > GPL Ghostscript 9.05 (2012-02-08). > Copyright (C) 2010 Artifex Software, Inc. All rights reserved. > This software comes with NO WARRANTY: see the file PUBLIC for details. > Processing pages 1 through 1. > Page 1. > >>showpage, press <return> to continue<<. > ```. you version is defnitly different to mine. Maybe they changed something over the years and now these warnings apear.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:340,modifiability,version,version,340,"> I do not see any warnings with `gs`:. > . > ```. > % gs Test.pdf. > GPL Ghostscript 9.05 (2012-02-08). > Copyright (C) 2010 Artifex Software, Inc. All rights reserved. > This software comes with NO WARRANTY: see the file PUBLIC for details. > Processing pages 1 through 1. > Page 1. > >>showpage, press <return> to continue<<. > ```. you version is defnitly different to mine. Maybe they changed something over the years and now these warnings apear.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:58,safety,Test,Test,58,"> I do not see any warnings with `gs`:. > . > ```. > % gs Test.pdf. > GPL Ghostscript 9.05 (2012-02-08). > Copyright (C) 2010 Artifex Software, Inc. All rights reserved. > This software comes with NO WARRANTY: see the file PUBLIC for details. > Processing pages 1 through 1. > Page 1. > >>showpage, press <return> to continue<<. > ```. you version is defnitly different to mine. Maybe they changed something over the years and now these warnings apear.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:58,testability,Test,Test,58,"> I do not see any warnings with `gs`:. > . > ```. > % gs Test.pdf. > GPL Ghostscript 9.05 (2012-02-08). > Copyright (C) 2010 Artifex Software, Inc. All rights reserved. > This software comes with NO WARRANTY: see the file PUBLIC for details. > Processing pages 1 through 1. > Page 1. > >>showpage, press <return> to continue<<. > ```. you version is defnitly different to mine. Maybe they changed something over the years and now these warnings apear.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:375,availability,error,error,375,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:726,availability,Error,Error,726,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:844,availability,Error,Error,844,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:340,deployability,version,version,340,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:597,deployability,releas,release,597,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:608,deployability,version,version,608,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:1024,deployability,releas,release,1024,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:1035,deployability,version,version,1035,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:340,integrability,version,version,340,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:381,integrability,messag,message,381,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:608,integrability,version,version,608,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:1035,integrability,version,version,1035,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:381,interoperability,messag,message,381,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:340,modifiability,version,version,340,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:608,modifiability,version,version,608,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:1035,modifiability,version,version,1035,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:375,performance,error,error,375,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:726,performance,Error,Error,726,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:844,performance,Error,Error,844,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:282,safety,Test,Test,282,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:375,safety,error,error,375,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:435,safety,Test,Test,435,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:503,safety,Test,Test,503,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:577,safety,detect,detected,577,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:726,safety,Error,Error,726,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:844,safety,Error,Error,844,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:1004,safety,detect,detected,1004,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:577,security,detect,detected,577,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:1004,security,detect,detected,1004,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:282,testability,Test,Test,282,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:435,testability,Test,Test,435,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:503,testability,Test,Test,503,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:4,usability,command,command,4,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:375,usability,error,error,375,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:726,usability,Error,Error,726,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:844,usability,Error,Error,844,"The command executed by root is:. ```. gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf. ```. I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```. root [5] c1->Print(""Test.pdf"",""EmbedFonts"");. Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. **** Error: Encountered 'obj' while expecting 'endobj'. Treating this as a missing 'endobj', output may be incorrect. GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected! Since the release of version 9.11 of Ghostscript we recommend you do not set. -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:43,integrability,messag,messages,43,very good. I actually linked a fix to this messages directly in the start of my bug report.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:43,interoperability,messag,messages,43,very good. I actually linked a fix to this messages directly in the start of my bug report.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:142,performance,Content,Contents,142,"Changes to the ROOT code:. graf2d/postscript/src/TPDF.cxx:. Add PrintStr(""endobj@""); at the end of the ""/Title (Page"" blocks and the ""/Title (Contents"" block. graf2d/gpad/src/TPad.cxx:. remove option -dUseCIEColor from the gs system call. This solves the warnings",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:266,energy efficiency,Draw,Draw,266,"Yes you are right, with the follwing example the new mechanism I introduced shows warnings:. ```. {. TFile f(""hsimple.root"",""READ"");. c1 = new TCanvas(""c1"",""c1"",200,10,700,500);. c2 = new TCanvas(""c2"",""c2"",200,300,700,500);. hpx->SetTitle(""#alpha"");. c1->cd(); hpx->Draw();. c2->cd(); hpx->Draw();. c1->Print(""h1.pdf["");. c2->Print(""h1.pdf"", ""Title:aaa"");. c2->Print(""h1.pdf"", ""Title:Verrex"");. c1->Print(""h1.pdf"", ""Title:bbb"");. c1->Print(""h1.pdf]"");. } . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:290,energy efficiency,Draw,Draw,290,"Yes you are right, with the follwing example the new mechanism I introduced shows warnings:. ```. {. TFile f(""hsimple.root"",""READ"");. c1 = new TCanvas(""c1"",""c1"",200,10,700,500);. c2 = new TCanvas(""c2"",""c2"",200,300,700,500);. hpx->SetTitle(""#alpha"");. c1->cd(); hpx->Draw();. c2->cd(); hpx->Draw();. c1->Print(""h1.pdf["");. c2->Print(""h1.pdf"", ""Title:aaa"");. c2->Print(""h1.pdf"", ""Title:Verrex"");. c1->Print(""h1.pdf"", ""Title:bbb"");. c1->Print(""h1.pdf]"");. } . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/pull/13563:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13563
https://github.com/root-project/root/pull/13563:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13563
https://github.com/root-project/root/pull/13565:152,availability,servic,services,152,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:314,availability,servic,services,314,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:533,availability,servic,services,533,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:2,deployability,Build,Build,2,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:8,deployability,fail,failed,8,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:76,deployability,build,build,76,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:110,deployability,build,build,110,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:152,deployability,servic,services,152,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:204,deployability,build,build,204,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:233,deployability,Fail,Failing,233,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:314,deployability,servic,services,314,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:366,deployability,build,build,366,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:533,deployability,servic,services,533,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:585,deployability,build,build,585,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:704,deployability,fail,failing,704,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:152,integrability,servic,services,152,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:314,integrability,servic,services,314,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:533,integrability,servic,services,533,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:152,modifiability,servic,services,152,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:314,modifiability,servic,services,314,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:533,modifiability,servic,services,533,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:8,reliability,fail,failed,8,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:233,reliability,Fail,Failing,233,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:704,reliability,fail,failing,704,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:241,safety,test,tests,241,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:270,safety,test,test,270,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:379,safety,test,testReport,379,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:402,safety,test,test,402,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:598,safety,test,testReport,598,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:712,safety,test,tests,712,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:780,safety,review,review,780,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:241,testability,test,tests,241,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:270,testability,test,test,270,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:379,testability,test,testReport,379,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:402,testability,test,test,402,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:598,testability,test,testReport,598,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:712,testability,test,tests,712,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:780,testability,review,review,780,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:61,usability,User,Users,61,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console). > ### Failing tests:. > . > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/). > . > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:5,deployability,patch,patchset,5,"This patchset should be ready now :rocket:! @Axel-Naumann, @hahnjo, @vgvassilev Could you review when you have some spare time?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:122,performance,time,time,122,"This patchset should be ready now :rocket:! @Axel-Naumann, @hahnjo, @vgvassilev Could you review when you have some spare time?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:5,safety,patch,patchset,5,"This patchset should be ready now :rocket:! @Axel-Naumann, @hahnjo, @vgvassilev Could you review when you have some spare time?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:90,safety,review,review,90,"This patchset should be ready now :rocket:! @Axel-Naumann, @hahnjo, @vgvassilev Could you review when you have some spare time?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:5,security,patch,patchset,5,"This patchset should be ready now :rocket:! @Axel-Naumann, @hahnjo, @vgvassilev Could you review when you have some spare time?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:90,testability,review,review,90,"This patchset should be ready now :rocket:! @Axel-Naumann, @hahnjo, @vgvassilev Could you review when you have some spare time?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:48,availability,failur,failure,48,"Fantastic, thanks, @jalopezg-git ! Is the mac11 failure in stressInterpreter caused by this PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:48,deployability,fail,failure,48,"Fantastic, thanks, @jalopezg-git ! Is the mac11 failure in stressInterpreter caused by this PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:48,performance,failur,failure,48,"Fantastic, thanks, @jalopezg-git ! Is the mac11 failure in stressInterpreter caused by this PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:48,reliability,fail,failure,48,"Fantastic, thanks, @jalopezg-git ! Is the mac11 failure in stressInterpreter caused by this PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:50,availability,failur,failure,50,"> Fantastic, thanks, @jalopezg-git ! Is the mac11 failure in stressInterpreter caused by this PR? Apparently, yes. Ugghh, that wasn't expected; all the other platforms seem to be happy now. Any chance that I can still access one of these machines to debug the issue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:50,deployability,fail,failure,50,"> Fantastic, thanks, @jalopezg-git ! Is the mac11 failure in stressInterpreter caused by this PR? Apparently, yes. Ugghh, that wasn't expected; all the other platforms seem to be happy now. Any chance that I can still access one of these machines to debug the issue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:158,interoperability,platform,platforms,158,"> Fantastic, thanks, @jalopezg-git ! Is the mac11 failure in stressInterpreter caused by this PR? Apparently, yes. Ugghh, that wasn't expected; all the other platforms seem to be happy now. Any chance that I can still access one of these machines to debug the issue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:50,performance,failur,failure,50,"> Fantastic, thanks, @jalopezg-git ! Is the mac11 failure in stressInterpreter caused by this PR? Apparently, yes. Ugghh, that wasn't expected; all the other platforms seem to be happy now. Any chance that I can still access one of these machines to debug the issue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:50,reliability,fail,failure,50,"> Fantastic, thanks, @jalopezg-git ! Is the mac11 failure in stressInterpreter caused by this PR? Apparently, yes. Ugghh, that wasn't expected; all the other platforms seem to be happy now. Any chance that I can still access one of these machines to debug the issue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:218,security,access,access,218,"> Fantastic, thanks, @jalopezg-git ! Is the mac11 failure in stressInterpreter caused by this PR? Apparently, yes. Ugghh, that wasn't expected; all the other platforms seem to be happy now. Any chance that I can still access one of these machines to debug the issue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:11,deployability,build,build,11,@phsft-bot build just on mac11/noimt,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:376,deployability,upgrad,upgrade,376,"For now, this is just a rebase of Javier's original changes. I think I have an idea what could be wrong, but I first want to have a clean set of reports from Jenkins and the new CI. In any case, I'll try to take care of this PR now because it seems required for some recent progress I'm making regarding https://github.com/root-project/root/issues/13815, in turn blocking the upgrade to LLVM 16.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:376,modifiability,upgrad,upgrade,376,"For now, this is just a rebase of Javier's original changes. I think I have an idea what could be wrong, but I first want to have a clean set of reports from Jenkins and the new CI. In any case, I'll try to take care of this PR now because it seems required for some recent progress I'm making regarding https://github.com/root-project/root/issues/13815, in turn blocking the upgrade to LLVM 16.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:274,usability,progress,progress,274,"For now, this is just a rebase of Javier's original changes. I think I have an idea what could be wrong, but I first want to have a clean set of reports from Jenkins and the new CI. In any case, I'll try to take care of this PR now because it seems required for some recent progress I'm making regarding https://github.com/root-project/root/issues/13815, in turn blocking the upgrade to LLVM 16.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:335,deployability,upgrad,upgrade,335,"> For now, this is just a rebase of Javier's original changes. I think I have an idea what could be wrong, but I first want to have a clean set of reports from Jenkins and the new CI. In any case, I'll try to take care of this PR now because it seems required for some recent progress I'm making regarding #13815, in turn blocking the upgrade to LLVM 16. Great! Let's give this a push :slightly_smiling_face:!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:335,modifiability,upgrad,upgrade,335,"> For now, this is just a rebase of Javier's original changes. I think I have an idea what could be wrong, but I first want to have a clean set of reports from Jenkins and the new CI. In any case, I'll try to take care of this PR now because it seems required for some recent progress I'm making regarding #13815, in turn blocking the upgrade to LLVM 16. Great! Let's give this a push :slightly_smiling_face:!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:276,usability,progress,progress,276,"> For now, this is just a rebase of Javier's original changes. I think I have an idea what could be wrong, but I first want to have a clean set of reports from Jenkins and the new CI. In any case, I'll try to take care of this PR now because it seems required for some recent progress I'm making regarding #13815, in turn blocking the upgrade to LLVM 16. Great! Let's give this a push :slightly_smiling_face:!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:102,availability,failur,failure,102,"So it wasn't what I initially thought, but it seems to work now on all platforms (except the spurious failure on Windows).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:102,deployability,fail,failure,102,"So it wasn't what I initially thought, but it seems to work now on all platforms (except the spurious failure on Windows).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:71,interoperability,platform,platforms,71,"So it wasn't what I initially thought, but it seems to work now on all platforms (except the spurious failure on Windows).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:102,performance,failur,failure,102,"So it wasn't what I initially thought, but it seems to work now on all platforms (except the spurious failure on Windows).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:102,reliability,fail,failure,102,"So it wasn't what I initially thought, but it seems to work now on all platforms (except the spurious failure on Windows).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:82,safety,except,except,82,"So it wasn't what I initially thought, but it seems to work now on all platforms (except the spurious failure on Windows).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13566:60,interoperability,compatib,compatibility,60,"We foresee some more breaking changes following the forward compatibility discussion, I think we should bump the RC together with these changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13566
https://github.com/root-project/root/pull/13566:62,interoperability,compatib,compatibility,62,"> We foresee some more breaking changes following the forward compatibility discussion, I think we should bump the RC together with these changes. Fair enough :+1:! I'll leave the PR open just in case you want to reuse it when time comes!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13566
https://github.com/root-project/root/pull/13566:213,modifiability,reu,reuse,213,"> We foresee some more breaking changes following the forward compatibility discussion, I think we should bump the RC together with these changes. Fair enough :+1:! I'll leave the PR open just in case you want to reuse it when time comes!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13566
https://github.com/root-project/root/pull/13566:227,performance,time,time,227,"> We foresee some more breaking changes following the forward compatibility discussion, I think we should bump the RC together with these changes. Fair enough :+1:! I'll leave the PR open just in case you want to reuse it when time comes!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13566
https://github.com/root-project/root/pull/13566:47,safety,review,review,47,> Replaced by #13779. Thanks :+1:! I'll try to review the changes in the next few days!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13566
https://github.com/root-project/root/pull/13566:47,testability,review,review,47,> Replaced by #13779. Thanks :+1:! I'll try to review the changes in the next few days!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13566
https://github.com/root-project/root/pull/13567:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13567
https://github.com/root-project/root/issues/13568:335,availability,state,state,335,"Hi, I decided to have a look at this and I noticed that in the exising collection proxies, this is handled as follows:. https://github.com/root-project/root/blob/ef2ff08d42703d4dc9eddef5d5d59ca65af7adb6/io/io/src/TGenCollectionProxy.cxx#L1510-L1526. I can apply this to `SimpleCollectionProxy.hxx`, but I was curious whether since you state this issue is only visible on Windows, given that the behaviour is undefined, if it might be better to use this 'fix' for all cases (given that the behaviour is undefined, now it might be fine on other OS's but this could change). Perhaps @pcanal can chime in?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:335,integrability,state,state,335,"Hi, I decided to have a look at this and I noticed that in the exising collection proxies, this is handled as follows:. https://github.com/root-project/root/blob/ef2ff08d42703d4dc9eddef5d5d59ca65af7adb6/io/io/src/TGenCollectionProxy.cxx#L1510-L1526. I can apply this to `SimpleCollectionProxy.hxx`, but I was curious whether since you state this issue is only visible on Windows, given that the behaviour is undefined, if it might be better to use this 'fix' for all cases (given that the behaviour is undefined, now it might be fine on other OS's but this could change). Perhaps @pcanal can chime in?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:82,interoperability,prox,proxies,82,"Hi, I decided to have a look at this and I noticed that in the exising collection proxies, this is handled as follows:. https://github.com/root-project/root/blob/ef2ff08d42703d4dc9eddef5d5d59ca65af7adb6/io/io/src/TGenCollectionProxy.cxx#L1510-L1526. I can apply this to `SimpleCollectionProxy.hxx`, but I was curious whether since you state this issue is only visible on Windows, given that the behaviour is undefined, if it might be better to use this 'fix' for all cases (given that the behaviour is undefined, now it might be fine on other OS's but this could change). Perhaps @pcanal can chime in?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:271,testability,Simpl,SimpleCollectionProxy,271,"Hi, I decided to have a look at this and I noticed that in the exising collection proxies, this is handled as follows:. https://github.com/root-project/root/blob/ef2ff08d42703d4dc9eddef5d5d59ca65af7adb6/io/io/src/TGenCollectionProxy.cxx#L1510-L1526. I can apply this to `SimpleCollectionProxy.hxx`, but I was curious whether since you state this issue is only visible on Windows, given that the behaviour is undefined, if it might be better to use this 'fix' for all cases (given that the behaviour is undefined, now it might be fine on other OS's but this could change). Perhaps @pcanal can chime in?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:271,usability,Simpl,SimpleCollectionProxy,271,"Hi, I decided to have a look at this and I noticed that in the exising collection proxies, this is handled as follows:. https://github.com/root-project/root/blob/ef2ff08d42703d4dc9eddef5d5d59ca65af7adb6/io/io/src/TGenCollectionProxy.cxx#L1510-L1526. I can apply this to `SimpleCollectionProxy.hxx`, but I was curious whether since you state this issue is only visible on Windows, given that the behaviour is undefined, if it might be better to use this 'fix' for all cases (given that the behaviour is undefined, now it might be fine on other OS's but this could change). Perhaps @pcanal can chime in?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:395,usability,behavi,behaviour,395,"Hi, I decided to have a look at this and I noticed that in the exising collection proxies, this is handled as follows:. https://github.com/root-project/root/blob/ef2ff08d42703d4dc9eddef5d5d59ca65af7adb6/io/io/src/TGenCollectionProxy.cxx#L1510-L1526. I can apply this to `SimpleCollectionProxy.hxx`, but I was curious whether since you state this issue is only visible on Windows, given that the behaviour is undefined, if it might be better to use this 'fix' for all cases (given that the behaviour is undefined, now it might be fine on other OS's but this could change). Perhaps @pcanal can chime in?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:489,usability,behavi,behaviour,489,"Hi, I decided to have a look at this and I noticed that in the exising collection proxies, this is handled as follows:. https://github.com/root-project/root/blob/ef2ff08d42703d4dc9eddef5d5d59ca65af7adb6/io/io/src/TGenCollectionProxy.cxx#L1510-L1526. I can apply this to `SimpleCollectionProxy.hxx`, but I was curious whether since you state this issue is only visible on Windows, given that the behaviour is undefined, if it might be better to use this 'fix' for all cases (given that the behaviour is undefined, now it might be fine on other OS's but this could change). Perhaps @pcanal can chime in?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:69,interoperability,platform,platforms,69,"Thanks for looking at it! Right, IMHO, this is only working on other platforms by chance",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/pull/13571:42,availability,error,errors,42,Thanks! FYI apart from some weird Jenkins errors [we get](https://github.com/root-project/root/pull/13571/files#annotation_13775791970):. ```. 2023-08-30T18:30:54.7170667Z [2871/3458] Building CXX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-v,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:2302,availability,error,error,2302,"clude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -DDNNCPU -g -std=c++20 -MD -MT test/CMakeFiles/stressProof.dir/stressProof.cxx.o -MF test/CMakeFiles/stressProof.dir/stressProof.cxx.o.d -o test/CMakeFiles/stressProof.dir/stressProof.cxx.o -c /github/home/ROOT-CI/src/test/stressProof.cxx. 2023-08-30T18:30:54.7559009Z ##[error]/github/home/ROOT-CI/src/test/stressProof.cxx:140:10: fatal error: proof/getProof.C: No such file or directory. 2023-08-30T18:30:54.7654053Z 140 | #include ""proof/getProof.C"". 2023-08-30T18:30:54.7654343Z | ^~~~~~~~~~~~~~~~~~. 2023-08-30T18:30:54.7654778Z compilation terminated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:2368,availability,error,error,2368,"clude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -DDNNCPU -g -std=c++20 -MD -MT test/CMakeFiles/stressProof.dir/stressProof.cxx.o -MF test/CMakeFiles/stressProof.dir/stressProof.cxx.o.d -o test/CMakeFiles/stressProof.dir/stressProof.cxx.o -c /github/home/ROOT-CI/src/test/stressProof.cxx. 2023-08-30T18:30:54.7559009Z ##[error]/github/home/ROOT-CI/src/test/stressProof.cxx:140:10: fatal error: proof/getProof.C: No such file or directory. 2023-08-30T18:30:54.7654053Z 140 | #include ""proof/getProof.C"". 2023-08-30T18:30:54.7654343Z | ^~~~~~~~~~~~~~~~~~. 2023-08-30T18:30:54.7654778Z compilation terminated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:184,deployability,Build,Building,184,Thanks! FYI apart from some weird Jenkins errors [we get](https://github.com/root-project/root/pull/13571/files#annotation_13775791970):. ```. 2023-08-30T18:30:54.7170667Z [2871/3458] Building CXX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-v,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:284,deployability,FAIL,FAILED,284,Thanks! FYI apart from some weird Jenkins errors [we get](https://github.com/root-project/root/pull/13571/files#annotation_13775791970):. ```. 2023-08-30T18:30:54.7170667Z [2871/3458] Building CXX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-v,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:409,deployability,build,build,409,Thanks! FYI apart from some weird Jenkins errors [we get](https://github.com/root-project/root/pull/13571/files#annotation_13775791970):. ```. 2023-08-30T18:30:54.7170667Z [2871/3458] Building CXX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-v,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:582,deployability,build,build,582,Thanks! FYI apart from some weird Jenkins errors [we get](https://github.com/root-project/root/pull/13571/files#annotation_13775791970):. ```. 2023-08-30T18:30:54.7170667Z [2871/3458] Building CXX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-v,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:624,energy efficiency,core,core,624,Thanks! FYI apart from some weird Jenkins errors [we get](https://github.com/root-project/root/pull/13571/files#annotation_13775791970):. ```. 2023-08-30T18:30:54.7170667Z [2871/3458] Building CXX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-v,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:665,energy efficiency,core,core,665,Thanks! FYI apart from some weird Jenkins errors [we get](https://github.com/root-project/root/pull/13571/files#annotation_13775791970):. ```. 2023-08-30T18:30:54.7170667Z [2871/3458] Building CXX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-v,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:709,energy efficiency,core,core,709,Thanks! FYI apart from some weird Jenkins errors [we get](https://github.com/root-project/root/pull/13571/files#annotation_13775791970):. ```. 2023-08-30T18:30:54.7170667Z [2871/3458] Building CXX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-v,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:750,energy efficiency,core,core,750,Thanks! FYI apart from some weird Jenkins errors [we get](https://github.com/root-project/root/pull/13571/files#annotation_13775791970):. ```. 2023-08-30T18:30:54.7170667Z [2871/3458] Building CXX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-v,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:797,energy efficiency,core,core,797,Thanks! FYI apart from some weird Jenkins errors [we get](https://github.com/root-project/root/pull/13571/files#annotation_13775791970):. ```. 2023-08-30T18:30:54.7170667Z [2871/3458] Building CXX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-v,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:844,energy efficiency,core,core,844,Thanks! FYI apart from some weird Jenkins errors [we get](https://github.com/root-project/root/pull/13571/files#annotation_13775791970):. ```. 2023-08-30T18:30:54.7170667Z [2871/3458] Building CXX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-v,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:885,energy efficiency,core,core,885,Thanks! FYI apart from some weird Jenkins errors [we get](https://github.com/root-project/root/pull/13571/files#annotation_13775791970):. ```. 2023-08-30T18:30:54.7170667Z [2871/3458] Building CXX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-v,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:932,energy efficiency,core,core,932,Thanks! FYI apart from some weird Jenkins errors [we get](https://github.com/root-project/root/pull/13571/files#annotation_13775791970):. ```. 2023-08-30T18:30:54.7170667Z [2871/3458] Building CXX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-v,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:982,energy efficiency,core,core,982,Thanks! FYI apart from some weird Jenkins errors [we get](https://github.com/root-project/root/pull/13571/files#annotation_13775791970):. ```. 2023-08-30T18:30:54.7170667Z [2871/3458] Building CXX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-v,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:1022,energy efficiency,core,core,1022,ome weird Jenkins errors [we get](https://github.com/root-project/root/pull/13571/files#annotation_13775791970):. ```. 2023-08-30T18:30:54.7170667Z [2871/3458] Building CXX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pt,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:1063,energy efficiency,core,core,1063,/github.com/root-project/root/pull/13571/files#annotation_13775791970):. ```. 2023-08-30T18:30:54.7170667Z [2871/3458] Building CXX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -DDNNCPU -g -std=c++20 -MD -MT test,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:1109,energy efficiency,core,core,1109,#annotation_13775791970):. ```. 2023-08-30T18:30:54.7170667Z [2871/3458] Building CXX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -DDNNCPU -g -std=c++20 -MD -MT test/CMakeFiles/stressProof.dir/stressProof.cxx.o ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:1152,energy efficiency,core,core,1152,18:30:54.7170667Z [2871/3458] Building CXX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -DDNNCPU -g -std=c++20 -MD -MT test/CMakeFiles/stressProof.dir/stressProof.cxx.o -MF test/CMakeFiles/stressProof.dir/stressP,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:1192,energy efficiency,core,core,1192,XX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -DDNNCPU -g -std=c++20 -MD -MT test/CMakeFiles/stressProof.dir/stressProof.cxx.o -MF test/CMakeFiles/stressProof.dir/stressProof.cxx.o.d -o test/CMakeFiles/stressPr,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:1233,energy efficiency,core,core,1233,/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -DDNNCPU -g -std=c++20 -MD -MT test/CMakeFiles/stressProof.dir/stressProof.cxx.o -MF test/CMakeFiles/stressProof.dir/stressProof.cxx.o.d -o test/CMakeFiles/stressProof.dir/stressProof.cxx.o -c /github/home,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:1273,energy efficiency,core,core,1273,7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -DDNNCPU -g -std=c++20 -MD -MT test/CMakeFiles/stressProof.dir/stressProof.cxx.o -MF test/CMakeFiles/stressProof.dir/stressProof.cxx.o.d -o test/CMakeFiles/stressProof.dir/stressProof.cxx.o -c /github/home/ROOT-CI/src/test/stressProof.cxx. 2023-,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:1355,energy efficiency,core,core,1355,:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -DDNNCPU -g -std=c++20 -MD -MT test/CMakeFiles/stressProof.dir/stressProof.cxx.o -MF test/CMakeFiles/stressProof.dir/stressProof.cxx.o.d -o test/CMakeFiles/stressProof.dir/stressProof.cxx.o -c /github/home/ROOT-CI/src/test/stressProof.cxx. 2023-08-30T18:30:54.7559009Z ##[error]/github/home/ROOT-CI/src/test/stressProof.cxx:140,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:1395,energy efficiency,core,core,1395,ome/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -DDNNCPU -g -std=c++20 -MD -MT test/CMakeFiles/stressProof.dir/stressProof.cxx.o -MF test/CMakeFiles/stressProof.dir/stressProof.cxx.o.d -o test/CMakeFiles/stressProof.dir/stressProof.cxx.o -c /github/home/ROOT-CI/src/test/stressProof.cxx. 2023-08-30T18:30:54.7559009Z ##[error]/github/home/ROOT-CI/src/test/stressProof.cxx:140:10: fatal error: proof/getProof.C: No s,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:42,performance,error,errors,42,Thanks! FYI apart from some weird Jenkins errors [we get](https://github.com/root-project/root/pull/13571/files#annotation_13775791970):. ```. 2023-08-30T18:30:54.7170667Z [2871/3458] Building CXX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-v,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:2302,performance,error,error,2302,"clude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -DDNNCPU -g -std=c++20 -MD -MT test/CMakeFiles/stressProof.dir/stressProof.cxx.o -MF test/CMakeFiles/stressProof.dir/stressProof.cxx.o.d -o test/CMakeFiles/stressProof.dir/stressProof.cxx.o -c /github/home/ROOT-CI/src/test/stressProof.cxx. 2023-08-30T18:30:54.7559009Z ##[error]/github/home/ROOT-CI/src/test/stressProof.cxx:140:10: fatal error: proof/getProof.C: No such file or directory. 2023-08-30T18:30:54.7654053Z 140 | #include ""proof/getProof.C"". 2023-08-30T18:30:54.7654343Z | ^~~~~~~~~~~~~~~~~~. 2023-08-30T18:30:54.7654778Z compilation terminated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:2368,performance,error,error,2368,"clude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -DDNNCPU -g -std=c++20 -MD -MT test/CMakeFiles/stressProof.dir/stressProof.cxx.o -MF test/CMakeFiles/stressProof.dir/stressProof.cxx.o.d -o test/CMakeFiles/stressProof.dir/stressProof.cxx.o -c /github/home/ROOT-CI/src/test/stressProof.cxx. 2023-08-30T18:30:54.7559009Z ##[error]/github/home/ROOT-CI/src/test/stressProof.cxx:140:10: fatal error: proof/getProof.C: No such file or directory. 2023-08-30T18:30:54.7654053Z 140 | #include ""proof/getProof.C"". 2023-08-30T18:30:54.7654343Z | ^~~~~~~~~~~~~~~~~~. 2023-08-30T18:30:54.7654778Z compilation terminated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:284,reliability,FAIL,FAILED,284,Thanks! FYI apart from some weird Jenkins errors [we get](https://github.com/root-project/root/pull/13571/files#annotation_13775791970):. ```. 2023-08-30T18:30:54.7170667Z [2871/3458] Building CXX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-v,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:42,safety,error,errors,42,Thanks! FYI apart from some weird Jenkins errors [we get](https://github.com/root-project/root/pull/13571/files#annotation_13775791970):. ```. 2023-08-30T18:30:54.7170667Z [2871/3458] Building CXX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-v,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:204,safety,test,test,204,Thanks! FYI apart from some weird Jenkins errors [we get](https://github.com/root-project/root/pull/13571/files#annotation_13775791970):. ```. 2023-08-30T18:30:54.7170667Z [2871/3458] Building CXX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-v,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:292,safety,test,test,292,Thanks! FYI apart from some weird Jenkins errors [we get](https://github.com/root-project/root/pull/13571/files#annotation_13775791970):. ```. 2023-08-30T18:30:54.7170667Z [2871/3458] Building CXX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-v,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:2061,safety,test,test,2061,"clude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -DDNNCPU -g -std=c++20 -MD -MT test/CMakeFiles/stressProof.dir/stressProof.cxx.o -MF test/CMakeFiles/stressProof.dir/stressProof.cxx.o.d -o test/CMakeFiles/stressProof.dir/stressProof.cxx.o -c /github/home/ROOT-CI/src/test/stressProof.cxx. 2023-08-30T18:30:54.7559009Z ##[error]/github/home/ROOT-CI/src/test/stressProof.cxx:140:10: fatal error: proof/getProof.C: No such file or directory. 2023-08-30T18:30:54.7654053Z 140 | #include ""proof/getProof.C"". 2023-08-30T18:30:54.7654343Z | ^~~~~~~~~~~~~~~~~~. 2023-08-30T18:30:54.7654778Z compilation terminated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:2115,safety,test,test,2115,"clude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -DDNNCPU -g -std=c++20 -MD -MT test/CMakeFiles/stressProof.dir/stressProof.cxx.o -MF test/CMakeFiles/stressProof.dir/stressProof.cxx.o.d -o test/CMakeFiles/stressProof.dir/stressProof.cxx.o -c /github/home/ROOT-CI/src/test/stressProof.cxx. 2023-08-30T18:30:54.7559009Z ##[error]/github/home/ROOT-CI/src/test/stressProof.cxx:140:10: fatal error: proof/getProof.C: No such file or directory. 2023-08-30T18:30:54.7654053Z 140 | #include ""proof/getProof.C"". 2023-08-30T18:30:54.7654343Z | ^~~~~~~~~~~~~~~~~~. 2023-08-30T18:30:54.7654778Z compilation terminated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:2170,safety,test,test,2170,"clude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -DDNNCPU -g -std=c++20 -MD -MT test/CMakeFiles/stressProof.dir/stressProof.cxx.o -MF test/CMakeFiles/stressProof.dir/stressProof.cxx.o.d -o test/CMakeFiles/stressProof.dir/stressProof.cxx.o -c /github/home/ROOT-CI/src/test/stressProof.cxx. 2023-08-30T18:30:54.7559009Z ##[error]/github/home/ROOT-CI/src/test/stressProof.cxx:140:10: fatal error: proof/getProof.C: No such file or directory. 2023-08-30T18:30:54.7654053Z 140 | #include ""proof/getProof.C"". 2023-08-30T18:30:54.7654343Z | ^~~~~~~~~~~~~~~~~~. 2023-08-30T18:30:54.7654778Z compilation terminated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:2248,safety,test,test,2248,"clude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -DDNNCPU -g -std=c++20 -MD -MT test/CMakeFiles/stressProof.dir/stressProof.cxx.o -MF test/CMakeFiles/stressProof.dir/stressProof.cxx.o.d -o test/CMakeFiles/stressProof.dir/stressProof.cxx.o -c /github/home/ROOT-CI/src/test/stressProof.cxx. 2023-08-30T18:30:54.7559009Z ##[error]/github/home/ROOT-CI/src/test/stressProof.cxx:140:10: fatal error: proof/getProof.C: No such file or directory. 2023-08-30T18:30:54.7654053Z 140 | #include ""proof/getProof.C"". 2023-08-30T18:30:54.7654343Z | ^~~~~~~~~~~~~~~~~~. 2023-08-30T18:30:54.7654778Z compilation terminated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:2302,safety,error,error,2302,"clude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -DDNNCPU -g -std=c++20 -MD -MT test/CMakeFiles/stressProof.dir/stressProof.cxx.o -MF test/CMakeFiles/stressProof.dir/stressProof.cxx.o.d -o test/CMakeFiles/stressProof.dir/stressProof.cxx.o -c /github/home/ROOT-CI/src/test/stressProof.cxx. 2023-08-30T18:30:54.7559009Z ##[error]/github/home/ROOT-CI/src/test/stressProof.cxx:140:10: fatal error: proof/getProof.C: No such file or directory. 2023-08-30T18:30:54.7654053Z 140 | #include ""proof/getProof.C"". 2023-08-30T18:30:54.7654343Z | ^~~~~~~~~~~~~~~~~~. 2023-08-30T18:30:54.7654778Z compilation terminated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:2333,safety,test,test,2333,"clude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -DDNNCPU -g -std=c++20 -MD -MT test/CMakeFiles/stressProof.dir/stressProof.cxx.o -MF test/CMakeFiles/stressProof.dir/stressProof.cxx.o.d -o test/CMakeFiles/stressProof.dir/stressProof.cxx.o -c /github/home/ROOT-CI/src/test/stressProof.cxx. 2023-08-30T18:30:54.7559009Z ##[error]/github/home/ROOT-CI/src/test/stressProof.cxx:140:10: fatal error: proof/getProof.C: No such file or directory. 2023-08-30T18:30:54.7654053Z 140 | #include ""proof/getProof.C"". 2023-08-30T18:30:54.7654343Z | ^~~~~~~~~~~~~~~~~~. 2023-08-30T18:30:54.7654778Z compilation terminated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:2368,safety,error,error,2368,"clude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -DDNNCPU -g -std=c++20 -MD -MT test/CMakeFiles/stressProof.dir/stressProof.cxx.o -MF test/CMakeFiles/stressProof.dir/stressProof.cxx.o.d -o test/CMakeFiles/stressProof.dir/stressProof.cxx.o -c /github/home/ROOT-CI/src/test/stressProof.cxx. 2023-08-30T18:30:54.7559009Z ##[error]/github/home/ROOT-CI/src/test/stressProof.cxx:140:10: fatal error: proof/getProof.C: No such file or directory. 2023-08-30T18:30:54.7654053Z 140 | #include ""proof/getProof.C"". 2023-08-30T18:30:54.7654343Z | ^~~~~~~~~~~~~~~~~~. 2023-08-30T18:30:54.7654778Z compilation terminated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:204,testability,test,test,204,Thanks! FYI apart from some weird Jenkins errors [we get](https://github.com/root-project/root/pull/13571/files#annotation_13775791970):. ```. 2023-08-30T18:30:54.7170667Z [2871/3458] Building CXX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-v,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:292,testability,test,test,292,Thanks! FYI apart from some weird Jenkins errors [we get](https://github.com/root-project/root/pull/13571/files#annotation_13775791970):. ```. 2023-08-30T18:30:54.7170667Z [2871/3458] Building CXX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-v,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:2061,testability,test,test,2061,"clude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -DDNNCPU -g -std=c++20 -MD -MT test/CMakeFiles/stressProof.dir/stressProof.cxx.o -MF test/CMakeFiles/stressProof.dir/stressProof.cxx.o.d -o test/CMakeFiles/stressProof.dir/stressProof.cxx.o -c /github/home/ROOT-CI/src/test/stressProof.cxx. 2023-08-30T18:30:54.7559009Z ##[error]/github/home/ROOT-CI/src/test/stressProof.cxx:140:10: fatal error: proof/getProof.C: No such file or directory. 2023-08-30T18:30:54.7654053Z 140 | #include ""proof/getProof.C"". 2023-08-30T18:30:54.7654343Z | ^~~~~~~~~~~~~~~~~~. 2023-08-30T18:30:54.7654778Z compilation terminated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:2115,testability,test,test,2115,"clude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -DDNNCPU -g -std=c++20 -MD -MT test/CMakeFiles/stressProof.dir/stressProof.cxx.o -MF test/CMakeFiles/stressProof.dir/stressProof.cxx.o.d -o test/CMakeFiles/stressProof.dir/stressProof.cxx.o -c /github/home/ROOT-CI/src/test/stressProof.cxx. 2023-08-30T18:30:54.7559009Z ##[error]/github/home/ROOT-CI/src/test/stressProof.cxx:140:10: fatal error: proof/getProof.C: No such file or directory. 2023-08-30T18:30:54.7654053Z 140 | #include ""proof/getProof.C"". 2023-08-30T18:30:54.7654343Z | ^~~~~~~~~~~~~~~~~~. 2023-08-30T18:30:54.7654778Z compilation terminated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:2170,testability,test,test,2170,"clude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -DDNNCPU -g -std=c++20 -MD -MT test/CMakeFiles/stressProof.dir/stressProof.cxx.o -MF test/CMakeFiles/stressProof.dir/stressProof.cxx.o.d -o test/CMakeFiles/stressProof.dir/stressProof.cxx.o -c /github/home/ROOT-CI/src/test/stressProof.cxx. 2023-08-30T18:30:54.7559009Z ##[error]/github/home/ROOT-CI/src/test/stressProof.cxx:140:10: fatal error: proof/getProof.C: No such file or directory. 2023-08-30T18:30:54.7654053Z 140 | #include ""proof/getProof.C"". 2023-08-30T18:30:54.7654343Z | ^~~~~~~~~~~~~~~~~~. 2023-08-30T18:30:54.7654778Z compilation terminated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:2248,testability,test,test,2248,"clude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -DDNNCPU -g -std=c++20 -MD -MT test/CMakeFiles/stressProof.dir/stressProof.cxx.o -MF test/CMakeFiles/stressProof.dir/stressProof.cxx.o.d -o test/CMakeFiles/stressProof.dir/stressProof.cxx.o -c /github/home/ROOT-CI/src/test/stressProof.cxx. 2023-08-30T18:30:54.7559009Z ##[error]/github/home/ROOT-CI/src/test/stressProof.cxx:140:10: fatal error: proof/getProof.C: No such file or directory. 2023-08-30T18:30:54.7654053Z 140 | #include ""proof/getProof.C"". 2023-08-30T18:30:54.7654343Z | ^~~~~~~~~~~~~~~~~~. 2023-08-30T18:30:54.7654778Z compilation terminated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:2333,testability,test,test,2333,"clude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -DDNNCPU -g -std=c++20 -MD -MT test/CMakeFiles/stressProof.dir/stressProof.cxx.o -MF test/CMakeFiles/stressProof.dir/stressProof.cxx.o.d -o test/CMakeFiles/stressProof.dir/stressProof.cxx.o -c /github/home/ROOT-CI/src/test/stressProof.cxx. 2023-08-30T18:30:54.7559009Z ##[error]/github/home/ROOT-CI/src/test/stressProof.cxx:140:10: fatal error: proof/getProof.C: No such file or directory. 2023-08-30T18:30:54.7654053Z 140 | #include ""proof/getProof.C"". 2023-08-30T18:30:54.7654343Z | ^~~~~~~~~~~~~~~~~~. 2023-08-30T18:30:54.7654778Z compilation terminated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:42,usability,error,errors,42,Thanks! FYI apart from some weird Jenkins errors [we get](https://github.com/root-project/root/pull/13571/files#annotation_13775791970):. ```. 2023-08-30T18:30:54.7170667Z [2871/3458] Building CXX object test/CMakeFiles/stressProof.dir/stressProof.cxx.o. 2023-08-30T18:30:54.7290088Z FAILED: test/CMakeFiles/stressProof.dir/stressProof.cxx.o . 2023-08-30T18:30:54.7394177Z /usr/bin/c++ -I/github/home/ROOT-CI/build/include -I/github/home/ROOT-CI/src/proof/proof/inc -I/github/home/ROOT-CI/src/math/mathcore/v7/inc -I/github/home/ROOT-CI/src/math/mathcore/inc -I/github/home/ROOT-CI/build/ginclude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-v,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:2302,usability,error,error,2302,"clude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -DDNNCPU -g -std=c++20 -MD -MT test/CMakeFiles/stressProof.dir/stressProof.cxx.o -MF test/CMakeFiles/stressProof.dir/stressProof.cxx.o.d -o test/CMakeFiles/stressProof.dir/stressProof.cxx.o -c /github/home/ROOT-CI/src/test/stressProof.cxx. 2023-08-30T18:30:54.7559009Z ##[error]/github/home/ROOT-CI/src/test/stressProof.cxx:140:10: fatal error: proof/getProof.C: No such file or directory. 2023-08-30T18:30:54.7654053Z 140 | #include ""proof/getProof.C"". 2023-08-30T18:30:54.7654343Z | ^~~~~~~~~~~~~~~~~~. 2023-08-30T18:30:54.7654778Z compilation terminated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:2368,usability,error,error,2368,"clude -I/github/home/ROOT-CI/src/core/base/inc -I/github/home/ROOT-CI/src/core/base/v7/inc -I/github/home/ROOT-CI/src/core/clib/inc -I/github/home/ROOT-CI/src/core/clingutils/inc -I/github/home/ROOT-CI/src/core/clingutils/res -I/github/home/ROOT-CI/src/core/cont/inc -I/github/home/ROOT-CI/src/core/foundation/inc -I/github/home/ROOT-CI/src/core/foundation/v7/inc -I/github/home/ROOT-CI/src/core/gui/inc -I/github/home/ROOT-CI/src/core/meta/inc -I/github/home/ROOT-CI/src/core/textinput/inc -I/github/home/ROOT-CI/src/core/thread/inc -I/github/home/ROOT-CI/src/core/zip/inc -I/github/home/ROOT-CI/src/core/lzma/inc -I/github/home/ROOT-CI/src/core/lz4/inc -I/github/home/ROOT-CI/src/core/zstd/inc -I/github/home/ROOT-CI/src/builtins/zstd -I/github/home/ROOT-CI/src/core/imt/inc -I/github/home/ROOT-CI/src/core/multiproc/inc -I/github/home/ROOT-CI/src/net/net/inc -I/github/home/ROOT-CI/src/io/io/v7/inc -I/github/home/ROOT-CI/src/io/io/inc -I/github/home/ROOT-CI/src/tree/tree/inc -I/github/home/ROOT-CI/src/proof/proofplayer/inc -I/github/home/ROOT-CI/src/hist/hist/inc -I/github/home/ROOT-CI/src/math/matrix/inc -I/github/home/ROOT-CI/src/tree/treeplayer/inc -I/github/home/ROOT-CI/src/graf2d/gpad/inc -I/github/home/ROOT-CI/src/graf2d/graf/inc -I/github/home/ROOT-CI/src/graf3d/g3d/inc -fdiagnostics-color=always -std=c++20 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -DDNNCPU -g -std=c++20 -MD -MT test/CMakeFiles/stressProof.dir/stressProof.cxx.o -MF test/CMakeFiles/stressProof.dir/stressProof.cxx.o.d -o test/CMakeFiles/stressProof.dir/stressProof.cxx.o -c /github/home/ROOT-CI/src/test/stressProof.cxx. 2023-08-30T18:30:54.7559009Z ##[error]/github/home/ROOT-CI/src/test/stressProof.cxx:140:10: fatal error: proof/getProof.C: No such file or directory. 2023-08-30T18:30:54.7654053Z 140 | #include ""proof/getProof.C"". 2023-08-30T18:30:54.7654343Z | ^~~~~~~~~~~~~~~~~~. 2023-08-30T18:30:54.7654778Z compilation terminated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:7,deployability,updat,updated,7,I have updated the root-spi repo for the old (Jenkins) CI to learn about this new module and know that it should be built everywhere.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:82,deployability,modul,module,82,I have updated the root-spi repo for the old (Jenkins) CI to learn about this new module and know that it should be built everywhere.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:82,modifiability,modul,module,82,I have updated the root-spi repo for the old (Jenkins) CI to learn about this new module and know that it should be built everywhere.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:7,safety,updat,updated,7,I have updated the root-spi repo for the old (Jenkins) CI to learn about this new module and know that it should be built everywhere.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:82,safety,modul,module,82,I have updated the root-spi repo for the old (Jenkins) CI to learn about this new module and know that it should be built everywhere.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:7,security,updat,updated,7,I have updated the root-spi repo for the old (Jenkins) CI to learn about this new module and know that it should be built everywhere.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:61,usability,learn,learn,61,I have updated the root-spi repo for the old (Jenkins) CI to learn about this new module and know that it should be built everywhere.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:11,deployability,build,build,11,"@phsft-bot build just on mac12arm/cxx20, mac11/noimt, ROOT-ubuntu2004/python3, ROOT-ubuntu2204/nortcxxmod",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:11,deployability,build,build,11,"@phsft-bot build just on mac12arm/cxx20, mac11/noimt, ROOT-ubuntu2004/python3, ROOT-ubuntu2204/nortcxxmod",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:20,safety,test,tests,20,"Ok, apart from TMVA tests, it seems that the changes to CMake have the desired effect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:20,testability,test,tests,20,"Ok, apart from TMVA tests, it seems that the changes to CMake have the desired effect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:29,safety,test,testing,29,"Ok, this is tmva hitting the testing phase. The changes work as expected.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:29,testability,test,testing,29,"Ok, this is tmva hitting the testing phase. The changes work as expected.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:63,integrability,messag,message,63,"Just for my curiosity because it's not explained in the commit message: You are adding `include_directories(${ROOT_SOURCE_DIR}/tutorials)` in `test/CMakeLists.txt`, I suppose this is to fix https://github.com/root-project/root/pull/13571#issuecomment-1700410866. I was expecting that this happens when PROOF is disabled - where is that directory added before / otherwise?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:63,interoperability,messag,message,63,"Just for my curiosity because it's not explained in the commit message: You are adding `include_directories(${ROOT_SOURCE_DIR}/tutorials)` in `test/CMakeLists.txt`, I suppose this is to fix https://github.com/root-project/root/pull/13571#issuecomment-1700410866. I was expecting that this happens when PROOF is disabled - where is that directory added before / otherwise?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:143,safety,test,test,143,"Just for my curiosity because it's not explained in the commit message: You are adding `include_directories(${ROOT_SOURCE_DIR}/tutorials)` in `test/CMakeLists.txt`, I suppose this is to fix https://github.com/root-project/root/pull/13571#issuecomment-1700410866. I was expecting that this happens when PROOF is disabled - where is that directory added before / otherwise?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:143,testability,test,test,143,"Just for my curiosity because it's not explained in the commit message: You are adding `include_directories(${ROOT_SOURCE_DIR}/tutorials)` in `test/CMakeLists.txt`, I suppose this is to fix https://github.com/root-project/root/pull/13571#issuecomment-1700410866. I was expecting that this happens when PROOF is disabled - where is that directory added before / otherwise?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/issues/13574:296,availability,error,error,296,"Hi @giraudpf, sorry for the long silence on this. I can reproduce the problem and can confirm it happens in the latest `master` and GCC 13.2.0 as well. Interestingly, everything is fine once `test.cpp+` has been compiled, ie if you start a fresh `root` prompt and input `.L test.cpp+` again. The error comes from. https://github.com/root-project/root/blob/0865d47e019470bc714d8166a376706c317de4e2/core/metacling/src/TCling.cxx#L3909. declaring. ```c++. #ifndef ROOT_INTERNAL_TEmulated_TEmulatedTuplelEfilesystemcLcLpathcLcL_ListcLcL_ImplmUcOfilesystemcLcLpathcLcL_ListcLcL_Impl_deletergR . #define ROOT_INTERNAL_TEmulated_TEmulatedTuplelEfilesystemcLcLpathcLcL_ListcLcL_ImplmUcOfilesystemcLcLpathcLcL_ListcLcL_Impl_deletergR . namespace ROOT { namespace Internal {. template <class... Types> struct TEmulatedTuple;. template <> struct TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter> { . filesystem::path::_List::_Impl_deleter _1;. filesystem::path::_List::_Impl* _0;. };. }}. #endif. ```. Adding @pcanal as the original author of `AtlernateTuple` - I guess we shouldn't be doing this for private members, such as of `std::filesystem::path`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:397,energy efficiency,core,core,397,"Hi @giraudpf, sorry for the long silence on this. I can reproduce the problem and can confirm it happens in the latest `master` and GCC 13.2.0 as well. Interestingly, everything is fine once `test.cpp+` has been compiled, ie if you start a fresh `root` prompt and input `.L test.cpp+` again. The error comes from. https://github.com/root-project/root/blob/0865d47e019470bc714d8166a376706c317de4e2/core/metacling/src/TCling.cxx#L3909. declaring. ```c++. #ifndef ROOT_INTERNAL_TEmulated_TEmulatedTuplelEfilesystemcLcLpathcLcL_ListcLcL_ImplmUcOfilesystemcLcLpathcLcL_ListcLcL_Impl_deletergR . #define ROOT_INTERNAL_TEmulated_TEmulatedTuplelEfilesystemcLcLpathcLcL_ListcLcL_ImplmUcOfilesystemcLcLpathcLcL_ListcLcL_Impl_deletergR . namespace ROOT { namespace Internal {. template <class... Types> struct TEmulatedTuple;. template <> struct TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter> { . filesystem::path::_List::_Impl_deleter _1;. filesystem::path::_List::_Impl* _0;. };. }}. #endif. ```. Adding @pcanal as the original author of `AtlernateTuple` - I guess we shouldn't be doing this for private members, such as of `std::filesystem::path`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:296,performance,error,error,296,"Hi @giraudpf, sorry for the long silence on this. I can reproduce the problem and can confirm it happens in the latest `master` and GCC 13.2.0 as well. Interestingly, everything is fine once `test.cpp+` has been compiled, ie if you start a fresh `root` prompt and input `.L test.cpp+` again. The error comes from. https://github.com/root-project/root/blob/0865d47e019470bc714d8166a376706c317de4e2/core/metacling/src/TCling.cxx#L3909. declaring. ```c++. #ifndef ROOT_INTERNAL_TEmulated_TEmulatedTuplelEfilesystemcLcLpathcLcL_ListcLcL_ImplmUcOfilesystemcLcLpathcLcL_ListcLcL_Impl_deletergR . #define ROOT_INTERNAL_TEmulated_TEmulatedTuplelEfilesystemcLcLpathcLcL_ListcLcL_ImplmUcOfilesystemcLcLpathcLcL_ListcLcL_Impl_deletergR . namespace ROOT { namespace Internal {. template <class... Types> struct TEmulatedTuple;. template <> struct TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter> { . filesystem::path::_List::_Impl_deleter _1;. filesystem::path::_List::_Impl* _0;. };. }}. #endif. ```. Adding @pcanal as the original author of `AtlernateTuple` - I guess we shouldn't be doing this for private members, such as of `std::filesystem::path`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:192,safety,test,test,192,"Hi @giraudpf, sorry for the long silence on this. I can reproduce the problem and can confirm it happens in the latest `master` and GCC 13.2.0 as well. Interestingly, everything is fine once `test.cpp+` has been compiled, ie if you start a fresh `root` prompt and input `.L test.cpp+` again. The error comes from. https://github.com/root-project/root/blob/0865d47e019470bc714d8166a376706c317de4e2/core/metacling/src/TCling.cxx#L3909. declaring. ```c++. #ifndef ROOT_INTERNAL_TEmulated_TEmulatedTuplelEfilesystemcLcLpathcLcL_ListcLcL_ImplmUcOfilesystemcLcLpathcLcL_ListcLcL_Impl_deletergR . #define ROOT_INTERNAL_TEmulated_TEmulatedTuplelEfilesystemcLcLpathcLcL_ListcLcL_ImplmUcOfilesystemcLcLpathcLcL_ListcLcL_Impl_deletergR . namespace ROOT { namespace Internal {. template <class... Types> struct TEmulatedTuple;. template <> struct TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter> { . filesystem::path::_List::_Impl_deleter _1;. filesystem::path::_List::_Impl* _0;. };. }}. #endif. ```. Adding @pcanal as the original author of `AtlernateTuple` - I guess we shouldn't be doing this for private members, such as of `std::filesystem::path`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:264,safety,input,input,264,"Hi @giraudpf, sorry for the long silence on this. I can reproduce the problem and can confirm it happens in the latest `master` and GCC 13.2.0 as well. Interestingly, everything is fine once `test.cpp+` has been compiled, ie if you start a fresh `root` prompt and input `.L test.cpp+` again. The error comes from. https://github.com/root-project/root/blob/0865d47e019470bc714d8166a376706c317de4e2/core/metacling/src/TCling.cxx#L3909. declaring. ```c++. #ifndef ROOT_INTERNAL_TEmulated_TEmulatedTuplelEfilesystemcLcLpathcLcL_ListcLcL_ImplmUcOfilesystemcLcLpathcLcL_ListcLcL_Impl_deletergR . #define ROOT_INTERNAL_TEmulated_TEmulatedTuplelEfilesystemcLcLpathcLcL_ListcLcL_ImplmUcOfilesystemcLcLpathcLcL_ListcLcL_Impl_deletergR . namespace ROOT { namespace Internal {. template <class... Types> struct TEmulatedTuple;. template <> struct TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter> { . filesystem::path::_List::_Impl_deleter _1;. filesystem::path::_List::_Impl* _0;. };. }}. #endif. ```. Adding @pcanal as the original author of `AtlernateTuple` - I guess we shouldn't be doing this for private members, such as of `std::filesystem::path`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:274,safety,test,test,274,"Hi @giraudpf, sorry for the long silence on this. I can reproduce the problem and can confirm it happens in the latest `master` and GCC 13.2.0 as well. Interestingly, everything is fine once `test.cpp+` has been compiled, ie if you start a fresh `root` prompt and input `.L test.cpp+` again. The error comes from. https://github.com/root-project/root/blob/0865d47e019470bc714d8166a376706c317de4e2/core/metacling/src/TCling.cxx#L3909. declaring. ```c++. #ifndef ROOT_INTERNAL_TEmulated_TEmulatedTuplelEfilesystemcLcLpathcLcL_ListcLcL_ImplmUcOfilesystemcLcLpathcLcL_ListcLcL_Impl_deletergR . #define ROOT_INTERNAL_TEmulated_TEmulatedTuplelEfilesystemcLcLpathcLcL_ListcLcL_ImplmUcOfilesystemcLcLpathcLcL_ListcLcL_Impl_deletergR . namespace ROOT { namespace Internal {. template <class... Types> struct TEmulatedTuple;. template <> struct TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter> { . filesystem::path::_List::_Impl_deleter _1;. filesystem::path::_List::_Impl* _0;. };. }}. #endif. ```. Adding @pcanal as the original author of `AtlernateTuple` - I guess we shouldn't be doing this for private members, such as of `std::filesystem::path`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:296,safety,error,error,296,"Hi @giraudpf, sorry for the long silence on this. I can reproduce the problem and can confirm it happens in the latest `master` and GCC 13.2.0 as well. Interestingly, everything is fine once `test.cpp+` has been compiled, ie if you start a fresh `root` prompt and input `.L test.cpp+` again. The error comes from. https://github.com/root-project/root/blob/0865d47e019470bc714d8166a376706c317de4e2/core/metacling/src/TCling.cxx#L3909. declaring. ```c++. #ifndef ROOT_INTERNAL_TEmulated_TEmulatedTuplelEfilesystemcLcLpathcLcL_ListcLcL_ImplmUcOfilesystemcLcLpathcLcL_ListcLcL_Impl_deletergR . #define ROOT_INTERNAL_TEmulated_TEmulatedTuplelEfilesystemcLcLpathcLcL_ListcLcL_ImplmUcOfilesystemcLcLpathcLcL_ListcLcL_Impl_deletergR . namespace ROOT { namespace Internal {. template <class... Types> struct TEmulatedTuple;. template <> struct TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter> { . filesystem::path::_List::_Impl_deleter _1;. filesystem::path::_List::_Impl* _0;. };. }}. #endif. ```. Adding @pcanal as the original author of `AtlernateTuple` - I guess we shouldn't be doing this for private members, such as of `std::filesystem::path`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:1059,security,auth,author,1059,"Hi @giraudpf, sorry for the long silence on this. I can reproduce the problem and can confirm it happens in the latest `master` and GCC 13.2.0 as well. Interestingly, everything is fine once `test.cpp+` has been compiled, ie if you start a fresh `root` prompt and input `.L test.cpp+` again. The error comes from. https://github.com/root-project/root/blob/0865d47e019470bc714d8166a376706c317de4e2/core/metacling/src/TCling.cxx#L3909. declaring. ```c++. #ifndef ROOT_INTERNAL_TEmulated_TEmulatedTuplelEfilesystemcLcLpathcLcL_ListcLcL_ImplmUcOfilesystemcLcLpathcLcL_ListcLcL_Impl_deletergR . #define ROOT_INTERNAL_TEmulated_TEmulatedTuplelEfilesystemcLcLpathcLcL_ListcLcL_ImplmUcOfilesystemcLcLpathcLcL_ListcLcL_Impl_deletergR . namespace ROOT { namespace Internal {. template <class... Types> struct TEmulatedTuple;. template <> struct TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter> { . filesystem::path::_List::_Impl_deleter _1;. filesystem::path::_List::_Impl* _0;. };. }}. #endif. ```. Adding @pcanal as the original author of `AtlernateTuple` - I guess we shouldn't be doing this for private members, such as of `std::filesystem::path`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:192,testability,test,test,192,"Hi @giraudpf, sorry for the long silence on this. I can reproduce the problem and can confirm it happens in the latest `master` and GCC 13.2.0 as well. Interestingly, everything is fine once `test.cpp+` has been compiled, ie if you start a fresh `root` prompt and input `.L test.cpp+` again. The error comes from. https://github.com/root-project/root/blob/0865d47e019470bc714d8166a376706c317de4e2/core/metacling/src/TCling.cxx#L3909. declaring. ```c++. #ifndef ROOT_INTERNAL_TEmulated_TEmulatedTuplelEfilesystemcLcLpathcLcL_ListcLcL_ImplmUcOfilesystemcLcLpathcLcL_ListcLcL_Impl_deletergR . #define ROOT_INTERNAL_TEmulated_TEmulatedTuplelEfilesystemcLcLpathcLcL_ListcLcL_ImplmUcOfilesystemcLcLpathcLcL_ListcLcL_Impl_deletergR . namespace ROOT { namespace Internal {. template <class... Types> struct TEmulatedTuple;. template <> struct TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter> { . filesystem::path::_List::_Impl_deleter _1;. filesystem::path::_List::_Impl* _0;. };. }}. #endif. ```. Adding @pcanal as the original author of `AtlernateTuple` - I guess we shouldn't be doing this for private members, such as of `std::filesystem::path`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:274,testability,test,test,274,"Hi @giraudpf, sorry for the long silence on this. I can reproduce the problem and can confirm it happens in the latest `master` and GCC 13.2.0 as well. Interestingly, everything is fine once `test.cpp+` has been compiled, ie if you start a fresh `root` prompt and input `.L test.cpp+` again. The error comes from. https://github.com/root-project/root/blob/0865d47e019470bc714d8166a376706c317de4e2/core/metacling/src/TCling.cxx#L3909. declaring. ```c++. #ifndef ROOT_INTERNAL_TEmulated_TEmulatedTuplelEfilesystemcLcLpathcLcL_ListcLcL_ImplmUcOfilesystemcLcLpathcLcL_ListcLcL_Impl_deletergR . #define ROOT_INTERNAL_TEmulated_TEmulatedTuplelEfilesystemcLcLpathcLcL_ListcLcL_ImplmUcOfilesystemcLcLpathcLcL_ListcLcL_Impl_deletergR . namespace ROOT { namespace Internal {. template <class... Types> struct TEmulatedTuple;. template <> struct TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter> { . filesystem::path::_List::_Impl_deleter _1;. filesystem::path::_List::_Impl* _0;. };. }}. #endif. ```. Adding @pcanal as the original author of `AtlernateTuple` - I guess we shouldn't be doing this for private members, such as of `std::filesystem::path`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:86,usability,confirm,confirm,86,"Hi @giraudpf, sorry for the long silence on this. I can reproduce the problem and can confirm it happens in the latest `master` and GCC 13.2.0 as well. Interestingly, everything is fine once `test.cpp+` has been compiled, ie if you start a fresh `root` prompt and input `.L test.cpp+` again. The error comes from. https://github.com/root-project/root/blob/0865d47e019470bc714d8166a376706c317de4e2/core/metacling/src/TCling.cxx#L3909. declaring. ```c++. #ifndef ROOT_INTERNAL_TEmulated_TEmulatedTuplelEfilesystemcLcLpathcLcL_ListcLcL_ImplmUcOfilesystemcLcLpathcLcL_ListcLcL_Impl_deletergR . #define ROOT_INTERNAL_TEmulated_TEmulatedTuplelEfilesystemcLcLpathcLcL_ListcLcL_ImplmUcOfilesystemcLcLpathcLcL_ListcLcL_Impl_deletergR . namespace ROOT { namespace Internal {. template <class... Types> struct TEmulatedTuple;. template <> struct TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter> { . filesystem::path::_List::_Impl_deleter _1;. filesystem::path::_List::_Impl* _0;. };. }}. #endif. ```. Adding @pcanal as the original author of `AtlernateTuple` - I guess we shouldn't be doing this for private members, such as of `std::filesystem::path`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:264,usability,input,input,264,"Hi @giraudpf, sorry for the long silence on this. I can reproduce the problem and can confirm it happens in the latest `master` and GCC 13.2.0 as well. Interestingly, everything is fine once `test.cpp+` has been compiled, ie if you start a fresh `root` prompt and input `.L test.cpp+` again. The error comes from. https://github.com/root-project/root/blob/0865d47e019470bc714d8166a376706c317de4e2/core/metacling/src/TCling.cxx#L3909. declaring. ```c++. #ifndef ROOT_INTERNAL_TEmulated_TEmulatedTuplelEfilesystemcLcLpathcLcL_ListcLcL_ImplmUcOfilesystemcLcLpathcLcL_ListcLcL_Impl_deletergR . #define ROOT_INTERNAL_TEmulated_TEmulatedTuplelEfilesystemcLcLpathcLcL_ListcLcL_ImplmUcOfilesystemcLcLpathcLcL_ListcLcL_Impl_deletergR . namespace ROOT { namespace Internal {. template <class... Types> struct TEmulatedTuple;. template <> struct TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter> { . filesystem::path::_List::_Impl_deleter _1;. filesystem::path::_List::_Impl* _0;. };. }}. #endif. ```. Adding @pcanal as the original author of `AtlernateTuple` - I guess we shouldn't be doing this for private members, such as of `std::filesystem::path`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:296,usability,error,error,296,"Hi @giraudpf, sorry for the long silence on this. I can reproduce the problem and can confirm it happens in the latest `master` and GCC 13.2.0 as well. Interestingly, everything is fine once `test.cpp+` has been compiled, ie if you start a fresh `root` prompt and input `.L test.cpp+` again. The error comes from. https://github.com/root-project/root/blob/0865d47e019470bc714d8166a376706c317de4e2/core/metacling/src/TCling.cxx#L3909. declaring. ```c++. #ifndef ROOT_INTERNAL_TEmulated_TEmulatedTuplelEfilesystemcLcLpathcLcL_ListcLcL_ImplmUcOfilesystemcLcLpathcLcL_ListcLcL_Impl_deletergR . #define ROOT_INTERNAL_TEmulated_TEmulatedTuplelEfilesystemcLcLpathcLcL_ListcLcL_ImplmUcOfilesystemcLcLpathcLcL_ListcLcL_Impl_deletergR . namespace ROOT { namespace Internal {. template <class... Types> struct TEmulatedTuple;. template <> struct TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter> { . filesystem::path::_List::_Impl_deleter _1;. filesystem::path::_List::_Impl* _0;. };. }}. #endif. ```. Adding @pcanal as the original author of `AtlernateTuple` - I guess we shouldn't be doing this for private members, such as of `std::filesystem::path`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:65,testability,assert,assert,65,"Right, that's also what I was scratching my head. By putting an `assert(0)`, I found that `AlternateTuple` is called from a `rootcling` invocation, and the member that triggers the `tuple` is a `unique_ptr<filesystem::path::_List::_Impl,filesystem::path::_List::_Impl_deleter>`. ie the underlying cause is the same as https://github.com/root-project/root/issues/13361",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:45,deployability,releas,release,45,"I confirm that this issue is fixed with ROOT release 6.32.02. However, I noticed that there is no mention of this in the release notes at https://root.cern/doc/v632/release-notes.html#release-6.32.02. Many thanks for this update!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:121,deployability,releas,release,121,"I confirm that this issue is fixed with ROOT release 6.32.02. However, I noticed that there is no mention of this in the release notes at https://root.cern/doc/v632/release-notes.html#release-6.32.02. Many thanks for this update!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:165,deployability,releas,release-notes,165,"I confirm that this issue is fixed with ROOT release 6.32.02. However, I noticed that there is no mention of this in the release notes at https://root.cern/doc/v632/release-notes.html#release-6.32.02. Many thanks for this update!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:184,deployability,releas,release-,184,"I confirm that this issue is fixed with ROOT release 6.32.02. However, I noticed that there is no mention of this in the release notes at https://root.cern/doc/v632/release-notes.html#release-6.32.02. Many thanks for this update!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:222,deployability,updat,update,222,"I confirm that this issue is fixed with ROOT release 6.32.02. However, I noticed that there is no mention of this in the release notes at https://root.cern/doc/v632/release-notes.html#release-6.32.02. Many thanks for this update!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:222,safety,updat,update,222,"I confirm that this issue is fixed with ROOT release 6.32.02. However, I noticed that there is no mention of this in the release notes at https://root.cern/doc/v632/release-notes.html#release-6.32.02. Many thanks for this update!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:222,security,updat,update,222,"I confirm that this issue is fixed with ROOT release 6.32.02. However, I noticed that there is no mention of this in the release notes at https://root.cern/doc/v632/release-notes.html#release-6.32.02. Many thanks for this update!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:2,usability,confirm,confirm,2,"I confirm that this issue is fixed with ROOT release 6.32.02. However, I noticed that there is no mention of this in the release notes at https://root.cern/doc/v632/release-notes.html#release-6.32.02. Many thanks for this update!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/pull/13576:4,availability,failur,failures,4,"The failures are unrelated, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13576
https://github.com/root-project/root/pull/13576:4,deployability,fail,failures,4,"The failures are unrelated, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13576
https://github.com/root-project/root/pull/13576:4,performance,failur,failures,4,"The failures are unrelated, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13576
https://github.com/root-project/root/pull/13576:4,reliability,fail,failures,4,"The failures are unrelated, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13576
https://github.com/root-project/root/pull/13578:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13578
https://github.com/root-project/root/pull/13578:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13578
https://github.com/root-project/root/pull/13578:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13578
https://github.com/root-project/root/pull/13579:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13579
https://github.com/root-project/root/pull/13583:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=ON. I think we definitely want to make sure we don't have anymore failing platforms,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13583
https://github.com/root-project/root/pull/13583:120,deployability,fail,failing,120,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=ON. I think we definitely want to make sure we don't have anymore failing platforms,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13583
https://github.com/root-project/root/pull/13583:128,interoperability,platform,platforms,128,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=ON. I think we definitely want to make sure we don't have anymore failing platforms,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13583
https://github.com/root-project/root/pull/13583:120,reliability,fail,failing,120,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=ON. I think we definitely want to make sure we don't have anymore failing platforms,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13583
https://github.com/root-project/root/pull/13586:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13586
https://github.com/root-project/root/pull/13586:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13586
https://github.com/root-project/root/pull/13592:11,deployability,build,build,11,@phsft-bot build on mac13arm/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13592
https://github.com/root-project/root/pull/13592:11,deployability,build,build,11,"@phsft-bot build on mac13arm/default, mac12/default, ROOT-ubuntu2204/nortcxxmod.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13592
https://github.com/root-project/root/pull/13592:11,deployability,build,build,11,"@phsft-bot build on mac13arm/default, mac12/default, ROOT-ubuntu2204/nortcxxmod",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13592
https://github.com/root-project/root/pull/13592:11,deployability,build,build,11,"@phsft-bot build on mac13arm/default, mac13/default, ROOT-ubuntu2204/nortcxxmod",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13592
https://github.com/root-project/root/pull/13592:11,deployability,build,build,11,"@phsft-bot build on mac13arm/default, mac13/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13592
https://github.com/root-project/root/pull/13593:53,deployability,updat,updated,53,"Hi @vepadulano, thanks a lot for your review! I have updated the PR and the associated `roottest` PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:38,safety,review,review,38,"Hi @vepadulano, thanks a lot for your review! I have updated the PR and the associated `roottest` PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:53,safety,updat,updated,53,"Hi @vepadulano, thanks a lot for your review! I have updated the PR and the associated `roottest` PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:53,security,updat,updated,53,"Hi @vepadulano, thanks a lot for your review! I have updated the PR and the associated `roottest` PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:38,testability,review,review,38,"Hi @vepadulano, thanks a lot for your review! I have updated the PR and the associated `roottest` PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13596:55,testability,simpl,simply,55,This PR needs to have its history rewritten - possible simply squashing all commits.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13596
https://github.com/root-project/root/pull/13596:55,usability,simpl,simply,55,This PR needs to have its history rewritten - possible simply squashing all commits.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13596
https://github.com/root-project/root/pull/13598:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13598
https://github.com/root-project/root/pull/13599:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13599
https://github.com/root-project/root/issues/13603:61,deployability,releas,released,61,"Fixed in ""not applicable"" because the bug never affected any released ROOT version, and therefore it's not a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:75,deployability,version,version,75,"Fixed in ""not applicable"" because the bug never affected any released ROOT version, and therefore it's not a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:75,integrability,version,version,75,"Fixed in ""not applicable"" because the bug never affected any released ROOT version, and therefore it's not a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:75,modifiability,version,version,75,"Fixed in ""not applicable"" because the bug never affected any released ROOT version, and therefore it's not a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/pull/13604:0,security,Expir,Expired,0,Expired.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/issues/13605:67,deployability,releas,releases,67,Thanks a lot for reporting this! It will be fixed in the next ROOT releases.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13605
https://github.com/root-project/root/pull/13606:11,deployability,build,build,11,@phsft-bot build just on mac11/noimt,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:28,deployability,build,build,28,Do we need both warnings at build time and runtime?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:34,performance,time,time,34,Do we need both warnings at build time and runtime?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:30,deployability,build,build,30,"> Do we need both warnings at build time and runtime? Build-time warning is for the packager, runtime warning is for users that happen to be using a software stack where the ROOT was built with Python 2 support, but they weren't the ones building it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:54,deployability,Build,Build-time,54,"> Do we need both warnings at build time and runtime? Build-time warning is for the packager, runtime warning is for users that happen to be using a software stack where the ROOT was built with Python 2 support, but they weren't the ones building it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:158,deployability,stack,stack,158,"> Do we need both warnings at build time and runtime? Build-time warning is for the packager, runtime warning is for users that happen to be using a software stack where the ROOT was built with Python 2 support, but they weren't the ones building it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:238,deployability,build,building,238,"> Do we need both warnings at build time and runtime? Build-time warning is for the packager, runtime warning is for users that happen to be using a software stack where the ROOT was built with Python 2 support, but they weren't the ones building it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:84,modifiability,pac,packager,84,"> Do we need both warnings at build time and runtime? Build-time warning is for the packager, runtime warning is for users that happen to be using a software stack where the ROOT was built with Python 2 support, but they weren't the ones building it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:36,performance,time,time,36,"> Do we need both warnings at build time and runtime? Build-time warning is for the packager, runtime warning is for users that happen to be using a software stack where the ROOT was built with Python 2 support, but they weren't the ones building it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:60,performance,time,time,60,"> Do we need both warnings at build time and runtime? Build-time warning is for the packager, runtime warning is for users that happen to be using a software stack where the ROOT was built with Python 2 support, but they weren't the ones building it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:117,usability,user,users,117,"> Do we need both warnings at build time and runtime? Build-time warning is for the packager, runtime warning is for users that happen to be using a software stack where the ROOT was built with Python 2 support, but they weren't the ones building it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:203,usability,support,support,203,"> Do we need both warnings at build time and runtime? Build-time warning is for the packager, runtime warning is for users that happen to be using a software stack where the ROOT was built with Python 2 support, but they weren't the ones building it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:152,deployability,releas,release,152,"Glad if this helped someone. However, I don't understand how users are supposed to learn about this feature (without googling). There is nothing in the release notes on that. . https://root.cern/doc/v630/release-notes.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:204,deployability,releas,release-notes,204,"Glad if this helped someone. However, I don't understand how users are supposed to learn about this feature (without googling). There is nothing in the release notes on that. . https://root.cern/doc/v630/release-notes.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:46,testability,understand,understand,46,"Glad if this helped someone. However, I don't understand how users are supposed to learn about this feature (without googling). There is nothing in the release notes on that. . https://root.cern/doc/v630/release-notes.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:13,usability,help,helped,13,"Glad if this helped someone. However, I don't understand how users are supposed to learn about this feature (without googling). There is nothing in the release notes on that. . https://root.cern/doc/v630/release-notes.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:61,usability,user,users,61,"Glad if this helped someone. However, I don't understand how users are supposed to learn about this feature (without googling). There is nothing in the release notes on that. . https://root.cern/doc/v630/release-notes.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:83,usability,learn,learn,83,"Glad if this helped someone. However, I don't understand how users are supposed to learn about this feature (without googling). There is nothing in the release notes on that. . https://root.cern/doc/v630/release-notes.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:51,deployability,updat,update,51,"That's a fair point. It doesn't make much sense to update the 6.30 release notes now one year after the release, but for 6.32 we should make sure that we mention what changed for Python 3 support (it's gone).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:67,deployability,releas,release,67,"That's a fair point. It doesn't make much sense to update the 6.30 release notes now one year after the release, but for 6.32 we should make sure that we mention what changed for Python 3 support (it's gone).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:104,deployability,releas,release,104,"That's a fair point. It doesn't make much sense to update the 6.30 release notes now one year after the release, but for 6.32 we should make sure that we mention what changed for Python 3 support (it's gone).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:24,reliability,doe,doesn,24,"That's a fair point. It doesn't make much sense to update the 6.30 release notes now one year after the release, but for 6.32 we should make sure that we mention what changed for Python 3 support (it's gone).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:51,safety,updat,update,51,"That's a fair point. It doesn't make much sense to update the 6.30 release notes now one year after the release, but for 6.32 we should make sure that we mention what changed for Python 3 support (it's gone).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:51,security,updat,update,51,"That's a fair point. It doesn't make much sense to update the 6.30 release notes now one year after the release, but for 6.32 we should make sure that we mention what changed for Python 3 support (it's gone).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:188,usability,support,support,188,"That's a fair point. It doesn't make much sense to update the 6.30 release notes now one year after the release, but for 6.32 we should make sure that we mention what changed for Python 3 support (it's gone).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:74,availability,error,error,74,"Well... I had to change one Python file because of type hints emitting an error in Python 2. In any case it was a small change, so I don't think it should be fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:74,performance,error,error,74,"Well... I had to change one Python file because of type hints emitting an error in Python 2. In any case it was a small change, so I don't think it should be fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:74,safety,error,error,74,"Well... I had to change one Python file because of type hints emitting an error in Python 2. In any case it was a small change, so I don't think it should be fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:56,usability,hint,hints,56,"Well... I had to change one Python file because of type hints emitting an error in Python 2. In any case it was a small change, so I don't think it should be fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:74,usability,error,error,74,"Well... I had to change one Python file because of type hints emitting an error in Python 2. In any case it was a small change, so I don't think it should be fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13609:22,safety,review,review,22,"Thanks a lot for your review, @vepadulano! I have addressed the comments.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13609
https://github.com/root-project/root/pull/13609:22,testability,review,review,22,"Thanks a lot for your review, @vepadulano! I have addressed the comments.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13609
https://github.com/root-project/root/issues/13611:42,usability,command,commands,42,"Interestingly, even if you don't pass any commands, it will still crash:. ```. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. pdf._fitTo(data). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:265,usability,command,commands,265,"Interestingly, even if you don't pass any commands, it will still crash:. ```. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. pdf._fitTo(data). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:438,usability,command,commands,438,"Interestingly, even if you don't pass any commands, it will still crash:. ```. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. pdf._fitTo(data). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:84,usability,command,commands,84,"Ok I think I found the reason for the crash, it is because this line. ```. for x in commands:. pass. ```. will delete the RooRealVar `x`. If you replace it by, say,. ```. for y in commands:. pass. ```. It will not crash",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:180,usability,command,commands,180,"Ok I think I found the reason for the crash, it is because this line. ```. for x in commands:. pass. ```. will delete the RooRealVar `x`. If you replace it by, say,. ```. for y in commands:. pass. ```. It will not crash",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:268,deployability,stack,stackoverflow,268,"Thank you so much! This fell completely under by radar because I'm so used to C++ block scope! So that's indeed a thing in Python, that the loop has no own scope and the iteration variable is not shadowing, but re-assigning the variable in the current scope:. https://stackoverflow.com/questions/3611760/scoping-in-python-for-loops. Thanks again :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:244,energy efficiency,current,current,244,"Thank you so much! This fell completely under by radar because I'm so used to C++ block scope! So that's indeed a thing in Python, that the loop has no own scope and the iteration variable is not shadowing, but re-assigning the variable in the current scope:. https://stackoverflow.com/questions/3611760/scoping-in-python-for-loops. Thanks again :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:180,modifiability,variab,variable,180,"Thank you so much! This fell completely under by radar because I'm so used to C++ block scope! So that's indeed a thing in Python, that the loop has no own scope and the iteration variable is not shadowing, but re-assigning the variable in the current scope:. https://stackoverflow.com/questions/3611760/scoping-in-python-for-loops. Thanks again :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:228,modifiability,variab,variable,228,"Thank you so much! This fell completely under by radar because I'm so used to C++ block scope! So that's indeed a thing in Python, that the loop has no own scope and the iteration variable is not shadowing, but re-assigning the variable in the current scope:. https://stackoverflow.com/questions/3611760/scoping-in-python-for-loops. Thanks again :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:29,safety,compl,completely,29,"Thank you so much! This fell completely under by radar because I'm so used to C++ block scope! So that's indeed a thing in Python, that the loop has no own scope and the iteration variable is not shadowing, but re-assigning the variable in the current scope:. https://stackoverflow.com/questions/3611760/scoping-in-python-for-loops. Thanks again :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:29,security,compl,completely,29,"Thank you so much! This fell completely under by radar because I'm so used to C++ block scope! So that's indeed a thing in Python, that the loop has no own scope and the iteration variable is not shadowing, but re-assigning the variable in the current scope:. https://stackoverflow.com/questions/3611760/scoping-in-python-for-loops. Thanks again :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/pull/13613:86,availability,servic,services,86,"Build on ubuntu 20 passed, will fix clang-tidy warnings and push again https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184258/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:0,deployability,Build,Build,0,"Build on ubuntu 20 passed, will fix clang-tidy warnings and push again https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184258/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:86,deployability,servic,services,86,"Build on ubuntu 20 passed, will fix clang-tidy warnings and push again https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184258/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:138,deployability,build,build,138,"Build on ubuntu 20 passed, will fix clang-tidy warnings and push again https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184258/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:86,integrability,servic,services,86,"Build on ubuntu 20 passed, will fix clang-tidy warnings and push again https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184258/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:86,modifiability,servic,services,86,"Build on ubuntu 20 passed, will fix clang-tidy warnings and push again https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184258/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:151,safety,test,testReport,151,"Build on ubuntu 20 passed, will fix clang-tidy warnings and push again https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184258/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:185,safety,test,test,185,"Build on ubuntu 20 passed, will fix clang-tidy warnings and push again https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184258/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:151,testability,test,testReport,151,"Build on ubuntu 20 passed, will fix clang-tidy warnings and push again https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184258/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:185,testability,test,test,185,"Build on ubuntu 20 passed, will fix clang-tidy warnings and push again https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184258/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:40,availability,servic,services,40,Passing tests. * [ubu22](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). * [ubu20](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184278/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). This should fix the visible errors in the Jenkins builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:218,availability,servic,services,218,Passing tests. * [ubu22](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). * [ubu20](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184278/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). This should fix the visible errors in the Jenkins builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:399,availability,error,errors,399,Passing tests. * [ubu22](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). * [ubu20](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184278/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). This should fix the visible errors in the Jenkins builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:40,deployability,servic,services,40,Passing tests. * [ubu22](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). * [ubu20](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184278/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). This should fix the visible errors in the Jenkins builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:92,deployability,build,build,92,Passing tests. * [ubu22](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). * [ubu20](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184278/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). This should fix the visible errors in the Jenkins builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:218,deployability,servic,services,218,Passing tests. * [ubu22](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). * [ubu20](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184278/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). This should fix the visible errors in the Jenkins builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:270,deployability,build,build,270,Passing tests. * [ubu22](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). * [ubu20](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184278/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). This should fix the visible errors in the Jenkins builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:421,deployability,build,builds,421,Passing tests. * [ubu22](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). * [ubu20](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184278/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). This should fix the visible errors in the Jenkins builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:40,integrability,servic,services,40,Passing tests. * [ubu22](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). * [ubu20](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184278/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). This should fix the visible errors in the Jenkins builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:218,integrability,servic,services,218,Passing tests. * [ubu22](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). * [ubu20](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184278/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). This should fix the visible errors in the Jenkins builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:40,modifiability,servic,services,40,Passing tests. * [ubu22](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). * [ubu20](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184278/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). This should fix the visible errors in the Jenkins builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:218,modifiability,servic,services,218,Passing tests. * [ubu22](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). * [ubu20](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184278/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). This should fix the visible errors in the Jenkins builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:399,performance,error,errors,399,Passing tests. * [ubu22](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). * [ubu20](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184278/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). This should fix the visible errors in the Jenkins builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:8,safety,test,tests,8,Passing tests. * [ubu22](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). * [ubu20](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184278/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). This should fix the visible errors in the Jenkins builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:105,safety,test,testReport,105,Passing tests. * [ubu22](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). * [ubu20](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184278/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). This should fix the visible errors in the Jenkins builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:139,safety,test,test,139,Passing tests. * [ubu22](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). * [ubu20](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184278/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). This should fix the visible errors in the Jenkins builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:283,safety,test,testReport,283,Passing tests. * [ubu22](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). * [ubu20](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184278/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). This should fix the visible errors in the Jenkins builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:317,safety,test,test,317,Passing tests. * [ubu22](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). * [ubu20](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184278/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). This should fix the visible errors in the Jenkins builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:399,safety,error,errors,399,Passing tests. * [ubu22](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). * [ubu20](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184278/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). This should fix the visible errors in the Jenkins builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:8,testability,test,tests,8,Passing tests. * [ubu22](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). * [ubu20](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184278/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). This should fix the visible errors in the Jenkins builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:105,testability,test,testReport,105,Passing tests. * [ubu22](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). * [ubu20](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184278/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). This should fix the visible errors in the Jenkins builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:139,testability,test,test,139,Passing tests. * [ubu22](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). * [ubu20](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184278/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). This should fix the visible errors in the Jenkins builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:283,testability,test,testReport,283,Passing tests. * [ubu22](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). * [ubu20](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184278/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). This should fix the visible errors in the Jenkins builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:317,testability,test,test,317,Passing tests. * [ubu22](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). * [ubu20](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184278/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). This should fix the visible errors in the Jenkins builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13613:399,usability,error,errors,399,Passing tests. * [ubu22](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). * [ubu20](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184278/testReport/projectroot.tmva.pymva/test/gtest_tmva_pymva_test_TestRModelParserPyTorch/). This should fix the visible errors in the Jenkins builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13613
https://github.com/root-project/root/pull/13614:25,testability,plan,planned,25,Can I ask if this fix is planned to be backported (say to 6.28)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13614
https://github.com/root-project/root/pull/13614:212,integrability,pub,public,212,"> Can I ask if this fix is planned to be backported (say to 6.28)? https://github.com/root-project/root/pull/13795 :smiley: :rocket: (edit: I was already working on the backport, even though now the timeline of (public) events looks rather weird)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13614
https://github.com/root-project/root/pull/13614:220,integrability,event,events,220,"> Can I ask if this fix is planned to be backported (say to 6.28)? https://github.com/root-project/root/pull/13795 :smiley: :rocket: (edit: I was already working on the backport, even though now the timeline of (public) events looks rather weird)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13614
https://github.com/root-project/root/pull/13614:199,performance,time,timeline,199,"> Can I ask if this fix is planned to be backported (say to 6.28)? https://github.com/root-project/root/pull/13795 :smiley: :rocket: (edit: I was already working on the backport, even though now the timeline of (public) events looks rather weird)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13614
https://github.com/root-project/root/pull/13614:27,testability,plan,planned,27,"> Can I ask if this fix is planned to be backported (say to 6.28)? https://github.com/root-project/root/pull/13795 :smiley: :rocket: (edit: I was already working on the backport, even though now the timeline of (public) events looks rather weird)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13614
https://github.com/root-project/root/pull/13617:86,availability,error,error,86,@phsft-bot build just on ROOT-ubuntu2204/nortcxxmod. Restarting the build because the error was seen on ubuntu 22,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2204/nortcxxmod. Restarting the build because the error was seen on ubuntu 22,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:68,deployability,build,build,68,@phsft-bot build just on ROOT-ubuntu2204/nortcxxmod. Restarting the build because the error was seen on ubuntu 22,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:86,performance,error,error,86,@phsft-bot build just on ROOT-ubuntu2204/nortcxxmod. Restarting the build because the error was seen on ubuntu 22,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:86,safety,error,error,86,@phsft-bot build just on ROOT-ubuntu2204/nortcxxmod. Restarting the build because the error was seen on ubuntu 22,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:86,usability,error,error,86,@phsft-bot build just on ROOT-ubuntu2204/nortcxxmod. Restarting the build because the error was seen on ubuntu 22,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2204/nortcxxmod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2204/nortcxxmod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13618:39,availability,failur,failures,39,"> to make it explicit: this is causing failures of `stressInterpreter` on macOS and must not be merged for now. That's true; I'll have to check how to fix this... Currently, it seems non-trivial: we probably need to judge whether to unload a declaration or not by looking at the whole chain of (implicit) instantiations :man_shrugging:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13618
https://github.com/root-project/root/pull/13618:39,deployability,fail,failures,39,"> to make it explicit: this is causing failures of `stressInterpreter` on macOS and must not be merged for now. That's true; I'll have to check how to fix this... Currently, it seems non-trivial: we probably need to judge whether to unload a declaration or not by looking at the whole chain of (implicit) instantiations :man_shrugging:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13618
https://github.com/root-project/root/pull/13618:233,deployability,unload,unload,233,"> to make it explicit: this is causing failures of `stressInterpreter` on macOS and must not be merged for now. That's true; I'll have to check how to fix this... Currently, it seems non-trivial: we probably need to judge whether to unload a declaration or not by looking at the whole chain of (implicit) instantiations :man_shrugging:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13618
https://github.com/root-project/root/pull/13618:163,energy efficiency,Current,Currently,163,"> to make it explicit: this is causing failures of `stressInterpreter` on macOS and must not be merged for now. That's true; I'll have to check how to fix this... Currently, it seems non-trivial: we probably need to judge whether to unload a declaration or not by looking at the whole chain of (implicit) instantiations :man_shrugging:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13618
https://github.com/root-project/root/pull/13618:39,performance,failur,failures,39,"> to make it explicit: this is causing failures of `stressInterpreter` on macOS and must not be merged for now. That's true; I'll have to check how to fix this... Currently, it seems non-trivial: we probably need to judge whether to unload a declaration or not by looking at the whole chain of (implicit) instantiations :man_shrugging:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13618
https://github.com/root-project/root/pull/13618:39,reliability,fail,failures,39,"> to make it explicit: this is causing failures of `stressInterpreter` on macOS and must not be merged for now. That's true; I'll have to check how to fix this... Currently, it seems non-trivial: we probably need to judge whether to unload a declaration or not by looking at the whole chain of (implicit) instantiations :man_shrugging:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13618
https://github.com/root-project/root/pull/13618:72,usability,close,close,72,Unsure as to whether backporting to v6.28 is still needed. Feel free to close the PR otherwise :slightly_smiling_face:.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13618
https://github.com/root-project/root/pull/13618:149,deployability,updat,updating,149,"> Unsure as to whether backporting to v6.28 is still needed. Feel free to close the PR otherwise 🙂. I think we want to backport, I will take care of updating the PR in the next days. Also, we definitely want a backport to v6.30, also to come in the next days.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13618
https://github.com/root-project/root/pull/13618:149,safety,updat,updating,149,"> Unsure as to whether backporting to v6.28 is still needed. Feel free to close the PR otherwise 🙂. I think we want to backport, I will take care of updating the PR in the next days. Also, we definitely want a backport to v6.30, also to come in the next days.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13618
https://github.com/root-project/root/pull/13618:149,security,updat,updating,149,"> Unsure as to whether backporting to v6.28 is still needed. Feel free to close the PR otherwise 🙂. I think we want to backport, I will take care of updating the PR in the next days. Also, we definitely want a backport to v6.30, also to come in the next days.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13618
https://github.com/root-project/root/pull/13618:74,usability,close,close,74,"> Unsure as to whether backporting to v6.28 is still needed. Feel free to close the PR otherwise 🙂. I think we want to backport, I will take care of updating the PR in the next days. Also, we definitely want a backport to v6.30, also to come in the next days.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13618
https://github.com/root-project/root/pull/13619:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13619:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13619:13,safety,test,test,13,Do we have a test for this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13619:13,testability,test,test,13,Do we have a test for this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13619:15,safety,test,test,15,> Do we have a test for this? Yes: https://github.com/root-project/root/blob/7cfacbaf3cfe402d20bbec1d4bb737151716e274/interpreter/cling/test/Prompt/ValuePrinter/TuplesAndPairs.C#L4,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13619:136,safety,test,test,136,> Do we have a test for this? Yes: https://github.com/root-project/root/blob/7cfacbaf3cfe402d20bbec1d4bb737151716e274/interpreter/cling/test/Prompt/ValuePrinter/TuplesAndPairs.C#L4,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13619:15,testability,test,test,15,> Do we have a test for this? Yes: https://github.com/root-project/root/blob/7cfacbaf3cfe402d20bbec1d4bb737151716e274/interpreter/cling/test/Prompt/ValuePrinter/TuplesAndPairs.C#L4,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13619:136,testability,test,test,136,> Do we have a test for this? Yes: https://github.com/root-project/root/blob/7cfacbaf3cfe402d20bbec1d4bb737151716e274/interpreter/cling/test/Prompt/ValuePrinter/TuplesAndPairs.C#L4,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13619:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13619:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13620:54,deployability,build,build,54,> and- in its current implementation - a working ROOT build as part of the version update. Why is/was that?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:75,deployability,version,version,75,> and- in its current implementation - a working ROOT build as part of the version update. Why is/was that?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:83,deployability,updat,update,83,> and- in its current implementation - a working ROOT build as part of the version update. Why is/was that?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:14,energy efficiency,current,current,14,> and- in its current implementation - a working ROOT build as part of the version update. Why is/was that?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:75,integrability,version,version,75,> and- in its current implementation - a working ROOT build as part of the version update. Why is/was that?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:75,modifiability,version,version,75,> and- in its current implementation - a working ROOT build as part of the version update. Why is/was that?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:83,safety,updat,update,83,> and- in its current implementation - a working ROOT build as part of the version update. Why is/was that?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:83,security,updat,update,83,> and- in its current implementation - a working ROOT build as part of the version update. Why is/was that?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:8,deployability,log,log,8,The git log should be enhanced with the new 'procedure' for version update.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:60,deployability,version,version,60,The git log should be enhanced with the new 'procedure' for version update.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:68,deployability,updat,update,68,The git log should be enhanced with the new 'procedure' for version update.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:60,integrability,version,version,60,The git log should be enhanced with the new 'procedure' for version update.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:60,modifiability,version,version,60,The git log should be enhanced with the new 'procedure' for version update.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:8,safety,log,log,8,The git log should be enhanced with the new 'procedure' for version update.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:68,safety,updat,update,68,The git log should be enhanced with the new 'procedure' for version update.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:8,security,log,log,8,The git log should be enhanced with the new 'procedure' for version update.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:68,security,updat,update,68,The git log should be enhanced with the new 'procedure' for version update.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:8,testability,log,log,8,The git log should be enhanced with the new 'procedure' for version update.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:63,deployability,updat,update,63,One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:74,deployability,version,version,74,One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:146,deployability,version,versions,146,One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:12,energy efficiency,draw,drawback,12,One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:74,integrability,version,version,74,One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:146,integrability,version,versions,146,One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:74,modifiability,version,version,74,One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:146,modifiability,version,versions,146,One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:63,safety,updat,update,63,One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:63,security,updat,update,63,One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:56,deployability,build,build,56,"> > and- in its current implementation - a working ROOT build as part of the version update. > Why is/was that? Ouch that's wrong, that was true in the past, before I had replaced the ROOT script writing out the version number with a Python script. But the motivation for this PR is still there: instead of running a magic build step to update the version files we can now simply edit the header file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:77,deployability,version,version,77,"> > and- in its current implementation - a working ROOT build as part of the version update. > Why is/was that? Ouch that's wrong, that was true in the past, before I had replaced the ROOT script writing out the version number with a Python script. But the motivation for this PR is still there: instead of running a magic build step to update the version files we can now simply edit the header file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:85,deployability,updat,update,85,"> > and- in its current implementation - a working ROOT build as part of the version update. > Why is/was that? Ouch that's wrong, that was true in the past, before I had replaced the ROOT script writing out the version number with a Python script. But the motivation for this PR is still there: instead of running a magic build step to update the version files we can now simply edit the header file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:212,deployability,version,version,212,"> > and- in its current implementation - a working ROOT build as part of the version update. > Why is/was that? Ouch that's wrong, that was true in the past, before I had replaced the ROOT script writing out the version number with a Python script. But the motivation for this PR is still there: instead of running a magic build step to update the version files we can now simply edit the header file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:323,deployability,build,build,323,"> > and- in its current implementation - a working ROOT build as part of the version update. > Why is/was that? Ouch that's wrong, that was true in the past, before I had replaced the ROOT script writing out the version number with a Python script. But the motivation for this PR is still there: instead of running a magic build step to update the version files we can now simply edit the header file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:337,deployability,updat,update,337,"> > and- in its current implementation - a working ROOT build as part of the version update. > Why is/was that? Ouch that's wrong, that was true in the past, before I had replaced the ROOT script writing out the version number with a Python script. But the motivation for this PR is still there: instead of running a magic build step to update the version files we can now simply edit the header file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:348,deployability,version,version,348,"> > and- in its current implementation - a working ROOT build as part of the version update. > Why is/was that? Ouch that's wrong, that was true in the past, before I had replaced the ROOT script writing out the version number with a Python script. But the motivation for this PR is still there: instead of running a magic build step to update the version files we can now simply edit the header file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:16,energy efficiency,current,current,16,"> > and- in its current implementation - a working ROOT build as part of the version update. > Why is/was that? Ouch that's wrong, that was true in the past, before I had replaced the ROOT script writing out the version number with a Python script. But the motivation for this PR is still there: instead of running a magic build step to update the version files we can now simply edit the header file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:77,integrability,version,version,77,"> > and- in its current implementation - a working ROOT build as part of the version update. > Why is/was that? Ouch that's wrong, that was true in the past, before I had replaced the ROOT script writing out the version number with a Python script. But the motivation for this PR is still there: instead of running a magic build step to update the version files we can now simply edit the header file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:212,integrability,version,version,212,"> > and- in its current implementation - a working ROOT build as part of the version update. > Why is/was that? Ouch that's wrong, that was true in the past, before I had replaced the ROOT script writing out the version number with a Python script. But the motivation for this PR is still there: instead of running a magic build step to update the version files we can now simply edit the header file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:348,integrability,version,version,348,"> > and- in its current implementation - a working ROOT build as part of the version update. > Why is/was that? Ouch that's wrong, that was true in the past, before I had replaced the ROOT script writing out the version number with a Python script. But the motivation for this PR is still there: instead of running a magic build step to update the version files we can now simply edit the header file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:77,modifiability,version,version,77,"> > and- in its current implementation - a working ROOT build as part of the version update. > Why is/was that? Ouch that's wrong, that was true in the past, before I had replaced the ROOT script writing out the version number with a Python script. But the motivation for this PR is still there: instead of running a magic build step to update the version files we can now simply edit the header file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:212,modifiability,version,version,212,"> > and- in its current implementation - a working ROOT build as part of the version update. > Why is/was that? Ouch that's wrong, that was true in the past, before I had replaced the ROOT script writing out the version number with a Python script. But the motivation for this PR is still there: instead of running a magic build step to update the version files we can now simply edit the header file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:348,modifiability,version,version,348,"> > and- in its current implementation - a working ROOT build as part of the version update. > Why is/was that? Ouch that's wrong, that was true in the past, before I had replaced the ROOT script writing out the version number with a Python script. But the motivation for this PR is still there: instead of running a magic build step to update the version files we can now simply edit the header file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:85,safety,updat,update,85,"> > and- in its current implementation - a working ROOT build as part of the version update. > Why is/was that? Ouch that's wrong, that was true in the past, before I had replaced the ROOT script writing out the version number with a Python script. But the motivation for this PR is still there: instead of running a magic build step to update the version files we can now simply edit the header file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:337,safety,updat,update,337,"> > and- in its current implementation - a working ROOT build as part of the version update. > Why is/was that? Ouch that's wrong, that was true in the past, before I had replaced the ROOT script writing out the version number with a Python script. But the motivation for this PR is still there: instead of running a magic build step to update the version files we can now simply edit the header file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:85,security,updat,update,85,"> > and- in its current implementation - a working ROOT build as part of the version update. > Why is/was that? Ouch that's wrong, that was true in the past, before I had replaced the ROOT script writing out the version number with a Python script. But the motivation for this PR is still there: instead of running a magic build step to update the version files we can now simply edit the header file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:337,security,updat,update,337,"> > and- in its current implementation - a working ROOT build as part of the version update. > Why is/was that? Ouch that's wrong, that was true in the past, before I had replaced the ROOT script writing out the version number with a Python script. But the motivation for this PR is still there: instead of running a magic build step to update the version files we can now simply edit the header file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:373,testability,simpl,simply,373,"> > and- in its current implementation - a working ROOT build as part of the version update. > Why is/was that? Ouch that's wrong, that was true in the past, before I had replaced the ROOT script writing out the version number with a Python script. But the motivation for this PR is still there: instead of running a magic build step to update the version files we can now simply edit the header file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:373,usability,simpl,simply,373,"> > and- in its current implementation - a working ROOT build as part of the version update. > Why is/was that? Ouch that's wrong, that was true in the past, before I had replaced the ROOT script writing out the version number with a Python script. But the motivation for this PR is still there: instead of running a magic build step to update the version files we can now simply edit the header file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:10,deployability,log,log,10,"> The git log should be enhanced with the new 'procedure' for version update. That seems to be a weird place, I'd rather want to keep it at https://root.cern/for_developers/release_checklist/. > One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions. How is that different than before, where `build/version_number` needed to be updated by hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:62,deployability,version,version,62,"> The git log should be enhanced with the new 'procedure' for version update. That seems to be a weird place, I'd rather want to keep it at https://root.cern/for_developers/release_checklist/. > One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions. How is that different than before, where `build/version_number` needed to be updated by hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:70,deployability,updat,update,70,"> The git log should be enhanced with the new 'procedure' for version update. That seems to be a weird place, I'd rather want to keep it at https://root.cern/for_developers/release_checklist/. > One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions. How is that different than before, where `build/version_number` needed to be updated by hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:258,deployability,updat,update,258,"> The git log should be enhanced with the new 'procedure' for version update. That seems to be a weird place, I'd rather want to keep it at https://root.cern/for_developers/release_checklist/. > One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions. How is that different than before, where `build/version_number` needed to be updated by hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:269,deployability,version,version,269,"> The git log should be enhanced with the new 'procedure' for version update. That seems to be a weird place, I'd rather want to keep it at https://root.cern/for_developers/release_checklist/. > One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions. How is that different than before, where `build/version_number` needed to be updated by hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:341,deployability,version,versions,341,"> The git log should be enhanced with the new 'procedure' for version update. That seems to be a weird place, I'd rather want to keep it at https://root.cern/for_developers/release_checklist/. > One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions. How is that different than before, where `build/version_number` needed to be updated by hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:393,deployability,build,build,393,"> The git log should be enhanced with the new 'procedure' for version update. That seems to be a weird place, I'd rather want to keep it at https://root.cern/for_developers/release_checklist/. > One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions. How is that different than before, where `build/version_number` needed to be updated by hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:428,deployability,updat,updated,428,"> The git log should be enhanced with the new 'procedure' for version update. That seems to be a weird place, I'd rather want to keep it at https://root.cern/for_developers/release_checklist/. > One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions. How is that different than before, where `build/version_number` needed to be updated by hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:207,energy efficiency,draw,drawback,207,"> The git log should be enhanced with the new 'procedure' for version update. That seems to be a weird place, I'd rather want to keep it at https://root.cern/for_developers/release_checklist/. > One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions. How is that different than before, where `build/version_number` needed to be updated by hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:62,integrability,version,version,62,"> The git log should be enhanced with the new 'procedure' for version update. That seems to be a weird place, I'd rather want to keep it at https://root.cern/for_developers/release_checklist/. > One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions. How is that different than before, where `build/version_number` needed to be updated by hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:269,integrability,version,version,269,"> The git log should be enhanced with the new 'procedure' for version update. That seems to be a weird place, I'd rather want to keep it at https://root.cern/for_developers/release_checklist/. > One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions. How is that different than before, where `build/version_number` needed to be updated by hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:341,integrability,version,versions,341,"> The git log should be enhanced with the new 'procedure' for version update. That seems to be a weird place, I'd rather want to keep it at https://root.cern/for_developers/release_checklist/. > One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions. How is that different than before, where `build/version_number` needed to be updated by hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:62,modifiability,version,version,62,"> The git log should be enhanced with the new 'procedure' for version update. That seems to be a weird place, I'd rather want to keep it at https://root.cern/for_developers/release_checklist/. > One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions. How is that different than before, where `build/version_number` needed to be updated by hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:269,modifiability,version,version,269,"> The git log should be enhanced with the new 'procedure' for version update. That seems to be a weird place, I'd rather want to keep it at https://root.cern/for_developers/release_checklist/. > One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions. How is that different than before, where `build/version_number` needed to be updated by hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:341,modifiability,version,versions,341,"> The git log should be enhanced with the new 'procedure' for version update. That seems to be a weird place, I'd rather want to keep it at https://root.cern/for_developers/release_checklist/. > One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions. How is that different than before, where `build/version_number` needed to be updated by hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:10,safety,log,log,10,"> The git log should be enhanced with the new 'procedure' for version update. That seems to be a weird place, I'd rather want to keep it at https://root.cern/for_developers/release_checklist/. > One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions. How is that different than before, where `build/version_number` needed to be updated by hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:70,safety,updat,update,70,"> The git log should be enhanced with the new 'procedure' for version update. That seems to be a weird place, I'd rather want to keep it at https://root.cern/for_developers/release_checklist/. > One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions. How is that different than before, where `build/version_number` needed to be updated by hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:258,safety,updat,update,258,"> The git log should be enhanced with the new 'procedure' for version update. That seems to be a weird place, I'd rather want to keep it at https://root.cern/for_developers/release_checklist/. > One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions. How is that different than before, where `build/version_number` needed to be updated by hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:428,safety,updat,updated,428,"> The git log should be enhanced with the new 'procedure' for version update. That seems to be a weird place, I'd rather want to keep it at https://root.cern/for_developers/release_checklist/. > One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions. How is that different than before, where `build/version_number` needed to be updated by hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:10,security,log,log,10,"> The git log should be enhanced with the new 'procedure' for version update. That seems to be a weird place, I'd rather want to keep it at https://root.cern/for_developers/release_checklist/. > One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions. How is that different than before, where `build/version_number` needed to be updated by hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:70,security,updat,update,70,"> The git log should be enhanced with the new 'procedure' for version update. That seems to be a weird place, I'd rather want to keep it at https://root.cern/for_developers/release_checklist/. > One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions. How is that different than before, where `build/version_number` needed to be updated by hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:258,security,updat,update,258,"> The git log should be enhanced with the new 'procedure' for version update. That seems to be a weird place, I'd rather want to keep it at https://root.cern/for_developers/release_checklist/. > One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions. How is that different than before, where `build/version_number` needed to be updated by hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:428,security,updat,updated,428,"> The git log should be enhanced with the new 'procedure' for version update. That seems to be a weird place, I'd rather want to keep it at https://root.cern/for_developers/release_checklist/. > One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions. How is that different than before, where `build/version_number` needed to be updated by hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:10,testability,log,log,10,"> The git log should be enhanced with the new 'procedure' for version update. That seems to be a weird place, I'd rather want to keep it at https://root.cern/for_developers/release_checklist/. > One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions. How is that different than before, where `build/version_number` needed to be updated by hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:192,deployability,releas,release,192,"> > and possibly at some point convertible to a Github action? > I am confused. Isn't the new procedure vi RVersion.hxx and edit? Yes. We could have a GH action that . - does the edit, tags a release, and builds binaries, or. - tags the commit with a change to RVersion.hxx and builds the binaries, or. - reacts to the tag and does the build (my favorite). All of that is possible today, it's just more involved because we need to run `make version` and then `cmake; make` again. (In a next step I'll try to get rid of `gitinfo.txt` for releases; this is another extra complexity compared to just taking the sources from git.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:205,deployability,build,builds,205,"> > and possibly at some point convertible to a Github action? > I am confused. Isn't the new procedure vi RVersion.hxx and edit? Yes. We could have a GH action that . - does the edit, tags a release, and builds binaries, or. - tags the commit with a change to RVersion.hxx and builds the binaries, or. - reacts to the tag and does the build (my favorite). All of that is possible today, it's just more involved because we need to run `make version` and then `cmake; make` again. (In a next step I'll try to get rid of `gitinfo.txt` for releases; this is another extra complexity compared to just taking the sources from git.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:278,deployability,build,builds,278,"> > and possibly at some point convertible to a Github action? > I am confused. Isn't the new procedure vi RVersion.hxx and edit? Yes. We could have a GH action that . - does the edit, tags a release, and builds binaries, or. - tags the commit with a change to RVersion.hxx and builds the binaries, or. - reacts to the tag and does the build (my favorite). All of that is possible today, it's just more involved because we need to run `make version` and then `cmake; make` again. (In a next step I'll try to get rid of `gitinfo.txt` for releases; this is another extra complexity compared to just taking the sources from git.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:336,deployability,build,build,336,"> > and possibly at some point convertible to a Github action? > I am confused. Isn't the new procedure vi RVersion.hxx and edit? Yes. We could have a GH action that . - does the edit, tags a release, and builds binaries, or. - tags the commit with a change to RVersion.hxx and builds the binaries, or. - reacts to the tag and does the build (my favorite). All of that is possible today, it's just more involved because we need to run `make version` and then `cmake; make` again. (In a next step I'll try to get rid of `gitinfo.txt` for releases; this is another extra complexity compared to just taking the sources from git.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:441,deployability,version,version,441,"> > and possibly at some point convertible to a Github action? > I am confused. Isn't the new procedure vi RVersion.hxx and edit? Yes. We could have a GH action that . - does the edit, tags a release, and builds binaries, or. - tags the commit with a change to RVersion.hxx and builds the binaries, or. - reacts to the tag and does the build (my favorite). All of that is possible today, it's just more involved because we need to run `make version` and then `cmake; make` again. (In a next step I'll try to get rid of `gitinfo.txt` for releases; this is another extra complexity compared to just taking the sources from git.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:537,deployability,releas,releases,537,"> > and possibly at some point convertible to a Github action? > I am confused. Isn't the new procedure vi RVersion.hxx and edit? Yes. We could have a GH action that . - does the edit, tags a release, and builds binaries, or. - tags the commit with a change to RVersion.hxx and builds the binaries, or. - reacts to the tag and does the build (my favorite). All of that is possible today, it's just more involved because we need to run `make version` and then `cmake; make` again. (In a next step I'll try to get rid of `gitinfo.txt` for releases; this is another extra complexity compared to just taking the sources from git.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:441,integrability,version,version,441,"> > and possibly at some point convertible to a Github action? > I am confused. Isn't the new procedure vi RVersion.hxx and edit? Yes. We could have a GH action that . - does the edit, tags a release, and builds binaries, or. - tags the commit with a change to RVersion.hxx and builds the binaries, or. - reacts to the tag and does the build (my favorite). All of that is possible today, it's just more involved because we need to run `make version` and then `cmake; make` again. (In a next step I'll try to get rid of `gitinfo.txt` for releases; this is another extra complexity compared to just taking the sources from git.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:441,modifiability,version,version,441,"> > and possibly at some point convertible to a Github action? > I am confused. Isn't the new procedure vi RVersion.hxx and edit? Yes. We could have a GH action that . - does the edit, tags a release, and builds binaries, or. - tags the commit with a change to RVersion.hxx and builds the binaries, or. - reacts to the tag and does the build (my favorite). All of that is possible today, it's just more involved because we need to run `make version` and then `cmake; make` again. (In a next step I'll try to get rid of `gitinfo.txt` for releases; this is another extra complexity compared to just taking the sources from git.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:170,reliability,doe,does,170,"> > and possibly at some point convertible to a Github action? > I am confused. Isn't the new procedure vi RVersion.hxx and edit? Yes. We could have a GH action that . - does the edit, tags a release, and builds binaries, or. - tags the commit with a change to RVersion.hxx and builds the binaries, or. - reacts to the tag and does the build (my favorite). All of that is possible today, it's just more involved because we need to run `make version` and then `cmake; make` again. (In a next step I'll try to get rid of `gitinfo.txt` for releases; this is another extra complexity compared to just taking the sources from git.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:327,reliability,doe,does,327,"> > and possibly at some point convertible to a Github action? > I am confused. Isn't the new procedure vi RVersion.hxx and edit? Yes. We could have a GH action that . - does the edit, tags a release, and builds binaries, or. - tags the commit with a change to RVersion.hxx and builds the binaries, or. - reacts to the tag and does the build (my favorite). All of that is possible today, it's just more involved because we need to run `make version` and then `cmake; make` again. (In a next step I'll try to get rid of `gitinfo.txt` for releases; this is another extra complexity compared to just taking the sources from git.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:569,safety,compl,complexity,569,"> > and possibly at some point convertible to a Github action? > I am confused. Isn't the new procedure vi RVersion.hxx and edit? Yes. We could have a GH action that . - does the edit, tags a release, and builds binaries, or. - tags the commit with a change to RVersion.hxx and builds the binaries, or. - reacts to the tag and does the build (my favorite). All of that is possible today, it's just more involved because we need to run `make version` and then `cmake; make` again. (In a next step I'll try to get rid of `gitinfo.txt` for releases; this is another extra complexity compared to just taking the sources from git.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:569,security,compl,complexity,569,"> > and possibly at some point convertible to a Github action? > I am confused. Isn't the new procedure vi RVersion.hxx and edit? Yes. We could have a GH action that . - does the edit, tags a release, and builds binaries, or. - tags the commit with a change to RVersion.hxx and builds the binaries, or. - reacts to the tag and does the build (my favorite). All of that is possible today, it's just more involved because we need to run `make version` and then `cmake; make` again. (In a next step I'll try to get rid of `gitinfo.txt` for releases; this is another extra complexity compared to just taking the sources from git.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:36,reliability,doe,does,36,"> We could have a GH action that. > does the edit. So we still need the file `makeversion.py` just possibly with a different source of information, don't we?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:128,integrability,rout,route,128,"> So we still need the file makeversion.py just possibly with a different source of information, don't we? Only if we take that route. In principle I want to have the sources edited and tagged, done. Straight forward :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13621:61,energy efficiency,optim,optimized,61,"doing unrelated work, I noticed that other df tests could be optimized and that more could be done for the ""helpers"" tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:61,performance,optimiz,optimized,61,"doing unrelated work, I noticed that other df tests could be optimized and that more could be done for the ""helpers"" tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:46,safety,test,tests,46,"doing unrelated work, I noticed that other df tests could be optimized and that more could be done for the ""helpers"" tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:117,safety,test,tests,117,"doing unrelated work, I noticed that other df tests could be optimized and that more could be done for the ""helpers"" tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:46,testability,test,tests,46,"doing unrelated work, I noticed that other df tests could be optimized and that more could be done for the ""helpers"" tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:117,testability,test,tests,117,"doing unrelated work, I noticed that other df tests could be optimized and that more could be done for the ""helpers"" tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:108,usability,help,helpers,108,"doing unrelated work, I noticed that other df tests could be optimized and that more could be done for the ""helpers"" tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:73,deployability,build,build,73,Thanks @martamaja10 . The issue I am looking at is why the code does not build on linux. It seems kind of odd that this include does not work ```#include <Math/Vector4D.h>```...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:64,reliability,doe,does,64,Thanks @martamaja10 . The issue I am looking at is why the code does not build on linux. It seems kind of odd that this include does not work ```#include <Math/Vector4D.h>```...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:128,reliability,doe,does,128,Thanks @martamaja10 . The issue I am looking at is why the code does not build on linux. It seems kind of odd that this include does not work ```#include <Math/Vector4D.h>```...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:30,availability,failur,failures,30,"We still suffer from spurious failures, but none related to the change. The code of the PR looks good to me, modulo some formatting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:30,deployability,fail,failures,30,"We still suffer from spurious failures, but none related to the change. The code of the PR looks good to me, modulo some formatting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:109,deployability,modul,modulo,109,"We still suffer from spurious failures, but none related to the change. The code of the PR looks good to me, modulo some formatting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:121,interoperability,format,formatting,121,"We still suffer from spurious failures, but none related to the change. The code of the PR looks good to me, modulo some formatting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:109,modifiability,modul,modulo,109,"We still suffer from spurious failures, but none related to the change. The code of the PR looks good to me, modulo some formatting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:30,performance,failur,failures,30,"We still suffer from spurious failures, but none related to the change. The code of the PR looks good to me, modulo some formatting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:30,reliability,fail,failures,30,"We still suffer from spurious failures, but none related to the change. The code of the PR looks good to me, modulo some formatting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:109,safety,modul,modulo,109,"We still suffer from spurious failures, but none related to the change. The code of the PR looks good to me, modulo some formatting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13625:11,deployability,build,build,11,"@phsft-bot build on mac13arm/default, mac13/default, ROOT-ubuntu2204/nortcxxmod with flags -DCTEST_TEST_EXCLUDE_NONE=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13625
https://github.com/root-project/root/pull/13627:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13627
https://github.com/root-project/root/issues/13631:173,deployability,Updat,Update,173,Here the place where `canvas.Draw()` is implemented:. https://github.com/root-project/root/blob/master/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L594. There is no `Update`. . Probably one can try to implement one - there is [update_display](https://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html#IPython.display.update_display) method in `iPython`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:291,deployability,api,api,291,Here the place where `canvas.Draw()` is implemented:. https://github.com/root-project/root/blob/master/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L594. There is no `Update`. . Probably one can try to implement one - there is [update_display](https://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html#IPython.display.update_display) method in `iPython`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:29,energy efficiency,Draw,Draw,29,Here the place where `canvas.Draw()` is implemented:. https://github.com/root-project/root/blob/master/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L594. There is no `Update`. . Probably one can try to implement one - there is [update_display](https://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html#IPython.display.update_display) method in `iPython`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:291,integrability,api,api,291,Here the place where `canvas.Draw()` is implemented:. https://github.com/root-project/root/blob/master/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L594. There is no `Update`. . Probably one can try to implement one - there is [update_display](https://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html#IPython.display.update_display) method in `iPython`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:103,interoperability,bind,bindings,103,Here the place where `canvas.Draw()` is implemented:. https://github.com/root-project/root/blob/master/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L594. There is no `Update`. . Probably one can try to implement one - there is [update_display](https://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html#IPython.display.update_display) method in `iPython`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:291,interoperability,api,api,291,Here the place where `canvas.Draw()` is implemented:. https://github.com/root-project/root/blob/master/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L594. There is no `Update`. . Probably one can try to implement one - there is [update_display](https://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html#IPython.display.update_display) method in `iPython`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:103,modifiability,bind,bindings,103,Here the place where `canvas.Draw()` is implemented:. https://github.com/root-project/root/blob/master/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L594. There is no `Update`. . Probably one can try to implement one - there is [update_display](https://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html#IPython.display.update_display) method in `iPython`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:173,safety,Updat,Update,173,Here the place where `canvas.Draw()` is implemented:. https://github.com/root-project/root/blob/master/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L594. There is no `Update`. . Probably one can try to implement one - there is [update_display](https://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html#IPython.display.update_display) method in `iPython`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:173,security,Updat,Update,173,Here the place where `canvas.Draw()` is implemented:. https://github.com/root-project/root/blob/master/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L594. There is no `Update`. . Probably one can try to implement one - there is [update_display](https://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html#IPython.display.update_display) method in `iPython`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:137,usability,help,helpers,137,Here the place where `canvas.Draw()` is implemented:. https://github.com/root-project/root/blob/master/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L594. There is no `Update`. . Probably one can try to implement one - there is [update_display](https://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html#IPython.display.update_display) method in `iPython`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:38,deployability,build,build,38,"Few more details - all implementation build around `TCanvas::IsDrawn()` functionality. This flag set every time `c.Draw()` called, but then checked and reset in jupyter via `CaptureDrawnPrimitives` function. Same logic could be implemented for `TCanvas::Update()`. But next problem - so called `NotebookDrawer` is temporary object in Jupyter . One need to store update handle for each drawn canvas and reuse it if `c.Update()` is called. Theoretically this could be implemented, but needs some extension in C++ interface. . @vepadulano Do we want this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:213,deployability,log,logic,213,"Few more details - all implementation build around `TCanvas::IsDrawn()` functionality. This flag set every time `c.Draw()` called, but then checked and reset in jupyter via `CaptureDrawnPrimitives` function. Same logic could be implemented for `TCanvas::Update()`. But next problem - so called `NotebookDrawer` is temporary object in Jupyter . One need to store update handle for each drawn canvas and reuse it if `c.Update()` is called. Theoretically this could be implemented, but needs some extension in C++ interface. . @vepadulano Do we want this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:254,deployability,Updat,Update,254,"Few more details - all implementation build around `TCanvas::IsDrawn()` functionality. This flag set every time `c.Draw()` called, but then checked and reset in jupyter via `CaptureDrawnPrimitives` function. Same logic could be implemented for `TCanvas::Update()`. But next problem - so called `NotebookDrawer` is temporary object in Jupyter . One need to store update handle for each drawn canvas and reuse it if `c.Update()` is called. Theoretically this could be implemented, but needs some extension in C++ interface. . @vepadulano Do we want this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:362,deployability,updat,update,362,"Few more details - all implementation build around `TCanvas::IsDrawn()` functionality. This flag set every time `c.Draw()` called, but then checked and reset in jupyter via `CaptureDrawnPrimitives` function. Same logic could be implemented for `TCanvas::Update()`. But next problem - so called `NotebookDrawer` is temporary object in Jupyter . One need to store update handle for each drawn canvas and reuse it if `c.Update()` is called. Theoretically this could be implemented, but needs some extension in C++ interface. . @vepadulano Do we want this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:417,deployability,Updat,Update,417,"Few more details - all implementation build around `TCanvas::IsDrawn()` functionality. This flag set every time `c.Draw()` called, but then checked and reset in jupyter via `CaptureDrawnPrimitives` function. Same logic could be implemented for `TCanvas::Update()`. But next problem - so called `NotebookDrawer` is temporary object in Jupyter . One need to store update handle for each drawn canvas and reuse it if `c.Update()` is called. Theoretically this could be implemented, but needs some extension in C++ interface. . @vepadulano Do we want this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:115,energy efficiency,Draw,Draw,115,"Few more details - all implementation build around `TCanvas::IsDrawn()` functionality. This flag set every time `c.Draw()` called, but then checked and reset in jupyter via `CaptureDrawnPrimitives` function. Same logic could be implemented for `TCanvas::Update()`. But next problem - so called `NotebookDrawer` is temporary object in Jupyter . One need to store update handle for each drawn canvas and reuse it if `c.Update()` is called. Theoretically this could be implemented, but needs some extension in C++ interface. . @vepadulano Do we want this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:385,energy efficiency,draw,drawn,385,"Few more details - all implementation build around `TCanvas::IsDrawn()` functionality. This flag set every time `c.Draw()` called, but then checked and reset in jupyter via `CaptureDrawnPrimitives` function. Same logic could be implemented for `TCanvas::Update()`. But next problem - so called `NotebookDrawer` is temporary object in Jupyter . One need to store update handle for each drawn canvas and reuse it if `c.Update()` is called. Theoretically this could be implemented, but needs some extension in C++ interface. . @vepadulano Do we want this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:511,integrability,interfac,interface,511,"Few more details - all implementation build around `TCanvas::IsDrawn()` functionality. This flag set every time `c.Draw()` called, but then checked and reset in jupyter via `CaptureDrawnPrimitives` function. Same logic could be implemented for `TCanvas::Update()`. But next problem - so called `NotebookDrawer` is temporary object in Jupyter . One need to store update handle for each drawn canvas and reuse it if `c.Update()` is called. Theoretically this could be implemented, but needs some extension in C++ interface. . @vepadulano Do we want this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:511,interoperability,interfac,interface,511,"Few more details - all implementation build around `TCanvas::IsDrawn()` functionality. This flag set every time `c.Draw()` called, but then checked and reset in jupyter via `CaptureDrawnPrimitives` function. Same logic could be implemented for `TCanvas::Update()`. But next problem - so called `NotebookDrawer` is temporary object in Jupyter . One need to store update handle for each drawn canvas and reuse it if `c.Update()` is called. Theoretically this could be implemented, but needs some extension in C++ interface. . @vepadulano Do we want this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:402,modifiability,reu,reuse,402,"Few more details - all implementation build around `TCanvas::IsDrawn()` functionality. This flag set every time `c.Draw()` called, but then checked and reset in jupyter via `CaptureDrawnPrimitives` function. Same logic could be implemented for `TCanvas::Update()`. But next problem - so called `NotebookDrawer` is temporary object in Jupyter . One need to store update handle for each drawn canvas and reuse it if `c.Update()` is called. Theoretically this could be implemented, but needs some extension in C++ interface. . @vepadulano Do we want this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:494,modifiability,extens,extension,494,"Few more details - all implementation build around `TCanvas::IsDrawn()` functionality. This flag set every time `c.Draw()` called, but then checked and reset in jupyter via `CaptureDrawnPrimitives` function. Same logic could be implemented for `TCanvas::Update()`. But next problem - so called `NotebookDrawer` is temporary object in Jupyter . One need to store update handle for each drawn canvas and reuse it if `c.Update()` is called. Theoretically this could be implemented, but needs some extension in C++ interface. . @vepadulano Do we want this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:511,modifiability,interfac,interface,511,"Few more details - all implementation build around `TCanvas::IsDrawn()` functionality. This flag set every time `c.Draw()` called, but then checked and reset in jupyter via `CaptureDrawnPrimitives` function. Same logic could be implemented for `TCanvas::Update()`. But next problem - so called `NotebookDrawer` is temporary object in Jupyter . One need to store update handle for each drawn canvas and reuse it if `c.Update()` is called. Theoretically this could be implemented, but needs some extension in C++ interface. . @vepadulano Do we want this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:107,performance,time,time,107,"Few more details - all implementation build around `TCanvas::IsDrawn()` functionality. This flag set every time `c.Draw()` called, but then checked and reset in jupyter via `CaptureDrawnPrimitives` function. Same logic could be implemented for `TCanvas::Update()`. But next problem - so called `NotebookDrawer` is temporary object in Jupyter . One need to store update handle for each drawn canvas and reuse it if `c.Update()` is called. Theoretically this could be implemented, but needs some extension in C++ interface. . @vepadulano Do we want this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:213,safety,log,logic,213,"Few more details - all implementation build around `TCanvas::IsDrawn()` functionality. This flag set every time `c.Draw()` called, but then checked and reset in jupyter via `CaptureDrawnPrimitives` function. Same logic could be implemented for `TCanvas::Update()`. But next problem - so called `NotebookDrawer` is temporary object in Jupyter . One need to store update handle for each drawn canvas and reuse it if `c.Update()` is called. Theoretically this could be implemented, but needs some extension in C++ interface. . @vepadulano Do we want this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:254,safety,Updat,Update,254,"Few more details - all implementation build around `TCanvas::IsDrawn()` functionality. This flag set every time `c.Draw()` called, but then checked and reset in jupyter via `CaptureDrawnPrimitives` function. Same logic could be implemented for `TCanvas::Update()`. But next problem - so called `NotebookDrawer` is temporary object in Jupyter . One need to store update handle for each drawn canvas and reuse it if `c.Update()` is called. Theoretically this could be implemented, but needs some extension in C++ interface. . @vepadulano Do we want this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:362,safety,updat,update,362,"Few more details - all implementation build around `TCanvas::IsDrawn()` functionality. This flag set every time `c.Draw()` called, but then checked and reset in jupyter via `CaptureDrawnPrimitives` function. Same logic could be implemented for `TCanvas::Update()`. But next problem - so called `NotebookDrawer` is temporary object in Jupyter . One need to store update handle for each drawn canvas and reuse it if `c.Update()` is called. Theoretically this could be implemented, but needs some extension in C++ interface. . @vepadulano Do we want this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:417,safety,Updat,Update,417,"Few more details - all implementation build around `TCanvas::IsDrawn()` functionality. This flag set every time `c.Draw()` called, but then checked and reset in jupyter via `CaptureDrawnPrimitives` function. Same logic could be implemented for `TCanvas::Update()`. But next problem - so called `NotebookDrawer` is temporary object in Jupyter . One need to store update handle for each drawn canvas and reuse it if `c.Update()` is called. Theoretically this could be implemented, but needs some extension in C++ interface. . @vepadulano Do we want this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:213,security,log,logic,213,"Few more details - all implementation build around `TCanvas::IsDrawn()` functionality. This flag set every time `c.Draw()` called, but then checked and reset in jupyter via `CaptureDrawnPrimitives` function. Same logic could be implemented for `TCanvas::Update()`. But next problem - so called `NotebookDrawer` is temporary object in Jupyter . One need to store update handle for each drawn canvas and reuse it if `c.Update()` is called. Theoretically this could be implemented, but needs some extension in C++ interface. . @vepadulano Do we want this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:254,security,Updat,Update,254,"Few more details - all implementation build around `TCanvas::IsDrawn()` functionality. This flag set every time `c.Draw()` called, but then checked and reset in jupyter via `CaptureDrawnPrimitives` function. Same logic could be implemented for `TCanvas::Update()`. But next problem - so called `NotebookDrawer` is temporary object in Jupyter . One need to store update handle for each drawn canvas and reuse it if `c.Update()` is called. Theoretically this could be implemented, but needs some extension in C++ interface. . @vepadulano Do we want this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:362,security,updat,update,362,"Few more details - all implementation build around `TCanvas::IsDrawn()` functionality. This flag set every time `c.Draw()` called, but then checked and reset in jupyter via `CaptureDrawnPrimitives` function. Same logic could be implemented for `TCanvas::Update()`. But next problem - so called `NotebookDrawer` is temporary object in Jupyter . One need to store update handle for each drawn canvas and reuse it if `c.Update()` is called. Theoretically this could be implemented, but needs some extension in C++ interface. . @vepadulano Do we want this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:417,security,Updat,Update,417,"Few more details - all implementation build around `TCanvas::IsDrawn()` functionality. This flag set every time `c.Draw()` called, but then checked and reset in jupyter via `CaptureDrawnPrimitives` function. Same logic could be implemented for `TCanvas::Update()`. But next problem - so called `NotebookDrawer` is temporary object in Jupyter . One need to store update handle for each drawn canvas and reuse it if `c.Update()` is called. Theoretically this could be implemented, but needs some extension in C++ interface. . @vepadulano Do we want this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:213,testability,log,logic,213,"Few more details - all implementation build around `TCanvas::IsDrawn()` functionality. This flag set every time `c.Draw()` called, but then checked and reset in jupyter via `CaptureDrawnPrimitives` function. Same logic could be implemented for `TCanvas::Update()`. But next problem - so called `NotebookDrawer` is temporary object in Jupyter . One need to store update handle for each drawn canvas and reuse it if `c.Update()` is called. Theoretically this could be implemented, but needs some extension in C++ interface. . @vepadulano Do we want this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:11,deployability,updat,updating,11,"The act of updating a visualization is fundamental for the `LiveVisualize` feature, so if that is enough of a motivation to extend the JupyROOT functionality, we should go for it. In general, even if `LiveVisualize` wasn't implemented, there is currently no feature parity between running the ROOT graphics from a Python script or from a Python notebook, so that in itself should be enough motivation to make the effort of improving the situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:245,energy efficiency,current,currently,245,"The act of updating a visualization is fundamental for the `LiveVisualize` feature, so if that is enough of a motivation to extend the JupyROOT functionality, we should go for it. In general, even if `LiveVisualize` wasn't implemented, there is currently no feature parity between running the ROOT graphics from a Python script or from a Python notebook, so that in itself should be enough motivation to make the effort of improving the situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:124,modifiability,exten,extend,124,"The act of updating a visualization is fundamental for the `LiveVisualize` feature, so if that is enough of a motivation to extend the JupyROOT functionality, we should go for it. In general, even if `LiveVisualize` wasn't implemented, there is currently no feature parity between running the ROOT graphics from a Python script or from a Python notebook, so that in itself should be enough motivation to make the effort of improving the situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:11,safety,updat,updating,11,"The act of updating a visualization is fundamental for the `LiveVisualize` feature, so if that is enough of a motivation to extend the JupyROOT functionality, we should go for it. In general, even if `LiveVisualize` wasn't implemented, there is currently no feature parity between running the ROOT graphics from a Python script or from a Python notebook, so that in itself should be enough motivation to make the effort of improving the situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:11,security,updat,updating,11,"The act of updating a visualization is fundamental for the `LiveVisualize` feature, so if that is enough of a motivation to extend the JupyROOT functionality, we should go for it. In general, even if `LiveVisualize` wasn't implemented, there is currently no feature parity between running the ROOT graphics from a Python script or from a Python notebook, so that in itself should be enough motivation to make the effort of improving the situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:22,usability,visual,visualization,22,"The act of updating a visualization is fundamental for the `LiveVisualize` feature, so if that is enough of a motivation to extend the JupyROOT functionality, we should go for it. In general, even if `LiveVisualize` wasn't implemented, there is currently no feature parity between running the ROOT graphics from a Python script or from a Python notebook, so that in itself should be enough motivation to make the effort of improving the situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:473,availability,Operat,Operating,473,"**Explain what you would like to see improved and how.**. I think the issue I encounter in Jupyter notebook now is related to this issue because it appeared after updating ROOT to 6.30. The issue: TCanvas is not displayed in Jupyter notebook after I rerun the cell. Testing code:. ```. import ROOT. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = c1.DrawFrame(0,0,1,1). ```. **ROOT version**. v6.30/01-02. **Installation method**. using Arch Linux package manager. **Operating system**. Arch Linux. **Expected Result:**. As before 6.30, every time I rerun the cell the Canvas is shown again. **Actual Result:**. The Canvas is displayed on the first run, but is not displayed on second/third/... re-runs. |**First cell run**|**Secondary cell run (note the order execution number)**|. |----------|---------|. |<img src=""https://github.com/root-project/root/assets/44311461/bac65632-690e-47a4-9dc2-06cea1747045"" alt=""drawing"" width=""500""/>|<img src=""https://github.com/root-project/root/assets/44311461/ec657a93-cf35-4340-92a9-e0d0860fecbb"" alt=""drawing"" width=""500""/>|.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:163,deployability,updat,updating,163,"**Explain what you would like to see improved and how.**. I think the issue I encounter in Jupyter notebook now is related to this issue because it appeared after updating ROOT to 6.30. The issue: TCanvas is not displayed in Jupyter notebook after I rerun the cell. Testing code:. ```. import ROOT. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = c1.DrawFrame(0,0,1,1). ```. **ROOT version**. v6.30/01-02. **Installation method**. using Arch Linux package manager. **Operating system**. Arch Linux. **Expected Result:**. As before 6.30, every time I rerun the cell the Canvas is shown again. **Actual Result:**. The Canvas is displayed on the first run, but is not displayed on second/third/... re-runs. |**First cell run**|**Secondary cell run (note the order execution number)**|. |----------|---------|. |<img src=""https://github.com/root-project/root/assets/44311461/bac65632-690e-47a4-9dc2-06cea1747045"" alt=""drawing"" width=""500""/>|<img src=""https://github.com/root-project/root/assets/44311461/ec657a93-cf35-4340-92a9-e0d0860fecbb"" alt=""drawing"" width=""500""/>|.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:388,deployability,version,version,388,"**Explain what you would like to see improved and how.**. I think the issue I encounter in Jupyter notebook now is related to this issue because it appeared after updating ROOT to 6.30. The issue: TCanvas is not displayed in Jupyter notebook after I rerun the cell. Testing code:. ```. import ROOT. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = c1.DrawFrame(0,0,1,1). ```. **ROOT version**. v6.30/01-02. **Installation method**. using Arch Linux package manager. **Operating system**. Arch Linux. **Expected Result:**. As before 6.30, every time I rerun the cell the Canvas is shown again. **Actual Result:**. The Canvas is displayed on the first run, but is not displayed on second/third/... re-runs. |**First cell run**|**Secondary cell run (note the order execution number)**|. |----------|---------|. |<img src=""https://github.com/root-project/root/assets/44311461/bac65632-690e-47a4-9dc2-06cea1747045"" alt=""drawing"" width=""500""/>|<img src=""https://github.com/root-project/root/assets/44311461/ec657a93-cf35-4340-92a9-e0d0860fecbb"" alt=""drawing"" width=""500""/>|.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:414,deployability,Instal,Installation,414,"**Explain what you would like to see improved and how.**. I think the issue I encounter in Jupyter notebook now is related to this issue because it appeared after updating ROOT to 6.30. The issue: TCanvas is not displayed in Jupyter notebook after I rerun the cell. Testing code:. ```. import ROOT. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = c1.DrawFrame(0,0,1,1). ```. **ROOT version**. v6.30/01-02. **Installation method**. using Arch Linux package manager. **Operating system**. Arch Linux. **Expected Result:**. As before 6.30, every time I rerun the cell the Canvas is shown again. **Actual Result:**. The Canvas is displayed on the first run, but is not displayed on second/third/... re-runs. |**First cell run**|**Secondary cell run (note the order execution number)**|. |----------|---------|. |<img src=""https://github.com/root-project/root/assets/44311461/bac65632-690e-47a4-9dc2-06cea1747045"" alt=""drawing"" width=""500""/>|<img src=""https://github.com/root-project/root/assets/44311461/ec657a93-cf35-4340-92a9-e0d0860fecbb"" alt=""drawing"" width=""500""/>|.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:462,deployability,manag,manager,462,"**Explain what you would like to see improved and how.**. I think the issue I encounter in Jupyter notebook now is related to this issue because it appeared after updating ROOT to 6.30. The issue: TCanvas is not displayed in Jupyter notebook after I rerun the cell. Testing code:. ```. import ROOT. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = c1.DrawFrame(0,0,1,1). ```. **ROOT version**. v6.30/01-02. **Installation method**. using Arch Linux package manager. **Operating system**. Arch Linux. **Expected Result:**. As before 6.30, every time I rerun the cell the Canvas is shown again. **Actual Result:**. The Canvas is displayed on the first run, but is not displayed on second/third/... re-runs. |**First cell run**|**Secondary cell run (note the order execution number)**|. |----------|---------|. |<img src=""https://github.com/root-project/root/assets/44311461/bac65632-690e-47a4-9dc2-06cea1747045"" alt=""drawing"" width=""500""/>|<img src=""https://github.com/root-project/root/assets/44311461/ec657a93-cf35-4340-92a9-e0d0860fecbb"" alt=""drawing"" width=""500""/>|.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:340,energy efficiency,Draw,Draw,340,"**Explain what you would like to see improved and how.**. I think the issue I encounter in Jupyter notebook now is related to this issue because it appeared after updating ROOT to 6.30. The issue: TCanvas is not displayed in Jupyter notebook after I rerun the cell. Testing code:. ```. import ROOT. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = c1.DrawFrame(0,0,1,1). ```. **ROOT version**. v6.30/01-02. **Installation method**. using Arch Linux package manager. **Operating system**. Arch Linux. **Expected Result:**. As before 6.30, every time I rerun the cell the Canvas is shown again. **Actual Result:**. The Canvas is displayed on the first run, but is not displayed on second/third/... re-runs. |**First cell run**|**Secondary cell run (note the order execution number)**|. |----------|---------|. |<img src=""https://github.com/root-project/root/assets/44311461/bac65632-690e-47a4-9dc2-06cea1747045"" alt=""drawing"" width=""500""/>|<img src=""https://github.com/root-project/root/assets/44311461/ec657a93-cf35-4340-92a9-e0d0860fecbb"" alt=""drawing"" width=""500""/>|.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:356,energy efficiency,Draw,DrawFrame,356,"**Explain what you would like to see improved and how.**. I think the issue I encounter in Jupyter notebook now is related to this issue because it appeared after updating ROOT to 6.30. The issue: TCanvas is not displayed in Jupyter notebook after I rerun the cell. Testing code:. ```. import ROOT. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = c1.DrawFrame(0,0,1,1). ```. **ROOT version**. v6.30/01-02. **Installation method**. using Arch Linux package manager. **Operating system**. Arch Linux. **Expected Result:**. As before 6.30, every time I rerun the cell the Canvas is shown again. **Actual Result:**. The Canvas is displayed on the first run, but is not displayed on second/third/... re-runs. |**First cell run**|**Secondary cell run (note the order execution number)**|. |----------|---------|. |<img src=""https://github.com/root-project/root/assets/44311461/bac65632-690e-47a4-9dc2-06cea1747045"" alt=""drawing"" width=""500""/>|<img src=""https://github.com/root-project/root/assets/44311461/ec657a93-cf35-4340-92a9-e0d0860fecbb"" alt=""drawing"" width=""500""/>|.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:462,energy efficiency,manag,manager,462,"**Explain what you would like to see improved and how.**. I think the issue I encounter in Jupyter notebook now is related to this issue because it appeared after updating ROOT to 6.30. The issue: TCanvas is not displayed in Jupyter notebook after I rerun the cell. Testing code:. ```. import ROOT. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = c1.DrawFrame(0,0,1,1). ```. **ROOT version**. v6.30/01-02. **Installation method**. using Arch Linux package manager. **Operating system**. Arch Linux. **Expected Result:**. As before 6.30, every time I rerun the cell the Canvas is shown again. **Actual Result:**. The Canvas is displayed on the first run, but is not displayed on second/third/... re-runs. |**First cell run**|**Secondary cell run (note the order execution number)**|. |----------|---------|. |<img src=""https://github.com/root-project/root/assets/44311461/bac65632-690e-47a4-9dc2-06cea1747045"" alt=""drawing"" width=""500""/>|<img src=""https://github.com/root-project/root/assets/44311461/ec657a93-cf35-4340-92a9-e0d0860fecbb"" alt=""drawing"" width=""500""/>|.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:920,energy efficiency,draw,drawing,920,"**Explain what you would like to see improved and how.**. I think the issue I encounter in Jupyter notebook now is related to this issue because it appeared after updating ROOT to 6.30. The issue: TCanvas is not displayed in Jupyter notebook after I rerun the cell. Testing code:. ```. import ROOT. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = c1.DrawFrame(0,0,1,1). ```. **ROOT version**. v6.30/01-02. **Installation method**. using Arch Linux package manager. **Operating system**. Arch Linux. **Expected Result:**. As before 6.30, every time I rerun the cell the Canvas is shown again. **Actual Result:**. The Canvas is displayed on the first run, but is not displayed on second/third/... re-runs. |**First cell run**|**Secondary cell run (note the order execution number)**|. |----------|---------|. |<img src=""https://github.com/root-project/root/assets/44311461/bac65632-690e-47a4-9dc2-06cea1747045"" alt=""drawing"" width=""500""/>|<img src=""https://github.com/root-project/root/assets/44311461/ec657a93-cf35-4340-92a9-e0d0860fecbb"" alt=""drawing"" width=""500""/>|.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:1049,energy efficiency,draw,drawing,1049,"**Explain what you would like to see improved and how.**. I think the issue I encounter in Jupyter notebook now is related to this issue because it appeared after updating ROOT to 6.30. The issue: TCanvas is not displayed in Jupyter notebook after I rerun the cell. Testing code:. ```. import ROOT. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = c1.DrawFrame(0,0,1,1). ```. **ROOT version**. v6.30/01-02. **Installation method**. using Arch Linux package manager. **Operating system**. Arch Linux. **Expected Result:**. As before 6.30, every time I rerun the cell the Canvas is shown again. **Actual Result:**. The Canvas is displayed on the first run, but is not displayed on second/third/... re-runs. |**First cell run**|**Secondary cell run (note the order execution number)**|. |----------|---------|. |<img src=""https://github.com/root-project/root/assets/44311461/bac65632-690e-47a4-9dc2-06cea1747045"" alt=""drawing"" width=""500""/>|<img src=""https://github.com/root-project/root/assets/44311461/ec657a93-cf35-4340-92a9-e0d0860fecbb"" alt=""drawing"" width=""500""/>|.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:388,integrability,version,version,388,"**Explain what you would like to see improved and how.**. I think the issue I encounter in Jupyter notebook now is related to this issue because it appeared after updating ROOT to 6.30. The issue: TCanvas is not displayed in Jupyter notebook after I rerun the cell. Testing code:. ```. import ROOT. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = c1.DrawFrame(0,0,1,1). ```. **ROOT version**. v6.30/01-02. **Installation method**. using Arch Linux package manager. **Operating system**. Arch Linux. **Expected Result:**. As before 6.30, every time I rerun the cell the Canvas is shown again. **Actual Result:**. The Canvas is displayed on the first run, but is not displayed on second/third/... re-runs. |**First cell run**|**Secondary cell run (note the order execution number)**|. |----------|---------|. |<img src=""https://github.com/root-project/root/assets/44311461/bac65632-690e-47a4-9dc2-06cea1747045"" alt=""drawing"" width=""500""/>|<img src=""https://github.com/root-project/root/assets/44311461/ec657a93-cf35-4340-92a9-e0d0860fecbb"" alt=""drawing"" width=""500""/>|.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:388,modifiability,version,version,388,"**Explain what you would like to see improved and how.**. I think the issue I encounter in Jupyter notebook now is related to this issue because it appeared after updating ROOT to 6.30. The issue: TCanvas is not displayed in Jupyter notebook after I rerun the cell. Testing code:. ```. import ROOT. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = c1.DrawFrame(0,0,1,1). ```. **ROOT version**. v6.30/01-02. **Installation method**. using Arch Linux package manager. **Operating system**. Arch Linux. **Expected Result:**. As before 6.30, every time I rerun the cell the Canvas is shown again. **Actual Result:**. The Canvas is displayed on the first run, but is not displayed on second/third/... re-runs. |**First cell run**|**Secondary cell run (note the order execution number)**|. |----------|---------|. |<img src=""https://github.com/root-project/root/assets/44311461/bac65632-690e-47a4-9dc2-06cea1747045"" alt=""drawing"" width=""500""/>|<img src=""https://github.com/root-project/root/assets/44311461/ec657a93-cf35-4340-92a9-e0d0860fecbb"" alt=""drawing"" width=""500""/>|.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:454,modifiability,pac,package,454,"**Explain what you would like to see improved and how.**. I think the issue I encounter in Jupyter notebook now is related to this issue because it appeared after updating ROOT to 6.30. The issue: TCanvas is not displayed in Jupyter notebook after I rerun the cell. Testing code:. ```. import ROOT. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = c1.DrawFrame(0,0,1,1). ```. **ROOT version**. v6.30/01-02. **Installation method**. using Arch Linux package manager. **Operating system**. Arch Linux. **Expected Result:**. As before 6.30, every time I rerun the cell the Canvas is shown again. **Actual Result:**. The Canvas is displayed on the first run, but is not displayed on second/third/... re-runs. |**First cell run**|**Secondary cell run (note the order execution number)**|. |----------|---------|. |<img src=""https://github.com/root-project/root/assets/44311461/bac65632-690e-47a4-9dc2-06cea1747045"" alt=""drawing"" width=""500""/>|<img src=""https://github.com/root-project/root/assets/44311461/ec657a93-cf35-4340-92a9-e0d0860fecbb"" alt=""drawing"" width=""500""/>|.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:549,performance,time,time,549,"**Explain what you would like to see improved and how.**. I think the issue I encounter in Jupyter notebook now is related to this issue because it appeared after updating ROOT to 6.30. The issue: TCanvas is not displayed in Jupyter notebook after I rerun the cell. Testing code:. ```. import ROOT. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = c1.DrawFrame(0,0,1,1). ```. **ROOT version**. v6.30/01-02. **Installation method**. using Arch Linux package manager. **Operating system**. Arch Linux. **Expected Result:**. As before 6.30, every time I rerun the cell the Canvas is shown again. **Actual Result:**. The Canvas is displayed on the first run, but is not displayed on second/third/... re-runs. |**First cell run**|**Secondary cell run (note the order execution number)**|. |----------|---------|. |<img src=""https://github.com/root-project/root/assets/44311461/bac65632-690e-47a4-9dc2-06cea1747045"" alt=""drawing"" width=""500""/>|<img src=""https://github.com/root-project/root/assets/44311461/ec657a93-cf35-4340-92a9-e0d0860fecbb"" alt=""drawing"" width=""500""/>|.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:163,safety,updat,updating,163,"**Explain what you would like to see improved and how.**. I think the issue I encounter in Jupyter notebook now is related to this issue because it appeared after updating ROOT to 6.30. The issue: TCanvas is not displayed in Jupyter notebook after I rerun the cell. Testing code:. ```. import ROOT. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = c1.DrawFrame(0,0,1,1). ```. **ROOT version**. v6.30/01-02. **Installation method**. using Arch Linux package manager. **Operating system**. Arch Linux. **Expected Result:**. As before 6.30, every time I rerun the cell the Canvas is shown again. **Actual Result:**. The Canvas is displayed on the first run, but is not displayed on second/third/... re-runs. |**First cell run**|**Secondary cell run (note the order execution number)**|. |----------|---------|. |<img src=""https://github.com/root-project/root/assets/44311461/bac65632-690e-47a4-9dc2-06cea1747045"" alt=""drawing"" width=""500""/>|<img src=""https://github.com/root-project/root/assets/44311461/ec657a93-cf35-4340-92a9-e0d0860fecbb"" alt=""drawing"" width=""500""/>|.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:266,safety,Test,Testing,266,"**Explain what you would like to see improved and how.**. I think the issue I encounter in Jupyter notebook now is related to this issue because it appeared after updating ROOT to 6.30. The issue: TCanvas is not displayed in Jupyter notebook after I rerun the cell. Testing code:. ```. import ROOT. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = c1.DrawFrame(0,0,1,1). ```. **ROOT version**. v6.30/01-02. **Installation method**. using Arch Linux package manager. **Operating system**. Arch Linux. **Expected Result:**. As before 6.30, every time I rerun the cell the Canvas is shown again. **Actual Result:**. The Canvas is displayed on the first run, but is not displayed on second/third/... re-runs. |**First cell run**|**Secondary cell run (note the order execution number)**|. |----------|---------|. |<img src=""https://github.com/root-project/root/assets/44311461/bac65632-690e-47a4-9dc2-06cea1747045"" alt=""drawing"" width=""500""/>|<img src=""https://github.com/root-project/root/assets/44311461/ec657a93-cf35-4340-92a9-e0d0860fecbb"" alt=""drawing"" width=""500""/>|.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:462,safety,manag,manager,462,"**Explain what you would like to see improved and how.**. I think the issue I encounter in Jupyter notebook now is related to this issue because it appeared after updating ROOT to 6.30. The issue: TCanvas is not displayed in Jupyter notebook after I rerun the cell. Testing code:. ```. import ROOT. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = c1.DrawFrame(0,0,1,1). ```. **ROOT version**. v6.30/01-02. **Installation method**. using Arch Linux package manager. **Operating system**. Arch Linux. **Expected Result:**. As before 6.30, every time I rerun the cell the Canvas is shown again. **Actual Result:**. The Canvas is displayed on the first run, but is not displayed on second/third/... re-runs. |**First cell run**|**Secondary cell run (note the order execution number)**|. |----------|---------|. |<img src=""https://github.com/root-project/root/assets/44311461/bac65632-690e-47a4-9dc2-06cea1747045"" alt=""drawing"" width=""500""/>|<img src=""https://github.com/root-project/root/assets/44311461/ec657a93-cf35-4340-92a9-e0d0860fecbb"" alt=""drawing"" width=""500""/>|.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:163,security,updat,updating,163,"**Explain what you would like to see improved and how.**. I think the issue I encounter in Jupyter notebook now is related to this issue because it appeared after updating ROOT to 6.30. The issue: TCanvas is not displayed in Jupyter notebook after I rerun the cell. Testing code:. ```. import ROOT. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = c1.DrawFrame(0,0,1,1). ```. **ROOT version**. v6.30/01-02. **Installation method**. using Arch Linux package manager. **Operating system**. Arch Linux. **Expected Result:**. As before 6.30, every time I rerun the cell the Canvas is shown again. **Actual Result:**. The Canvas is displayed on the first run, but is not displayed on second/third/... re-runs. |**First cell run**|**Secondary cell run (note the order execution number)**|. |----------|---------|. |<img src=""https://github.com/root-project/root/assets/44311461/bac65632-690e-47a4-9dc2-06cea1747045"" alt=""drawing"" width=""500""/>|<img src=""https://github.com/root-project/root/assets/44311461/ec657a93-cf35-4340-92a9-e0d0860fecbb"" alt=""drawing"" width=""500""/>|.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:266,testability,Test,Testing,266,"**Explain what you would like to see improved and how.**. I think the issue I encounter in Jupyter notebook now is related to this issue because it appeared after updating ROOT to 6.30. The issue: TCanvas is not displayed in Jupyter notebook after I rerun the cell. Testing code:. ```. import ROOT. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = c1.DrawFrame(0,0,1,1). ```. **ROOT version**. v6.30/01-02. **Installation method**. using Arch Linux package manager. **Operating system**. Arch Linux. **Expected Result:**. As before 6.30, every time I rerun the cell the Canvas is shown again. **Actual Result:**. The Canvas is displayed on the first run, but is not displayed on second/third/... re-runs. |**First cell run**|**Secondary cell run (note the order execution number)**|. |----------|---------|. |<img src=""https://github.com/root-project/root/assets/44311461/bac65632-690e-47a4-9dc2-06cea1747045"" alt=""drawing"" width=""500""/>|<img src=""https://github.com/root-project/root/assets/44311461/ec657a93-cf35-4340-92a9-e0d0860fecbb"" alt=""drawing"" width=""500""/>|.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:190,energy efficiency,Draw,Draw,190,"@dreykiman. You should not try import ROOT and create canvas again when running code second time. Just modify canvas as you need - add histogram, change fill colors, ... - and then call `c1.Draw()` again. This is the only way to draw ROOT canvas in the Jupyter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:229,energy efficiency,draw,draw,229,"@dreykiman. You should not try import ROOT and create canvas again when running code second time. Just modify canvas as you need - add histogram, change fill colors, ... - and then call `c1.Draw()` again. This is the only way to draw ROOT canvas in the Jupyter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:92,performance,time,time,92,"@dreykiman. You should not try import ROOT and create canvas again when running code second time. Just modify canvas as you need - add histogram, change fill colors, ... - and then call `c1.Draw()` again. This is the only way to draw ROOT canvas in the Jupyter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:103,security,modif,modify,103,"@dreykiman. You should not try import ROOT and create canvas again when running code second time. Just modify canvas as you need - add histogram, change fill colors, ... - and then call `c1.Draw()` again. This is the only way to draw ROOT canvas in the Jupyter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:261,performance,time,time,261,"@linev thank you for quick response. Sorry, that was a bad example. I usually import ROOT in the top cell and don't import it again. It seems the problem is with `Print` method. If I use Print the Canvas is not displayed on secondary cell executions. | **First time cell execution** | **Secondary cell executions (note the order execution number)**|. |-------------|--------------------. |![image](https://github.com/root-project/root/assets/44311461/1be434e1-f316-4045-8994-4c20138a1d09)|![image](https://github.com/root-project/root/assets/44311461/b7ea39c0-12b9-48df-ab34-af17c4a47491)|.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:31,reliability,doe,does,31,I am not sure that `%reset -f` does. But for me it also not works properly. Please create separate issue with your example.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:11,energy efficiency,draw,drawing,11,Issue with drawing new canvas with the same name probably was resolved by https://github.com/root-project/root/pull/15943,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13632:4,deployability,version,version,4,"C++ version of the reproducer:. ```. {. int n = 1000000;. double x[1000000], y[1000000]; . . for (int i = 0; i < n; i++) {. x[i] = i;. y[i] = x[i]*x[i];. }. auto g = new TGraph(n, x, y);. g->SetTitle(""Graph title;X title;Y title"");. g->Sort();. g->Draw(""AC*"");. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13632
https://github.com/root-project/root/issues/13632:248,energy efficiency,Draw,Draw,248,"C++ version of the reproducer:. ```. {. int n = 1000000;. double x[1000000], y[1000000]; . . for (int i = 0; i < n; i++) {. x[i] = i;. y[i] = x[i]*x[i];. }. auto g = new TGraph(n, x, y);. g->SetTitle(""Graph title;X title;Y title"");. g->Sort();. g->Draw(""AC*"");. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13632
https://github.com/root-project/root/issues/13632:4,integrability,version,version,4,"C++ version of the reproducer:. ```. {. int n = 1000000;. double x[1000000], y[1000000]; . . for (int i = 0; i < n; i++) {. x[i] = i;. y[i] = x[i]*x[i];. }. auto g = new TGraph(n, x, y);. g->SetTitle(""Graph title;X title;Y title"");. g->Sort();. g->Draw(""AC*"");. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13632
https://github.com/root-project/root/issues/13632:4,modifiability,version,version,4,"C++ version of the reproducer:. ```. {. int n = 1000000;. double x[1000000], y[1000000]; . . for (int i = 0; i < n; i++) {. x[i] = i;. y[i] = x[i]*x[i];. }. auto g = new TGraph(n, x, y);. g->SetTitle(""Graph title;X title;Y title"");. g->Sort();. g->Draw(""AC*"");. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13632
https://github.com/root-project/root/pull/13633:72,safety,risk,risk,72,Thanks for having a look! I'll merge the PR first thing tomorrow not to risk to affect the nightlies.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13633
https://github.com/root-project/root/pull/13633:72,security,risk,risk,72,Thanks for having a look! I'll merge the PR first thing tomorrow not to risk to affect the nightlies.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13633
https://github.com/root-project/root/pull/13634:11,deployability,build,build,11,"@phsft-bot build on mac13arm/default, mac13/default, ROOT-ubuntu2204/nortcxxmod with flags -DCTEST_TEST_EXCLUDE_NONE=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13634
https://github.com/root-project/root/pull/13634:11,deployability,build,build,11,"@phsft-bot build on mac13arm/default, mac13/default, ROOT-ubuntu2204/nortcxxmod with flags -DCTEST_TEST_EXCLUDE_NONE=On.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13634
https://github.com/root-project/root/pull/13634:11,deployability,build,build,11,"@phsft-bot build on mac13arm/default, mac13/default, ROOT-ubuntu2204/nortcxxmod with flags -DCTEST_TEST_EXCLUDE_NONE=On.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13634
https://github.com/root-project/root/pull/13634:11,deployability,build,build,11,"@phsft-bot build on mac13arm/default, mac13/default, ROOT-ubuntu2204/nortcxxmod, mac11/noimt, mac12arm/cxx20 with flags -DCTEST_TEST_EXCLUDE_NONE=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13634
https://github.com/root-project/root/pull/13634:11,deployability,build,build,11,"@phsft-bot build on mac13arm/default, mac13/default, ROOT-ubuntu2204/nortcxxmod, mac11/noimt, mac12arm/cxx20 with flags -DCTEST_TEST_EXCLUDE_NONE=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13634
https://github.com/root-project/root/pull/13634:11,deployability,build,build,11,"@phsft-bot build on mac13arm/default, mac13/default, ROOT-ubuntu2204/nortcxxmod, mac11/noimt, mac12arm/cxx20",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13634
https://github.com/root-project/root/pull/13635:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13635
https://github.com/root-project/root/pull/13635:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13635
https://github.com/root-project/root/pull/13635:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13635
https://github.com/root-project/root/pull/13635:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13635
https://github.com/root-project/root/pull/13635:212,performance,memor,memory,212,"I write in my role of Shifter:. @vepadulano do you think this PR is good to go? If you think so, I propose to go ahead, even if a zero copy algorithm of an increased complexity would have avoided duplicating the memory during the sorting (I guess this is no big deal after all - where you can fit a TGraph, you can fit 2)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13635
https://github.com/root-project/root/pull/13635:166,safety,compl,complexity,166,"I write in my role of Shifter:. @vepadulano do you think this PR is good to go? If you think so, I propose to go ahead, even if a zero copy algorithm of an increased complexity would have avoided duplicating the memory during the sorting (I guess this is no big deal after all - where you can fit a TGraph, you can fit 2)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13635
https://github.com/root-project/root/pull/13635:188,safety,avoid,avoided,188,"I write in my role of Shifter:. @vepadulano do you think this PR is good to go? If you think so, I propose to go ahead, even if a zero copy algorithm of an increased complexity would have avoided duplicating the memory during the sorting (I guess this is no big deal after all - where you can fit a TGraph, you can fit 2)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13635
https://github.com/root-project/root/pull/13635:166,security,compl,complexity,166,"I write in my role of Shifter:. @vepadulano do you think this PR is good to go? If you think so, I propose to go ahead, even if a zero copy algorithm of an increased complexity would have avoided duplicating the memory during the sorting (I guess this is no big deal after all - where you can fit a TGraph, you can fit 2)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13635
https://github.com/root-project/root/pull/13635:212,usability,memor,memory,212,"I write in my role of Shifter:. @vepadulano do you think this PR is good to go? If you think so, I propose to go ahead, even if a zero copy algorithm of an increased complexity would have avoided duplicating the memory during the sorting (I guess this is no big deal after all - where you can fit a TGraph, you can fit 2)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13635
https://github.com/root-project/root/pull/13635:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13635
https://github.com/root-project/root/pull/13635:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13635
https://github.com/root-project/root/pull/13638:363,interoperability,specif,specifies,363,"I looked into doxygen for the chi2FitTo() . https://root.cern/doc/master/classRooAbsPdf.html#a77be869c84f102f1fce246c6f01b5b7d. and it doesn't mention `Extended()` at all. So I think this should be added with proper explanation of the behaviour. Furthermore doxygen for fitTo(). https://root.cern/doc/master/classRooAbsPdf.html#a52c4a5926a161bcb72eab46890b0590e. specifies that `Extended()` is off by default, while it should rather say that it is on if pdf is extended and off if it is not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:152,modifiability,Exten,Extended,152,"I looked into doxygen for the chi2FitTo() . https://root.cern/doc/master/classRooAbsPdf.html#a77be869c84f102f1fce246c6f01b5b7d. and it doesn't mention `Extended()` at all. So I think this should be added with proper explanation of the behaviour. Furthermore doxygen for fitTo(). https://root.cern/doc/master/classRooAbsPdf.html#a52c4a5926a161bcb72eab46890b0590e. specifies that `Extended()` is off by default, while it should rather say that it is on if pdf is extended and off if it is not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:379,modifiability,Exten,Extended,379,"I looked into doxygen for the chi2FitTo() . https://root.cern/doc/master/classRooAbsPdf.html#a77be869c84f102f1fce246c6f01b5b7d. and it doesn't mention `Extended()` at all. So I think this should be added with proper explanation of the behaviour. Furthermore doxygen for fitTo(). https://root.cern/doc/master/classRooAbsPdf.html#a52c4a5926a161bcb72eab46890b0590e. specifies that `Extended()` is off by default, while it should rather say that it is on if pdf is extended and off if it is not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:461,modifiability,exten,extended,461,"I looked into doxygen for the chi2FitTo() . https://root.cern/doc/master/classRooAbsPdf.html#a77be869c84f102f1fce246c6f01b5b7d. and it doesn't mention `Extended()` at all. So I think this should be added with proper explanation of the behaviour. Furthermore doxygen for fitTo(). https://root.cern/doc/master/classRooAbsPdf.html#a52c4a5926a161bcb72eab46890b0590e. specifies that `Extended()` is off by default, while it should rather say that it is on if pdf is extended and off if it is not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:135,reliability,doe,doesn,135,"I looked into doxygen for the chi2FitTo() . https://root.cern/doc/master/classRooAbsPdf.html#a77be869c84f102f1fce246c6f01b5b7d. and it doesn't mention `Extended()` at all. So I think this should be added with proper explanation of the behaviour. Furthermore doxygen for fitTo(). https://root.cern/doc/master/classRooAbsPdf.html#a52c4a5926a161bcb72eab46890b0590e. specifies that `Extended()` is off by default, while it should rather say that it is on if pdf is extended and off if it is not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:235,usability,behavi,behaviour,235,"I looked into doxygen for the chi2FitTo() . https://root.cern/doc/master/classRooAbsPdf.html#a77be869c84f102f1fce246c6f01b5b7d. and it doesn't mention `Extended()` at all. So I think this should be added with proper explanation of the behaviour. Furthermore doxygen for fitTo(). https://root.cern/doc/master/classRooAbsPdf.html#a52c4a5926a161bcb72eab46890b0590e. specifies that `Extended()` is off by default, while it should rather say that it is on if pdf is extended and off if it is not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:366,interoperability,specif,specifies,366,"> I looked into doxygen for the chi2FitTo() https://root.cern/doc/master/classRooAbsPdf.html#a77be869c84f102f1fce246c6f01b5b7d and it doesn't mention `Extended()` at all. So I think this should be added with proper explanation of the behaviour. > . > Furthermore doxygen for fitTo() https://root.cern/doc/master/classRooAbsPdf.html#a52c4a5926a161bcb72eab46890b0590e specifies that `Extended()` is off by default, while it should rather say that it is on if pdf is extended and off if it is not. That's a good point! In the final commit of this PR, I improved the documentation of the `Extended()` command argument. I have also added three more commits:. * some refactor to avoid code duplication in RooAbsReal and RooAbsPdf. * don't recommend the use of `RooChi2Var` directly in RooPlot documentation. * a commit that just fixes typos",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:151,modifiability,Exten,Extended,151,"> I looked into doxygen for the chi2FitTo() https://root.cern/doc/master/classRooAbsPdf.html#a77be869c84f102f1fce246c6f01b5b7d and it doesn't mention `Extended()` at all. So I think this should be added with proper explanation of the behaviour. > . > Furthermore doxygen for fitTo() https://root.cern/doc/master/classRooAbsPdf.html#a52c4a5926a161bcb72eab46890b0590e specifies that `Extended()` is off by default, while it should rather say that it is on if pdf is extended and off if it is not. That's a good point! In the final commit of this PR, I improved the documentation of the `Extended()` command argument. I have also added three more commits:. * some refactor to avoid code duplication in RooAbsReal and RooAbsPdf. * don't recommend the use of `RooChi2Var` directly in RooPlot documentation. * a commit that just fixes typos",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:382,modifiability,Exten,Extended,382,"> I looked into doxygen for the chi2FitTo() https://root.cern/doc/master/classRooAbsPdf.html#a77be869c84f102f1fce246c6f01b5b7d and it doesn't mention `Extended()` at all. So I think this should be added with proper explanation of the behaviour. > . > Furthermore doxygen for fitTo() https://root.cern/doc/master/classRooAbsPdf.html#a52c4a5926a161bcb72eab46890b0590e specifies that `Extended()` is off by default, while it should rather say that it is on if pdf is extended and off if it is not. That's a good point! In the final commit of this PR, I improved the documentation of the `Extended()` command argument. I have also added three more commits:. * some refactor to avoid code duplication in RooAbsReal and RooAbsPdf. * don't recommend the use of `RooChi2Var` directly in RooPlot documentation. * a commit that just fixes typos",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:464,modifiability,exten,extended,464,"> I looked into doxygen for the chi2FitTo() https://root.cern/doc/master/classRooAbsPdf.html#a77be869c84f102f1fce246c6f01b5b7d and it doesn't mention `Extended()` at all. So I think this should be added with proper explanation of the behaviour. > . > Furthermore doxygen for fitTo() https://root.cern/doc/master/classRooAbsPdf.html#a52c4a5926a161bcb72eab46890b0590e specifies that `Extended()` is off by default, while it should rather say that it is on if pdf is extended and off if it is not. That's a good point! In the final commit of this PR, I improved the documentation of the `Extended()` command argument. I have also added three more commits:. * some refactor to avoid code duplication in RooAbsReal and RooAbsPdf. * don't recommend the use of `RooChi2Var` directly in RooPlot documentation. * a commit that just fixes typos",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:585,modifiability,Exten,Extended,585,"> I looked into doxygen for the chi2FitTo() https://root.cern/doc/master/classRooAbsPdf.html#a77be869c84f102f1fce246c6f01b5b7d and it doesn't mention `Extended()` at all. So I think this should be added with proper explanation of the behaviour. > . > Furthermore doxygen for fitTo() https://root.cern/doc/master/classRooAbsPdf.html#a52c4a5926a161bcb72eab46890b0590e specifies that `Extended()` is off by default, while it should rather say that it is on if pdf is extended and off if it is not. That's a good point! In the final commit of this PR, I improved the documentation of the `Extended()` command argument. I have also added three more commits:. * some refactor to avoid code duplication in RooAbsReal and RooAbsPdf. * don't recommend the use of `RooChi2Var` directly in RooPlot documentation. * a commit that just fixes typos",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:661,modifiability,refact,refactor,661,"> I looked into doxygen for the chi2FitTo() https://root.cern/doc/master/classRooAbsPdf.html#a77be869c84f102f1fce246c6f01b5b7d and it doesn't mention `Extended()` at all. So I think this should be added with proper explanation of the behaviour. > . > Furthermore doxygen for fitTo() https://root.cern/doc/master/classRooAbsPdf.html#a52c4a5926a161bcb72eab46890b0590e specifies that `Extended()` is off by default, while it should rather say that it is on if pdf is extended and off if it is not. That's a good point! In the final commit of this PR, I improved the documentation of the `Extended()` command argument. I have also added three more commits:. * some refactor to avoid code duplication in RooAbsReal and RooAbsPdf. * don't recommend the use of `RooChi2Var` directly in RooPlot documentation. * a commit that just fixes typos",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:661,performance,refactor,refactor,661,"> I looked into doxygen for the chi2FitTo() https://root.cern/doc/master/classRooAbsPdf.html#a77be869c84f102f1fce246c6f01b5b7d and it doesn't mention `Extended()` at all. So I think this should be added with proper explanation of the behaviour. > . > Furthermore doxygen for fitTo() https://root.cern/doc/master/classRooAbsPdf.html#a52c4a5926a161bcb72eab46890b0590e specifies that `Extended()` is off by default, while it should rather say that it is on if pdf is extended and off if it is not. That's a good point! In the final commit of this PR, I improved the documentation of the `Extended()` command argument. I have also added three more commits:. * some refactor to avoid code duplication in RooAbsReal and RooAbsPdf. * don't recommend the use of `RooChi2Var` directly in RooPlot documentation. * a commit that just fixes typos",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:134,reliability,doe,doesn,134,"> I looked into doxygen for the chi2FitTo() https://root.cern/doc/master/classRooAbsPdf.html#a77be869c84f102f1fce246c6f01b5b7d and it doesn't mention `Extended()` at all. So I think this should be added with proper explanation of the behaviour. > . > Furthermore doxygen for fitTo() https://root.cern/doc/master/classRooAbsPdf.html#a52c4a5926a161bcb72eab46890b0590e specifies that `Extended()` is off by default, while it should rather say that it is on if pdf is extended and off if it is not. That's a good point! In the final commit of this PR, I improved the documentation of the `Extended()` command argument. I have also added three more commits:. * some refactor to avoid code duplication in RooAbsReal and RooAbsPdf. * don't recommend the use of `RooChi2Var` directly in RooPlot documentation. * a commit that just fixes typos",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:673,safety,avoid,avoid,673,"> I looked into doxygen for the chi2FitTo() https://root.cern/doc/master/classRooAbsPdf.html#a77be869c84f102f1fce246c6f01b5b7d and it doesn't mention `Extended()` at all. So I think this should be added with proper explanation of the behaviour. > . > Furthermore doxygen for fitTo() https://root.cern/doc/master/classRooAbsPdf.html#a52c4a5926a161bcb72eab46890b0590e specifies that `Extended()` is off by default, while it should rather say that it is on if pdf is extended and off if it is not. That's a good point! In the final commit of this PR, I improved the documentation of the `Extended()` command argument. I have also added three more commits:. * some refactor to avoid code duplication in RooAbsReal and RooAbsPdf. * don't recommend the use of `RooChi2Var` directly in RooPlot documentation. * a commit that just fixes typos",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:234,usability,behavi,behaviour,234,"> I looked into doxygen for the chi2FitTo() https://root.cern/doc/master/classRooAbsPdf.html#a77be869c84f102f1fce246c6f01b5b7d and it doesn't mention `Extended()` at all. So I think this should be added with proper explanation of the behaviour. > . > Furthermore doxygen for fitTo() https://root.cern/doc/master/classRooAbsPdf.html#a52c4a5926a161bcb72eab46890b0590e specifies that `Extended()` is off by default, while it should rather say that it is on if pdf is extended and off if it is not. That's a good point! In the final commit of this PR, I improved the documentation of the `Extended()` command argument. I have also added three more commits:. * some refactor to avoid code duplication in RooAbsReal and RooAbsPdf. * don't recommend the use of `RooChi2Var` directly in RooPlot documentation. * a commit that just fixes typos",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:563,usability,document,documentation,563,"> I looked into doxygen for the chi2FitTo() https://root.cern/doc/master/classRooAbsPdf.html#a77be869c84f102f1fce246c6f01b5b7d and it doesn't mention `Extended()` at all. So I think this should be added with proper explanation of the behaviour. > . > Furthermore doxygen for fitTo() https://root.cern/doc/master/classRooAbsPdf.html#a52c4a5926a161bcb72eab46890b0590e specifies that `Extended()` is off by default, while it should rather say that it is on if pdf is extended and off if it is not. That's a good point! In the final commit of this PR, I improved the documentation of the `Extended()` command argument. I have also added three more commits:. * some refactor to avoid code duplication in RooAbsReal and RooAbsPdf. * don't recommend the use of `RooChi2Var` directly in RooPlot documentation. * a commit that just fixes typos",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:597,usability,command,command,597,"> I looked into doxygen for the chi2FitTo() https://root.cern/doc/master/classRooAbsPdf.html#a77be869c84f102f1fce246c6f01b5b7d and it doesn't mention `Extended()` at all. So I think this should be added with proper explanation of the behaviour. > . > Furthermore doxygen for fitTo() https://root.cern/doc/master/classRooAbsPdf.html#a52c4a5926a161bcb72eab46890b0590e specifies that `Extended()` is off by default, while it should rather say that it is on if pdf is extended and off if it is not. That's a good point! In the final commit of this PR, I improved the documentation of the `Extended()` command argument. I have also added three more commits:. * some refactor to avoid code duplication in RooAbsReal and RooAbsPdf. * don't recommend the use of `RooChi2Var` directly in RooPlot documentation. * a commit that just fixes typos",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:787,usability,document,documentation,787,"> I looked into doxygen for the chi2FitTo() https://root.cern/doc/master/classRooAbsPdf.html#a77be869c84f102f1fce246c6f01b5b7d and it doesn't mention `Extended()` at all. So I think this should be added with proper explanation of the behaviour. > . > Furthermore doxygen for fitTo() https://root.cern/doc/master/classRooAbsPdf.html#a52c4a5926a161bcb72eab46890b0590e specifies that `Extended()` is off by default, while it should rather say that it is on if pdf is extended and off if it is not. That's a good point! In the final commit of this PR, I improved the documentation of the `Extended()` command argument. I have also added three more commits:. * some refactor to avoid code duplication in RooAbsReal and RooAbsPdf. * don't recommend the use of `RooChi2Var` directly in RooPlot documentation. * a commit that just fixes typos",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:192,deployability,fail,failing-,192,"Looking at the docs of `createChi2` I see that it points to `RooChi2Var` ctor. Is it ok given that you are now discouraging usage of `RooChi2Var`? Furthermore, in https://root-forum.cern.ch/t/failing-chi2-fit/56309/8 you say that `createChi2` supports more options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:192,reliability,fail,failing-,192,"Looking at the docs of `createChi2` I see that it points to `RooChi2Var` ctor. Is it ok given that you are now discouraging usage of `RooChi2Var`? Furthermore, in https://root-forum.cern.ch/t/failing-chi2-fit/56309/8 you say that `createChi2` supports more options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:243,usability,support,supports,243,"Looking at the docs of `createChi2` I see that it points to `RooChi2Var` ctor. Is it ok given that you are now discouraging usage of `RooChi2Var`? Furthermore, in https://root-forum.cern.ch/t/failing-chi2-fit/56309/8 you say that `createChi2` supports more options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:305,availability,consist,consistent,305,"> Looking at the docs of `createChi2` I see that it points to `RooChi2Var` ctor. Is it ok given that you are now discouraging usage of `RooChi2Var`? Furthermore, in https://root-forum.cern.ch/t/failing-chi2-fit/56309/8 you say that `createChi2` supports more options. You are right, things are not really consistent in the RooFit Chi2 world, and you will find small bugs and inconsistencies under every stone you turn around I think. The chi2 are only third-class citizens in RooFit, and since they are not used that much they also didn't get much bugfixes in the last years :(. What I would prefer for now is to merge this PR first, as it already contains quite some changes. Then afterwards, I would like to revise the structure of these chi2 methods, before finally coming back to the docs. It doesn't make that much sense to ""optimize"" the docs when the interfaces will probably change anyway. For example, what I don't like is that there are overloads of `createChi2/fitToChi2` for each RooDataHist and RooDataSet, and also reimplementations in RooAbsPdf and RooAbsReal. There are so many entry points that the documentation gets overly verbose and it's hard to keep it in sync. The goal would be to only have one entry point for chi2 instantiation and fitting in RooAbsReal, and then bring all the docs there. Including the part that is not in RooChi2Var. Does that sound okay to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:194,deployability,fail,failing-,194,"> Looking at the docs of `createChi2` I see that it points to `RooChi2Var` ctor. Is it ok given that you are now discouraging usage of `RooChi2Var`? Furthermore, in https://root-forum.cern.ch/t/failing-chi2-fit/56309/8 you say that `createChi2` supports more options. You are right, things are not really consistent in the RooFit Chi2 world, and you will find small bugs and inconsistencies under every stone you turn around I think. The chi2 are only third-class citizens in RooFit, and since they are not used that much they also didn't get much bugfixes in the last years :(. What I would prefer for now is to merge this PR first, as it already contains quite some changes. Then afterwards, I would like to revise the structure of these chi2 methods, before finally coming back to the docs. It doesn't make that much sense to ""optimize"" the docs when the interfaces will probably change anyway. For example, what I don't like is that there are overloads of `createChi2/fitToChi2` for each RooDataHist and RooDataSet, and also reimplementations in RooAbsPdf and RooAbsReal. There are so many entry points that the documentation gets overly verbose and it's hard to keep it in sync. The goal would be to only have one entry point for chi2 instantiation and fitting in RooAbsReal, and then bring all the docs there. Including the part that is not in RooChi2Var. Does that sound okay to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:648,deployability,contain,contains,648,"> Looking at the docs of `createChi2` I see that it points to `RooChi2Var` ctor. Is it ok given that you are now discouraging usage of `RooChi2Var`? Furthermore, in https://root-forum.cern.ch/t/failing-chi2-fit/56309/8 you say that `createChi2` supports more options. You are right, things are not really consistent in the RooFit Chi2 world, and you will find small bugs and inconsistencies under every stone you turn around I think. The chi2 are only third-class citizens in RooFit, and since they are not used that much they also didn't get much bugfixes in the last years :(. What I would prefer for now is to merge this PR first, as it already contains quite some changes. Then afterwards, I would like to revise the structure of these chi2 methods, before finally coming back to the docs. It doesn't make that much sense to ""optimize"" the docs when the interfaces will probably change anyway. For example, what I don't like is that there are overloads of `createChi2/fitToChi2` for each RooDataHist and RooDataSet, and also reimplementations in RooAbsPdf and RooAbsReal. There are so many entry points that the documentation gets overly verbose and it's hard to keep it in sync. The goal would be to only have one entry point for chi2 instantiation and fitting in RooAbsReal, and then bring all the docs there. Including the part that is not in RooChi2Var. Does that sound okay to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:830,energy efficiency,optim,optimize,830,"> Looking at the docs of `createChi2` I see that it points to `RooChi2Var` ctor. Is it ok given that you are now discouraging usage of `RooChi2Var`? Furthermore, in https://root-forum.cern.ch/t/failing-chi2-fit/56309/8 you say that `createChi2` supports more options. You are right, things are not really consistent in the RooFit Chi2 world, and you will find small bugs and inconsistencies under every stone you turn around I think. The chi2 are only third-class citizens in RooFit, and since they are not used that much they also didn't get much bugfixes in the last years :(. What I would prefer for now is to merge this PR first, as it already contains quite some changes. Then afterwards, I would like to revise the structure of these chi2 methods, before finally coming back to the docs. It doesn't make that much sense to ""optimize"" the docs when the interfaces will probably change anyway. For example, what I don't like is that there are overloads of `createChi2/fitToChi2` for each RooDataHist and RooDataSet, and also reimplementations in RooAbsPdf and RooAbsReal. There are so many entry points that the documentation gets overly verbose and it's hard to keep it in sync. The goal would be to only have one entry point for chi2 instantiation and fitting in RooAbsReal, and then bring all the docs there. Including the part that is not in RooChi2Var. Does that sound okay to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:858,integrability,interfac,interfaces,858,"> Looking at the docs of `createChi2` I see that it points to `RooChi2Var` ctor. Is it ok given that you are now discouraging usage of `RooChi2Var`? Furthermore, in https://root-forum.cern.ch/t/failing-chi2-fit/56309/8 you say that `createChi2` supports more options. You are right, things are not really consistent in the RooFit Chi2 world, and you will find small bugs and inconsistencies under every stone you turn around I think. The chi2 are only third-class citizens in RooFit, and since they are not used that much they also didn't get much bugfixes in the last years :(. What I would prefer for now is to merge this PR first, as it already contains quite some changes. Then afterwards, I would like to revise the structure of these chi2 methods, before finally coming back to the docs. It doesn't make that much sense to ""optimize"" the docs when the interfaces will probably change anyway. For example, what I don't like is that there are overloads of `createChi2/fitToChi2` for each RooDataHist and RooDataSet, and also reimplementations in RooAbsPdf and RooAbsReal. There are so many entry points that the documentation gets overly verbose and it's hard to keep it in sync. The goal would be to only have one entry point for chi2 instantiation and fitting in RooAbsReal, and then bring all the docs there. Including the part that is not in RooChi2Var. Does that sound okay to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:858,interoperability,interfac,interfaces,858,"> Looking at the docs of `createChi2` I see that it points to `RooChi2Var` ctor. Is it ok given that you are now discouraging usage of `RooChi2Var`? Furthermore, in https://root-forum.cern.ch/t/failing-chi2-fit/56309/8 you say that `createChi2` supports more options. You are right, things are not really consistent in the RooFit Chi2 world, and you will find small bugs and inconsistencies under every stone you turn around I think. The chi2 are only third-class citizens in RooFit, and since they are not used that much they also didn't get much bugfixes in the last years :(. What I would prefer for now is to merge this PR first, as it already contains quite some changes. Then afterwards, I would like to revise the structure of these chi2 methods, before finally coming back to the docs. It doesn't make that much sense to ""optimize"" the docs when the interfaces will probably change anyway. For example, what I don't like is that there are overloads of `createChi2/fitToChi2` for each RooDataHist and RooDataSet, and also reimplementations in RooAbsPdf and RooAbsReal. There are so many entry points that the documentation gets overly verbose and it's hard to keep it in sync. The goal would be to only have one entry point for chi2 instantiation and fitting in RooAbsReal, and then bring all the docs there. Including the part that is not in RooChi2Var. Does that sound okay to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:858,modifiability,interfac,interfaces,858,"> Looking at the docs of `createChi2` I see that it points to `RooChi2Var` ctor. Is it ok given that you are now discouraging usage of `RooChi2Var`? Furthermore, in https://root-forum.cern.ch/t/failing-chi2-fit/56309/8 you say that `createChi2` supports more options. You are right, things are not really consistent in the RooFit Chi2 world, and you will find small bugs and inconsistencies under every stone you turn around I think. The chi2 are only third-class citizens in RooFit, and since they are not used that much they also didn't get much bugfixes in the last years :(. What I would prefer for now is to merge this PR first, as it already contains quite some changes. Then afterwards, I would like to revise the structure of these chi2 methods, before finally coming back to the docs. It doesn't make that much sense to ""optimize"" the docs when the interfaces will probably change anyway. For example, what I don't like is that there are overloads of `createChi2/fitToChi2` for each RooDataHist and RooDataSet, and also reimplementations in RooAbsPdf and RooAbsReal. There are so many entry points that the documentation gets overly verbose and it's hard to keep it in sync. The goal would be to only have one entry point for chi2 instantiation and fitting in RooAbsReal, and then bring all the docs there. Including the part that is not in RooChi2Var. Does that sound okay to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:830,performance,optimiz,optimize,830,"> Looking at the docs of `createChi2` I see that it points to `RooChi2Var` ctor. Is it ok given that you are now discouraging usage of `RooChi2Var`? Furthermore, in https://root-forum.cern.ch/t/failing-chi2-fit/56309/8 you say that `createChi2` supports more options. You are right, things are not really consistent in the RooFit Chi2 world, and you will find small bugs and inconsistencies under every stone you turn around I think. The chi2 are only third-class citizens in RooFit, and since they are not used that much they also didn't get much bugfixes in the last years :(. What I would prefer for now is to merge this PR first, as it already contains quite some changes. Then afterwards, I would like to revise the structure of these chi2 methods, before finally coming back to the docs. It doesn't make that much sense to ""optimize"" the docs when the interfaces will probably change anyway. For example, what I don't like is that there are overloads of `createChi2/fitToChi2` for each RooDataHist and RooDataSet, and also reimplementations in RooAbsPdf and RooAbsReal. There are so many entry points that the documentation gets overly verbose and it's hard to keep it in sync. The goal would be to only have one entry point for chi2 instantiation and fitting in RooAbsReal, and then bring all the docs there. Including the part that is not in RooChi2Var. Does that sound okay to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:194,reliability,fail,failing-,194,"> Looking at the docs of `createChi2` I see that it points to `RooChi2Var` ctor. Is it ok given that you are now discouraging usage of `RooChi2Var`? Furthermore, in https://root-forum.cern.ch/t/failing-chi2-fit/56309/8 you say that `createChi2` supports more options. You are right, things are not really consistent in the RooFit Chi2 world, and you will find small bugs and inconsistencies under every stone you turn around I think. The chi2 are only third-class citizens in RooFit, and since they are not used that much they also didn't get much bugfixes in the last years :(. What I would prefer for now is to merge this PR first, as it already contains quite some changes. Then afterwards, I would like to revise the structure of these chi2 methods, before finally coming back to the docs. It doesn't make that much sense to ""optimize"" the docs when the interfaces will probably change anyway. For example, what I don't like is that there are overloads of `createChi2/fitToChi2` for each RooDataHist and RooDataSet, and also reimplementations in RooAbsPdf and RooAbsReal. There are so many entry points that the documentation gets overly verbose and it's hard to keep it in sync. The goal would be to only have one entry point for chi2 instantiation and fitting in RooAbsReal, and then bring all the docs there. Including the part that is not in RooChi2Var. Does that sound okay to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:797,reliability,doe,doesn,797,"> Looking at the docs of `createChi2` I see that it points to `RooChi2Var` ctor. Is it ok given that you are now discouraging usage of `RooChi2Var`? Furthermore, in https://root-forum.cern.ch/t/failing-chi2-fit/56309/8 you say that `createChi2` supports more options. You are right, things are not really consistent in the RooFit Chi2 world, and you will find small bugs and inconsistencies under every stone you turn around I think. The chi2 are only third-class citizens in RooFit, and since they are not used that much they also didn't get much bugfixes in the last years :(. What I would prefer for now is to merge this PR first, as it already contains quite some changes. Then afterwards, I would like to revise the structure of these chi2 methods, before finally coming back to the docs. It doesn't make that much sense to ""optimize"" the docs when the interfaces will probably change anyway. For example, what I don't like is that there are overloads of `createChi2/fitToChi2` for each RooDataHist and RooDataSet, and also reimplementations in RooAbsPdf and RooAbsReal. There are so many entry points that the documentation gets overly verbose and it's hard to keep it in sync. The goal would be to only have one entry point for chi2 instantiation and fitting in RooAbsReal, and then bring all the docs there. Including the part that is not in RooChi2Var. Does that sound okay to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:1362,reliability,Doe,Does,1362,"> Looking at the docs of `createChi2` I see that it points to `RooChi2Var` ctor. Is it ok given that you are now discouraging usage of `RooChi2Var`? Furthermore, in https://root-forum.cern.ch/t/failing-chi2-fit/56309/8 you say that `createChi2` supports more options. You are right, things are not really consistent in the RooFit Chi2 world, and you will find small bugs and inconsistencies under every stone you turn around I think. The chi2 are only third-class citizens in RooFit, and since they are not used that much they also didn't get much bugfixes in the last years :(. What I would prefer for now is to merge this PR first, as it already contains quite some changes. Then afterwards, I would like to revise the structure of these chi2 methods, before finally coming back to the docs. It doesn't make that much sense to ""optimize"" the docs when the interfaces will probably change anyway. For example, what I don't like is that there are overloads of `createChi2/fitToChi2` for each RooDataHist and RooDataSet, and also reimplementations in RooAbsPdf and RooAbsReal. There are so many entry points that the documentation gets overly verbose and it's hard to keep it in sync. The goal would be to only have one entry point for chi2 instantiation and fitting in RooAbsReal, and then bring all the docs there. Including the part that is not in RooChi2Var. Does that sound okay to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:245,usability,support,supports,245,"> Looking at the docs of `createChi2` I see that it points to `RooChi2Var` ctor. Is it ok given that you are now discouraging usage of `RooChi2Var`? Furthermore, in https://root-forum.cern.ch/t/failing-chi2-fit/56309/8 you say that `createChi2` supports more options. You are right, things are not really consistent in the RooFit Chi2 world, and you will find small bugs and inconsistencies under every stone you turn around I think. The chi2 are only third-class citizens in RooFit, and since they are not used that much they also didn't get much bugfixes in the last years :(. What I would prefer for now is to merge this PR first, as it already contains quite some changes. Then afterwards, I would like to revise the structure of these chi2 methods, before finally coming back to the docs. It doesn't make that much sense to ""optimize"" the docs when the interfaces will probably change anyway. For example, what I don't like is that there are overloads of `createChi2/fitToChi2` for each RooDataHist and RooDataSet, and also reimplementations in RooAbsPdf and RooAbsReal. There are so many entry points that the documentation gets overly verbose and it's hard to keep it in sync. The goal would be to only have one entry point for chi2 instantiation and fitting in RooAbsReal, and then bring all the docs there. Including the part that is not in RooChi2Var. Does that sound okay to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:305,usability,consist,consistent,305,"> Looking at the docs of `createChi2` I see that it points to `RooChi2Var` ctor. Is it ok given that you are now discouraging usage of `RooChi2Var`? Furthermore, in https://root-forum.cern.ch/t/failing-chi2-fit/56309/8 you say that `createChi2` supports more options. You are right, things are not really consistent in the RooFit Chi2 world, and you will find small bugs and inconsistencies under every stone you turn around I think. The chi2 are only third-class citizens in RooFit, and since they are not used that much they also didn't get much bugfixes in the last years :(. What I would prefer for now is to merge this PR first, as it already contains quite some changes. Then afterwards, I would like to revise the structure of these chi2 methods, before finally coming back to the docs. It doesn't make that much sense to ""optimize"" the docs when the interfaces will probably change anyway. For example, what I don't like is that there are overloads of `createChi2/fitToChi2` for each RooDataHist and RooDataSet, and also reimplementations in RooAbsPdf and RooAbsReal. There are so many entry points that the documentation gets overly verbose and it's hard to keep it in sync. The goal would be to only have one entry point for chi2 instantiation and fitting in RooAbsReal, and then bring all the docs there. Including the part that is not in RooChi2Var. Does that sound okay to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:592,usability,prefer,prefer,592,"> Looking at the docs of `createChi2` I see that it points to `RooChi2Var` ctor. Is it ok given that you are now discouraging usage of `RooChi2Var`? Furthermore, in https://root-forum.cern.ch/t/failing-chi2-fit/56309/8 you say that `createChi2` supports more options. You are right, things are not really consistent in the RooFit Chi2 world, and you will find small bugs and inconsistencies under every stone you turn around I think. The chi2 are only third-class citizens in RooFit, and since they are not used that much they also didn't get much bugfixes in the last years :(. What I would prefer for now is to merge this PR first, as it already contains quite some changes. Then afterwards, I would like to revise the structure of these chi2 methods, before finally coming back to the docs. It doesn't make that much sense to ""optimize"" the docs when the interfaces will probably change anyway. For example, what I don't like is that there are overloads of `createChi2/fitToChi2` for each RooDataHist and RooDataSet, and also reimplementations in RooAbsPdf and RooAbsReal. There are so many entry points that the documentation gets overly verbose and it's hard to keep it in sync. The goal would be to only have one entry point for chi2 instantiation and fitting in RooAbsReal, and then bring all the docs there. Including the part that is not in RooChi2Var. Does that sound okay to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13638:1116,usability,document,documentation,1116,"> Looking at the docs of `createChi2` I see that it points to `RooChi2Var` ctor. Is it ok given that you are now discouraging usage of `RooChi2Var`? Furthermore, in https://root-forum.cern.ch/t/failing-chi2-fit/56309/8 you say that `createChi2` supports more options. You are right, things are not really consistent in the RooFit Chi2 world, and you will find small bugs and inconsistencies under every stone you turn around I think. The chi2 are only third-class citizens in RooFit, and since they are not used that much they also didn't get much bugfixes in the last years :(. What I would prefer for now is to merge this PR first, as it already contains quite some changes. Then afterwards, I would like to revise the structure of these chi2 methods, before finally coming back to the docs. It doesn't make that much sense to ""optimize"" the docs when the interfaces will probably change anyway. For example, what I don't like is that there are overloads of `createChi2/fitToChi2` for each RooDataHist and RooDataSet, and also reimplementations in RooAbsPdf and RooAbsReal. There are so many entry points that the documentation gets overly verbose and it's hard to keep it in sync. The goal would be to only have one entry point for chi2 instantiation and fitting in RooAbsReal, and then bring all the docs there. Including the part that is not in RooChi2Var. Does that sound okay to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13638
https://github.com/root-project/root/pull/13641:0,deployability,Updat,Updated,0,"Updated to address the C++20ism and a few of the comments in #13000. In particular:. * Almost drop in replacement by exposing just an expand() method. * Now also used in the SourceManager, for and additional gain of ~ 10 MB on the initial ROOT overhead (from 82 to 53MB in my synthetic test).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:244,performance,overhead,overhead,244,"Updated to address the C++20ism and a few of the comments in #13000. In particular:. * Almost drop in replacement by exposing just an expand() method. * Now also used in the SourceManager, for and additional gain of ~ 10 MB on the initial ROOT overhead (from 82 to 53MB in my synthetic test).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:0,safety,Updat,Updated,0,"Updated to address the C++20ism and a few of the comments in #13000. In particular:. * Almost drop in replacement by exposing just an expand() method. * Now also used in the SourceManager, for and additional gain of ~ 10 MB on the initial ROOT overhead (from 82 to 53MB in my synthetic test).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:286,safety,test,test,286,"Updated to address the C++20ism and a few of the comments in #13000. In particular:. * Almost drop in replacement by exposing just an expand() method. * Now also used in the SourceManager, for and additional gain of ~ 10 MB on the initial ROOT overhead (from 82 to 53MB in my synthetic test).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:0,security,Updat,Updated,0,"Updated to address the C++20ism and a few of the comments in #13000. In particular:. * Almost drop in replacement by exposing just an expand() method. * Now also used in the SourceManager, for and additional gain of ~ 10 MB on the initial ROOT overhead (from 82 to 53MB in my synthetic test).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:117,security,expos,exposing,117,"Updated to address the C++20ism and a few of the comments in #13000. In particular:. * Almost drop in replacement by exposing just an expand() method. * Now also used in the SourceManager, for and additional gain of ~ 10 MB on the initial ROOT overhead (from 82 to 53MB in my synthetic test).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:286,testability,test,test,286,"Updated to address the C++20ism and a few of the comments in #13000. In particular:. * Almost drop in replacement by exposing just an expand() method. * Now also used in the SourceManager, for and additional gain of ~ 10 MB on the initial ROOT overhead (from 82 to 53MB in my synthetic test).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:216,integrability,topic,topic,216,Please note that any change *must* land in `master` first and that we track changes to `interpreter/llvm-project` via https://github.com/root-project/llvm-project/. Ideally this should go via upstream first; for the topic if data structures please have a look at https://www.llvm.org/docs/ProgrammersManual.html#picking-the-right-data-structure-for-a-task,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:155,deployability,patch,patches,155,"Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:258,deployability,stack,stack,258,"Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:155,safety,patch,patches,155,"Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:155,security,patch,patches,155,"Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:177,testability,simpl,simplifies,177,"Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:177,usability,simpl,simplifies,177,"Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:49,energy efficiency,green,green,49,"On a separate note, are the tests supposed to be green?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:28,safety,test,tests,28,"On a separate note, are the tests supposed to be green?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:28,testability,test,tests,28,"On a separate note, are the tests supposed to be green?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:157,deployability,patch,patches,157,"> Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Yes understood :). > Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness. I'm not sure there is one already, but it has some comments to make about `std::vector` (because I saw you mentioning `std::pmr::vector`. If there is none yet (but I think Vassil mentioned one? maybe it's not listed in that document), it should likely be added to LLVM's ADT library first and then used in Clang. > On a separate note, are the tests supposed to be green? Yes, and from a quick look it seems ~all builds are failing with. ```. Assertion `Index < TypesLoaded.size() && ""Type index out-of-range""' failed. ```. which very much sounds like it is caused by the changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:260,deployability,stack,stack,260,"> Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Yes understood :). > Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness. I'm not sure there is one already, but it has some comments to make about `std::vector` (because I saw you mentioning `std::pmr::vector`. If there is none yet (but I think Vassil mentioned one? maybe it's not listed in that document), it should likely be added to LLVM's ADT library first and then used in Clang. > On a separate note, are the tests supposed to be green? Yes, and from a quick look it seems ~all builds are failing with. ```. Assertion `Index < TypesLoaded.size() && ""Type index out-of-range""' failed. ```. which very much sounds like it is caused by the changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:815,deployability,build,builds,815,"> Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Yes understood :). > Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness. I'm not sure there is one already, but it has some comments to make about `std::vector` (because I saw you mentioning `std::pmr::vector`. If there is none yet (but I think Vassil mentioned one? maybe it's not listed in that document), it should likely be added to LLVM's ADT library first and then used in Clang. > On a separate note, are the tests supposed to be green? Yes, and from a quick look it seems ~all builds are failing with. ```. Assertion `Index < TypesLoaded.size() && ""Type index out-of-range""' failed. ```. which very much sounds like it is caused by the changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:826,deployability,fail,failing,826,"> Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Yes understood :). > Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness. I'm not sure there is one already, but it has some comments to make about `std::vector` (because I saw you mentioning `std::pmr::vector`. If there is none yet (but I think Vassil mentioned one? maybe it's not listed in that document), it should likely be added to LLVM's ADT library first and then used in Clang. > On a separate note, are the tests supposed to be green? Yes, and from a quick look it seems ~all builds are failing with. ```. Assertion `Index < TypesLoaded.size() && ""Type index out-of-range""' failed. ```. which very much sounds like it is caused by the changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:913,deployability,fail,failed,913,"> Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Yes understood :). > Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness. I'm not sure there is one already, but it has some comments to make about `std::vector` (because I saw you mentioning `std::pmr::vector`. If there is none yet (but I think Vassil mentioned one? maybe it's not listed in that document), it should likely be added to LLVM's ADT library first and then used in Clang. > On a separate note, are the tests supposed to be green? Yes, and from a quick look it seems ~all builds are failing with. ```. Assertion `Index < TypesLoaded.size() && ""Type index out-of-range""' failed. ```. which very much sounds like it is caused by the changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:767,energy efficiency,green,green,767,"> Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Yes understood :). > Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness. I'm not sure there is one already, but it has some comments to make about `std::vector` (because I saw you mentioning `std::pmr::vector`. If there is none yet (but I think Vassil mentioned one? maybe it's not listed in that document), it should likely be added to LLVM's ADT library first and then used in Clang. > On a separate note, are the tests supposed to be green? Yes, and from a quick look it seems ~all builds are failing with. ```. Assertion `Index < TypesLoaded.size() && ""Type index out-of-range""' failed. ```. which very much sounds like it is caused by the changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:826,reliability,fail,failing,826,"> Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Yes understood :). > Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness. I'm not sure there is one already, but it has some comments to make about `std::vector` (because I saw you mentioning `std::pmr::vector`. If there is none yet (but I think Vassil mentioned one? maybe it's not listed in that document), it should likely be added to LLVM's ADT library first and then used in Clang. > On a separate note, are the tests supposed to be green? Yes, and from a quick look it seems ~all builds are failing with. ```. Assertion `Index < TypesLoaded.size() && ""Type index out-of-range""' failed. ```. which very much sounds like it is caused by the changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:913,reliability,fail,failed,913,"> Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Yes understood :). > Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness. I'm not sure there is one already, but it has some comments to make about `std::vector` (because I saw you mentioning `std::pmr::vector`. If there is none yet (but I think Vassil mentioned one? maybe it's not listed in that document), it should likely be added to LLVM's ADT library first and then used in Clang. > On a separate note, are the tests supposed to be green? Yes, and from a quick look it seems ~all builds are failing with. ```. Assertion `Index < TypesLoaded.size() && ""Type index out-of-range""' failed. ```. which very much sounds like it is caused by the changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:157,safety,patch,patches,157,"> Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Yes understood :). > Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness. I'm not sure there is one already, but it has some comments to make about `std::vector` (because I saw you mentioning `std::pmr::vector`. If there is none yet (but I think Vassil mentioned one? maybe it's not listed in that document), it should likely be added to LLVM's ADT library first and then used in Clang. > On a separate note, are the tests supposed to be green? Yes, and from a quick look it seems ~all builds are failing with. ```. Assertion `Index < TypesLoaded.size() && ""Type index out-of-range""' failed. ```. which very much sounds like it is caused by the changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:746,safety,test,tests,746,"> Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Yes understood :). > Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness. I'm not sure there is one already, but it has some comments to make about `std::vector` (because I saw you mentioning `std::pmr::vector`. If there is none yet (but I think Vassil mentioned one? maybe it's not listed in that document), it should likely be added to LLVM's ADT library first and then used in Clang. > On a separate note, are the tests supposed to be green? Yes, and from a quick look it seems ~all builds are failing with. ```. Assertion `Index < TypesLoaded.size() && ""Type index out-of-range""' failed. ```. which very much sounds like it is caused by the changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:157,security,patch,patches,157,"> Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Yes understood :). > Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness. I'm not sure there is one already, but it has some comments to make about `std::vector` (because I saw you mentioning `std::pmr::vector`. If there is none yet (but I think Vassil mentioned one? maybe it's not listed in that document), it should likely be added to LLVM's ADT library first and then used in Clang. > On a separate note, are the tests supposed to be green? Yes, and from a quick look it seems ~all builds are failing with. ```. Assertion `Index < TypesLoaded.size() && ""Type index out-of-range""' failed. ```. which very much sounds like it is caused by the changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:179,testability,simpl,simplifies,179,"> Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Yes understood :). > Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness. I'm not sure there is one already, but it has some comments to make about `std::vector` (because I saw you mentioning `std::pmr::vector`. If there is none yet (but I think Vassil mentioned one? maybe it's not listed in that document), it should likely be added to LLVM's ADT library first and then used in Clang. > On a separate note, are the tests supposed to be green? Yes, and from a quick look it seems ~all builds are failing with. ```. Assertion `Index < TypesLoaded.size() && ""Type index out-of-range""' failed. ```. which very much sounds like it is caused by the changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:746,testability,test,tests,746,"> Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Yes understood :). > Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness. I'm not sure there is one already, but it has some comments to make about `std::vector` (because I saw you mentioning `std::pmr::vector`. If there is none yet (but I think Vassil mentioned one? maybe it's not listed in that document), it should likely be added to LLVM's ADT library first and then used in Clang. > On a separate note, are the tests supposed to be green? Yes, and from a quick look it seems ~all builds are failing with. ```. Assertion `Index < TypesLoaded.size() && ""Type index out-of-range""' failed. ```. which very much sounds like it is caused by the changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:845,testability,Assert,Assertion,845,"> Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Yes understood :). > Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness. I'm not sure there is one already, but it has some comments to make about `std::vector` (because I saw you mentioning `std::pmr::vector`. If there is none yet (but I think Vassil mentioned one? maybe it's not listed in that document), it should likely be added to LLVM's ADT library first and then used in Clang. > On a separate note, are the tests supposed to be green? Yes, and from a quick look it seems ~all builds are failing with. ```. Assertion `Index < TypesLoaded.size() && ""Type index out-of-range""' failed. ```. which very much sounds like it is caused by the changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:179,usability,simpl,simplifies,179,"> Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Yes understood :). > Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness. I'm not sure there is one already, but it has some comments to make about `std::vector` (because I saw you mentioning `std::pmr::vector`. If there is none yet (but I think Vassil mentioned one? maybe it's not listed in that document), it should likely be added to LLVM's ADT library first and then used in Clang. > On a separate note, are the tests supposed to be green? Yes, and from a quick look it seems ~all builds are failing with. ```. Assertion `Index < TypesLoaded.size() && ""Type index out-of-range""' failed. ```. which very much sounds like it is caused by the changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:627,usability,document,document,627,"> Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Yes understood :). > Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness. I'm not sure there is one already, but it has some comments to make about `std::vector` (because I saw you mentioning `std::pmr::vector`. If there is none yet (but I think Vassil mentioned one? maybe it's not listed in that document), it should likely be added to LLVM's ADT library first and then used in Clang. > On a separate note, are the tests supposed to be green? Yes, and from a quick look it seems ~all builds are failing with. ```. Assertion `Index < TypesLoaded.size() && ""Type index out-of-range""' failed. ```. which very much sounds like it is caused by the changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:11,deployability,build,build,11,@phsft-bot build with flags -Dasan=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:2,deployability,manag,managed,2,I managed to reproduce and fix the issue (mSize was not initialised) however I still get the assertions here. Could it be there is some incremental build issue? Do you build every time from scratch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:148,deployability,build,build,148,I managed to reproduce and fix the issue (mSize was not initialised) however I still get the assertions here. Could it be there is some incremental build issue? Do you build every time from scratch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:168,deployability,build,build,168,I managed to reproduce and fix the issue (mSize was not initialised) however I still get the assertions here. Could it be there is some incremental build issue? Do you build every time from scratch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:2,energy efficiency,manag,managed,2,I managed to reproduce and fix the issue (mSize was not initialised) however I still get the assertions here. Could it be there is some incremental build issue? Do you build every time from scratch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:180,performance,time,time,180,I managed to reproduce and fix the issue (mSize was not initialised) however I still get the assertions here. Could it be there is some incremental build issue? Do you build every time from scratch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:2,safety,manag,managed,2,I managed to reproduce and fix the issue (mSize was not initialised) however I still get the assertions here. Could it be there is some incremental build issue? Do you build every time from scratch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:93,testability,assert,assertions,93,I managed to reproduce and fix the issue (mSize was not initialised) however I still get the assertions here. Could it be there is some incremental build issue? Do you build every time from scratch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:11,deployability,build,build,11,@phsft-bot build mac12arm/cxx20,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:11,deployability,build,build,11,@phsft-bot build with flags -DLLVM_BUILD_TYPE=RelWithDebInfo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:101,availability,replic,replicate,101,"> @ktf can you please not debug in Jenkins? This should be investigated offline! Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)? Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:681,availability,state,statements,681,"> @ktf can you please not debug in Jenkins? This should be investigated offline! Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)? Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:283,deployability,fail,failing,283,"> @ktf can you please not debug in Jenkins? This should be investigated offline! Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)? Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:399,deployability,build,builder,399,"> @ktf can you please not debug in Jenkins? This should be investigated offline! Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)? Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:415,deployability,fail,failing,415,"> @ktf can you please not debug in Jenkins? This should be investigated offline! Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)? Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:540,deployability,build,builders,540,"> @ktf can you please not debug in Jenkins? This should be investigated offline! Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)? Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:609,deployability,resourc,resource,609,"> @ktf can you please not debug in Jenkins? This should be investigated offline! Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)? Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:711,deployability,build,builds,711,"> @ktf can you please not debug in Jenkins? This should be investigated offline! Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)? Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:739,deployability,fail,fails,739,"> @ktf can you please not debug in Jenkins? This should be investigated offline! Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)? Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:609,energy efficiency,resource usag,resource usage,609,"> @ktf can you please not debug in Jenkins? This should be investigated offline! Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)? Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:681,integrability,state,statements,681,"> @ktf can you please not debug in Jenkins? This should be investigated offline! Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)? Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:592,modifiability,concern,concern,592,"> @ktf can you please not debug in Jenkins? This should be investigated offline! Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)? Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:609,performance,resourc,resource,609,"> @ktf can you please not debug in Jenkins? This should be investigated offline! Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)? Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:283,reliability,fail,failing,283,"> @ktf can you please not debug in Jenkins? This should be investigated offline! Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)? Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:415,reliability,fail,failing,415,"> @ktf can you please not debug in Jenkins? This should be investigated offline! Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)? Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:739,reliability,fail,fails,739,"> @ktf can you please not debug in Jenkins? This should be investigated offline! Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)? Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:570,safety,test,testing,570,"> @ktf can you please not debug in Jenkins? This should be investigated offline! Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)? Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:609,safety,resourc,resource,609,"> @ktf can you please not debug in Jenkins? This should be investigated offline! Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)? Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:660,safety,test,testing,660,"> @ktf can you please not debug in Jenkins? This should be investigated offline! Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)? Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:324,security,access,access,324,"> @ktf can you please not debug in Jenkins? This should be investigated offline! Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)? Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:381,security,access,access,381,"> @ktf can you please not debug in Jenkins? This should be investigated offline! Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)? Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:208,testability,ASSERT,ASSERT,208,"> @ktf can you please not debug in Jenkins? This should be investigated offline! Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)? Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:501,testability,hook,hooked,501,"> @ktf can you please not debug in Jenkins? This should be investigated offline! Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)? Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:570,testability,test,testing,570,"> @ktf can you please not debug in Jenkins? This should be investigated offline! Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)? Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:592,testability,concern,concern,592,"> @ktf can you please not debug in Jenkins? This should be investigated offline! Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)? Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:609,testability,resourc,resource,609,"> @ktf can you please not debug in Jenkins? This should be investigated offline! Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)? Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:660,testability,test,testing,660,"> @ktf can you please not debug in Jenkins? This should be investigated offline! Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)? Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:109,availability,replic,replicate,109,"> > @ktf can you please not debug in Jenkins? This should be investigated offline! > . > Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? I can quite easily reproduce it on EL8 with the exact `cmake` command from the Jenkins log. The important piece seems to be `-DCMAKE_CXX_STANDARD=14`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:291,deployability,fail,failing,291,"> > @ktf can you please not debug in Jenkins? This should be investigated offline! > . > Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? I can quite easily reproduce it on EL8 with the exact `cmake` command from the Jenkins log. The important piece seems to be `-DCMAKE_CXX_STANDARD=14`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:433,deployability,log,log,433,"> > @ktf can you please not debug in Jenkins? This should be investigated offline! > . > Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? I can quite easily reproduce it on EL8 with the exact `cmake` command from the Jenkins log. The important piece seems to be `-DCMAKE_CXX_STANDARD=14`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:291,reliability,fail,failing,291,"> > @ktf can you please not debug in Jenkins? This should be investigated offline! > . > Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? I can quite easily reproduce it on EL8 with the exact `cmake` command from the Jenkins log. The important piece seems to be `-DCMAKE_CXX_STANDARD=14`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:433,safety,log,log,433,"> > @ktf can you please not debug in Jenkins? This should be investigated offline! > . > Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? I can quite easily reproduce it on EL8 with the exact `cmake` command from the Jenkins log. The important piece seems to be `-DCMAKE_CXX_STANDARD=14`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:332,security,access,access,332,"> > @ktf can you please not debug in Jenkins? This should be investigated offline! > . > Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? I can quite easily reproduce it on EL8 with the exact `cmake` command from the Jenkins log. The important piece seems to be `-DCMAKE_CXX_STANDARD=14`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:433,security,log,log,433,"> > @ktf can you please not debug in Jenkins? This should be investigated offline! > . > Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? I can quite easily reproduce it on EL8 with the exact `cmake` command from the Jenkins log. The important piece seems to be `-DCMAKE_CXX_STANDARD=14`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:216,testability,ASSERT,ASSERT,216,"> > @ktf can you please not debug in Jenkins? This should be investigated offline! > . > Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? I can quite easily reproduce it on EL8 with the exact `cmake` command from the Jenkins log. The important piece seems to be `-DCMAKE_CXX_STANDARD=14`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:433,testability,log,log,433,"> > @ktf can you please not debug in Jenkins? This should be investigated offline! > . > Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? I can quite easily reproduce it on EL8 with the exact `cmake` command from the Jenkins log. The important piece seems to be `-DCMAKE_CXX_STANDARD=14`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:408,usability,command,command,408,"> > @ktf can you please not debug in Jenkins? This should be investigated offline! > . > Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it? I can quite easily reproduce it on EL8 with the exact `cmake` command from the Jenkins log. The important piece seems to be `-DCMAKE_CXX_STANDARD=14`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:298,availability,replic,replicate,298,"ok, i will try that. indeed in alice we need to use c++17. I will try. without. Ciao,. Giulio. On Sat, Sep 16 2023 at 8:32 PM, Jonas Hahnfeld ***@***.***>. wrote:. > @ktf <https://github.com/ktf> can you please not debug in Jenkins? This. > should be investigated offline! >. > Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and. > centos with a number of combinations of the various -D*ASSERT*=ON,. > -DCMAKE_BUILD_TYPE=* I can possibly think of. If you have a failing. > environment could you provide me access to it? >. > I can quite easily reproduce it on EL8 with the exact cmake command from. > the Jenkins log. The important piece seems to be -DCMAKE_CXX_STANDARD=14. >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/13641#issuecomment-1722289138>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AAACSMFXWNET6PLRILOVARLX2XWDPANCNFSM6AAAAAA4VAKC3A>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:482,deployability,fail,failing,482,"ok, i will try that. indeed in alice we need to use c++17. I will try. without. Ciao,. Giulio. On Sat, Sep 16 2023 at 8:32 PM, Jonas Hahnfeld ***@***.***>. wrote:. > @ktf <https://github.com/ktf> can you please not debug in Jenkins? This. > should be investigated offline! >. > Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and. > centos with a number of combinations of the various -D*ASSERT*=ON,. > -DCMAKE_BUILD_TYPE=* I can possibly think of. If you have a failing. > environment could you provide me access to it? >. > I can quite easily reproduce it on EL8 with the exact cmake command from. > the Jenkins log. The important piece seems to be -DCMAKE_CXX_STANDARD=14. >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/13641#issuecomment-1722289138>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AAACSMFXWNET6PLRILOVARLX2XWDPANCNFSM6AAAAAA4VAKC3A>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:633,deployability,log,log,633,"ok, i will try that. indeed in alice we need to use c++17. I will try. without. Ciao,. Giulio. On Sat, Sep 16 2023 at 8:32 PM, Jonas Hahnfeld ***@***.***>. wrote:. > @ktf <https://github.com/ktf> can you please not debug in Jenkins? This. > should be investigated offline! >. > Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and. > centos with a number of combinations of the various -D*ASSERT*=ON,. > -DCMAKE_BUILD_TYPE=* I can possibly think of. If you have a failing. > environment could you provide me access to it? >. > I can quite easily reproduce it on EL8 with the exact cmake command from. > the Jenkins log. The important piece seems to be -DCMAKE_CXX_STANDARD=14. >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/13641#issuecomment-1722289138>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AAACSMFXWNET6PLRILOVARLX2XWDPANCNFSM6AAAAAA4VAKC3A>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:1012,integrability,Messag,Message,1012,"ok, i will try that. indeed in alice we need to use c++17. I will try. without. Ciao,. Giulio. On Sat, Sep 16 2023 at 8:32 PM, Jonas Hahnfeld ***@***.***>. wrote:. > @ktf <https://github.com/ktf> can you please not debug in Jenkins? This. > should be investigated offline! >. > Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and. > centos with a number of combinations of the various -D*ASSERT*=ON,. > -DCMAKE_BUILD_TYPE=* I can possibly think of. If you have a failing. > environment could you provide me access to it? >. > I can quite easily reproduce it on EL8 with the exact cmake command from. > the Jenkins log. The important piece seems to be -DCMAKE_CXX_STANDARD=14. >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/13641#issuecomment-1722289138>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AAACSMFXWNET6PLRILOVARLX2XWDPANCNFSM6AAAAAA4VAKC3A>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:1012,interoperability,Messag,Message,1012,"ok, i will try that. indeed in alice we need to use c++17. I will try. without. Ciao,. Giulio. On Sat, Sep 16 2023 at 8:32 PM, Jonas Hahnfeld ***@***.***>. wrote:. > @ktf <https://github.com/ktf> can you please not debug in Jenkins? This. > should be investigated offline! >. > Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and. > centos with a number of combinations of the various -D*ASSERT*=ON,. > -DCMAKE_BUILD_TYPE=* I can possibly think of. If you have a failing. > environment could you provide me access to it? >. > I can quite easily reproduce it on EL8 with the exact cmake command from. > the Jenkins log. The important piece seems to be -DCMAKE_CXX_STANDARD=14. >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/13641#issuecomment-1722289138>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AAACSMFXWNET6PLRILOVARLX2XWDPANCNFSM6AAAAAA4VAKC3A>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:482,reliability,fail,failing,482,"ok, i will try that. indeed in alice we need to use c++17. I will try. without. Ciao,. Giulio. On Sat, Sep 16 2023 at 8:32 PM, Jonas Hahnfeld ***@***.***>. wrote:. > @ktf <https://github.com/ktf> can you please not debug in Jenkins? This. > should be investigated offline! >. > Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and. > centos with a number of combinations of the various -D*ASSERT*=ON,. > -DCMAKE_BUILD_TYPE=* I can possibly think of. If you have a failing. > environment could you provide me access to it? >. > I can quite easily reproduce it on EL8 with the exact cmake command from. > the Jenkins log. The important piece seems to be -DCMAKE_CXX_STANDARD=14. >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/13641#issuecomment-1722289138>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AAACSMFXWNET6PLRILOVARLX2XWDPANCNFSM6AAAAAA4VAKC3A>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:633,safety,log,log,633,"ok, i will try that. indeed in alice we need to use c++17. I will try. without. Ciao,. Giulio. On Sat, Sep 16 2023 at 8:32 PM, Jonas Hahnfeld ***@***.***>. wrote:. > @ktf <https://github.com/ktf> can you please not debug in Jenkins? This. > should be investigated offline! >. > Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and. > centos with a number of combinations of the various -D*ASSERT*=ON,. > -DCMAKE_BUILD_TYPE=* I can possibly think of. If you have a failing. > environment could you provide me access to it? >. > I can quite easily reproduce it on EL8 with the exact cmake command from. > the Jenkins log. The important piece seems to be -DCMAKE_CXX_STANDARD=14. >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/13641#issuecomment-1722289138>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AAACSMFXWNET6PLRILOVARLX2XWDPANCNFSM6AAAAAA4VAKC3A>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:526,security,access,access,526,"ok, i will try that. indeed in alice we need to use c++17. I will try. without. Ciao,. Giulio. On Sat, Sep 16 2023 at 8:32 PM, Jonas Hahnfeld ***@***.***>. wrote:. > @ktf <https://github.com/ktf> can you please not debug in Jenkins? This. > should be investigated offline! >. > Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and. > centos with a number of combinations of the various -D*ASSERT*=ON,. > -DCMAKE_BUILD_TYPE=* I can possibly think of. If you have a failing. > environment could you provide me access to it? >. > I can quite easily reproduce it on EL8 with the exact cmake command from. > the Jenkins log. The important piece seems to be -DCMAKE_CXX_STANDARD=14. >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/13641#issuecomment-1722289138>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AAACSMFXWNET6PLRILOVARLX2XWDPANCNFSM6AAAAAA4VAKC3A>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:633,security,log,log,633,"ok, i will try that. indeed in alice we need to use c++17. I will try. without. Ciao,. Giulio. On Sat, Sep 16 2023 at 8:32 PM, Jonas Hahnfeld ***@***.***>. wrote:. > @ktf <https://github.com/ktf> can you please not debug in Jenkins? This. > should be investigated offline! >. > Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and. > centos with a number of combinations of the various -D*ASSERT*=ON,. > -DCMAKE_BUILD_TYPE=* I can possibly think of. If you have a failing. > environment could you provide me access to it? >. > I can quite easily reproduce it on EL8 with the exact cmake command from. > the Jenkins log. The important piece seems to be -DCMAKE_CXX_STANDARD=14. >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/13641#issuecomment-1722289138>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AAACSMFXWNET6PLRILOVARLX2XWDPANCNFSM6AAAAAA4VAKC3A>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:898,security,auth,auth,898,"ok, i will try that. indeed in alice we need to use c++17. I will try. without. Ciao,. Giulio. On Sat, Sep 16 2023 at 8:32 PM, Jonas Hahnfeld ***@***.***>. wrote:. > @ktf <https://github.com/ktf> can you please not debug in Jenkins? This. > should be investigated offline! >. > Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and. > centos with a number of combinations of the various -D*ASSERT*=ON,. > -DCMAKE_BUILD_TYPE=* I can possibly think of. If you have a failing. > environment could you provide me access to it? >. > I can quite easily reproduce it on EL8 with the exact cmake command from. > the Jenkins log. The important piece seems to be -DCMAKE_CXX_STANDARD=14. >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/13641#issuecomment-1722289138>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AAACSMFXWNET6PLRILOVARLX2XWDPANCNFSM6AAAAAA4VAKC3A>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:407,testability,ASSERT,ASSERT,407,"ok, i will try that. indeed in alice we need to use c++17. I will try. without. Ciao,. Giulio. On Sat, Sep 16 2023 at 8:32 PM, Jonas Hahnfeld ***@***.***>. wrote:. > @ktf <https://github.com/ktf> can you please not debug in Jenkins? This. > should be investigated offline! >. > Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and. > centos with a number of combinations of the various -D*ASSERT*=ON,. > -DCMAKE_BUILD_TYPE=* I can possibly think of. If you have a failing. > environment could you provide me access to it? >. > I can quite easily reproduce it on EL8 with the exact cmake command from. > the Jenkins log. The important piece seems to be -DCMAKE_CXX_STANDARD=14. >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/13641#issuecomment-1722289138>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AAACSMFXWNET6PLRILOVARLX2XWDPANCNFSM6AAAAAA4VAKC3A>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:633,testability,log,log,633,"ok, i will try that. indeed in alice we need to use c++17. I will try. without. Ciao,. Giulio. On Sat, Sep 16 2023 at 8:32 PM, Jonas Hahnfeld ***@***.***>. wrote:. > @ktf <https://github.com/ktf> can you please not debug in Jenkins? This. > should be investigated offline! >. > Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and. > centos with a number of combinations of the various -D*ASSERT*=ON,. > -DCMAKE_BUILD_TYPE=* I can possibly think of. If you have a failing. > environment could you provide me access to it? >. > I can quite easily reproduce it on EL8 with the exact cmake command from. > the Jenkins log. The important piece seems to be -DCMAKE_CXX_STANDARD=14. >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/13641#issuecomment-1722289138>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AAACSMFXWNET6PLRILOVARLX2XWDPANCNFSM6AAAAAA4VAKC3A>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:605,usability,command,command,605,"ok, i will try that. indeed in alice we need to use c++17. I will try. without. Ciao,. Giulio. On Sat, Sep 16 2023 at 8:32 PM, Jonas Hahnfeld ***@***.***>. wrote:. > @ktf <https://github.com/ktf> can you please not debug in Jenkins? This. > should be investigated offline! >. > Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and. > centos with a number of combinations of the various -D*ASSERT*=ON,. > -DCMAKE_BUILD_TYPE=* I can possibly think of. If you have a failing. > environment could you provide me access to it? >. > I can quite easily reproduce it on EL8 with the exact cmake command from. > the Jenkins log. The important piece seems to be -DCMAKE_CXX_STANDARD=14. >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/13641#issuecomment-1722289138>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AAACSMFXWNET6PLRILOVARLX2XWDPANCNFSM6AAAAAA4VAKC3A>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:6,deployability,manag,managed,6,"Ok, I managed to reproduce and I think I know what is going on. I will provide an improved version in a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:91,deployability,version,version,91,"Ok, I managed to reproduce and I think I know what is going on. I will provide an improved version in a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:6,energy efficiency,manag,managed,6,"Ok, I managed to reproduce and I think I know what is going on. I will provide an improved version in a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:91,integrability,version,version,91,"Ok, I managed to reproduce and I think I know what is going on. I will provide an improved version in a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:91,modifiability,version,version,91,"Ok, I managed to reproduce and I think I know what is going on. I will provide an improved version in a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:6,safety,manag,managed,6,"Ok, I managed to reproduce and I think I know what is going on. I will provide an improved version in a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:308,energy efficiency,alloc,allocate,308,"Ok, I found out what was wrong and fixed it, taking advantage of some suggestion I got in the upstream LLVM review. The issue was missing pointer stability due to the fact the resizing of the backend store could have incurred in copies later than previously expected. The new code uses a BumpPtrAllocator to allocate the pages of items, rather than resizing an std::vector, so it's guaranteed that the elements don't move once they have been allocated (at the cost of the allocated memory not being necessarity contiguous anymore). With such fix, I cannot reproduce the issue anymore when running standalone, with similar memory improvements when running my simple ""open ALICE AOD file"" test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:442,energy efficiency,alloc,allocated,442,"Ok, I found out what was wrong and fixed it, taking advantage of some suggestion I got in the upstream LLVM review. The issue was missing pointer stability due to the fact the resizing of the backend store could have incurred in copies later than previously expected. The new code uses a BumpPtrAllocator to allocate the pages of items, rather than resizing an std::vector, so it's guaranteed that the elements don't move once they have been allocated (at the cost of the allocated memory not being necessarity contiguous anymore). With such fix, I cannot reproduce the issue anymore when running standalone, with similar memory improvements when running my simple ""open ALICE AOD file"" test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:472,energy efficiency,alloc,allocated,472,"Ok, I found out what was wrong and fixed it, taking advantage of some suggestion I got in the upstream LLVM review. The issue was missing pointer stability due to the fact the resizing of the backend store could have incurred in copies later than previously expected. The new code uses a BumpPtrAllocator to allocate the pages of items, rather than resizing an std::vector, so it's guaranteed that the elements don't move once they have been allocated (at the cost of the allocated memory not being necessarity contiguous anymore). With such fix, I cannot reproduce the issue anymore when running standalone, with similar memory improvements when running my simple ""open ALICE AOD file"" test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:482,performance,memor,memory,482,"Ok, I found out what was wrong and fixed it, taking advantage of some suggestion I got in the upstream LLVM review. The issue was missing pointer stability due to the fact the resizing of the backend store could have incurred in copies later than previously expected. The new code uses a BumpPtrAllocator to allocate the pages of items, rather than resizing an std::vector, so it's guaranteed that the elements don't move once they have been allocated (at the cost of the allocated memory not being necessarity contiguous anymore). With such fix, I cannot reproduce the issue anymore when running standalone, with similar memory improvements when running my simple ""open ALICE AOD file"" test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:622,performance,memor,memory,622,"Ok, I found out what was wrong and fixed it, taking advantage of some suggestion I got in the upstream LLVM review. The issue was missing pointer stability due to the fact the resizing of the backend store could have incurred in copies later than previously expected. The new code uses a BumpPtrAllocator to allocate the pages of items, rather than resizing an std::vector, so it's guaranteed that the elements don't move once they have been allocated (at the cost of the allocated memory not being necessarity contiguous anymore). With such fix, I cannot reproduce the issue anymore when running standalone, with similar memory improvements when running my simple ""open ALICE AOD file"" test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:146,reliability,stabil,stability,146,"Ok, I found out what was wrong and fixed it, taking advantage of some suggestion I got in the upstream LLVM review. The issue was missing pointer stability due to the fact the resizing of the backend store could have incurred in copies later than previously expected. The new code uses a BumpPtrAllocator to allocate the pages of items, rather than resizing an std::vector, so it's guaranteed that the elements don't move once they have been allocated (at the cost of the allocated memory not being necessarity contiguous anymore). With such fix, I cannot reproduce the issue anymore when running standalone, with similar memory improvements when running my simple ""open ALICE AOD file"" test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:108,safety,review,review,108,"Ok, I found out what was wrong and fixed it, taking advantage of some suggestion I got in the upstream LLVM review. The issue was missing pointer stability due to the fact the resizing of the backend store could have incurred in copies later than previously expected. The new code uses a BumpPtrAllocator to allocate the pages of items, rather than resizing an std::vector, so it's guaranteed that the elements don't move once they have been allocated (at the cost of the allocated memory not being necessarity contiguous anymore). With such fix, I cannot reproduce the issue anymore when running standalone, with similar memory improvements when running my simple ""open ALICE AOD file"" test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:687,safety,test,test,687,"Ok, I found out what was wrong and fixed it, taking advantage of some suggestion I got in the upstream LLVM review. The issue was missing pointer stability due to the fact the resizing of the backend store could have incurred in copies later than previously expected. The new code uses a BumpPtrAllocator to allocate the pages of items, rather than resizing an std::vector, so it's guaranteed that the elements don't move once they have been allocated (at the cost of the allocated memory not being necessarity contiguous anymore). With such fix, I cannot reproduce the issue anymore when running standalone, with similar memory improvements when running my simple ""open ALICE AOD file"" test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:108,testability,review,review,108,"Ok, I found out what was wrong and fixed it, taking advantage of some suggestion I got in the upstream LLVM review. The issue was missing pointer stability due to the fact the resizing of the backend store could have incurred in copies later than previously expected. The new code uses a BumpPtrAllocator to allocate the pages of items, rather than resizing an std::vector, so it's guaranteed that the elements don't move once they have been allocated (at the cost of the allocated memory not being necessarity contiguous anymore). With such fix, I cannot reproduce the issue anymore when running standalone, with similar memory improvements when running my simple ""open ALICE AOD file"" test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:658,testability,simpl,simple,658,"Ok, I found out what was wrong and fixed it, taking advantage of some suggestion I got in the upstream LLVM review. The issue was missing pointer stability due to the fact the resizing of the backend store could have incurred in copies later than previously expected. The new code uses a BumpPtrAllocator to allocate the pages of items, rather than resizing an std::vector, so it's guaranteed that the elements don't move once they have been allocated (at the cost of the allocated memory not being necessarity contiguous anymore). With such fix, I cannot reproduce the issue anymore when running standalone, with similar memory improvements when running my simple ""open ALICE AOD file"" test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:687,testability,test,test,687,"Ok, I found out what was wrong and fixed it, taking advantage of some suggestion I got in the upstream LLVM review. The issue was missing pointer stability due to the fact the resizing of the backend store could have incurred in copies later than previously expected. The new code uses a BumpPtrAllocator to allocate the pages of items, rather than resizing an std::vector, so it's guaranteed that the elements don't move once they have been allocated (at the cost of the allocated memory not being necessarity contiguous anymore). With such fix, I cannot reproduce the issue anymore when running standalone, with similar memory improvements when running my simple ""open ALICE AOD file"" test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:482,usability,memor,memory,482,"Ok, I found out what was wrong and fixed it, taking advantage of some suggestion I got in the upstream LLVM review. The issue was missing pointer stability due to the fact the resizing of the backend store could have incurred in copies later than previously expected. The new code uses a BumpPtrAllocator to allocate the pages of items, rather than resizing an std::vector, so it's guaranteed that the elements don't move once they have been allocated (at the cost of the allocated memory not being necessarity contiguous anymore). With such fix, I cannot reproduce the issue anymore when running standalone, with similar memory improvements when running my simple ""open ALICE AOD file"" test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:622,usability,memor,memory,622,"Ok, I found out what was wrong and fixed it, taking advantage of some suggestion I got in the upstream LLVM review. The issue was missing pointer stability due to the fact the resizing of the backend store could have incurred in copies later than previously expected. The new code uses a BumpPtrAllocator to allocate the pages of items, rather than resizing an std::vector, so it's guaranteed that the elements don't move once they have been allocated (at the cost of the allocated memory not being necessarity contiguous anymore). With such fix, I cannot reproduce the issue anymore when running standalone, with similar memory improvements when running my simple ""open ALICE AOD file"" test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:658,usability,simpl,simple,658,"Ok, I found out what was wrong and fixed it, taking advantage of some suggestion I got in the upstream LLVM review. The issue was missing pointer stability due to the fact the resizing of the backend store could have incurred in copies later than previously expected. The new code uses a BumpPtrAllocator to allocate the pages of items, rather than resizing an std::vector, so it's guaranteed that the elements don't move once they have been allocated (at the cost of the allocated memory not being necessarity contiguous anymore). With such fix, I cannot reproduce the issue anymore when running standalone, with similar memory improvements when running my simple ""open ALICE AOD file"" test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:18,deployability,build,builder,18,It looks like the builder disk is full:. ```. 04:17:46 /usr/bin/ar: interpreter/llvm/src/lib/libclangSema.a: No space left on device. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:26,performance,disk,disk,26,It looks like the builder disk is full:. ```. 04:17:46 /usr/bin/ar: interpreter/llvm/src/lib/libclangSema.a: No space left on device. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:99,deployability,build,building,99,"So the upstream change has been merged. How can I ask for a proper backport? I have the impression building PRs to the v6-28-00-patches branch does not always work. Shall I try with master first? However, wouldn't doing that create troubles with the later integration of the LLVM upstream?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:128,deployability,patch,patches,128,"So the upstream change has been merged. How can I ask for a proper backport? I have the impression building PRs to the v6-28-00-patches branch does not always work. Shall I try with master first? However, wouldn't doing that create troubles with the later integration of the LLVM upstream?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:256,deployability,integr,integration,256,"So the upstream change has been merged. How can I ask for a proper backport? I have the impression building PRs to the v6-28-00-patches branch does not always work. Shall I try with master first? However, wouldn't doing that create troubles with the later integration of the LLVM upstream?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:256,integrability,integr,integration,256,"So the upstream change has been merged. How can I ask for a proper backport? I have the impression building PRs to the v6-28-00-patches branch does not always work. Shall I try with master first? However, wouldn't doing that create troubles with the later integration of the LLVM upstream?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:256,interoperability,integr,integration,256,"So the upstream change has been merged. How can I ask for a proper backport? I have the impression building PRs to the v6-28-00-patches branch does not always work. Shall I try with master first? However, wouldn't doing that create troubles with the later integration of the LLVM upstream?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:256,modifiability,integr,integration,256,"So the upstream change has been merged. How can I ask for a proper backport? I have the impression building PRs to the v6-28-00-patches branch does not always work. Shall I try with master first? However, wouldn't doing that create troubles with the later integration of the LLVM upstream?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:143,reliability,doe,does,143,"So the upstream change has been merged. How can I ask for a proper backport? I have the impression building PRs to the v6-28-00-patches branch does not always work. Shall I try with master first? However, wouldn't doing that create troubles with the later integration of the LLVM upstream?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:256,reliability,integr,integration,256,"So the upstream change has been merged. How can I ask for a proper backport? I have the impression building PRs to the v6-28-00-patches branch does not always work. Shall I try with master first? However, wouldn't doing that create troubles with the later integration of the LLVM upstream?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:128,safety,patch,patches,128,"So the upstream change has been merged. How can I ask for a proper backport? I have the impression building PRs to the v6-28-00-patches branch does not always work. Shall I try with master first? However, wouldn't doing that create troubles with the later integration of the LLVM upstream?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:128,security,patch,patches,128,"So the upstream change has been merged. How can I ask for a proper backport? I have the impression building PRs to the v6-28-00-patches branch does not always work. Shall I try with master first? However, wouldn't doing that create troubles with the later integration of the LLVM upstream?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:256,security,integr,integration,256,"So the upstream change has been merged. How can I ask for a proper backport? I have the impression building PRs to the v6-28-00-patches branch does not always work. Shall I try with master first? However, wouldn't doing that create troubles with the later integration of the LLVM upstream?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:256,testability,integr,integration,256,"So the upstream change has been merged. How can I ask for a proper backport? I have the impression building PRs to the v6-28-00-patches branch does not always work. Shall I try with master first? However, wouldn't doing that create troubles with the later integration of the LLVM upstream?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:101,deployability,build,building,101,"> So the upstream change has been merged. How can I ask for a proper backport? I have the impression building PRs to the v6-28-00-patches branch does not always work. Shall I try with master first? Yes, please open against the master. > However, wouldn't doing that create troubles with the later integration of the LLVM upstream? No, backports are fine for git to deal with during upgrades.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:130,deployability,patch,patches,130,"> So the upstream change has been merged. How can I ask for a proper backport? I have the impression building PRs to the v6-28-00-patches branch does not always work. Shall I try with master first? Yes, please open against the master. > However, wouldn't doing that create troubles with the later integration of the LLVM upstream? No, backports are fine for git to deal with during upgrades.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:297,deployability,integr,integration,297,"> So the upstream change has been merged. How can I ask for a proper backport? I have the impression building PRs to the v6-28-00-patches branch does not always work. Shall I try with master first? Yes, please open against the master. > However, wouldn't doing that create troubles with the later integration of the LLVM upstream? No, backports are fine for git to deal with during upgrades.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:382,deployability,upgrad,upgrades,382,"> So the upstream change has been merged. How can I ask for a proper backport? I have the impression building PRs to the v6-28-00-patches branch does not always work. Shall I try with master first? Yes, please open against the master. > However, wouldn't doing that create troubles with the later integration of the LLVM upstream? No, backports are fine for git to deal with during upgrades.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:297,integrability,integr,integration,297,"> So the upstream change has been merged. How can I ask for a proper backport? I have the impression building PRs to the v6-28-00-patches branch does not always work. Shall I try with master first? Yes, please open against the master. > However, wouldn't doing that create troubles with the later integration of the LLVM upstream? No, backports are fine for git to deal with during upgrades.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:297,interoperability,integr,integration,297,"> So the upstream change has been merged. How can I ask for a proper backport? I have the impression building PRs to the v6-28-00-patches branch does not always work. Shall I try with master first? Yes, please open against the master. > However, wouldn't doing that create troubles with the later integration of the LLVM upstream? No, backports are fine for git to deal with during upgrades.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:297,modifiability,integr,integration,297,"> So the upstream change has been merged. How can I ask for a proper backport? I have the impression building PRs to the v6-28-00-patches branch does not always work. Shall I try with master first? Yes, please open against the master. > However, wouldn't doing that create troubles with the later integration of the LLVM upstream? No, backports are fine for git to deal with during upgrades.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:382,modifiability,upgrad,upgrades,382,"> So the upstream change has been merged. How can I ask for a proper backport? I have the impression building PRs to the v6-28-00-patches branch does not always work. Shall I try with master first? Yes, please open against the master. > However, wouldn't doing that create troubles with the later integration of the LLVM upstream? No, backports are fine for git to deal with during upgrades.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:145,reliability,doe,does,145,"> So the upstream change has been merged. How can I ask for a proper backport? I have the impression building PRs to the v6-28-00-patches branch does not always work. Shall I try with master first? Yes, please open against the master. > However, wouldn't doing that create troubles with the later integration of the LLVM upstream? No, backports are fine for git to deal with during upgrades.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:297,reliability,integr,integration,297,"> So the upstream change has been merged. How can I ask for a proper backport? I have the impression building PRs to the v6-28-00-patches branch does not always work. Shall I try with master first? Yes, please open against the master. > However, wouldn't doing that create troubles with the later integration of the LLVM upstream? No, backports are fine for git to deal with during upgrades.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:130,safety,patch,patches,130,"> So the upstream change has been merged. How can I ask for a proper backport? I have the impression building PRs to the v6-28-00-patches branch does not always work. Shall I try with master first? Yes, please open against the master. > However, wouldn't doing that create troubles with the later integration of the LLVM upstream? No, backports are fine for git to deal with during upgrades.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:130,security,patch,patches,130,"> So the upstream change has been merged. How can I ask for a proper backport? I have the impression building PRs to the v6-28-00-patches branch does not always work. Shall I try with master first? Yes, please open against the master. > However, wouldn't doing that create troubles with the later integration of the LLVM upstream? No, backports are fine for git to deal with during upgrades.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:297,security,integr,integration,297,"> So the upstream change has been merged. How can I ask for a proper backport? I have the impression building PRs to the v6-28-00-patches branch does not always work. Shall I try with master first? Yes, please open against the master. > However, wouldn't doing that create troubles with the later integration of the LLVM upstream? No, backports are fine for git to deal with during upgrades.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:297,testability,integr,integration,297,"> So the upstream change has been merged. How can I ask for a proper backport? I have the impression building PRs to the v6-28-00-patches branch does not always work. Shall I try with master first? Yes, please open against the master. > However, wouldn't doing that create troubles with the later integration of the LLVM upstream? No, backports are fine for git to deal with during upgrades.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:64,deployability,integr,integration,64,"> > However, wouldn't doing that create troubles with the later integration of the LLVM upstream? > . > No, backports are fine for git to deal with during upgrades. Well, they do need a bit of care to synchronize to our set of patches for newer LLVMs, but that's what we have to deal with.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:155,deployability,upgrad,upgrades,155,"> > However, wouldn't doing that create troubles with the later integration of the LLVM upstream? > . > No, backports are fine for git to deal with during upgrades. Well, they do need a bit of care to synchronize to our set of patches for newer LLVMs, but that's what we have to deal with.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:227,deployability,patch,patches,227,"> > However, wouldn't doing that create troubles with the later integration of the LLVM upstream? > . > No, backports are fine for git to deal with during upgrades. Well, they do need a bit of care to synchronize to our set of patches for newer LLVMs, but that's what we have to deal with.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:64,integrability,integr,integration,64,"> > However, wouldn't doing that create troubles with the later integration of the LLVM upstream? > . > No, backports are fine for git to deal with during upgrades. Well, they do need a bit of care to synchronize to our set of patches for newer LLVMs, but that's what we have to deal with.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:64,interoperability,integr,integration,64,"> > However, wouldn't doing that create troubles with the later integration of the LLVM upstream? > . > No, backports are fine for git to deal with during upgrades. Well, they do need a bit of care to synchronize to our set of patches for newer LLVMs, but that's what we have to deal with.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:64,modifiability,integr,integration,64,"> > However, wouldn't doing that create troubles with the later integration of the LLVM upstream? > . > No, backports are fine for git to deal with during upgrades. Well, they do need a bit of care to synchronize to our set of patches for newer LLVMs, but that's what we have to deal with.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:155,modifiability,upgrad,upgrades,155,"> > However, wouldn't doing that create troubles with the later integration of the LLVM upstream? > . > No, backports are fine for git to deal with during upgrades. Well, they do need a bit of care to synchronize to our set of patches for newer LLVMs, but that's what we have to deal with.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:201,performance,synch,synchronize,201,"> > However, wouldn't doing that create troubles with the later integration of the LLVM upstream? > . > No, backports are fine for git to deal with during upgrades. Well, they do need a bit of care to synchronize to our set of patches for newer LLVMs, but that's what we have to deal with.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:64,reliability,integr,integration,64,"> > However, wouldn't doing that create troubles with the later integration of the LLVM upstream? > . > No, backports are fine for git to deal with during upgrades. Well, they do need a bit of care to synchronize to our set of patches for newer LLVMs, but that's what we have to deal with.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:227,safety,patch,patches,227,"> > However, wouldn't doing that create troubles with the later integration of the LLVM upstream? > . > No, backports are fine for git to deal with during upgrades. Well, they do need a bit of care to synchronize to our set of patches for newer LLVMs, but that's what we have to deal with.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:64,security,integr,integration,64,"> > However, wouldn't doing that create troubles with the later integration of the LLVM upstream? > . > No, backports are fine for git to deal with during upgrades. Well, they do need a bit of care to synchronize to our set of patches for newer LLVMs, but that's what we have to deal with.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:227,security,patch,patches,227,"> > However, wouldn't doing that create troubles with the later integration of the LLVM upstream? > . > No, backports are fine for git to deal with during upgrades. Well, they do need a bit of care to synchronize to our set of patches for newer LLVMs, but that's what we have to deal with.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:64,testability,integr,integration,64,"> > However, wouldn't doing that create troubles with the later integration of the LLVM upstream? > . > No, backports are fine for git to deal with during upgrades. Well, they do need a bit of care to synchronize to our set of patches for newer LLVMs, but that's what we have to deal with.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:101,deployability,patch,patch,101,"As explained by @ktf (https://github.com/root-project/root/pull/13808#issuecomment-1905573235), this patch was required in 6.30, where it is already included. Feel free to re-open if you should still need it in 6.28!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:101,safety,patch,patch,101,"As explained by @ktf (https://github.com/root-project/root/pull/13808#issuecomment-1905573235), this patch was required in 6.30, where it is already included. Feel free to re-open if you should still need it in 6.28!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13641:101,security,patch,patch,101,"As explained by @ktf (https://github.com/root-project/root/pull/13808#issuecomment-1905573235), this patch was required in 6.30, where it is already included. Feel free to re-open if you should still need it in 6.28!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641
https://github.com/root-project/root/pull/13642:0,availability,Ping,Pinging,0,Pinging because I think 6.30 is coming and it would be nice to have this change in the API,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13642
https://github.com/root-project/root/pull/13642:87,deployability,API,API,87,Pinging because I think 6.30 is coming and it would be nice to have this change in the API,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13642
https://github.com/root-project/root/pull/13642:87,integrability,API,API,87,Pinging because I think 6.30 is coming and it would be nice to have this change in the API,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13642
https://github.com/root-project/root/pull/13642:87,interoperability,API,API,87,Pinging because I think 6.30 is coming and it would be nice to have this change in the API,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13642
https://github.com/root-project/root/pull/13643:0,usability,Close,Closed,0,Closed in favor of #13653,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13643
https://github.com/root-project/root/pull/13644:147,energy efficiency,draw,drawing,147,"> @dpiparo What perhaps is missing are some tests. Is it possible to test the new functionality? No idea how it can be tested. It changes existing drawing, but how it can be verified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13644
https://github.com/root-project/root/pull/13644:44,safety,test,tests,44,"> @dpiparo What perhaps is missing are some tests. Is it possible to test the new functionality? No idea how it can be tested. It changes existing drawing, but how it can be verified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13644
https://github.com/root-project/root/pull/13644:69,safety,test,test,69,"> @dpiparo What perhaps is missing are some tests. Is it possible to test the new functionality? No idea how it can be tested. It changes existing drawing, but how it can be verified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13644
https://github.com/root-project/root/pull/13644:119,safety,test,tested,119,"> @dpiparo What perhaps is missing are some tests. Is it possible to test the new functionality? No idea how it can be tested. It changes existing drawing, but how it can be verified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13644
https://github.com/root-project/root/pull/13644:44,testability,test,tests,44,"> @dpiparo What perhaps is missing are some tests. Is it possible to test the new functionality? No idea how it can be tested. It changes existing drawing, but how it can be verified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13644
