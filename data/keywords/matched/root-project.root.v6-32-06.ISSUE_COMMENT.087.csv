id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/issues/14163:296,deployability,VERSION,VERSION,296,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:383,deployability,build,buildtest,383,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:446,deployability,instal,install,446,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:782,deployability,instal,install,782,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:805,deployability,version,version,805,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:866,deployability,Build,Build,866,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:933,deployability,build,buildtest,933,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:960,deployability,build,buildtest,960,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1142,deployability,instal,installation,1142,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1214,deployability,instal,installed,1214,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1334,deployability,automat,automatically,1334,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:258,integrability,VERSION,VERSION,258,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:296,integrability,VERSION,VERSION,296,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:805,integrability,version,version,805,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:825,integrability,Configur,Configuring,825,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:258,modifiability,VERSION,VERSION,258,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:296,modifiability,VERSION,VERSION,296,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:805,modifiability,version,version,805,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:825,modifiability,Configur,Configuring,825,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1312,modifiability,pac,packages,1312,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1623,modifiability,pac,package,1623,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1411,reliability,doe,does,1411,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1576,reliability,doe,does,1576,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:523,safety,Detect,Detecting,523,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:559,safety,Detect,Detecting,559,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:661,safety,Detect,Detecting,661,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:696,safety,Detect,Detecting,696,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:490,security,ident,identification,490,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:523,security,Detect,Detecting,523,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:559,security,Detect,Detecting,559,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:661,security,Detect,Detecting,661,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:696,security,Detect,Detecting,696,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:825,security,Configur,Configuring,825,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1334,testability,automat,automatically,1334,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1658,testability,plan,planning,1658,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:59,availability,down,downloading,59,"Hi, thanks for the clarification. But I was speaking about downloading the binary release, not self-build and install. I just download the binary release, and then unzip it under /opt/root. Finally, I go to an empty folder, and then call cmake ../my-source-code -DROOT_DIR=/opt/root. So, I point directly at the proper folder where ROOT is installed, via the -DROOT_DIR argument.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:126,availability,down,download,126,"Hi, thanks for the clarification. But I was speaking about downloading the binary release, not self-build and install. I just download the binary release, and then unzip it under /opt/root. Finally, I go to an empty folder, and then call cmake ../my-source-code -DROOT_DIR=/opt/root. So, I point directly at the proper folder where ROOT is installed, via the -DROOT_DIR argument.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:82,deployability,releas,release,82,"Hi, thanks for the clarification. But I was speaking about downloading the binary release, not self-build and install. I just download the binary release, and then unzip it under /opt/root. Finally, I go to an empty folder, and then call cmake ../my-source-code -DROOT_DIR=/opt/root. So, I point directly at the proper folder where ROOT is installed, via the -DROOT_DIR argument.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:100,deployability,build,build,100,"Hi, thanks for the clarification. But I was speaking about downloading the binary release, not self-build and install. I just download the binary release, and then unzip it under /opt/root. Finally, I go to an empty folder, and then call cmake ../my-source-code -DROOT_DIR=/opt/root. So, I point directly at the proper folder where ROOT is installed, via the -DROOT_DIR argument.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:110,deployability,instal,install,110,"Hi, thanks for the clarification. But I was speaking about downloading the binary release, not self-build and install. I just download the binary release, and then unzip it under /opt/root. Finally, I go to an empty folder, and then call cmake ../my-source-code -DROOT_DIR=/opt/root. So, I point directly at the proper folder where ROOT is installed, via the -DROOT_DIR argument.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:146,deployability,releas,release,146,"Hi, thanks for the clarification. But I was speaking about downloading the binary release, not self-build and install. I just download the binary release, and then unzip it under /opt/root. Finally, I go to an empty folder, and then call cmake ../my-source-code -DROOT_DIR=/opt/root. So, I point directly at the proper folder where ROOT is installed, via the -DROOT_DIR argument.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:340,deployability,instal,installed,340,"Hi, thanks for the clarification. But I was speaking about downloading the binary release, not self-build and install. I just download the binary release, and then unzip it under /opt/root. Finally, I go to an empty folder, and then call cmake ../my-source-code -DROOT_DIR=/opt/root. So, I point directly at the proper folder where ROOT is installed, via the -DROOT_DIR argument.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:529,availability,Error,Error,529,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1134,availability,error,errors,1134,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:166,deployability,build,buildtest,166,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:228,deployability,instal,install,228,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:555,deployability,Modul,Modules,555,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:679,deployability,Stack,Stack,679,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:729,deployability,Modul,Modules,729,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:836,deployability,instal,install,836,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:850,deployability,modul,modules,850,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:929,deployability,Modul,Modules,929,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1020,deployability,instal,install,1020,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1194,deployability,build,buildtest,1194,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1227,deployability,log,log,1227,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1249,deployability,build,buildtest,1249,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1454,deployability,updat,update,1454,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1557,deployability,build,build,1557,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:604,integrability,messag,message,604,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1110,integrability,Configur,Configuring,1110,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:543,interoperability,share,share,543,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:604,interoperability,messag,message,604,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:717,interoperability,share,share,717,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:917,interoperability,share,share,917,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:555,modifiability,Modul,Modules,555,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:729,modifiability,Modul,Modules,729,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:850,modifiability,modul,modules,850,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:929,modifiability,Modul,Modules,929,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1110,modifiability,Configur,Configuring,1110,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1420,modifiability,variab,variable,1420,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:529,performance,Error,Error,529,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1134,performance,error,errors,1134,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:311,safety,Detect,Detecting,311,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:347,safety,Detect,Detecting,347,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:449,safety,Detect,Detecting,449,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:484,safety,Detect,Detecting,484,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:529,safety,Error,Error,529,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:555,safety,Modul,Modules,555,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:729,safety,Modul,Modules,729,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:850,safety,modul,modules,850,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:929,safety,Modul,Modules,929,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1134,safety,error,errors,1134,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1227,safety,log,log,1227,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1454,safety,updat,update,1454,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:278,security,ident,identification,278,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:311,security,Detect,Detecting,311,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:347,security,Detect,Detecting,347,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:449,security,Detect,Detecting,449,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:484,security,Detect,Detecting,484,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1110,security,Configur,Configuring,1110,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1227,security,log,log,1227,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1454,security,updat,update,1454,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1227,testability,log,log,1227,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:529,usability,Error,Error,529,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1134,usability,error,errors,1134,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:344,availability,error,error,344,"I'm still trying to figure out when exactly this issue pops up in our framework. - sourcing `thisroot.sh` works. - exporting ROOT_ROOT or setting the ROOT_ROOT CMake variable works, but requires setting the cmake policy 0074 for some older packages. - Without either, e.g. GenFit, VMC, vgm still finds ROOT (I assume via $ROOTSYS), but the VDT error is thrown. Maybe this adds some useful information. I live with setting the cmake policy in the different build recipes as a workaround for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:456,deployability,build,build,456,"I'm still trying to figure out when exactly this issue pops up in our framework. - sourcing `thisroot.sh` works. - exporting ROOT_ROOT or setting the ROOT_ROOT CMake variable works, but requires setting the cmake policy 0074 for some older packages. - Without either, e.g. GenFit, VMC, vgm still finds ROOT (I assume via $ROOTSYS), but the VDT error is thrown. Maybe this adds some useful information. I live with setting the cmake policy in the different build recipes as a workaround for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:166,modifiability,variab,variable,166,"I'm still trying to figure out when exactly this issue pops up in our framework. - sourcing `thisroot.sh` works. - exporting ROOT_ROOT or setting the ROOT_ROOT CMake variable works, but requires setting the cmake policy 0074 for some older packages. - Without either, e.g. GenFit, VMC, vgm still finds ROOT (I assume via $ROOTSYS), but the VDT error is thrown. Maybe this adds some useful information. I live with setting the cmake policy in the different build recipes as a workaround for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:240,modifiability,pac,packages,240,"I'm still trying to figure out when exactly this issue pops up in our framework. - sourcing `thisroot.sh` works. - exporting ROOT_ROOT or setting the ROOT_ROOT CMake variable works, but requires setting the cmake policy 0074 for some older packages. - Without either, e.g. GenFit, VMC, vgm still finds ROOT (I assume via $ROOTSYS), but the VDT error is thrown. Maybe this adds some useful information. I live with setting the cmake policy in the different build recipes as a workaround for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:344,performance,error,error,344,"I'm still trying to figure out when exactly this issue pops up in our framework. - sourcing `thisroot.sh` works. - exporting ROOT_ROOT or setting the ROOT_ROOT CMake variable works, but requires setting the cmake policy 0074 for some older packages. - Without either, e.g. GenFit, VMC, vgm still finds ROOT (I assume via $ROOTSYS), but the VDT error is thrown. Maybe this adds some useful information. I live with setting the cmake policy in the different build recipes as a workaround for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:344,safety,error,error,344,"I'm still trying to figure out when exactly this issue pops up in our framework. - sourcing `thisroot.sh` works. - exporting ROOT_ROOT or setting the ROOT_ROOT CMake variable works, but requires setting the cmake policy 0074 for some older packages. - Without either, e.g. GenFit, VMC, vgm still finds ROOT (I assume via $ROOTSYS), but the VDT error is thrown. Maybe this adds some useful information. I live with setting the cmake policy in the different build recipes as a workaround for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:213,security,polic,policy,213,"I'm still trying to figure out when exactly this issue pops up in our framework. - sourcing `thisroot.sh` works. - exporting ROOT_ROOT or setting the ROOT_ROOT CMake variable works, but requires setting the cmake policy 0074 for some older packages. - Without either, e.g. GenFit, VMC, vgm still finds ROOT (I assume via $ROOTSYS), but the VDT error is thrown. Maybe this adds some useful information. I live with setting the cmake policy in the different build recipes as a workaround for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:432,security,polic,policy,432,"I'm still trying to figure out when exactly this issue pops up in our framework. - sourcing `thisroot.sh` works. - exporting ROOT_ROOT or setting the ROOT_ROOT CMake variable works, but requires setting the cmake policy 0074 for some older packages. - Without either, e.g. GenFit, VMC, vgm still finds ROOT (I assume via $ROOTSYS), but the VDT error is thrown. Maybe this adds some useful information. I live with setting the cmake policy in the different build recipes as a workaround for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:344,usability,error,error,344,"I'm still trying to figure out when exactly this issue pops up in our framework. - sourcing `thisroot.sh` works. - exporting ROOT_ROOT or setting the ROOT_ROOT CMake variable works, but requires setting the cmake policy 0074 for some older packages. - Without either, e.g. GenFit, VMC, vgm still finds ROOT (I assume via $ROOTSYS), but the VDT error is thrown. Maybe this adds some useful information. I live with setting the cmake policy in the different build recipes as a workaround for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:285,availability,sli,slightly,285,"> I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. 😦. Thanks! I'm fully convinced that this is an issue in the build systems of a whole bunch of packages, which relied on ROOT doing things in a slightly strange way until now (and not setting the right CMake versions, policies etc....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:26,deployability,updat,update,26,"> I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. 😦. Thanks! I'm fully convinced that this is an issue in the build systems of a whole bunch of packages, which relied on ROOT doing things in a slightly strange way until now (and not setting the right CMake versions, policies etc....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:129,deployability,build,build,129,"> I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. 😦. Thanks! I'm fully convinced that this is an issue in the build systems of a whole bunch of packages, which relied on ROOT doing things in a slightly strange way until now (and not setting the right CMake versions, policies etc....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:202,deployability,build,build,202,"> I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. 😦. Thanks! I'm fully convinced that this is an issue in the build systems of a whole bunch of packages, which relied on ROOT doing things in a slightly strange way until now (and not setting the right CMake versions, policies etc....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:349,deployability,version,versions,349,"> I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. 😦. Thanks! I'm fully convinced that this is an issue in the build systems of a whole bunch of packages, which relied on ROOT doing things in a slightly strange way until now (and not setting the right CMake versions, policies etc....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:349,integrability,version,versions,349,"> I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. 😦. Thanks! I'm fully convinced that this is an issue in the build systems of a whole bunch of packages, which relied on ROOT doing things in a slightly strange way until now (and not setting the right CMake versions, policies etc....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:236,modifiability,pac,packages,236,"> I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. 😦. Thanks! I'm fully convinced that this is an issue in the build systems of a whole bunch of packages, which relied on ROOT doing things in a slightly strange way until now (and not setting the right CMake versions, policies etc....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:349,modifiability,version,versions,349,"> I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. 😦. Thanks! I'm fully convinced that this is an issue in the build systems of a whole bunch of packages, which relied on ROOT doing things in a slightly strange way until now (and not setting the right CMake versions, policies etc....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:285,reliability,sli,slightly,285,"> I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. 😦. Thanks! I'm fully convinced that this is an issue in the build systems of a whole bunch of packages, which relied on ROOT doing things in a slightly strange way until now (and not setting the right CMake versions, policies etc....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:26,safety,updat,update,26,"> I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. 😦. Thanks! I'm fully convinced that this is an issue in the build systems of a whole bunch of packages, which relied on ROOT doing things in a slightly strange way until now (and not setting the right CMake versions, policies etc....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:26,security,updat,update,26,"> I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. 😦. Thanks! I'm fully convinced that this is an issue in the build systems of a whole bunch of packages, which relied on ROOT doing things in a slightly strange way until now (and not setting the right CMake versions, policies etc....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:359,security,polic,policies,359,"> I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. 😦. Thanks! I'm fully convinced that this is an issue in the build systems of a whole bunch of packages, which relied on ROOT doing things in a slightly strange way until now (and not setting the right CMake versions, policies etc....).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:26,deployability,updat,update,26,"> I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. 😦. mm but it worked always well with ROOT 6.28 and earlier. I use 4 or 5 different XXX_DIR (CLI11_DIR, DCMTK_DIR, ROOT_DIR, ...). Btw, I also noticed that at some point in ROOT 6.26 or 6.28, I was specifying ROOT_DIR=/opt/root/cmake while in others I had to put /opt/root, but cannot recall when the change happened.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:129,deployability,build,build,129,"> I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. 😦. mm but it worked always well with ROOT 6.28 and earlier. I use 4 or 5 different XXX_DIR (CLI11_DIR, DCMTK_DIR, ROOT_DIR, ...). Btw, I also noticed that at some point in ROOT 6.26 or 6.28, I was specifying ROOT_DIR=/opt/root/cmake while in others I had to put /opt/root, but cannot recall when the change happened.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:339,interoperability,specif,specifying,339,"> I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. 😦. mm but it worked always well with ROOT 6.28 and earlier. I use 4 or 5 different XXX_DIR (CLI11_DIR, DCMTK_DIR, ROOT_DIR, ...). Btw, I also noticed that at some point in ROOT 6.26 or 6.28, I was specifying ROOT_DIR=/opt/root/cmake while in others I had to put /opt/root, but cannot recall when the change happened.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:26,safety,updat,update,26,"> I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. 😦. mm but it worked always well with ROOT 6.28 and earlier. I use 4 or 5 different XXX_DIR (CLI11_DIR, DCMTK_DIR, ROOT_DIR, ...). Btw, I also noticed that at some point in ROOT 6.26 or 6.28, I was specifying ROOT_DIR=/opt/root/cmake while in others I had to put /opt/root, but cannot recall when the change happened.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:26,security,updat,update,26,"> I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. 😦. mm but it worked always well with ROOT 6.28 and earlier. I use 4 or 5 different XXX_DIR (CLI11_DIR, DCMTK_DIR, ROOT_DIR, ...). Btw, I also noticed that at some point in ROOT 6.26 or 6.28, I was specifying ROOT_DIR=/opt/root/cmake while in others I had to put /opt/root, but cannot recall when the change happened.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/pull/14165:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:61,deployability,fail,failing,61,"@vgvassilev do we need this open, are there followups to the failing tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:61,reliability,fail,failing,61,"@vgvassilev do we need this open, are there followups to the failing tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:69,safety,test,tests,69,"@vgvassilev do we need this open, are there followups to the failing tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:69,testability,test,tests,69,"@vgvassilev do we need this open, are there followups to the failing tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:63,deployability,fail,failing,63,"> @vgvassilev do we need this open, are there followups to the failing tests? Yes, on the clad side. We should keep this open for a little longer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:63,reliability,fail,failing,63,"> @vgvassilev do we need this open, are there followups to the failing tests? Yes, on the clad side. We should keep this open for a little longer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:71,safety,test,tests,71,"> @vgvassilev do we need this open, are there followups to the failing tests? Yes, on the clad side. We should keep this open for a little longer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:71,testability,test,tests,71,"> @vgvassilev do we need this open, are there followups to the failing tests? Yes, on the clad side. We should keep this open for a little longer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:31,energy efficiency,reduc,reduce,31,"@guitargeek, could you help us reduce the current problem and get a standalone reproducer?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:42,energy efficiency,current,current,42,"@guitargeek, could you help us reduce the current problem and get a standalone reproducer?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:23,usability,help,help,23,"@guitargeek, could you help us reduce the current problem and get a standalone reproducer?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:33,energy efficiency,reduc,reduce,33,"> @guitargeek, could you help us reduce the current problem and get a standalone reproducer? I still have a reproducer in one of the open Clad issues:. https://github.com/vgvassilev/clad/issues/681. Or is that one fixed now?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:44,energy efficiency,current,current,44,"> @guitargeek, could you help us reduce the current problem and get a standalone reproducer? I still have a reproducer in one of the open Clad issues:. https://github.com/vgvassilev/clad/issues/681. Or is that one fixed now?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:25,usability,help,help,25,"> @guitargeek, could you help us reduce the current problem and get a standalone reproducer? I still have a reproducer in one of the open Clad issues:. https://github.com/vgvassilev/clad/issues/681. Or is that one fixed now?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:35,energy efficiency,reduc,reduce,35,"> > @guitargeek, could you help us reduce the current problem and get a standalone reproducer? > . > I still have a reproducer in one of the open Clad issues: [vgvassilev/clad#681](https://github.com/vgvassilev/clad/issues/681). > . > Or is that one fixed now? That one should have been fixed. I suspect that’s a new issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:46,energy efficiency,current,current,46,"> > @guitargeek, could you help us reduce the current problem and get a standalone reproducer? > . > I still have a reproducer in one of the open Clad issues: [vgvassilev/clad#681](https://github.com/vgvassilev/clad/issues/681). > . > Or is that one fixed now? That one should have been fixed. I suspect that’s a new issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:27,usability,help,help,27,"> > @guitargeek, could you help us reduce the current problem and get a standalone reproducer? > . > I still have a reproducer in one of the open Clad issues: [vgvassilev/clad#681](https://github.com/vgvassilev/clad/issues/681). > . > Or is that one fixed now? That one should have been fixed. I suspect that’s a new issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:9,availability,down,down,9,I boiled down the failures to a simple extension of the issue that I already reported:. https://github.com/vgvassilev/clad/issues/681#issuecomment-1904660655,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:18,availability,failur,failures,18,I boiled down the failures to a simple extension of the issue that I already reported:. https://github.com/vgvassilev/clad/issues/681#issuecomment-1904660655,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:18,deployability,fail,failures,18,I boiled down the failures to a simple extension of the issue that I already reported:. https://github.com/vgvassilev/clad/issues/681#issuecomment-1904660655,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:39,modifiability,extens,extension,39,I boiled down the failures to a simple extension of the issue that I already reported:. https://github.com/vgvassilev/clad/issues/681#issuecomment-1904660655,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:18,performance,failur,failures,18,I boiled down the failures to a simple extension of the issue that I already reported:. https://github.com/vgvassilev/clad/issues/681#issuecomment-1904660655,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:18,reliability,fail,failures,18,I boiled down the failures to a simple extension of the issue that I already reported:. https://github.com/vgvassilev/clad/issues/681#issuecomment-1904660655,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:32,testability,simpl,simple,32,I boiled down the failures to a simple extension of the issue that I already reported:. https://github.com/vgvassilev/clad/issues/681#issuecomment-1904660655,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:32,usability,simpl,simple,32,I boiled down the failures to a simple extension of the issue that I already reported:. https://github.com/vgvassilev/clad/issues/681#issuecomment-1904660655,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:175,availability,servic,services,175,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/console). > ### Failing tests:. > . > * [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/). @guitargeek, can you give us a hand again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:379,availability,servic,services,379,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/console). > ### Failing tests:. > . > * [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/). @guitargeek, can you give us a hand again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:2,deployability,Build,Build,2,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/console). > ### Failing tests:. > . > * [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/). @guitargeek, can you give us a hand again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:8,deployability,fail,failed,8,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/console). > ### Failing tests:. > . > * [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/). @guitargeek, can you give us a hand again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:99,deployability,build,build,99,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/console). > ### Failing tests:. > . > * [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/). @guitargeek, can you give us a hand again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:133,deployability,build,build,133,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/console). > ### Failing tests:. > . > * [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/). @guitargeek, can you give us a hand again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:175,deployability,servic,services,175,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/console). > ### Failing tests:. > . > * [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/). @guitargeek, can you give us a hand again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:227,deployability,build,build,227,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/console). > ### Failing tests:. > . > * [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/). @guitargeek, can you give us a hand again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:256,deployability,Fail,Failing,256,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/console). > ### Failing tests:. > . > * [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/). @guitargeek, can you give us a hand again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:379,deployability,servic,services,379,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/console). > ### Failing tests:. > . > * [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/). @guitargeek, can you give us a hand again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:431,deployability,build,build,431,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/console). > ### Failing tests:. > . > * [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/). @guitargeek, can you give us a hand again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:175,integrability,servic,services,175,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/console). > ### Failing tests:. > . > * [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/). @guitargeek, can you give us a hand again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:379,integrability,servic,services,379,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/console). > ### Failing tests:. > . > * [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/). @guitargeek, can you give us a hand again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:175,modifiability,servic,services,175,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/console). > ### Failing tests:. > . > * [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/). @guitargeek, can you give us a hand again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:379,modifiability,servic,services,379,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/console). > ### Failing tests:. > . > * [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/). @guitargeek, can you give us a hand again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:8,reliability,fail,failed,8,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/console). > ### Failing tests:. > . > * [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/). @guitargeek, can you give us a hand again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:256,reliability,Fail,Failing,256,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/console). > ### Failing tests:. > . > * [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/). @guitargeek, can you give us a hand again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:264,safety,test,tests,264,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/console). > ### Failing tests:. > . > * [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/). @guitargeek, can you give us a hand again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:312,safety,test,test,312,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/console). > ### Failing tests:. > . > * [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/). @guitargeek, can you give us a hand again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:444,safety,test,testReport,444,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/console). > ### Failing tests:. > . > * [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/). @guitargeek, can you give us a hand again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:486,safety,test,test,486,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/console). > ### Failing tests:. > . > * [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/). @guitargeek, can you give us a hand again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:264,testability,test,tests,264,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/console). > ### Failing tests:. > . > * [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/). @guitargeek, can you give us a hand again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:312,testability,test,test,312,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/console). > ### Failing tests:. > . > * [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/). @guitargeek, can you give us a hand again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:444,testability,test,testReport,444,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/console). > ### Failing tests:. > . > * [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/). @guitargeek, can you give us a hand again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:486,testability,test,test,486,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/console). > ### Failing tests:. > . > * [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/). @guitargeek, can you give us a hand again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:9,availability,down,down,9,I boiled down the failures to a variation of the issue with the double loop that I already reported:. https://github.com/vgvassilev/clad/issues/681#issuecomment-1917122065,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:18,availability,failur,failures,18,I boiled down the failures to a variation of the issue with the double loop that I already reported:. https://github.com/vgvassilev/clad/issues/681#issuecomment-1917122065,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:18,deployability,fail,failures,18,I boiled down the failures to a variation of the issue with the double loop that I already reported:. https://github.com/vgvassilev/clad/issues/681#issuecomment-1917122065,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:18,performance,failur,failures,18,I boiled down the failures to a variation of the issue with the double loop that I already reported:. https://github.com/vgvassilev/clad/issues/681#issuecomment-1917122065,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:18,reliability,fail,failures,18,I boiled down the failures to a variation of the issue with the double loop that I already reported:. https://github.com/vgvassilev/clad/issues/681#issuecomment-1917122065,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:11,availability,down,down,11,"> I boiled down the failures to a variation of the issue with the double loop that I already reported: [vgvassilev/clad#681 (comment)](https://github.com/vgvassilev/clad/issues/681#issuecomment-1917122065). Thank you, @guitargeek!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:20,availability,failur,failures,20,"> I boiled down the failures to a variation of the issue with the double loop that I already reported: [vgvassilev/clad#681 (comment)](https://github.com/vgvassilev/clad/issues/681#issuecomment-1917122065). Thank you, @guitargeek!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:20,deployability,fail,failures,20,"> I boiled down the failures to a variation of the issue with the double loop that I already reported: [vgvassilev/clad#681 (comment)](https://github.com/vgvassilev/clad/issues/681#issuecomment-1917122065). Thank you, @guitargeek!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:20,performance,failur,failures,20,"> I boiled down the failures to a variation of the issue with the double loop that I already reported: [vgvassilev/clad#681 (comment)](https://github.com/vgvassilev/clad/issues/681#issuecomment-1917122065). Thank you, @guitargeek!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:20,reliability,fail,failures,20,"> I boiled down the failures to a variation of the issue with the double loop that I already reported: [vgvassilev/clad#681 (comment)](https://github.com/vgvassilev/clad/issues/681#issuecomment-1917122065). Thank you, @guitargeek!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:12,availability,failur,failure,12,"The windows failure boils down to:. ```. cern\sftnight@ROOT-VS2019 C:\vvasilev-root-dev\vvbuild>root.exe -l. root [0] #include ""Math/CladDerivator.h"". root [1] double arr[2] = {0,1};. root [2] clad::array_ref<Double_t> _d_pi(arr);. root [3] double _r0 = 1;. root [4] _d_pi[0] = 1;. ROOT_prompt_4:1:6: error: use of overloaded operator '[]' is ambiguous (with operand types 'clad::array_ref<Double_t>' (a. ka 'array_ref<double>'). and 'int'). _d_pi[0] = 1;. ~~~~~^~. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:66:23: note: candidate function . CUDA_HOST_DEVICE T& operator[](std::size_t i) { return m_arr[i]; }. ^. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:67:29: note: candidate function . CUDA_HOST_DEVICE const T& operator[](std::size_t i) const { return m_arr[i]; }. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](double *, int). _d_pi[0] = 1;. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](const double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](volatile double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](const volatile double *, int). ```. I am not sure why this works elsewhere and does not work on Windows. Perhaps we somehow get more builtin operators? @vaithak, do you have any clue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:26,availability,down,down,26,"The windows failure boils down to:. ```. cern\sftnight@ROOT-VS2019 C:\vvasilev-root-dev\vvbuild>root.exe -l. root [0] #include ""Math/CladDerivator.h"". root [1] double arr[2] = {0,1};. root [2] clad::array_ref<Double_t> _d_pi(arr);. root [3] double _r0 = 1;. root [4] _d_pi[0] = 1;. ROOT_prompt_4:1:6: error: use of overloaded operator '[]' is ambiguous (with operand types 'clad::array_ref<Double_t>' (a. ka 'array_ref<double>'). and 'int'). _d_pi[0] = 1;. ~~~~~^~. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:66:23: note: candidate function . CUDA_HOST_DEVICE T& operator[](std::size_t i) { return m_arr[i]; }. ^. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:67:29: note: candidate function . CUDA_HOST_DEVICE const T& operator[](std::size_t i) const { return m_arr[i]; }. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](double *, int). _d_pi[0] = 1;. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](const double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](volatile double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](const volatile double *, int). ```. I am not sure why this works elsewhere and does not work on Windows. Perhaps we somehow get more builtin operators? @vaithak, do you have any clue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:301,availability,error,error,301,"The windows failure boils down to:. ```. cern\sftnight@ROOT-VS2019 C:\vvasilev-root-dev\vvbuild>root.exe -l. root [0] #include ""Math/CladDerivator.h"". root [1] double arr[2] = {0,1};. root [2] clad::array_ref<Double_t> _d_pi(arr);. root [3] double _r0 = 1;. root [4] _d_pi[0] = 1;. ROOT_prompt_4:1:6: error: use of overloaded operator '[]' is ambiguous (with operand types 'clad::array_ref<Double_t>' (a. ka 'array_ref<double>'). and 'int'). _d_pi[0] = 1;. ~~~~~^~. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:66:23: note: candidate function . CUDA_HOST_DEVICE T& operator[](std::size_t i) { return m_arr[i]; }. ^. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:67:29: note: candidate function . CUDA_HOST_DEVICE const T& operator[](std::size_t i) const { return m_arr[i]; }. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](double *, int). _d_pi[0] = 1;. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](const double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](volatile double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](const volatile double *, int). ```. I am not sure why this works elsewhere and does not work on Windows. Perhaps we somehow get more builtin operators? @vaithak, do you have any clue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:326,availability,operat,operator,326,"The windows failure boils down to:. ```. cern\sftnight@ROOT-VS2019 C:\vvasilev-root-dev\vvbuild>root.exe -l. root [0] #include ""Math/CladDerivator.h"". root [1] double arr[2] = {0,1};. root [2] clad::array_ref<Double_t> _d_pi(arr);. root [3] double _r0 = 1;. root [4] _d_pi[0] = 1;. ROOT_prompt_4:1:6: error: use of overloaded operator '[]' is ambiguous (with operand types 'clad::array_ref<Double_t>' (a. ka 'array_ref<double>'). and 'int'). _d_pi[0] = 1;. ~~~~~^~. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:66:23: note: candidate function . CUDA_HOST_DEVICE T& operator[](std::size_t i) { return m_arr[i]; }. ^. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:67:29: note: candidate function . CUDA_HOST_DEVICE const T& operator[](std::size_t i) const { return m_arr[i]; }. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](double *, int). _d_pi[0] = 1;. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](const double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](volatile double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](const volatile double *, int). ```. I am not sure why this works elsewhere and does not work on Windows. Perhaps we somehow get more builtin operators? @vaithak, do you have any clue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:607,availability,operat,operator,607,"The windows failure boils down to:. ```. cern\sftnight@ROOT-VS2019 C:\vvasilev-root-dev\vvbuild>root.exe -l. root [0] #include ""Math/CladDerivator.h"". root [1] double arr[2] = {0,1};. root [2] clad::array_ref<Double_t> _d_pi(arr);. root [3] double _r0 = 1;. root [4] _d_pi[0] = 1;. ROOT_prompt_4:1:6: error: use of overloaded operator '[]' is ambiguous (with operand types 'clad::array_ref<Double_t>' (a. ka 'array_ref<double>'). and 'int'). _d_pi[0] = 1;. ~~~~~^~. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:66:23: note: candidate function . CUDA_HOST_DEVICE T& operator[](std::size_t i) { return m_arr[i]; }. ^. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:67:29: note: candidate function . CUDA_HOST_DEVICE const T& operator[](std::size_t i) const { return m_arr[i]; }. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](double *, int). _d_pi[0] = 1;. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](const double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](volatile double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](const volatile double *, int). ```. I am not sure why this works elsewhere and does not work on Windows. Perhaps we somehow get more builtin operators? @vaithak, do you have any clue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:805,availability,operat,operator,805,"The windows failure boils down to:. ```. cern\sftnight@ROOT-VS2019 C:\vvasilev-root-dev\vvbuild>root.exe -l. root [0] #include ""Math/CladDerivator.h"". root [1] double arr[2] = {0,1};. root [2] clad::array_ref<Double_t> _d_pi(arr);. root [3] double _r0 = 1;. root [4] _d_pi[0] = 1;. ROOT_prompt_4:1:6: error: use of overloaded operator '[]' is ambiguous (with operand types 'clad::array_ref<Double_t>' (a. ka 'array_ref<double>'). and 'int'). _d_pi[0] = 1;. ~~~~~^~. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:66:23: note: candidate function . CUDA_HOST_DEVICE T& operator[](std::size_t i) { return m_arr[i]; }. ^. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:67:29: note: candidate function . CUDA_HOST_DEVICE const T& operator[](std::size_t i) const { return m_arr[i]; }. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](double *, int). _d_pi[0] = 1;. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](const double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](volatile double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](const volatile double *, int). ```. I am not sure why this works elsewhere and does not work on Windows. Perhaps we somehow get more builtin operators? @vaithak, do you have any clue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:906,availability,operat,operator,906,"The windows failure boils down to:. ```. cern\sftnight@ROOT-VS2019 C:\vvasilev-root-dev\vvbuild>root.exe -l. root [0] #include ""Math/CladDerivator.h"". root [1] double arr[2] = {0,1};. root [2] clad::array_ref<Double_t> _d_pi(arr);. root [3] double _r0 = 1;. root [4] _d_pi[0] = 1;. ROOT_prompt_4:1:6: error: use of overloaded operator '[]' is ambiguous (with operand types 'clad::array_ref<Double_t>' (a. ka 'array_ref<double>'). and 'int'). _d_pi[0] = 1;. ~~~~~^~. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:66:23: note: candidate function . CUDA_HOST_DEVICE T& operator[](std::size_t i) { return m_arr[i]; }. ^. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:67:29: note: candidate function . CUDA_HOST_DEVICE const T& operator[](std::size_t i) const { return m_arr[i]; }. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](double *, int). _d_pi[0] = 1;. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](const double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](volatile double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](const volatile double *, int). ```. I am not sure why this works elsewhere and does not work on Windows. Perhaps we somehow get more builtin operators? @vaithak, do you have any clue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:995,availability,operat,operator,995,"The windows failure boils down to:. ```. cern\sftnight@ROOT-VS2019 C:\vvasilev-root-dev\vvbuild>root.exe -l. root [0] #include ""Math/CladDerivator.h"". root [1] double arr[2] = {0,1};. root [2] clad::array_ref<Double_t> _d_pi(arr);. root [3] double _r0 = 1;. root [4] _d_pi[0] = 1;. ROOT_prompt_4:1:6: error: use of overloaded operator '[]' is ambiguous (with operand types 'clad::array_ref<Double_t>' (a. ka 'array_ref<double>'). and 'int'). _d_pi[0] = 1;. ~~~~~^~. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:66:23: note: candidate function . CUDA_HOST_DEVICE T& operator[](std::size_t i) { return m_arr[i]; }. ^. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:67:29: note: candidate function . CUDA_HOST_DEVICE const T& operator[](std::size_t i) const { return m_arr[i]; }. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](double *, int). _d_pi[0] = 1;. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](const double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](volatile double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](const volatile double *, int). ```. I am not sure why this works elsewhere and does not work on Windows. Perhaps we somehow get more builtin operators? @vaithak, do you have any clue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:1072,availability,operat,operator,1072,"The windows failure boils down to:. ```. cern\sftnight@ROOT-VS2019 C:\vvasilev-root-dev\vvbuild>root.exe -l. root [0] #include ""Math/CladDerivator.h"". root [1] double arr[2] = {0,1};. root [2] clad::array_ref<Double_t> _d_pi(arr);. root [3] double _r0 = 1;. root [4] _d_pi[0] = 1;. ROOT_prompt_4:1:6: error: use of overloaded operator '[]' is ambiguous (with operand types 'clad::array_ref<Double_t>' (a. ka 'array_ref<double>'). and 'int'). _d_pi[0] = 1;. ~~~~~^~. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:66:23: note: candidate function . CUDA_HOST_DEVICE T& operator[](std::size_t i) { return m_arr[i]; }. ^. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:67:29: note: candidate function . CUDA_HOST_DEVICE const T& operator[](std::size_t i) const { return m_arr[i]; }. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](double *, int). _d_pi[0] = 1;. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](const double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](volatile double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](const volatile double *, int). ```. I am not sure why this works elsewhere and does not work on Windows. Perhaps we somehow get more builtin operators? @vaithak, do you have any clue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:1152,availability,operat,operator,1152,"The windows failure boils down to:. ```. cern\sftnight@ROOT-VS2019 C:\vvasilev-root-dev\vvbuild>root.exe -l. root [0] #include ""Math/CladDerivator.h"". root [1] double arr[2] = {0,1};. root [2] clad::array_ref<Double_t> _d_pi(arr);. root [3] double _r0 = 1;. root [4] _d_pi[0] = 1;. ROOT_prompt_4:1:6: error: use of overloaded operator '[]' is ambiguous (with operand types 'clad::array_ref<Double_t>' (a. ka 'array_ref<double>'). and 'int'). _d_pi[0] = 1;. ~~~~~^~. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:66:23: note: candidate function . CUDA_HOST_DEVICE T& operator[](std::size_t i) { return m_arr[i]; }. ^. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:67:29: note: candidate function . CUDA_HOST_DEVICE const T& operator[](std::size_t i) const { return m_arr[i]; }. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](double *, int). _d_pi[0] = 1;. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](const double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](volatile double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](const volatile double *, int). ```. I am not sure why this works elsewhere and does not work on Windows. Perhaps we somehow get more builtin operators? @vaithak, do you have any clue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:1304,availability,operat,operators,1304,"The windows failure boils down to:. ```. cern\sftnight@ROOT-VS2019 C:\vvasilev-root-dev\vvbuild>root.exe -l. root [0] #include ""Math/CladDerivator.h"". root [1] double arr[2] = {0,1};. root [2] clad::array_ref<Double_t> _d_pi(arr);. root [3] double _r0 = 1;. root [4] _d_pi[0] = 1;. ROOT_prompt_4:1:6: error: use of overloaded operator '[]' is ambiguous (with operand types 'clad::array_ref<Double_t>' (a. ka 'array_ref<double>'). and 'int'). _d_pi[0] = 1;. ~~~~~^~. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:66:23: note: candidate function . CUDA_HOST_DEVICE T& operator[](std::size_t i) { return m_arr[i]; }. ^. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:67:29: note: candidate function . CUDA_HOST_DEVICE const T& operator[](std::size_t i) const { return m_arr[i]; }. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](double *, int). _d_pi[0] = 1;. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](const double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](volatile double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](const volatile double *, int). ```. I am not sure why this works elsewhere and does not work on Windows. Perhaps we somehow get more builtin operators? @vaithak, do you have any clue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:12,deployability,fail,failure,12,"The windows failure boils down to:. ```. cern\sftnight@ROOT-VS2019 C:\vvasilev-root-dev\vvbuild>root.exe -l. root [0] #include ""Math/CladDerivator.h"". root [1] double arr[2] = {0,1};. root [2] clad::array_ref<Double_t> _d_pi(arr);. root [3] double _r0 = 1;. root [4] _d_pi[0] = 1;. ROOT_prompt_4:1:6: error: use of overloaded operator '[]' is ambiguous (with operand types 'clad::array_ref<Double_t>' (a. ka 'array_ref<double>'). and 'int'). _d_pi[0] = 1;. ~~~~~^~. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:66:23: note: candidate function . CUDA_HOST_DEVICE T& operator[](std::size_t i) { return m_arr[i]; }. ^. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:67:29: note: candidate function . CUDA_HOST_DEVICE const T& operator[](std::size_t i) const { return m_arr[i]; }. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](double *, int). _d_pi[0] = 1;. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](const double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](volatile double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](const volatile double *, int). ```. I am not sure why this works elsewhere and does not work on Windows. Perhaps we somehow get more builtin operators? @vaithak, do you have any clue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:506,interoperability,plug,plugins,506,"The windows failure boils down to:. ```. cern\sftnight@ROOT-VS2019 C:\vvasilev-root-dev\vvbuild>root.exe -l. root [0] #include ""Math/CladDerivator.h"". root [1] double arr[2] = {0,1};. root [2] clad::array_ref<Double_t> _d_pi(arr);. root [3] double _r0 = 1;. root [4] _d_pi[0] = 1;. ROOT_prompt_4:1:6: error: use of overloaded operator '[]' is ambiguous (with operand types 'clad::array_ref<Double_t>' (a. ka 'array_ref<double>'). and 'int'). _d_pi[0] = 1;. ~~~~~^~. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:66:23: note: candidate function . CUDA_HOST_DEVICE T& operator[](std::size_t i) { return m_arr[i]; }. ^. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:67:29: note: candidate function . CUDA_HOST_DEVICE const T& operator[](std::size_t i) const { return m_arr[i]; }. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](double *, int). _d_pi[0] = 1;. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](const double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](volatile double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](const volatile double *, int). ```. I am not sure why this works elsewhere and does not work on Windows. Perhaps we somehow get more builtin operators? @vaithak, do you have any clue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:698,interoperability,plug,plugins,698,"The windows failure boils down to:. ```. cern\sftnight@ROOT-VS2019 C:\vvasilev-root-dev\vvbuild>root.exe -l. root [0] #include ""Math/CladDerivator.h"". root [1] double arr[2] = {0,1};. root [2] clad::array_ref<Double_t> _d_pi(arr);. root [3] double _r0 = 1;. root [4] _d_pi[0] = 1;. ROOT_prompt_4:1:6: error: use of overloaded operator '[]' is ambiguous (with operand types 'clad::array_ref<Double_t>' (a. ka 'array_ref<double>'). and 'int'). _d_pi[0] = 1;. ~~~~~^~. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:66:23: note: candidate function . CUDA_HOST_DEVICE T& operator[](std::size_t i) { return m_arr[i]; }. ^. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:67:29: note: candidate function . CUDA_HOST_DEVICE const T& operator[](std::size_t i) const { return m_arr[i]; }. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](double *, int). _d_pi[0] = 1;. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](const double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](volatile double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](const volatile double *, int). ```. I am not sure why this works elsewhere and does not work on Windows. Perhaps we somehow get more builtin operators? @vaithak, do you have any clue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:12,performance,failur,failure,12,"The windows failure boils down to:. ```. cern\sftnight@ROOT-VS2019 C:\vvasilev-root-dev\vvbuild>root.exe -l. root [0] #include ""Math/CladDerivator.h"". root [1] double arr[2] = {0,1};. root [2] clad::array_ref<Double_t> _d_pi(arr);. root [3] double _r0 = 1;. root [4] _d_pi[0] = 1;. ROOT_prompt_4:1:6: error: use of overloaded operator '[]' is ambiguous (with operand types 'clad::array_ref<Double_t>' (a. ka 'array_ref<double>'). and 'int'). _d_pi[0] = 1;. ~~~~~^~. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:66:23: note: candidate function . CUDA_HOST_DEVICE T& operator[](std::size_t i) { return m_arr[i]; }. ^. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:67:29: note: candidate function . CUDA_HOST_DEVICE const T& operator[](std::size_t i) const { return m_arr[i]; }. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](double *, int). _d_pi[0] = 1;. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](const double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](volatile double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](const volatile double *, int). ```. I am not sure why this works elsewhere and does not work on Windows. Perhaps we somehow get more builtin operators? @vaithak, do you have any clue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:301,performance,error,error,301,"The windows failure boils down to:. ```. cern\sftnight@ROOT-VS2019 C:\vvasilev-root-dev\vvbuild>root.exe -l. root [0] #include ""Math/CladDerivator.h"". root [1] double arr[2] = {0,1};. root [2] clad::array_ref<Double_t> _d_pi(arr);. root [3] double _r0 = 1;. root [4] _d_pi[0] = 1;. ROOT_prompt_4:1:6: error: use of overloaded operator '[]' is ambiguous (with operand types 'clad::array_ref<Double_t>' (a. ka 'array_ref<double>'). and 'int'). _d_pi[0] = 1;. ~~~~~^~. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:66:23: note: candidate function . CUDA_HOST_DEVICE T& operator[](std::size_t i) { return m_arr[i]; }. ^. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:67:29: note: candidate function . CUDA_HOST_DEVICE const T& operator[](std::size_t i) const { return m_arr[i]; }. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](double *, int). _d_pi[0] = 1;. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](const double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](volatile double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](const volatile double *, int). ```. I am not sure why this works elsewhere and does not work on Windows. Perhaps we somehow get more builtin operators? @vaithak, do you have any clue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:12,reliability,fail,failure,12,"The windows failure boils down to:. ```. cern\sftnight@ROOT-VS2019 C:\vvasilev-root-dev\vvbuild>root.exe -l. root [0] #include ""Math/CladDerivator.h"". root [1] double arr[2] = {0,1};. root [2] clad::array_ref<Double_t> _d_pi(arr);. root [3] double _r0 = 1;. root [4] _d_pi[0] = 1;. ROOT_prompt_4:1:6: error: use of overloaded operator '[]' is ambiguous (with operand types 'clad::array_ref<Double_t>' (a. ka 'array_ref<double>'). and 'int'). _d_pi[0] = 1;. ~~~~~^~. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:66:23: note: candidate function . CUDA_HOST_DEVICE T& operator[](std::size_t i) { return m_arr[i]; }. ^. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:67:29: note: candidate function . CUDA_HOST_DEVICE const T& operator[](std::size_t i) const { return m_arr[i]; }. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](double *, int). _d_pi[0] = 1;. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](const double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](volatile double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](const volatile double *, int). ```. I am not sure why this works elsewhere and does not work on Windows. Perhaps we somehow get more builtin operators? @vaithak, do you have any clue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:1242,reliability,doe,does,1242,"The windows failure boils down to:. ```. cern\sftnight@ROOT-VS2019 C:\vvasilev-root-dev\vvbuild>root.exe -l. root [0] #include ""Math/CladDerivator.h"". root [1] double arr[2] = {0,1};. root [2] clad::array_ref<Double_t> _d_pi(arr);. root [3] double _r0 = 1;. root [4] _d_pi[0] = 1;. ROOT_prompt_4:1:6: error: use of overloaded operator '[]' is ambiguous (with operand types 'clad::array_ref<Double_t>' (a. ka 'array_ref<double>'). and 'int'). _d_pi[0] = 1;. ~~~~~^~. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:66:23: note: candidate function . CUDA_HOST_DEVICE T& operator[](std::size_t i) { return m_arr[i]; }. ^. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:67:29: note: candidate function . CUDA_HOST_DEVICE const T& operator[](std::size_t i) const { return m_arr[i]; }. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](double *, int). _d_pi[0] = 1;. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](const double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](volatile double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](const volatile double *, int). ```. I am not sure why this works elsewhere and does not work on Windows. Perhaps we somehow get more builtin operators? @vaithak, do you have any clue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:301,safety,error,error,301,"The windows failure boils down to:. ```. cern\sftnight@ROOT-VS2019 C:\vvasilev-root-dev\vvbuild>root.exe -l. root [0] #include ""Math/CladDerivator.h"". root [1] double arr[2] = {0,1};. root [2] clad::array_ref<Double_t> _d_pi(arr);. root [3] double _r0 = 1;. root [4] _d_pi[0] = 1;. ROOT_prompt_4:1:6: error: use of overloaded operator '[]' is ambiguous (with operand types 'clad::array_ref<Double_t>' (a. ka 'array_ref<double>'). and 'int'). _d_pi[0] = 1;. ~~~~~^~. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:66:23: note: candidate function . CUDA_HOST_DEVICE T& operator[](std::size_t i) { return m_arr[i]; }. ^. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:67:29: note: candidate function . CUDA_HOST_DEVICE const T& operator[](std::size_t i) const { return m_arr[i]; }. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](double *, int). _d_pi[0] = 1;. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](const double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](volatile double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](const volatile double *, int). ```. I am not sure why this works elsewhere and does not work on Windows. Perhaps we somehow get more builtin operators? @vaithak, do you have any clue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:301,usability,error,error,301,"The windows failure boils down to:. ```. cern\sftnight@ROOT-VS2019 C:\vvasilev-root-dev\vvbuild>root.exe -l. root [0] #include ""Math/CladDerivator.h"". root [1] double arr[2] = {0,1};. root [2] clad::array_ref<Double_t> _d_pi(arr);. root [3] double _r0 = 1;. root [4] _d_pi[0] = 1;. ROOT_prompt_4:1:6: error: use of overloaded operator '[]' is ambiguous (with operand types 'clad::array_ref<Double_t>' (a. ka 'array_ref<double>'). and 'int'). _d_pi[0] = 1;. ~~~~~^~. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:66:23: note: candidate function . CUDA_HOST_DEVICE T& operator[](std::size_t i) { return m_arr[i]; }. ^. C:/vvasilev-root-dev/vvbuild\etc\/cling\plugins/include/clad/Differentiator/ArrayRef.h:67:29: note: candidate function . CUDA_HOST_DEVICE const T& operator[](std::size_t i) const { return m_arr[i]; }. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](double *, int). _d_pi[0] = 1;. ^. ROOT_prompt_4:1:6: note: built-in candidate operator[](const double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](volatile double *, int). ROOT_prompt_4:1:6: note: built-in candidate operator[](const volatile double *, int). ```. I am not sure why this works elsewhere and does not work on Windows. Perhaps we somehow get more builtin operators? @vaithak, do you have any clue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:43,availability,operat,operators,43,"I think this is because array_ref has both operators - conversion to pointer, as well as array indexing, which is making ambiguity. I think we can safely remove the operator[]; that should fix it. . Found a similar Stackoverflow question: https://stackoverflow.com/questions/49607565/error-use-of-overloaded-operator-is-ambiguous-while-building-for-i386",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:165,availability,operat,operator,165,"I think this is because array_ref has both operators - conversion to pointer, as well as array indexing, which is making ambiguity. I think we can safely remove the operator[]; that should fix it. . Found a similar Stackoverflow question: https://stackoverflow.com/questions/49607565/error-use-of-overloaded-operator-is-ambiguous-while-building-for-i386",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:284,availability,error,error-use-of-overloaded-operator-is-ambiguous-while-building-for-,284,"I think this is because array_ref has both operators - conversion to pointer, as well as array indexing, which is making ambiguity. I think we can safely remove the operator[]; that should fix it. . Found a similar Stackoverflow question: https://stackoverflow.com/questions/49607565/error-use-of-overloaded-operator-is-ambiguous-while-building-for-i386",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:215,deployability,Stack,Stackoverflow,215,"I think this is because array_ref has both operators - conversion to pointer, as well as array indexing, which is making ambiguity. I think we can safely remove the operator[]; that should fix it. . Found a similar Stackoverflow question: https://stackoverflow.com/questions/49607565/error-use-of-overloaded-operator-is-ambiguous-while-building-for-i386",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:247,deployability,stack,stackoverflow,247,"I think this is because array_ref has both operators - conversion to pointer, as well as array indexing, which is making ambiguity. I think we can safely remove the operator[]; that should fix it. . Found a similar Stackoverflow question: https://stackoverflow.com/questions/49607565/error-use-of-overloaded-operator-is-ambiguous-while-building-for-i386",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:336,deployability,build,building-for-,336,"I think this is because array_ref has both operators - conversion to pointer, as well as array indexing, which is making ambiguity. I think we can safely remove the operator[]; that should fix it. . Found a similar Stackoverflow question: https://stackoverflow.com/questions/49607565/error-use-of-overloaded-operator-is-ambiguous-while-building-for-i386",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:55,interoperability,convers,conversion,55,"I think this is because array_ref has both operators - conversion to pointer, as well as array indexing, which is making ambiguity. I think we can safely remove the operator[]; that should fix it. . Found a similar Stackoverflow question: https://stackoverflow.com/questions/49607565/error-use-of-overloaded-operator-is-ambiguous-while-building-for-i386",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:284,performance,error,error-use-of-overloaded-operator-is-ambiguous-while-building-for-,284,"I think this is because array_ref has both operators - conversion to pointer, as well as array indexing, which is making ambiguity. I think we can safely remove the operator[]; that should fix it. . Found a similar Stackoverflow question: https://stackoverflow.com/questions/49607565/error-use-of-overloaded-operator-is-ambiguous-while-building-for-i386",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:147,safety,safe,safely,147,"I think this is because array_ref has both operators - conversion to pointer, as well as array indexing, which is making ambiguity. I think we can safely remove the operator[]; that should fix it. . Found a similar Stackoverflow question: https://stackoverflow.com/questions/49607565/error-use-of-overloaded-operator-is-ambiguous-while-building-for-i386",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:284,safety,error,error-use-of-overloaded-operator-is-ambiguous-while-building-for-,284,"I think this is because array_ref has both operators - conversion to pointer, as well as array indexing, which is making ambiguity. I think we can safely remove the operator[]; that should fix it. . Found a similar Stackoverflow question: https://stackoverflow.com/questions/49607565/error-use-of-overloaded-operator-is-ambiguous-while-building-for-i386",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:284,usability,error,error-use-of-overloaded-operator-is-ambiguous-while-building-for-,284,"I think this is because array_ref has both operators - conversion to pointer, as well as array indexing, which is making ambiguity. I think we can safely remove the operator[]; that should fix it. . Found a similar Stackoverflow question: https://stackoverflow.com/questions/49607565/error-use-of-overloaded-operator-is-ambiguous-while-building-for-i386",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:55,availability,failur,failure,55,"@guitargeek, could we get a reproducer for the windows failure by any chance? In addition, maybe now it is a good time to check performance of clad. Do you think you can do this on this PR while we are working on getting things merged properly in the clad master?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:55,deployability,fail,failure,55,"@guitargeek, could we get a reproducer for the windows failure by any chance? In addition, maybe now it is a good time to check performance of clad. Do you think you can do this on this PR while we are working on getting things merged properly in the clad master?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:55,performance,failur,failure,55,"@guitargeek, could we get a reproducer for the windows failure by any chance? In addition, maybe now it is a good time to check performance of clad. Do you think you can do this on this PR while we are working on getting things merged properly in the clad master?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:114,performance,time,time,114,"@guitargeek, could we get a reproducer for the windows failure by any chance? In addition, maybe now it is a good time to check performance of clad. Do you think you can do this on this PR while we are working on getting things merged properly in the clad master?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:128,performance,perform,performance,128,"@guitargeek, could we get a reproducer for the windows failure by any chance? In addition, maybe now it is a good time to check performance of clad. Do you think you can do this on this PR while we are working on getting things merged properly in the clad master?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:55,reliability,fail,failure,55,"@guitargeek, could we get a reproducer for the windows failure by any chance? In addition, maybe now it is a good time to check performance of clad. Do you think you can do this on this PR while we are working on getting things merged properly in the clad master?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14165:128,usability,perform,performance,128,"@guitargeek, could we get a reproducer for the windows failure by any chance? In addition, maybe now it is a good time to check performance of clad. Do you think you can do this on this PR while we are working on getting things merged properly in the clad master?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165
https://github.com/root-project/root/pull/14166:62,interoperability,format,format,62,"Thanks for the review @couet! Do you want me to fix the clang-format, or can this already be merged?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14166
https://github.com/root-project/root/pull/14166:15,safety,review,review,15,"Thanks for the review @couet! Do you want me to fix the clang-format, or can this already be merged?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14166
https://github.com/root-project/root/pull/14166:15,testability,review,review,15,"Thanks for the review @couet! Do you want me to fix the clang-format, or can this already be merged?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14166
https://github.com/root-project/root/pull/14166:0,availability,ping,pinging,0,pinging @bellenot,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14166
https://github.com/root-project/root/issues/14169:143,deployability,build,build,143,"@paulgessinger this looks correct, `interpreter/llvm/` doesn't exist anymore (it moved to `interpreter/llvm-project/`). Is this an incremental build by any chance? If so, either please create a clean build directory, or take a look at https://mattermost.web.cern.ch/root/pl/za3ii4zi9pgi7cdokyqra8m4aa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:200,deployability,build,build,200,"@paulgessinger this looks correct, `interpreter/llvm/` doesn't exist anymore (it moved to `interpreter/llvm-project/`). Is this an incremental build by any chance? If so, either please create a clean build directory, or take a look at https://mattermost.web.cern.ch/root/pl/za3ii4zi9pgi7cdokyqra8m4aa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:55,reliability,doe,doesn,55,"@paulgessinger this looks correct, `interpreter/llvm/` doesn't exist anymore (it moved to `interpreter/llvm-project/`). Is this an incremental build by any chance? If so, either please create a clean build directory, or take a look at https://mattermost.web.cern.ch/root/pl/za3ii4zi9pgi7cdokyqra8m4aa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:56,deployability,build,build,56,"Thanks @hahnjo, you're right that it was an incremental build. The problem goes away in a clean build!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:96,deployability,build,build,96,"Thanks @hahnjo, you're right that it was an incremental build. The problem goes away in a clean build!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/pull/14170:25,availability,failur,failure,25,"Hi @hahnjo! How does the failure look like exactly? Are they using the builtin xrootd or not? If not, would it make sense to open an issue in https://github.com/xrootd/xrootd if our old version of the `cmake` file worked better than the upstream one in this case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:25,deployability,fail,failure,25,"Hi @hahnjo! How does the failure look like exactly? Are they using the builtin xrootd or not? If not, would it make sense to open an issue in https://github.com/xrootd/xrootd if our old version of the `cmake` file worked better than the upstream one in this case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:186,deployability,version,version,186,"Hi @hahnjo! How does the failure look like exactly? Are they using the builtin xrootd or not? If not, would it make sense to open an issue in https://github.com/xrootd/xrootd if our old version of the `cmake` file worked better than the upstream one in this case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:186,integrability,version,version,186,"Hi @hahnjo! How does the failure look like exactly? Are they using the builtin xrootd or not? If not, would it make sense to open an issue in https://github.com/xrootd/xrootd if our old version of the `cmake` file worked better than the upstream one in this case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:186,modifiability,version,version,186,"Hi @hahnjo! How does the failure look like exactly? Are they using the builtin xrootd or not? If not, would it make sense to open an issue in https://github.com/xrootd/xrootd if our old version of the `cmake` file worked better than the upstream one in this case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:25,performance,failur,failure,25,"Hi @hahnjo! How does the failure look like exactly? Are they using the builtin xrootd or not? If not, would it make sense to open an issue in https://github.com/xrootd/xrootd if our old version of the `cmake` file worked better than the upstream one in this case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:16,reliability,doe,does,16,"Hi @hahnjo! How does the failure look like exactly? Are they using the builtin xrootd or not? If not, would it make sense to open an issue in https://github.com/xrootd/xrootd if our old version of the `cmake` file worked better than the upstream one in this case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:25,reliability,fail,failure,25,"Hi @hahnjo! How does the failure look like exactly? Are they using the builtin xrootd or not? If not, would it make sense to open an issue in https://github.com/xrootd/xrootd if our old version of the `cmake` file worked better than the upstream one in this case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:16,availability,failur,failure,16,"You can see the failure on 5 platforms (!) in our CI:. ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. ```. They are using non-builtin XRootD, and as I write in https://github.com/root-project/root/pull/13752#issuecomment-1838159186 I believe this is a packaging error. I will report it to the correct place, but first I want to restore our builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:139,availability,Error,Error,139,"You can see the failure on 5 platforms (!) in our CI:. ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. ```. They are using non-builtin XRootD, and as I write in https://github.com/root-project/root/pull/13752#issuecomment-1838159186 I believe this is a packaging error. I will report it to the correct place, but first I want to restore our builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:213,availability,error,error,213,"You can see the failure on 5 platforms (!) in our CI:. ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. ```. They are using non-builtin XRootD, and as I write in https://github.com/root-project/root/pull/13752#issuecomment-1838159186 I believe this is a packaging error. I will report it to the correct place, but first I want to restore our builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:529,availability,error,error,529,"You can see the failure on 5 platforms (!) in our CI:. ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. ```. They are using non-builtin XRootD, and as I write in https://github.com/root-project/root/pull/13752#issuecomment-1838159186 I believe this is a packaging error. I will report it to the correct place, but first I want to restore our builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:595,availability,restor,restore,595,"You can see the failure on 5 platforms (!) in our CI:. ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. ```. They are using non-builtin XRootD, and as I write in https://github.com/root-project/root/pull/13752#issuecomment-1838159186 I believe this is a packaging error. I will report it to the correct place, but first I want to restore our builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:16,deployability,fail,failure,16,"You can see the failure on 5 platforms (!) in our CI:. ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. ```. They are using non-builtin XRootD, and as I write in https://github.com/root-project/root/pull/13752#issuecomment-1838159186 I believe this is a packaging error. I will report it to the correct place, but first I want to restore our builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:103,deployability,build,build,103,"You can see the failure on 5 platforms (!) in our CI:. ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. ```. They are using non-builtin XRootD, and as I write in https://github.com/root-project/root/pull/13752#issuecomment-1838159186 I believe this is a packaging error. I will report it to the correct place, but first I want to restore our builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:607,deployability,build,builds,607,"You can see the failure on 5 platforms (!) in our CI:. ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. ```. They are using non-builtin XRootD, and as I write in https://github.com/root-project/root/pull/13752#issuecomment-1838159186 I believe this is a packaging error. I will report it to the correct place, but first I want to restore our builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:29,interoperability,platform,platforms,29,"You can see the failure on 5 platforms (!) in our CI:. ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. ```. They are using non-builtin XRootD, and as I write in https://github.com/root-project/root/pull/13752#issuecomment-1838159186 I believe this is a packaging error. I will report it to the correct place, but first I want to restore our builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:519,modifiability,pac,packaging,519,"You can see the failure on 5 platforms (!) in our CI:. ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. ```. They are using non-builtin XRootD, and as I write in https://github.com/root-project/root/pull/13752#issuecomment-1838159186 I believe this is a packaging error. I will report it to the correct place, but first I want to restore our builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:16,performance,failur,failure,16,"You can see the failure on 5 platforms (!) in our CI:. ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. ```. They are using non-builtin XRootD, and as I write in https://github.com/root-project/root/pull/13752#issuecomment-1838159186 I believe this is a packaging error. I will report it to the correct place, but first I want to restore our builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:139,performance,Error,Error,139,"You can see the failure on 5 platforms (!) in our CI:. ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. ```. They are using non-builtin XRootD, and as I write in https://github.com/root-project/root/pull/13752#issuecomment-1838159186 I believe this is a packaging error. I will report it to the correct place, but first I want to restore our builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:213,performance,error,error,213,"You can see the failure on 5 platforms (!) in our CI:. ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. ```. They are using non-builtin XRootD, and as I write in https://github.com/root-project/root/pull/13752#issuecomment-1838159186 I believe this is a packaging error. I will report it to the correct place, but first I want to restore our builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:529,performance,error,error,529,"You can see the failure on 5 platforms (!) in our CI:. ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. ```. They are using non-builtin XRootD, and as I write in https://github.com/root-project/root/pull/13752#issuecomment-1838159186 I believe this is a packaging error. I will report it to the correct place, but first I want to restore our builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:16,reliability,fail,failure,16,"You can see the failure on 5 platforms (!) in our CI:. ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. ```. They are using non-builtin XRootD, and as I write in https://github.com/root-project/root/pull/13752#issuecomment-1838159186 I believe this is a packaging error. I will report it to the correct place, but first I want to restore our builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:595,reliability,restor,restore,595,"You can see the failure on 5 platforms (!) in our CI:. ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. ```. They are using non-builtin XRootD, and as I write in https://github.com/root-project/root/pull/13752#issuecomment-1838159186 I believe this is a packaging error. I will report it to the correct place, but first I want to restore our builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:139,safety,Error,Error,139,"You can see the failure on 5 platforms (!) in our CI:. ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. ```. They are using non-builtin XRootD, and as I write in https://github.com/root-project/root/pull/13752#issuecomment-1838159186 I believe this is a packaging error. I will report it to the correct place, but first I want to restore our builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:213,safety,error,error,213,"You can see the failure on 5 platforms (!) in our CI:. ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. ```. They are using non-builtin XRootD, and as I write in https://github.com/root-project/root/pull/13752#issuecomment-1838159186 I believe this is a packaging error. I will report it to the correct place, but first I want to restore our builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:529,safety,error,error,529,"You can see the failure on 5 platforms (!) in our CI:. ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. ```. They are using non-builtin XRootD, and as I write in https://github.com/root-project/root/pull/13752#issuecomment-1838159186 I believe this is a packaging error. I will report it to the correct place, but first I want to restore our builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:139,usability,Error,Error,139,"You can see the failure on 5 platforms (!) in our CI:. ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. ```. They are using non-builtin XRootD, and as I write in https://github.com/root-project/root/pull/13752#issuecomment-1838159186 I believe this is a packaging error. I will report it to the correct place, but first I want to restore our builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:213,usability,error,error,213,"You can see the failure on 5 platforms (!) in our CI:. ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. ```. They are using non-builtin XRootD, and as I write in https://github.com/root-project/root/pull/13752#issuecomment-1838159186 I believe this is a packaging error. I will report it to the correct place, but first I want to restore our builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:529,usability,error,error,529,"You can see the failure on 5 platforms (!) in our CI:. ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. ```. They are using non-builtin XRootD, and as I write in https://github.com/root-project/root/pull/13752#issuecomment-1838159186 I believe this is a packaging error. I will report it to the correct place, but first I want to restore our builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:103,energy efficiency,optim,optimal,103,"Thanks! Yes, if it's packaged in a was that xrootds own `XRootDConfig.cmake` can't find it, that's not optimal and should be reported",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:21,modifiability,pac,packaged,21,"Thanks! Yes, if it's packaged in a was that xrootds own `XRootDConfig.cmake` can't find it, that's not optimal and should be reported",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/issues/14171:155,deployability,updat,update-option,155,Further discussions in the forum are most likely related https://root-forum.cern.ch/t/streamer-info-disappears-when-opening-a-file-again-for-writing-using-update-option/55140,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:155,safety,updat,update-option,155,Further discussions in the forum are most likely related https://root-forum.cern.ch/t/streamer-info-disappears-when-opening-a-file-again-for-writing-using-update-option/55140,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:155,security,updat,update-option,155,Further discussions in the forum are most likely related https://root-forum.cern.ch/t/streamer-info-disappears-when-opening-a-file-again-for-writing-using-update-option/55140,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:222,availability,avail,available,222,As fas as I can tell the problem was solved by [IO: Fix StreamerInfo record write during file update. by pcanal · Pull Request #13842 · root-project/root · GitHub](https://github.com/root-project/root/pull/13842) which is available in ~~v6.28/06~~ v6.28/08 and up.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:94,deployability,updat,update,94,As fas as I can tell the problem was solved by [IO: Fix StreamerInfo record write during file update. by pcanal · Pull Request #13842 · root-project/root · GitHub](https://github.com/root-project/root/pull/13842) which is available in ~~v6.28/06~~ v6.28/08 and up.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:222,reliability,availab,available,222,As fas as I can tell the problem was solved by [IO: Fix StreamerInfo record write during file update. by pcanal · Pull Request #13842 · root-project/root · GitHub](https://github.com/root-project/root/pull/13842) which is available in ~~v6.28/06~~ v6.28/08 and up.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:94,safety,updat,update,94,As fas as I can tell the problem was solved by [IO: Fix StreamerInfo record write during file update. by pcanal · Pull Request #13842 · root-project/root · GitHub](https://github.com/root-project/root/pull/13842) which is available in ~~v6.28/06~~ v6.28/08 and up.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:222,safety,avail,available,222,As fas as I can tell the problem was solved by [IO: Fix StreamerInfo record write during file update. by pcanal · Pull Request #13842 · root-project/root · GitHub](https://github.com/root-project/root/pull/13842) which is available in ~~v6.28/06~~ v6.28/08 and up.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:94,security,updat,update,94,As fas as I can tell the problem was solved by [IO: Fix StreamerInfo record write during file update. by pcanal · Pull Request #13842 · root-project/root · GitHub](https://github.com/root-project/root/pull/13842) which is available in ~~v6.28/06~~ v6.28/08 and up.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:222,security,availab,available,222,As fas as I can tell the problem was solved by [IO: Fix StreamerInfo record write during file update. by pcanal · Pull Request #13842 · root-project/root · GitHub](https://github.com/root-project/root/pull/13842) which is available in ~~v6.28/06~~ v6.28/08 and up.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:2,usability,confirm,confirm,2,I confirm that the issue is fixed in **v6.28/08** and above. Closing the ticket.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/pull/14172:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:11,deployability,updat,update,11,Can we not update to upstream zlib instead of modifying our fork? @pcanal,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:11,safety,updat,update,11,Can we not update to upstream zlib instead of modifying our fork? @pcanal,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:11,security,updat,update,11,Can we not update to upstream zlib instead of modifying our fork? @pcanal,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:46,security,modif,modifying,46,Can we not update to upstream zlib instead of modifying our fork? @pcanal,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:170,performance,perform,performance,170,To add a bit of potentially stale knowledge from my side (it has been a bit since I looked into this): I think root ships a partial re-implementation of zlib with better performance (at least [this comment chain](https://github.com/spack/spack/pull/20839#pullrequestreview-569061383) suggests that). I am not sure whether those have ever made it into zlib proper.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:170,usability,perform,performance,170,To add a bit of potentially stale knowledge from my side (it has been a bit since I looked into this): I think root ships a partial re-implementation of zlib with better performance (at least [this comment chain](https://github.com/spack/spack/pull/20839#pullrequestreview-569061383) suggests that). I am not sure whether those have ever made it into zlib proper.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:13,deployability,updat,update,13,> Can we not update to upstream zlib instead of modifying our fork? Probably: i.e. from https://github.com/cloudflare/zlib,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:107,energy efficiency,cloud,cloudflare,107,> Can we not update to upstream zlib instead of modifying our fork? Probably: i.e. from https://github.com/cloudflare/zlib,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:13,safety,updat,update,13,> Can we not update to upstream zlib instead of modifying our fork? Probably: i.e. from https://github.com/cloudflare/zlib,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:13,security,updat,update,13,> Can we not update to upstream zlib instead of modifying our fork? Probably: i.e. from https://github.com/cloudflare/zlib,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:48,security,modif,modifying,48,> Can we not update to upstream zlib instead of modifying our fork? Probably: i.e. from https://github.com/cloudflare/zlib,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/issues/14173:265,performance,time,time,265,"Unfortunately I am not being paid by CERN, and I am quite overloaded. I have to dedicate my effort to work on the projects I am being paid for. Of course, I can just live with the classes as they are written. I just thought it would be good to dedicate a bit of my time to give you just some feedback/ideas so that you understand how to improve my own user experience. Of course, I understand that my user experience might be different to that of the average user experience, and the ROOT priorities are others. But it is not me who must push for CERN reputation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:319,testability,understand,understand,319,"Unfortunately I am not being paid by CERN, and I am quite overloaded. I have to dedicate my effort to work on the projects I am being paid for. Of course, I can just live with the classes as they are written. I just thought it would be good to dedicate a bit of my time to give you just some feedback/ideas so that you understand how to improve my own user experience. Of course, I understand that my user experience might be different to that of the average user experience, and the ROOT priorities are others. But it is not me who must push for CERN reputation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:382,testability,understand,understand,382,"Unfortunately I am not being paid by CERN, and I am quite overloaded. I have to dedicate my effort to work on the projects I am being paid for. Of course, I can just live with the classes as they are written. I just thought it would be good to dedicate a bit of my time to give you just some feedback/ideas so that you understand how to improve my own user experience. Of course, I understand that my user experience might be different to that of the average user experience, and the ROOT priorities are others. But it is not me who must push for CERN reputation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:292,usability,feedback,feedback,292,"Unfortunately I am not being paid by CERN, and I am quite overloaded. I have to dedicate my effort to work on the projects I am being paid for. Of course, I can just live with the classes as they are written. I just thought it would be good to dedicate a bit of my time to give you just some feedback/ideas so that you understand how to improve my own user experience. Of course, I understand that my user experience might be different to that of the average user experience, and the ROOT priorities are others. But it is not me who must push for CERN reputation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:352,usability,user,user,352,"Unfortunately I am not being paid by CERN, and I am quite overloaded. I have to dedicate my effort to work on the projects I am being paid for. Of course, I can just live with the classes as they are written. I just thought it would be good to dedicate a bit of my time to give you just some feedback/ideas so that you understand how to improve my own user experience. Of course, I understand that my user experience might be different to that of the average user experience, and the ROOT priorities are others. But it is not me who must push for CERN reputation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:357,usability,experien,experience,357,"Unfortunately I am not being paid by CERN, and I am quite overloaded. I have to dedicate my effort to work on the projects I am being paid for. Of course, I can just live with the classes as they are written. I just thought it would be good to dedicate a bit of my time to give you just some feedback/ideas so that you understand how to improve my own user experience. Of course, I understand that my user experience might be different to that of the average user experience, and the ROOT priorities are others. But it is not me who must push for CERN reputation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:401,usability,user,user,401,"Unfortunately I am not being paid by CERN, and I am quite overloaded. I have to dedicate my effort to work on the projects I am being paid for. Of course, I can just live with the classes as they are written. I just thought it would be good to dedicate a bit of my time to give you just some feedback/ideas so that you understand how to improve my own user experience. Of course, I understand that my user experience might be different to that of the average user experience, and the ROOT priorities are others. But it is not me who must push for CERN reputation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:406,usability,experien,experience,406,"Unfortunately I am not being paid by CERN, and I am quite overloaded. I have to dedicate my effort to work on the projects I am being paid for. Of course, I can just live with the classes as they are written. I just thought it would be good to dedicate a bit of my time to give you just some feedback/ideas so that you understand how to improve my own user experience. Of course, I understand that my user experience might be different to that of the average user experience, and the ROOT priorities are others. But it is not me who must push for CERN reputation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:459,usability,user,user,459,"Unfortunately I am not being paid by CERN, and I am quite overloaded. I have to dedicate my effort to work on the projects I am being paid for. Of course, I can just live with the classes as they are written. I just thought it would be good to dedicate a bit of my time to give you just some feedback/ideas so that you understand how to improve my own user experience. Of course, I understand that my user experience might be different to that of the average user experience, and the ROOT priorities are others. But it is not me who must push for CERN reputation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:464,usability,experien,experience,464,"Unfortunately I am not being paid by CERN, and I am quite overloaded. I have to dedicate my effort to work on the projects I am being paid for. Of course, I can just live with the classes as they are written. I just thought it would be good to dedicate a bit of my time to give you just some feedback/ideas so that you understand how to improve my own user experience. Of course, I understand that my user experience might be different to that of the average user experience, and the ROOT priorities are others. But it is not me who must push for CERN reputation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:297,performance,time,time,297,"Perhaps if ROOT people contributes the PR, I could review and test it works (half the work). As a ROOT user I would enter into the development chain, at least I find it more natural. If I write to the root-forum, I am pointed towards GitHub issues, then towards creating myself the PR. Then, next time I will think twice about writing to the root-forum. This is I believe the natural average user thought. Of course, I understand the developer perspective too :) .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:51,safety,review,review,51,"Perhaps if ROOT people contributes the PR, I could review and test it works (half the work). As a ROOT user I would enter into the development chain, at least I find it more natural. If I write to the root-forum, I am pointed towards GitHub issues, then towards creating myself the PR. Then, next time I will think twice about writing to the root-forum. This is I believe the natural average user thought. Of course, I understand the developer perspective too :) .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:62,safety,test,test,62,"Perhaps if ROOT people contributes the PR, I could review and test it works (half the work). As a ROOT user I would enter into the development chain, at least I find it more natural. If I write to the root-forum, I am pointed towards GitHub issues, then towards creating myself the PR. Then, next time I will think twice about writing to the root-forum. This is I believe the natural average user thought. Of course, I understand the developer perspective too :) .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:51,testability,review,review,51,"Perhaps if ROOT people contributes the PR, I could review and test it works (half the work). As a ROOT user I would enter into the development chain, at least I find it more natural. If I write to the root-forum, I am pointed towards GitHub issues, then towards creating myself the PR. Then, next time I will think twice about writing to the root-forum. This is I believe the natural average user thought. Of course, I understand the developer perspective too :) .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:62,testability,test,test,62,"Perhaps if ROOT people contributes the PR, I could review and test it works (half the work). As a ROOT user I would enter into the development chain, at least I find it more natural. If I write to the root-forum, I am pointed towards GitHub issues, then towards creating myself the PR. Then, next time I will think twice about writing to the root-forum. This is I believe the natural average user thought. Of course, I understand the developer perspective too :) .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:419,testability,understand,understand,419,"Perhaps if ROOT people contributes the PR, I could review and test it works (half the work). As a ROOT user I would enter into the development chain, at least I find it more natural. If I write to the root-forum, I am pointed towards GitHub issues, then towards creating myself the PR. Then, next time I will think twice about writing to the root-forum. This is I believe the natural average user thought. Of course, I understand the developer perspective too :) .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:103,usability,user,user,103,"Perhaps if ROOT people contributes the PR, I could review and test it works (half the work). As a ROOT user I would enter into the development chain, at least I find it more natural. If I write to the root-forum, I am pointed towards GitHub issues, then towards creating myself the PR. Then, next time I will think twice about writing to the root-forum. This is I believe the natural average user thought. Of course, I understand the developer perspective too :) .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:392,usability,user,user,392,"Perhaps if ROOT people contributes the PR, I could review and test it works (half the work). As a ROOT user I would enter into the development chain, at least I find it more natural. If I write to the root-forum, I am pointed towards GitHub issues, then towards creating myself the PR. Then, next time I will think twice about writing to the root-forum. This is I believe the natural average user thought. Of course, I understand the developer perspective too :) .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/pull/14174:1235,availability,down,downside,1235,"> I am not in favour of this solution. I don't think is bringing any advantages, we were using a plugin manager that was based on the interpreter and there were no direct dependency on fftw3. Now you require people to directly install fftw3 and they would need to set also the include path. It is an over complication for the users. You are right, when building ROOT with `fftw3=ON`, it brings zero advantages but only makes if more fragile because `fftw3.h` needs to be in the path. *Edit*: it just came to my mind that this might actually be a rare case. Right now, `builtin_fftw3*` is always `OFF` by default, also on cfmfs. So the `fftw3.h` header was already found in the include path at build time, which means it's probably found when running ROOT too. However, in case where ROOT is built with `fftw3=OFF`, this makes the difference between the `RooFFTConvPdf` even working or not. And this case is relevant because we release the ROOT binaries like this. Since we need to make sure that FFTs work in RooFit when people install ROOT on their laptops with the binaries, I think a fix like this is necessary. Maybe as a compromise, I could apply the these changes only in case where `fftw3=OFF` by using preprocessor macros? The downside of this would be two different code branches thought.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:104,deployability,manag,manager,104,"> I am not in favour of this solution. I don't think is bringing any advantages, we were using a plugin manager that was based on the interpreter and there were no direct dependency on fftw3. Now you require people to directly install fftw3 and they would need to set also the include path. It is an over complication for the users. You are right, when building ROOT with `fftw3=ON`, it brings zero advantages but only makes if more fragile because `fftw3.h` needs to be in the path. *Edit*: it just came to my mind that this might actually be a rare case. Right now, `builtin_fftw3*` is always `OFF` by default, also on cfmfs. So the `fftw3.h` header was already found in the include path at build time, which means it's probably found when running ROOT too. However, in case where ROOT is built with `fftw3=OFF`, this makes the difference between the `RooFFTConvPdf` even working or not. And this case is relevant because we release the ROOT binaries like this. Since we need to make sure that FFTs work in RooFit when people install ROOT on their laptops with the binaries, I think a fix like this is necessary. Maybe as a compromise, I could apply the these changes only in case where `fftw3=OFF` by using preprocessor macros? The downside of this would be two different code branches thought.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:171,deployability,depend,dependency,171,"> I am not in favour of this solution. I don't think is bringing any advantages, we were using a plugin manager that was based on the interpreter and there were no direct dependency on fftw3. Now you require people to directly install fftw3 and they would need to set also the include path. It is an over complication for the users. You are right, when building ROOT with `fftw3=ON`, it brings zero advantages but only makes if more fragile because `fftw3.h` needs to be in the path. *Edit*: it just came to my mind that this might actually be a rare case. Right now, `builtin_fftw3*` is always `OFF` by default, also on cfmfs. So the `fftw3.h` header was already found in the include path at build time, which means it's probably found when running ROOT too. However, in case where ROOT is built with `fftw3=OFF`, this makes the difference between the `RooFFTConvPdf` even working or not. And this case is relevant because we release the ROOT binaries like this. Since we need to make sure that FFTs work in RooFit when people install ROOT on their laptops with the binaries, I think a fix like this is necessary. Maybe as a compromise, I could apply the these changes only in case where `fftw3=OFF` by using preprocessor macros? The downside of this would be two different code branches thought.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:227,deployability,instal,install,227,"> I am not in favour of this solution. I don't think is bringing any advantages, we were using a plugin manager that was based on the interpreter and there were no direct dependency on fftw3. Now you require people to directly install fftw3 and they would need to set also the include path. It is an over complication for the users. You are right, when building ROOT with `fftw3=ON`, it brings zero advantages but only makes if more fragile because `fftw3.h` needs to be in the path. *Edit*: it just came to my mind that this might actually be a rare case. Right now, `builtin_fftw3*` is always `OFF` by default, also on cfmfs. So the `fftw3.h` header was already found in the include path at build time, which means it's probably found when running ROOT too. However, in case where ROOT is built with `fftw3=OFF`, this makes the difference between the `RooFFTConvPdf` even working or not. And this case is relevant because we release the ROOT binaries like this. Since we need to make sure that FFTs work in RooFit when people install ROOT on their laptops with the binaries, I think a fix like this is necessary. Maybe as a compromise, I could apply the these changes only in case where `fftw3=OFF` by using preprocessor macros? The downside of this would be two different code branches thought.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:353,deployability,build,building,353,"> I am not in favour of this solution. I don't think is bringing any advantages, we were using a plugin manager that was based on the interpreter and there were no direct dependency on fftw3. Now you require people to directly install fftw3 and they would need to set also the include path. It is an over complication for the users. You are right, when building ROOT with `fftw3=ON`, it brings zero advantages but only makes if more fragile because `fftw3.h` needs to be in the path. *Edit*: it just came to my mind that this might actually be a rare case. Right now, `builtin_fftw3*` is always `OFF` by default, also on cfmfs. So the `fftw3.h` header was already found in the include path at build time, which means it's probably found when running ROOT too. However, in case where ROOT is built with `fftw3=OFF`, this makes the difference between the `RooFFTConvPdf` even working or not. And this case is relevant because we release the ROOT binaries like this. Since we need to make sure that FFTs work in RooFit when people install ROOT on their laptops with the binaries, I think a fix like this is necessary. Maybe as a compromise, I could apply the these changes only in case where `fftw3=OFF` by using preprocessor macros? The downside of this would be two different code branches thought.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:693,deployability,build,build,693,"> I am not in favour of this solution. I don't think is bringing any advantages, we were using a plugin manager that was based on the interpreter and there were no direct dependency on fftw3. Now you require people to directly install fftw3 and they would need to set also the include path. It is an over complication for the users. You are right, when building ROOT with `fftw3=ON`, it brings zero advantages but only makes if more fragile because `fftw3.h` needs to be in the path. *Edit*: it just came to my mind that this might actually be a rare case. Right now, `builtin_fftw3*` is always `OFF` by default, also on cfmfs. So the `fftw3.h` header was already found in the include path at build time, which means it's probably found when running ROOT too. However, in case where ROOT is built with `fftw3=OFF`, this makes the difference between the `RooFFTConvPdf` even working or not. And this case is relevant because we release the ROOT binaries like this. Since we need to make sure that FFTs work in RooFit when people install ROOT on their laptops with the binaries, I think a fix like this is necessary. Maybe as a compromise, I could apply the these changes only in case where `fftw3=OFF` by using preprocessor macros? The downside of this would be two different code branches thought.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:927,deployability,releas,release,927,"> I am not in favour of this solution. I don't think is bringing any advantages, we were using a plugin manager that was based on the interpreter and there were no direct dependency on fftw3. Now you require people to directly install fftw3 and they would need to set also the include path. It is an over complication for the users. You are right, when building ROOT with `fftw3=ON`, it brings zero advantages but only makes if more fragile because `fftw3.h` needs to be in the path. *Edit*: it just came to my mind that this might actually be a rare case. Right now, `builtin_fftw3*` is always `OFF` by default, also on cfmfs. So the `fftw3.h` header was already found in the include path at build time, which means it's probably found when running ROOT too. However, in case where ROOT is built with `fftw3=OFF`, this makes the difference between the `RooFFTConvPdf` even working or not. And this case is relevant because we release the ROOT binaries like this. Since we need to make sure that FFTs work in RooFit when people install ROOT on their laptops with the binaries, I think a fix like this is necessary. Maybe as a compromise, I could apply the these changes only in case where `fftw3=OFF` by using preprocessor macros? The downside of this would be two different code branches thought.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:1028,deployability,instal,install,1028,"> I am not in favour of this solution. I don't think is bringing any advantages, we were using a plugin manager that was based on the interpreter and there were no direct dependency on fftw3. Now you require people to directly install fftw3 and they would need to set also the include path. It is an over complication for the users. You are right, when building ROOT with `fftw3=ON`, it brings zero advantages but only makes if more fragile because `fftw3.h` needs to be in the path. *Edit*: it just came to my mind that this might actually be a rare case. Right now, `builtin_fftw3*` is always `OFF` by default, also on cfmfs. So the `fftw3.h` header was already found in the include path at build time, which means it's probably found when running ROOT too. However, in case where ROOT is built with `fftw3=OFF`, this makes the difference between the `RooFFTConvPdf` even working or not. And this case is relevant because we release the ROOT binaries like this. Since we need to make sure that FFTs work in RooFit when people install ROOT on their laptops with the binaries, I think a fix like this is necessary. Maybe as a compromise, I could apply the these changes only in case where `fftw3=OFF` by using preprocessor macros? The downside of this would be two different code branches thought.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:104,energy efficiency,manag,manager,104,"> I am not in favour of this solution. I don't think is bringing any advantages, we were using a plugin manager that was based on the interpreter and there were no direct dependency on fftw3. Now you require people to directly install fftw3 and they would need to set also the include path. It is an over complication for the users. You are right, when building ROOT with `fftw3=ON`, it brings zero advantages but only makes if more fragile because `fftw3.h` needs to be in the path. *Edit*: it just came to my mind that this might actually be a rare case. Right now, `builtin_fftw3*` is always `OFF` by default, also on cfmfs. So the `fftw3.h` header was already found in the include path at build time, which means it's probably found when running ROOT too. However, in case where ROOT is built with `fftw3=OFF`, this makes the difference between the `RooFFTConvPdf` even working or not. And this case is relevant because we release the ROOT binaries like this. Since we need to make sure that FFTs work in RooFit when people install ROOT on their laptops with the binaries, I think a fix like this is necessary. Maybe as a compromise, I could apply the these changes only in case where `fftw3=OFF` by using preprocessor macros? The downside of this would be two different code branches thought.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:171,integrability,depend,dependency,171,"> I am not in favour of this solution. I don't think is bringing any advantages, we were using a plugin manager that was based on the interpreter and there were no direct dependency on fftw3. Now you require people to directly install fftw3 and they would need to set also the include path. It is an over complication for the users. You are right, when building ROOT with `fftw3=ON`, it brings zero advantages but only makes if more fragile because `fftw3.h` needs to be in the path. *Edit*: it just came to my mind that this might actually be a rare case. Right now, `builtin_fftw3*` is always `OFF` by default, also on cfmfs. So the `fftw3.h` header was already found in the include path at build time, which means it's probably found when running ROOT too. However, in case where ROOT is built with `fftw3=OFF`, this makes the difference between the `RooFFTConvPdf` even working or not. And this case is relevant because we release the ROOT binaries like this. Since we need to make sure that FFTs work in RooFit when people install ROOT on their laptops with the binaries, I think a fix like this is necessary. Maybe as a compromise, I could apply the these changes only in case where `fftw3=OFF` by using preprocessor macros? The downside of this would be two different code branches thought.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:97,interoperability,plug,plugin,97,"> I am not in favour of this solution. I don't think is bringing any advantages, we were using a plugin manager that was based on the interpreter and there were no direct dependency on fftw3. Now you require people to directly install fftw3 and they would need to set also the include path. It is an over complication for the users. You are right, when building ROOT with `fftw3=ON`, it brings zero advantages but only makes if more fragile because `fftw3.h` needs to be in the path. *Edit*: it just came to my mind that this might actually be a rare case. Right now, `builtin_fftw3*` is always `OFF` by default, also on cfmfs. So the `fftw3.h` header was already found in the include path at build time, which means it's probably found when running ROOT too. However, in case where ROOT is built with `fftw3=OFF`, this makes the difference between the `RooFFTConvPdf` even working or not. And this case is relevant because we release the ROOT binaries like this. Since we need to make sure that FFTs work in RooFit when people install ROOT on their laptops with the binaries, I think a fix like this is necessary. Maybe as a compromise, I could apply the these changes only in case where `fftw3=OFF` by using preprocessor macros? The downside of this would be two different code branches thought.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:171,modifiability,depend,dependency,171,"> I am not in favour of this solution. I don't think is bringing any advantages, we were using a plugin manager that was based on the interpreter and there were no direct dependency on fftw3. Now you require people to directly install fftw3 and they would need to set also the include path. It is an over complication for the users. You are right, when building ROOT with `fftw3=ON`, it brings zero advantages but only makes if more fragile because `fftw3.h` needs to be in the path. *Edit*: it just came to my mind that this might actually be a rare case. Right now, `builtin_fftw3*` is always `OFF` by default, also on cfmfs. So the `fftw3.h` header was already found in the include path at build time, which means it's probably found when running ROOT too. However, in case where ROOT is built with `fftw3=OFF`, this makes the difference between the `RooFFTConvPdf` even working or not. And this case is relevant because we release the ROOT binaries like this. Since we need to make sure that FFTs work in RooFit when people install ROOT on their laptops with the binaries, I think a fix like this is necessary. Maybe as a compromise, I could apply the these changes only in case where `fftw3=OFF` by using preprocessor macros? The downside of this would be two different code branches thought.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:699,performance,time,time,699,"> I am not in favour of this solution. I don't think is bringing any advantages, we were using a plugin manager that was based on the interpreter and there were no direct dependency on fftw3. Now you require people to directly install fftw3 and they would need to set also the include path. It is an over complication for the users. You are right, when building ROOT with `fftw3=ON`, it brings zero advantages but only makes if more fragile because `fftw3.h` needs to be in the path. *Edit*: it just came to my mind that this might actually be a rare case. Right now, `builtin_fftw3*` is always `OFF` by default, also on cfmfs. So the `fftw3.h` header was already found in the include path at build time, which means it's probably found when running ROOT too. However, in case where ROOT is built with `fftw3=OFF`, this makes the difference between the `RooFFTConvPdf` even working or not. And this case is relevant because we release the ROOT binaries like this. Since we need to make sure that FFTs work in RooFit when people install ROOT on their laptops with the binaries, I think a fix like this is necessary. Maybe as a compromise, I could apply the these changes only in case where `fftw3=OFF` by using preprocessor macros? The downside of this would be two different code branches thought.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:104,safety,manag,manager,104,"> I am not in favour of this solution. I don't think is bringing any advantages, we were using a plugin manager that was based on the interpreter and there were no direct dependency on fftw3. Now you require people to directly install fftw3 and they would need to set also the include path. It is an over complication for the users. You are right, when building ROOT with `fftw3=ON`, it brings zero advantages but only makes if more fragile because `fftw3.h` needs to be in the path. *Edit*: it just came to my mind that this might actually be a rare case. Right now, `builtin_fftw3*` is always `OFF` by default, also on cfmfs. So the `fftw3.h` header was already found in the include path at build time, which means it's probably found when running ROOT too. However, in case where ROOT is built with `fftw3=OFF`, this makes the difference between the `RooFFTConvPdf` even working or not. And this case is relevant because we release the ROOT binaries like this. Since we need to make sure that FFTs work in RooFit when people install ROOT on their laptops with the binaries, I think a fix like this is necessary. Maybe as a compromise, I could apply the these changes only in case where `fftw3=OFF` by using preprocessor macros? The downside of this would be two different code branches thought.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:171,safety,depend,dependency,171,"> I am not in favour of this solution. I don't think is bringing any advantages, we were using a plugin manager that was based on the interpreter and there were no direct dependency on fftw3. Now you require people to directly install fftw3 and they would need to set also the include path. It is an over complication for the users. You are right, when building ROOT with `fftw3=ON`, it brings zero advantages but only makes if more fragile because `fftw3.h` needs to be in the path. *Edit*: it just came to my mind that this might actually be a rare case. Right now, `builtin_fftw3*` is always `OFF` by default, also on cfmfs. So the `fftw3.h` header was already found in the include path at build time, which means it's probably found when running ROOT too. However, in case where ROOT is built with `fftw3=OFF`, this makes the difference between the `RooFFTConvPdf` even working or not. And this case is relevant because we release the ROOT binaries like this. Since we need to make sure that FFTs work in RooFit when people install ROOT on their laptops with the binaries, I think a fix like this is necessary. Maybe as a compromise, I could apply the these changes only in case where `fftw3=OFF` by using preprocessor macros? The downside of this would be two different code branches thought.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:305,safety,compl,complication,305,"> I am not in favour of this solution. I don't think is bringing any advantages, we were using a plugin manager that was based on the interpreter and there were no direct dependency on fftw3. Now you require people to directly install fftw3 and they would need to set also the include path. It is an over complication for the users. You are right, when building ROOT with `fftw3=ON`, it brings zero advantages but only makes if more fragile because `fftw3.h` needs to be in the path. *Edit*: it just came to my mind that this might actually be a rare case. Right now, `builtin_fftw3*` is always `OFF` by default, also on cfmfs. So the `fftw3.h` header was already found in the include path at build time, which means it's probably found when running ROOT too. However, in case where ROOT is built with `fftw3=OFF`, this makes the difference between the `RooFFTConvPdf` even working or not. And this case is relevant because we release the ROOT binaries like this. Since we need to make sure that FFTs work in RooFit when people install ROOT on their laptops with the binaries, I think a fix like this is necessary. Maybe as a compromise, I could apply the these changes only in case where `fftw3=OFF` by using preprocessor macros? The downside of this would be two different code branches thought.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:305,security,compl,complication,305,"> I am not in favour of this solution. I don't think is bringing any advantages, we were using a plugin manager that was based on the interpreter and there were no direct dependency on fftw3. Now you require people to directly install fftw3 and they would need to set also the include path. It is an over complication for the users. You are right, when building ROOT with `fftw3=ON`, it brings zero advantages but only makes if more fragile because `fftw3.h` needs to be in the path. *Edit*: it just came to my mind that this might actually be a rare case. Right now, `builtin_fftw3*` is always `OFF` by default, also on cfmfs. So the `fftw3.h` header was already found in the include path at build time, which means it's probably found when running ROOT too. However, in case where ROOT is built with `fftw3=OFF`, this makes the difference between the `RooFFTConvPdf` even working or not. And this case is relevant because we release the ROOT binaries like this. Since we need to make sure that FFTs work in RooFit when people install ROOT on their laptops with the binaries, I think a fix like this is necessary. Maybe as a compromise, I could apply the these changes only in case where `fftw3=OFF` by using preprocessor macros? The downside of this would be two different code branches thought.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:171,testability,depend,dependency,171,"> I am not in favour of this solution. I don't think is bringing any advantages, we were using a plugin manager that was based on the interpreter and there were no direct dependency on fftw3. Now you require people to directly install fftw3 and they would need to set also the include path. It is an over complication for the users. You are right, when building ROOT with `fftw3=ON`, it brings zero advantages but only makes if more fragile because `fftw3.h` needs to be in the path. *Edit*: it just came to my mind that this might actually be a rare case. Right now, `builtin_fftw3*` is always `OFF` by default, also on cfmfs. So the `fftw3.h` header was already found in the include path at build time, which means it's probably found when running ROOT too. However, in case where ROOT is built with `fftw3=OFF`, this makes the difference between the `RooFFTConvPdf` even working or not. And this case is relevant because we release the ROOT binaries like this. Since we need to make sure that FFTs work in RooFit when people install ROOT on their laptops with the binaries, I think a fix like this is necessary. Maybe as a compromise, I could apply the these changes only in case where `fftw3=OFF` by using preprocessor macros? The downside of this would be two different code branches thought.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:326,usability,user,users,326,"> I am not in favour of this solution. I don't think is bringing any advantages, we were using a plugin manager that was based on the interpreter and there were no direct dependency on fftw3. Now you require people to directly install fftw3 and they would need to set also the include path. It is an over complication for the users. You are right, when building ROOT with `fftw3=ON`, it brings zero advantages but only makes if more fragile because `fftw3.h` needs to be in the path. *Edit*: it just came to my mind that this might actually be a rare case. Right now, `builtin_fftw3*` is always `OFF` by default, also on cfmfs. So the `fftw3.h` header was already found in the include path at build time, which means it's probably found when running ROOT too. However, in case where ROOT is built with `fftw3=OFF`, this makes the difference between the `RooFFTConvPdf` even working or not. And this case is relevant because we release the ROOT binaries like this. Since we need to make sure that FFTs work in RooFit when people install ROOT on their laptops with the binaries, I think a fix like this is necessary. Maybe as a compromise, I could apply the these changes only in case where `fftw3=OFF` by using preprocessor macros? The downside of this would be two different code branches thought.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14175:128,availability,consist,consistent,128,"Many thanks @gganis. I agree, we should discuss if we can drop support for old XRootD versions. I think that decision should be consistent throughout the ROOT sources.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14175
https://github.com/root-project/root/pull/14175:86,deployability,version,versions,86,"Many thanks @gganis. I agree, we should discuss if we can drop support for old XRootD versions. I think that decision should be consistent throughout the ROOT sources.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14175
https://github.com/root-project/root/pull/14175:86,integrability,version,versions,86,"Many thanks @gganis. I agree, we should discuss if we can drop support for old XRootD versions. I think that decision should be consistent throughout the ROOT sources.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14175
https://github.com/root-project/root/pull/14175:86,modifiability,version,versions,86,"Many thanks @gganis. I agree, we should discuss if we can drop support for old XRootD versions. I think that decision should be consistent throughout the ROOT sources.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14175
https://github.com/root-project/root/pull/14175:63,usability,support,support,63,"Many thanks @gganis. I agree, we should discuss if we can drop support for old XRootD versions. I think that decision should be consistent throughout the ROOT sources.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14175
https://github.com/root-project/root/pull/14175:128,usability,consist,consistent,128,"Many thanks @gganis. I agree, we should discuss if we can drop support for old XRootD versions. I think that decision should be consistent throughout the ROOT sources.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14175
https://github.com/root-project/root/pull/14176:11,deployability,BUILD,BUILD,11,@phsft-bot BUILD,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14176
https://github.com/root-project/root/pull/14176:22,availability,failur,failure,22,"Not sure about the CI failure, but may be related to:. `get_filename_component(ROOT_LIBRARY_DIR ""${ROOTSYS}/lib"" ABSOLUTE)`. in [roottest/CMakeLists.txt#L200](https://github.com/root-project/roottest/blob/e7c9a5cbc969fa99b668684cbebc59d554ceebc8/CMakeLists.txt#L200)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14176
https://github.com/root-project/root/pull/14176:22,deployability,fail,failure,22,"Not sure about the CI failure, but may be related to:. `get_filename_component(ROOT_LIBRARY_DIR ""${ROOTSYS}/lib"" ABSOLUTE)`. in [roottest/CMakeLists.txt#L200](https://github.com/root-project/roottest/blob/e7c9a5cbc969fa99b668684cbebc59d554ceebc8/CMakeLists.txt#L200)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14176
https://github.com/root-project/root/pull/14176:22,performance,failur,failure,22,"Not sure about the CI failure, but may be related to:. `get_filename_component(ROOT_LIBRARY_DIR ""${ROOTSYS}/lib"" ABSOLUTE)`. in [roottest/CMakeLists.txt#L200](https://github.com/root-project/roottest/blob/e7c9a5cbc969fa99b668684cbebc59d554ceebc8/CMakeLists.txt#L200)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14176
https://github.com/root-project/root/pull/14176:22,reliability,fail,failure,22,"Not sure about the CI failure, but may be related to:. `get_filename_component(ROOT_LIBRARY_DIR ""${ROOTSYS}/lib"" ABSOLUTE)`. in [roottest/CMakeLists.txt#L200](https://github.com/root-project/roottest/blob/e7c9a5cbc969fa99b668684cbebc59d554ceebc8/CMakeLists.txt#L200)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14176
https://github.com/root-project/root/pull/14178:317,deployability,build,build,317,"Thanks a lot, @krasznaa, for the quick fix. > Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. Strangely enough, with that policy set it works for me with and without your fix, maybe because we already set $ROOT_ROOT in the build environment. Do I understand it correctly that your fix covers the case where ROOT is discovered via $ROOT_DIR only?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:409,integrability,discover,discovered,409,"Thanks a lot, @krasznaa, for the quick fix. > Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. Strangely enough, with that policy set it works for me with and without your fix, maybe because we already set $ROOT_ROOT in the build environment. Do I understand it correctly that your fix covers the case where ROOT is discovered via $ROOT_DIR only?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:409,interoperability,discover,discovered,409,"Thanks a lot, @krasznaa, for the quick fix. > Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. Strangely enough, with that policy set it works for me with and without your fix, maybe because we already set $ROOT_ROOT in the build environment. Do I understand it correctly that your fix covers the case where ROOT is discovered via $ROOT_DIR only?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:138,security,polic,policy,138,"Thanks a lot, @krasznaa, for the quick fix. > Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. Strangely enough, with that policy set it works for me with and without your fix, maybe because we already set $ROOT_ROOT in the build environment. Do I understand it correctly that your fix covers the case where ROOT is discovered via $ROOT_DIR only?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:158,security,polic,policy,158,"Thanks a lot, @krasznaa, for the quick fix. > Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. Strangely enough, with that policy set it works for me with and without your fix, maybe because we already set $ROOT_ROOT in the build environment. Do I understand it correctly that your fix covers the case where ROOT is discovered via $ROOT_DIR only?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:216,security,polic,policy,216,"Thanks a lot, @krasznaa, for the quick fix. > Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. Strangely enough, with that policy set it works for me with and without your fix, maybe because we already set $ROOT_ROOT in the build environment. Do I understand it correctly that your fix covers the case where ROOT is discovered via $ROOT_DIR only?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:341,testability,understand,understand,341,"Thanks a lot, @krasznaa, for the quick fix. > Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. Strangely enough, with that policy set it works for me with and without your fix, maybe because we already set $ROOT_ROOT in the build environment. Do I understand it correctly that your fix covers the case where ROOT is discovered via $ROOT_DIR only?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:126,usability,help,help,126,"Thanks a lot, @krasznaa, for the quick fix. > Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. Strangely enough, with that policy set it works for me with and without your fix, maybe because we already set $ROOT_ROOT in the build environment. Do I understand it correctly that your fix covers the case where ROOT is discovered via $ROOT_DIR only?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:409,usability,discov,discovered,409,"Thanks a lot, @krasznaa, for the quick fix. > Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. Strangely enough, with that policy set it works for me with and without your fix, maybe because we already set $ROOT_ROOT in the build environment. Do I understand it correctly that your fix covers the case where ROOT is discovered via $ROOT_DIR only?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:749,availability,robust,robust,749,"> Thanks a lot, @krasznaa, for the quick fix. > . > > Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. > . > Strangely enough, with that policy set it works for me with and without your fix, maybe because we already set $ROOT_ROOT in the build environment. > . > Do I understand it correctly that your fix covers the case where ROOT is discovered via $ROOT_DIR only? This is a very good point. 🤔 Indeed, this update still requires `CMP0074` to be `NEW`. With that setting, just using `ROOT_ROOT` to point at the ROOT installation, is already enough to also find VDT. Still. Since one *may* use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:331,deployability,build,build,331,"> Thanks a lot, @krasznaa, for the quick fix. > . > > Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. > . > Strangely enough, with that policy set it works for me with and without your fix, maybe because we already set $ROOT_ROOT in the build environment. > . > Do I understand it correctly that your fix covers the case where ROOT is discovered via $ROOT_DIR only? This is a very good point. 🤔 Indeed, this update still requires `CMP0074` to be `NEW`. With that setting, just using `ROOT_ROOT` to point at the ROOT installation, is already enough to also find VDT. Still. Since one *may* use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:502,deployability,updat,update,502,"> Thanks a lot, @krasznaa, for the quick fix. > . > > Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. > . > Strangely enough, with that policy set it works for me with and without your fix, maybe because we already set $ROOT_ROOT in the build environment. > . > Do I understand it correctly that your fix covers the case where ROOT is discovered via $ROOT_DIR only? This is a very good point. 🤔 Indeed, this update still requires `CMP0074` to be `NEW`. With that setting, just using `ROOT_ROOT` to point at the ROOT installation, is already enough to also find VDT. Still. Since one *may* use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:610,deployability,instal,installation,610,"> Thanks a lot, @krasznaa, for the quick fix. > . > > Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. > . > Strangely enough, with that policy set it works for me with and without your fix, maybe because we already set $ROOT_ROOT in the build environment. > . > Do I understand it correctly that your fix covers the case where ROOT is discovered via $ROOT_DIR only? This is a very good point. 🤔 Indeed, this update still requires `CMP0074` to be `NEW`. With that setting, just using `ROOT_ROOT` to point at the ROOT installation, is already enough to also find VDT. Still. Since one *may* use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:429,integrability,discover,discovered,429,"> Thanks a lot, @krasznaa, for the quick fix. > . > > Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. > . > Strangely enough, with that policy set it works for me with and without your fix, maybe because we already set $ROOT_ROOT in the build environment. > . > Do I understand it correctly that your fix covers the case where ROOT is discovered via $ROOT_DIR only? This is a very good point. 🤔 Indeed, this update still requires `CMP0074` to be `NEW`. With that setting, just using `ROOT_ROOT` to point at the ROOT installation, is already enough to also find VDT. Still. Since one *may* use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:429,interoperability,discover,discovered,429,"> Thanks a lot, @krasznaa, for the quick fix. > . > > Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. > . > Strangely enough, with that policy set it works for me with and without your fix, maybe because we already set $ROOT_ROOT in the build environment. > . > Do I understand it correctly that your fix covers the case where ROOT is discovered via $ROOT_DIR only? This is a very good point. 🤔 Indeed, this update still requires `CMP0074` to be `NEW`. With that setting, just using `ROOT_ROOT` to point at the ROOT installation, is already enough to also find VDT. Still. Since one *may* use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:749,reliability,robust,robust,749,"> Thanks a lot, @krasznaa, for the quick fix. > . > > Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. > . > Strangely enough, with that policy set it works for me with and without your fix, maybe because we already set $ROOT_ROOT in the build environment. > . > Do I understand it correctly that your fix covers the case where ROOT is discovered via $ROOT_DIR only? This is a very good point. 🤔 Indeed, this update still requires `CMP0074` to be `NEW`. With that setting, just using `ROOT_ROOT` to point at the ROOT installation, is already enough to also find VDT. Still. Since one *may* use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:502,safety,updat,update,502,"> Thanks a lot, @krasznaa, for the quick fix. > . > > Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. > . > Strangely enough, with that policy set it works for me with and without your fix, maybe because we already set $ROOT_ROOT in the build environment. > . > Do I understand it correctly that your fix covers the case where ROOT is discovered via $ROOT_DIR only? This is a very good point. 🤔 Indeed, this update still requires `CMP0074` to be `NEW`. With that setting, just using `ROOT_ROOT` to point at the ROOT installation, is already enough to also find VDT. Still. Since one *may* use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:749,safety,robust,robust,749,"> Thanks a lot, @krasznaa, for the quick fix. > . > > Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. > . > Strangely enough, with that policy set it works for me with and without your fix, maybe because we already set $ROOT_ROOT in the build environment. > . > Do I understand it correctly that your fix covers the case where ROOT is discovered via $ROOT_DIR only? This is a very good point. 🤔 Indeed, this update still requires `CMP0074` to be `NEW`. With that setting, just using `ROOT_ROOT` to point at the ROOT installation, is already enough to also find VDT. Still. Since one *may* use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:146,security,polic,policy,146,"> Thanks a lot, @krasznaa, for the quick fix. > . > > Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. > . > Strangely enough, with that policy set it works for me with and without your fix, maybe because we already set $ROOT_ROOT in the build environment. > . > Do I understand it correctly that your fix covers the case where ROOT is discovered via $ROOT_DIR only? This is a very good point. 🤔 Indeed, this update still requires `CMP0074` to be `NEW`. With that setting, just using `ROOT_ROOT` to point at the ROOT installation, is already enough to also find VDT. Still. Since one *may* use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:166,security,polic,policy,166,"> Thanks a lot, @krasznaa, for the quick fix. > . > > Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. > . > Strangely enough, with that policy set it works for me with and without your fix, maybe because we already set $ROOT_ROOT in the build environment. > . > Do I understand it correctly that your fix covers the case where ROOT is discovered via $ROOT_DIR only? This is a very good point. 🤔 Indeed, this update still requires `CMP0074` to be `NEW`. With that setting, just using `ROOT_ROOT` to point at the ROOT installation, is already enough to also find VDT. Still. Since one *may* use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:230,security,polic,policy,230,"> Thanks a lot, @krasznaa, for the quick fix. > . > > Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. > . > Strangely enough, with that policy set it works for me with and without your fix, maybe because we already set $ROOT_ROOT in the build environment. > . > Do I understand it correctly that your fix covers the case where ROOT is discovered via $ROOT_DIR only? This is a very good point. 🤔 Indeed, this update still requires `CMP0074` to be `NEW`. With that setting, just using `ROOT_ROOT` to point at the ROOT installation, is already enough to also find VDT. Still. Since one *may* use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:502,security,updat,update,502,"> Thanks a lot, @krasznaa, for the quick fix. > . > > Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. > . > Strangely enough, with that policy set it works for me with and without your fix, maybe because we already set $ROOT_ROOT in the build environment. > . > Do I understand it correctly that your fix covers the case where ROOT is discovered via $ROOT_DIR only? This is a very good point. 🤔 Indeed, this update still requires `CMP0074` to be `NEW`. With that setting, just using `ROOT_ROOT` to point at the ROOT installation, is already enough to also find VDT. Still. Since one *may* use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:361,testability,understand,understand,361,"> Thanks a lot, @krasznaa, for the quick fix. > . > > Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. > . > Strangely enough, with that policy set it works for me with and without your fix, maybe because we already set $ROOT_ROOT in the build environment. > . > Do I understand it correctly that your fix covers the case where ROOT is discovered via $ROOT_DIR only? This is a very good point. 🤔 Indeed, this update still requires `CMP0074` to be `NEW`. With that setting, just using `ROOT_ROOT` to point at the ROOT installation, is already enough to also find VDT. Still. Since one *may* use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:134,usability,help,help,134,"> Thanks a lot, @krasznaa, for the quick fix. > . > > Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. > . > Strangely enough, with that policy set it works for me with and without your fix, maybe because we already set $ROOT_ROOT in the build environment. > . > Do I understand it correctly that your fix covers the case where ROOT is discovered via $ROOT_DIR only? This is a very good point. 🤔 Indeed, this update still requires `CMP0074` to be `NEW`. With that setting, just using `ROOT_ROOT` to point at the ROOT installation, is already enough to also find VDT. Still. Since one *may* use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:429,usability,discov,discovered,429,"> Thanks a lot, @krasznaa, for the quick fix. > . > > Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. > . > Strangely enough, with that policy set it works for me with and without your fix, maybe because we already set $ROOT_ROOT in the build environment. > . > Do I understand it correctly that your fix covers the case where ROOT is discovered via $ROOT_DIR only? This is a very good point. 🤔 Indeed, this update still requires `CMP0074` to be `NEW`. With that setting, just using `ROOT_ROOT` to point at the ROOT installation, is already enough to also find VDT. Still. Since one *may* use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:829,usability,minim,minimum,829,"> Thanks a lot, @krasznaa, for the quick fix. > . > > Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. > . > Strangely enough, with that policy set it works for me with and without your fix, maybe because we already set $ROOT_ROOT in the build environment. > . > Do I understand it correctly that your fix covers the case where ROOT is discovered via $ROOT_DIR only? This is a very good point. 🤔 Indeed, this update still requires `CMP0074` to be `NEW`. With that setting, just using `ROOT_ROOT` to point at the ROOT installation, is already enough to also find VDT. Still. Since one *may* use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:91,availability,robust,robust,91,"> Still. Since one _may_ use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔. While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:334,deployability,depend,depending,334,"> Still. Since one _may_ use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔. While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:452,deployability,version,version,452,"> Still. Since one _may_ use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔. While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:609,deployability,version,version,609,"> Still. Since one _may_ use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔. While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:334,integrability,depend,depending,334,"> Still. Since one _may_ use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔. While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:452,integrability,version,version,452,"> Still. Since one _may_ use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔. While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:609,integrability,version,version,609,"> Still. Since one _may_ use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔. While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:334,modifiability,depend,depending,334,"> Still. Since one _may_ use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔. While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:452,modifiability,version,version,452,"> Still. Since one _may_ use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔. While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:569,modifiability,pac,packages,569,"> Still. Since one _may_ use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔. While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:609,modifiability,version,version,609,"> Still. Since one _may_ use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔. While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:91,reliability,robust,robust,91,"> Still. Since one _may_ use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔. While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:91,safety,robust,robust,91,"> Still. Since one _may_ use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔. While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:334,safety,depend,depending,334,"> Still. Since one _may_ use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔. While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:403,security,polic,policy,403,"> Still. Since one _may_ use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔. While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:334,testability,depend,depending,334,"> Still. Since one _may_ use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔. While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:171,usability,minim,minimum,171,"> Still. Since one _may_ use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔. While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:383,usability,minim,minimum,383,"> Still. Since one _may_ use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔. While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:499,usability,document,documented,499,"> Still. Since one _may_ use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔. While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:601,usability,minim,minimum,601,"> Still. Since one _may_ use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔. While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:94,deployability,depend,depending,94,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:212,deployability,version,version,212,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:369,deployability,version,version,369,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:493,deployability,version,version,493,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:563,deployability,VERSION,VERSION,563,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:633,deployability,version,version,633,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1022,deployability,VERSION,VERSION,1022,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1191,deployability,version,version,1191,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1230,deployability,version,versions,1230,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:94,integrability,depend,depending,94,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:212,integrability,version,version,212,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:369,integrability,version,version,369,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:493,integrability,version,version,493,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:563,integrability,VERSION,VERSION,563,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:633,integrability,version,version,633,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1022,integrability,VERSION,VERSION,1022,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1108,integrability,coupl,couple,1108,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1191,integrability,version,version,1191,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1230,integrability,version,versions,1230,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:802,interoperability,specif,specifically,802,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:94,modifiability,depend,depending,94,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:212,modifiability,version,version,212,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:329,modifiability,pac,packages,329,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:369,modifiability,version,version,369,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:493,modifiability,version,version,493,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:563,modifiability,VERSION,VERSION,563,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:633,modifiability,version,version,633,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1022,modifiability,VERSION,VERSION,1022,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1108,modifiability,coupl,couple,1108,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1191,modifiability,version,version,1191,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1230,modifiability,version,versions,1230,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:94,safety,depend,depending,94,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:163,security,polic,policy,163,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:795,security,polic,policy,795,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:879,security,polic,policy,879,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:936,security,polic,policies,936,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:94,testability,depend,depending,94,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1108,testability,coupl,couple,1108,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:143,usability,minim,minimum,143,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:259,usability,document,documented,259,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:361,usability,minim,minimum,361,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:422,usability,user,users,422,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:685,usability,behavi,behaviour,685,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1118,usability,user,users,1118,"> While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all... It is indeed a requirement for the users. The way that CMake works, even if you use the very latest CMake version, if your code has let's say. ```cmake. cmake_minimum_required(VERSION 3.10). ```. in it, then CMake will try to behave exactly like version 3.10 did. To have `CMP0074` have the ""`NEW` behaviour"", either the ""last"" `cmake_minimum_required(...)` call had to require CMake 3.12+, or the `CMP0074` policy specifically has to be set to `NEW`. (This way one can pick and choose which policy should behave how, without opting into all of the policies introduced by CMake 3.12.). Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:51,deployability,VERSION,VERSION,51,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:220,deployability,version,version,220,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:259,deployability,version,versions,259,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:281,deployability,depend,depend,281,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:445,deployability,version,version,445,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:516,deployability,depend,depend,516,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:51,integrability,VERSION,VERSION,51,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:137,integrability,coupl,couple,137,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:220,integrability,version,version,220,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:259,integrability,version,versions,259,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:281,integrability,depend,depend,281,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:445,integrability,version,version,445,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:516,integrability,depend,depend,516,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:51,modifiability,VERSION,VERSION,51,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:137,modifiability,coupl,couple,137,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:220,modifiability,version,version,220,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:259,modifiability,version,versions,259,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:281,modifiability,depend,depend,281,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:445,modifiability,version,version,445,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:507,modifiability,pac,packages,507,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:516,modifiability,depend,depend,516,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:281,safety,depend,depend,281,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:516,safety,depend,depend,516,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:555,security,polic,policies,555,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:137,testability,coupl,couple,137,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:281,testability,depend,depend,281,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:516,testability,depend,depend,516,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:147,usability,user,users,147,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:296,usability,behavi,behaviour,296,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:535,usability,behavi,behaviour,535,"> Now... One **could** add `cmake_minimum_required(VERSION 3.12)` to `ROOTConfig.cmake`. 🤔 I just fear that that may break the code of a couple of users. Though it might not... Maybe everybody already uses a newer CMake version than that with the latest ROOT versions. Maybe if we depend on this behaviour to find VDT, we could set only 0074 in the ROOTConfig.cmake? (can we unset it at the end of the ROOTConfig.cmake?). While the actual CMake version should probably be high enough, it could be that some packages depend on pre-3.12 behaviour for other policies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1977,availability,Error,Error,1977,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2582,availability,error,errors,2582,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:106,deployability,configurat,configuration,106,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:154,deployability,VERSION,VERSION,154,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:192,deployability,VERSION,VERSION,192,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:299,deployability,build,buildtest,299,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:361,deployability,instal,install,361,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:703,deployability,instal,install,703,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:726,deployability,version,version,726,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:787,deployability,Build,Build,787,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:854,deployability,build,buildtest,854,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:881,deployability,build,buildtest,881,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:918,deployability,fail,failed,918,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:947,deployability,build,buildtest,947,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1009,deployability,instal,install,1009,"n attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/Fi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1344,deployability,Modul,Modules,1344,"rojects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_stan",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1676,deployability,instal,install,1676,"krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1749,deployability,Stack,Stack,1749,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1815,deployability,instal,install,1815,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2003,deployability,Modul,Modules,2003,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2127,deployability,Stack,Stack,2127,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2177,deployability,Modul,Modules,2177,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2284,deployability,instal,install,2284,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2298,deployability,modul,modules,2298,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2377,deployability,Modul,Modules,2377,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2468,deployability,instal,install,2468,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2642,deployability,build,buildtest,2642,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2675,deployability,log,log,2675,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2697,deployability,build,buildtest,2697,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:106,integrability,configur,configuration,106,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:154,integrability,VERSION,VERSION,154,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:192,integrability,VERSION,VERSION,192,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:726,integrability,version,version,726,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:746,integrability,Configur,Configuring,746,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2052,integrability,messag,message,2052,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2558,integrability,Configur,Configuring,2558,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1332,interoperability,share,share,1332,"d1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_packag",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1697,interoperability,compatib,compatibility,1697,"nstall/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1991,interoperability,share,share,1991,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2052,interoperability,messag,message,2052,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2165,interoperability,share,share,2165,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2365,interoperability,share,share,2365,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:106,modifiability,configur,configuration,106,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:154,modifiability,VERSION,VERSION,154,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:192,modifiability,VERSION,VERSION,192,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:726,modifiability,version,version,726,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:746,modifiability,Configur,Configuring,746,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1344,modifiability,Modul,Modules,1344,"rojects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_stan",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1449,modifiability,Pac,PackageName,1449,"XX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/p",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1467,modifiability,variab,variables,1467,"nfo. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/inst",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1613,modifiability,variab,variable,1613,"Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1734,modifiability,variab,variable,1734,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2003,modifiability,Modul,Modules,2003,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2177,modifiability,Modul,Modules,2177,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2298,modifiability,modul,modules,2298,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2377,modifiability,Modul,Modules,2377,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2558,modifiability,Configur,Configuring,2558,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1977,performance,Error,Error,1977,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2582,performance,error,errors,2582,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:918,reliability,fail,failed,918,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:444,safety,Detect,Detecting,444,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:480,safety,Detect,Detecting,480,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:582,safety,Detect,Detecting,582,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:617,safety,Detect,Detecting,617,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1092,safety,Detect,Detecting,1092,"ing, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1128,safety,Detect,Detecting,1128,"ake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1230,safety,Detect,Detecting,1230,"ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FA",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1265,safety,Detect,Detecting,1265,"cceeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1344,safety,Modul,Modules,1344,"rojects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_stan",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1977,safety,Error,Error,1977,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2003,safety,Modul,Modules,2003,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2177,safety,Modul,Modules,2177,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2298,safety,modul,modules,2298,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2377,safety,Modul,Modules,2377,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2582,safety,error,errors,2582,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2675,safety,log,log,2675,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:106,security,configur,configuration,106,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:411,security,ident,identification,411,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:444,security,Detect,Detecting,444,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:480,security,Detect,Detecting,480,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:582,security,Detect,Detecting,582,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:617,security,Detect,Detecting,617,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:746,security,Configur,Configuring,746,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1059,security,ident,identification,1059,"thinking: With this latest setting, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Cou",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1092,security,Detect,Detecting,1092,"ing, the configuration. ```cmake. cmake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1128,security,Detect,Detecting,1128,"ake_minimum_required(VERSION 3.10). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1230,security,Detect,Detecting,1230,"ROOT 6.30 CONFIG REQUIRED). ```. succeeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FA",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1265,security,Detect,Detecting,1265,"cceeds. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1403,security,Polic,Policy,1403,"iler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1496,security,polic,policy,1496,"ler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1516,security,polic,policy,1516," -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1573,security,polic,policy,1573,"d. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2558,security,Configur,Configuring,2558,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2675,security,log,log,2675,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2675,testability,log,log,2675,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1491,usability,help,help-policy,1491,"piler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmak",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1554,usability,command,command,1554,"r/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:1977,usability,Error,Error,1977,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:2582,usability,error,errors,2582,"clude (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. Wile previously it failed. ```. [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables. Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable. Call Stack (most recent call first):. /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency). CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred! See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"". [bash][pcadp04]:buildtest >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14180:58,deployability,version,version,58,Thanks! It should work in a few weeks when the new xrootd version is adopted :slightly_smiling_face:. Sorry again for the mess!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:58,integrability,version,version,58,Thanks! It should work in a few weeks when the new xrootd version is adopted :slightly_smiling_face:. Sorry again for the mess!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:58,modifiability,version,version,58,Thanks! It should work in a few weeks when the new xrootd version is adopted :slightly_smiling_face:. Sorry again for the mess!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:233,availability,Error,Error,233,The build fails on [fedora37 LLVM_ENABLE_ASSERTIONS=On](https://github.com/root-project/root/actions/runs/7425862030/job/20208382406?pr=14180#logs). ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. gmake[2]: *** [net/netxng/CMakeFiles/G__NetxNG.dir/build.make:97: net/netxng/CMakeFiles/G__NetxNG.dir/G__NetxNG.cxx.o] Error 1. gmake[1]: *** [CMakeFiles/Makefile2:50605: net/netxng/CMakeFiles/G__NetxNG.dir/all] Error 2. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:307,availability,error,error,307,The build fails on [fedora37 LLVM_ENABLE_ASSERTIONS=On](https://github.com/root-project/root/actions/runs/7425862030/job/20208382406?pr=14180#logs). ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. gmake[2]: *** [net/netxng/CMakeFiles/G__NetxNG.dir/build.make:97: net/netxng/CMakeFiles/G__NetxNG.dir/G__NetxNG.cxx.o] Error 1. gmake[1]: *** [CMakeFiles/Makefile2:50605: net/netxng/CMakeFiles/G__NetxNG.dir/all] Error 2. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:582,availability,Error,Error,582,The build fails on [fedora37 LLVM_ENABLE_ASSERTIONS=On](https://github.com/root-project/root/actions/runs/7425862030/job/20208382406?pr=14180#logs). ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. gmake[2]: *** [net/netxng/CMakeFiles/G__NetxNG.dir/build.make:97: net/netxng/CMakeFiles/G__NetxNG.dir/G__NetxNG.cxx.o] Error 1. gmake[1]: *** [CMakeFiles/Makefile2:50605: net/netxng/CMakeFiles/G__NetxNG.dir/all] Error 2. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:675,availability,Error,Error,675,The build fails on [fedora37 LLVM_ENABLE_ASSERTIONS=On](https://github.com/root-project/root/actions/runs/7425862030/job/20208382406?pr=14180#logs). ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. gmake[2]: *** [net/netxng/CMakeFiles/G__NetxNG.dir/build.make:97: net/netxng/CMakeFiles/G__NetxNG.dir/G__NetxNG.cxx.o] Error 1. gmake[1]: *** [CMakeFiles/Makefile2:50605: net/netxng/CMakeFiles/G__NetxNG.dir/all] Error 2. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:4,deployability,build,build,4,The build fails on [fedora37 LLVM_ENABLE_ASSERTIONS=On](https://github.com/root-project/root/actions/runs/7425862030/job/20208382406?pr=14180#logs). ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. gmake[2]: *** [net/netxng/CMakeFiles/G__NetxNG.dir/build.make:97: net/netxng/CMakeFiles/G__NetxNG.dir/G__NetxNG.cxx.o] Error 1. gmake[1]: *** [CMakeFiles/Makefile2:50605: net/netxng/CMakeFiles/G__NetxNG.dir/all] Error 2. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:10,deployability,fail,fails,10,The build fails on [fedora37 LLVM_ENABLE_ASSERTIONS=On](https://github.com/root-project/root/actions/runs/7425862030/job/20208382406?pr=14180#logs). ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. gmake[2]: *** [net/netxng/CMakeFiles/G__NetxNG.dir/build.make:97: net/netxng/CMakeFiles/G__NetxNG.dir/G__NetxNG.cxx.o] Error 1. gmake[1]: *** [CMakeFiles/Makefile2:50605: net/netxng/CMakeFiles/G__NetxNG.dir/all] Error 2. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:142,deployability,log,logs,142,The build fails on [fedora37 LLVM_ENABLE_ASSERTIONS=On](https://github.com/root-project/root/actions/runs/7425862030/job/20208382406?pr=14180#logs). ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. gmake[2]: *** [net/netxng/CMakeFiles/G__NetxNG.dir/build.make:97: net/netxng/CMakeFiles/G__NetxNG.dir/G__NetxNG.cxx.o] Error 1. gmake[1]: *** [CMakeFiles/Makefile2:50605: net/netxng/CMakeFiles/G__NetxNG.dir/all] Error 2. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:197,deployability,build,build,197,The build fails on [fedora37 LLVM_ENABLE_ASSERTIONS=On](https://github.com/root-project/root/actions/runs/7425862030/job/20208382406?pr=14180#logs). ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. gmake[2]: *** [net/netxng/CMakeFiles/G__NetxNG.dir/build.make:97: net/netxng/CMakeFiles/G__NetxNG.dir/G__NetxNG.cxx.o] Error 1. gmake[1]: *** [CMakeFiles/Makefile2:50605: net/netxng/CMakeFiles/G__NetxNG.dir/all] Error 2. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:514,deployability,build,build,514,The build fails on [fedora37 LLVM_ENABLE_ASSERTIONS=On](https://github.com/root-project/root/actions/runs/7425862030/job/20208382406?pr=14180#logs). ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. gmake[2]: *** [net/netxng/CMakeFiles/G__NetxNG.dir/build.make:97: net/netxng/CMakeFiles/G__NetxNG.dir/G__NetxNG.cxx.o] Error 1. gmake[1]: *** [CMakeFiles/Makefile2:50605: net/netxng/CMakeFiles/G__NetxNG.dir/all] Error 2. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:233,performance,Error,Error,233,The build fails on [fedora37 LLVM_ENABLE_ASSERTIONS=On](https://github.com/root-project/root/actions/runs/7425862030/job/20208382406?pr=14180#logs). ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. gmake[2]: *** [net/netxng/CMakeFiles/G__NetxNG.dir/build.make:97: net/netxng/CMakeFiles/G__NetxNG.dir/G__NetxNG.cxx.o] Error 1. gmake[1]: *** [CMakeFiles/Makefile2:50605: net/netxng/CMakeFiles/G__NetxNG.dir/all] Error 2. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:307,performance,error,error,307,The build fails on [fedora37 LLVM_ENABLE_ASSERTIONS=On](https://github.com/root-project/root/actions/runs/7425862030/job/20208382406?pr=14180#logs). ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. gmake[2]: *** [net/netxng/CMakeFiles/G__NetxNG.dir/build.make:97: net/netxng/CMakeFiles/G__NetxNG.dir/G__NetxNG.cxx.o] Error 1. gmake[1]: *** [CMakeFiles/Makefile2:50605: net/netxng/CMakeFiles/G__NetxNG.dir/all] Error 2. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:582,performance,Error,Error,582,The build fails on [fedora37 LLVM_ENABLE_ASSERTIONS=On](https://github.com/root-project/root/actions/runs/7425862030/job/20208382406?pr=14180#logs). ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. gmake[2]: *** [net/netxng/CMakeFiles/G__NetxNG.dir/build.make:97: net/netxng/CMakeFiles/G__NetxNG.dir/G__NetxNG.cxx.o] Error 1. gmake[1]: *** [CMakeFiles/Makefile2:50605: net/netxng/CMakeFiles/G__NetxNG.dir/all] Error 2. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:675,performance,Error,Error,675,The build fails on [fedora37 LLVM_ENABLE_ASSERTIONS=On](https://github.com/root-project/root/actions/runs/7425862030/job/20208382406?pr=14180#logs). ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. gmake[2]: *** [net/netxng/CMakeFiles/G__NetxNG.dir/build.make:97: net/netxng/CMakeFiles/G__NetxNG.dir/G__NetxNG.cxx.o] Error 1. gmake[1]: *** [CMakeFiles/Makefile2:50605: net/netxng/CMakeFiles/G__NetxNG.dir/all] Error 2. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:10,reliability,fail,fails,10,The build fails on [fedora37 LLVM_ENABLE_ASSERTIONS=On](https://github.com/root-project/root/actions/runs/7425862030/job/20208382406?pr=14180#logs). ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. gmake[2]: *** [net/netxng/CMakeFiles/G__NetxNG.dir/build.make:97: net/netxng/CMakeFiles/G__NetxNG.dir/G__NetxNG.cxx.o] Error 1. gmake[1]: *** [CMakeFiles/Makefile2:50605: net/netxng/CMakeFiles/G__NetxNG.dir/all] Error 2. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:142,safety,log,logs,142,The build fails on [fedora37 LLVM_ENABLE_ASSERTIONS=On](https://github.com/root-project/root/actions/runs/7425862030/job/20208382406?pr=14180#logs). ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. gmake[2]: *** [net/netxng/CMakeFiles/G__NetxNG.dir/build.make:97: net/netxng/CMakeFiles/G__NetxNG.dir/G__NetxNG.cxx.o] Error 1. gmake[1]: *** [CMakeFiles/Makefile2:50605: net/netxng/CMakeFiles/G__NetxNG.dir/all] Error 2. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:233,safety,Error,Error,233,The build fails on [fedora37 LLVM_ENABLE_ASSERTIONS=On](https://github.com/root-project/root/actions/runs/7425862030/job/20208382406?pr=14180#logs). ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. gmake[2]: *** [net/netxng/CMakeFiles/G__NetxNG.dir/build.make:97: net/netxng/CMakeFiles/G__NetxNG.dir/G__NetxNG.cxx.o] Error 1. gmake[1]: *** [CMakeFiles/Makefile2:50605: net/netxng/CMakeFiles/G__NetxNG.dir/all] Error 2. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:307,safety,error,error,307,The build fails on [fedora37 LLVM_ENABLE_ASSERTIONS=On](https://github.com/root-project/root/actions/runs/7425862030/job/20208382406?pr=14180#logs). ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. gmake[2]: *** [net/netxng/CMakeFiles/G__NetxNG.dir/build.make:97: net/netxng/CMakeFiles/G__NetxNG.dir/G__NetxNG.cxx.o] Error 1. gmake[1]: *** [CMakeFiles/Makefile2:50605: net/netxng/CMakeFiles/G__NetxNG.dir/all] Error 2. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:582,safety,Error,Error,582,The build fails on [fedora37 LLVM_ENABLE_ASSERTIONS=On](https://github.com/root-project/root/actions/runs/7425862030/job/20208382406?pr=14180#logs). ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. gmake[2]: *** [net/netxng/CMakeFiles/G__NetxNG.dir/build.make:97: net/netxng/CMakeFiles/G__NetxNG.dir/G__NetxNG.cxx.o] Error 1. gmake[1]: *** [CMakeFiles/Makefile2:50605: net/netxng/CMakeFiles/G__NetxNG.dir/all] Error 2. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:675,safety,Error,Error,675,The build fails on [fedora37 LLVM_ENABLE_ASSERTIONS=On](https://github.com/root-project/root/actions/runs/7425862030/job/20208382406?pr=14180#logs). ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. gmake[2]: *** [net/netxng/CMakeFiles/G__NetxNG.dir/build.make:97: net/netxng/CMakeFiles/G__NetxNG.dir/G__NetxNG.cxx.o] Error 1. gmake[1]: *** [CMakeFiles/Makefile2:50605: net/netxng/CMakeFiles/G__NetxNG.dir/all] Error 2. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:142,security,log,logs,142,The build fails on [fedora37 LLVM_ENABLE_ASSERTIONS=On](https://github.com/root-project/root/actions/runs/7425862030/job/20208382406?pr=14180#logs). ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. gmake[2]: *** [net/netxng/CMakeFiles/G__NetxNG.dir/build.make:97: net/netxng/CMakeFiles/G__NetxNG.dir/G__NetxNG.cxx.o] Error 1. gmake[1]: *** [CMakeFiles/Makefile2:50605: net/netxng/CMakeFiles/G__NetxNG.dir/all] Error 2. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:142,testability,log,logs,142,The build fails on [fedora37 LLVM_ENABLE_ASSERTIONS=On](https://github.com/root-project/root/actions/runs/7425862030/job/20208382406?pr=14180#logs). ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. gmake[2]: *** [net/netxng/CMakeFiles/G__NetxNG.dir/build.make:97: net/netxng/CMakeFiles/G__NetxNG.dir/G__NetxNG.cxx.o] Error 1. gmake[1]: *** [CMakeFiles/Makefile2:50605: net/netxng/CMakeFiles/G__NetxNG.dir/all] Error 2. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:233,usability,Error,Error,233,The build fails on [fedora37 LLVM_ENABLE_ASSERTIONS=On](https://github.com/root-project/root/actions/runs/7425862030/job/20208382406?pr=14180#logs). ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. gmake[2]: *** [net/netxng/CMakeFiles/G__NetxNG.dir/build.make:97: net/netxng/CMakeFiles/G__NetxNG.dir/G__NetxNG.cxx.o] Error 1. gmake[1]: *** [CMakeFiles/Makefile2:50605: net/netxng/CMakeFiles/G__NetxNG.dir/all] Error 2. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:307,usability,error,error,307,The build fails on [fedora37 LLVM_ENABLE_ASSERTIONS=On](https://github.com/root-project/root/actions/runs/7425862030/job/20208382406?pr=14180#logs). ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. gmake[2]: *** [net/netxng/CMakeFiles/G__NetxNG.dir/build.make:97: net/netxng/CMakeFiles/G__NetxNG.dir/G__NetxNG.cxx.o] Error 1. gmake[1]: *** [CMakeFiles/Makefile2:50605: net/netxng/CMakeFiles/G__NetxNG.dir/all] Error 2. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:582,usability,Error,Error,582,The build fails on [fedora37 LLVM_ENABLE_ASSERTIONS=On](https://github.com/root-project/root/actions/runs/7425862030/job/20208382406?pr=14180#logs). ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. gmake[2]: *** [net/netxng/CMakeFiles/G__NetxNG.dir/build.make:97: net/netxng/CMakeFiles/G__NetxNG.dir/G__NetxNG.cxx.o] Error 1. gmake[1]: *** [CMakeFiles/Makefile2:50605: net/netxng/CMakeFiles/G__NetxNG.dir/all] Error 2. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:675,usability,Error,Error,675,The build fails on [fedora37 LLVM_ENABLE_ASSERTIONS=On](https://github.com/root-project/root/actions/runs/7425862030/job/20208382406?pr=14180#logs). ```. In file included from /github/home/ROOT-CI/build/net/netxng/G__NetxNG.cxx:38:. Error: /github/home/ROOT-CI/src/net/netxng/inc/TNetXNGFile.h:27:10: fatal error: XrdCl/XrdClFileSystem.hh: No such file or directory. 27 | #include <XrdCl/XrdClFileSystem.hh>. | ^~~~~~~~~~~~~~~~~~~~~~~~~~. compilation terminated. gmake[2]: *** [net/netxng/CMakeFiles/G__NetxNG.dir/build.make:97: net/netxng/CMakeFiles/G__NetxNG.dir/G__NetxNG.cxx.o] Error 1. gmake[1]: *** [CMakeFiles/Makefile2:50605: net/netxng/CMakeFiles/G__NetxNG.dir/all] Error 2. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:64,deployability,updat,update,64,"Yes I noticed that, it's because Fedora37 didn't get the xrootd update:. https://bodhi.fedoraproject.org/updates/?packages=xrootd. Actually, Fedora 37 reached end of life:. https://en.wikipedia.org/wiki/Fedora_Linux. See section ""releases"". We should consider removing it from the CI.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:105,deployability,updat,updates,105,"Yes I noticed that, it's because Fedora37 didn't get the xrootd update:. https://bodhi.fedoraproject.org/updates/?packages=xrootd. Actually, Fedora 37 reached end of life:. https://en.wikipedia.org/wiki/Fedora_Linux. See section ""releases"". We should consider removing it from the CI.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:230,deployability,releas,releases,230,"Yes I noticed that, it's because Fedora37 didn't get the xrootd update:. https://bodhi.fedoraproject.org/updates/?packages=xrootd. Actually, Fedora 37 reached end of life:. https://en.wikipedia.org/wiki/Fedora_Linux. See section ""releases"". We should consider removing it from the CI.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:114,modifiability,pac,packages,114,"Yes I noticed that, it's because Fedora37 didn't get the xrootd update:. https://bodhi.fedoraproject.org/updates/?packages=xrootd. Actually, Fedora 37 reached end of life:. https://en.wikipedia.org/wiki/Fedora_Linux. See section ""releases"". We should consider removing it from the CI.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:64,safety,updat,update,64,"Yes I noticed that, it's because Fedora37 didn't get the xrootd update:. https://bodhi.fedoraproject.org/updates/?packages=xrootd. Actually, Fedora 37 reached end of life:. https://en.wikipedia.org/wiki/Fedora_Linux. See section ""releases"". We should consider removing it from the CI.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:105,safety,updat,updates,105,"Yes I noticed that, it's because Fedora37 didn't get the xrootd update:. https://bodhi.fedoraproject.org/updates/?packages=xrootd. Actually, Fedora 37 reached end of life:. https://en.wikipedia.org/wiki/Fedora_Linux. See section ""releases"". We should consider removing it from the CI.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:64,security,updat,update,64,"Yes I noticed that, it's because Fedora37 didn't get the xrootd update:. https://bodhi.fedoraproject.org/updates/?packages=xrootd. Actually, Fedora 37 reached end of life:. https://en.wikipedia.org/wiki/Fedora_Linux. See section ""releases"". We should consider removing it from the CI.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:105,security,updat,updates,105,"Yes I noticed that, it's because Fedora37 didn't get the xrootd update:. https://bodhi.fedoraproject.org/updates/?packages=xrootd. Actually, Fedora 37 reached end of life:. https://en.wikipedia.org/wiki/Fedora_Linux. See section ""releases"". We should consider removing it from the CI.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:72,deployability,fail,failing,72,"All green now! In case there are still some nightlies tomorrow that are failing to build, it's probably because the xrootd version on that platform is older than 5.6.4. In that case, the `builtin_xrootd` should be used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:83,deployability,build,build,83,"All green now! In case there are still some nightlies tomorrow that are failing to build, it's probably because the xrootd version on that platform is older than 5.6.4. In that case, the `builtin_xrootd` should be used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:123,deployability,version,version,123,"All green now! In case there are still some nightlies tomorrow that are failing to build, it's probably because the xrootd version on that platform is older than 5.6.4. In that case, the `builtin_xrootd` should be used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:4,energy efficiency,green,green,4,"All green now! In case there are still some nightlies tomorrow that are failing to build, it's probably because the xrootd version on that platform is older than 5.6.4. In that case, the `builtin_xrootd` should be used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:123,integrability,version,version,123,"All green now! In case there are still some nightlies tomorrow that are failing to build, it's probably because the xrootd version on that platform is older than 5.6.4. In that case, the `builtin_xrootd` should be used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:139,interoperability,platform,platform,139,"All green now! In case there are still some nightlies tomorrow that are failing to build, it's probably because the xrootd version on that platform is older than 5.6.4. In that case, the `builtin_xrootd` should be used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:123,modifiability,version,version,123,"All green now! In case there are still some nightlies tomorrow that are failing to build, it's probably because the xrootd version on that platform is older than 5.6.4. In that case, the `builtin_xrootd` should be used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:72,reliability,fail,failing,72,"All green now! In case there are still some nightlies tomorrow that are failing to build, it's probably because the xrootd version on that platform is older than 5.6.4. In that case, the `builtin_xrootd` should be used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/issues/14186:88,availability,avail,available,88,"And once again, github refuses tar files and silently disappears zip files. It is again available on lxplus at ~ssnyder/fwddict-crash.tar. Here's the contents:. setup:. ```. export LCG_ROOT=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat. export LCG_CONFIG=x86_64-el9-gcc13-dbg. . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxEle",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:309,deployability,patch,patches,309,"And once again, github refuses tar files and silently disappears zip files. It is again available on lxplus at ~ssnyder/fwddict-crash.tar. Here's the contents:. setup:. ```. export LCG_ROOT=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat. export LCG_CONFIG=x86_64-el9-gcc13-dbg. . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxEle",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:365,deployability,build,build,365,"And once again, github refuses tar files and silently disappears zip files. It is again available on lxplus at ~ssnyder/fwddict-crash.tar. Here's the contents:. setup:. ```. export LCG_ROOT=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat. export LCG_CONFIG=x86_64-el9-gcc13-dbg. . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxEle",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:394,deployability,build,build,394,"And once again, github refuses tar files and silently disappears zip files. It is again available on lxplus at ~ssnyder/fwddict-crash.tar. Here's the contents:. setup:. ```. export LCG_ROOT=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat. export LCG_CONFIG=x86_64-el9-gcc13-dbg. . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxEle",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:442,deployability,build,build,442,"And once again, github refuses tar files and silently disappears zip files. It is again available on lxplus at ~ssnyder/fwddict-crash.tar. Here's the contents:. setup:. ```. export LCG_ROOT=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat. export LCG_CONFIG=x86_64-el9-gcc13-dbg. . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxEle",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:496,deployability,build,build,496,"And once again, github refuses tar files and silently disappears zip files. It is again available on lxplus at ~ssnyder/fwddict-crash.tar. Here's the contents:. setup:. ```. export LCG_ROOT=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat. export LCG_CONFIG=x86_64-el9-gcc13-dbg. . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxEle",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:580,deployability,build,build,580,"And once again, github refuses tar files and silently disappears zip files. It is again available on lxplus at ~ssnyder/fwddict-crash.tar. Here's the contents:. setup:. ```. export LCG_ROOT=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat. export LCG_CONFIG=x86_64-el9-gcc13-dbg. . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxEle",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:694,deployability,build,build,694,"And once again, github refuses tar files and silently disappears zip files. It is again available on lxplus at ~ssnyder/fwddict-crash.tar. Here's the contents:. setup:. ```. export LCG_ROOT=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat. export LCG_CONFIG=x86_64-el9-gcc13-dbg. . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxEle",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:720,deployability,build,build,720,"And once again, github refuses tar files and silently disappears zip files. It is again available on lxplus at ~ssnyder/fwddict-crash.tar. Here's the contents:. setup:. ```. export LCG_ROOT=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat. export LCG_CONFIG=x86_64-el9-gcc13-dbg. . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxEle",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:786,deployability,build,build,786,"And once again, github refuses tar files and silently disappears zip files. It is again available on lxplus at ~ssnyder/fwddict-crash.tar. Here's the contents:. setup:. ```. export LCG_ROOT=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat. export LCG_CONFIG=x86_64-el9-gcc13-dbg. . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxEle",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:816,deployability,build,build,816,"And once again, github refuses tar files and silently disappears zip files. It is again available on lxplus at ~ssnyder/fwddict-crash.tar. Here's the contents:. setup:. ```. export LCG_ROOT=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat. export LCG_CONFIG=x86_64-el9-gcc13-dbg. . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxEle",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:910,deployability,build,build,910,"And once again, github refuses tar files and silently disappears zip files. It is again available on lxplus at ~ssnyder/fwddict-crash.tar. Here's the contents:. setup:. ```. export LCG_ROOT=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat. export LCG_CONFIG=x86_64-el9-gcc13-dbg. . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxEle",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:992,deployability,build,build,992,"And once again, github refuses tar files and silently disappears zip files. It is again available on lxplus at ~ssnyder/fwddict-crash.tar. Here's the contents:. setup:. ```. export LCG_ROOT=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat. export LCG_CONFIG=x86_64-el9-gcc13-dbg. . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxEle",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1104,deployability,build,build,1104," at ~ssnyder/fwddict-crash.tar. Here's the contents:. setup:. ```. export LCG_ROOT=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat. export LCG_CONFIG=x86_64-el9-gcc13-dbg. . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxElement {};. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. templa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1129,deployability,build,build,1129,"h.tar. Here's the contents:. setup:. ```. export LCG_ROOT=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat. export LCG_CONFIG=x86_64-el9-gcc13-dbg. . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxElement {};. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. template <class T, class BASE =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1194,deployability,build,build,1194,"sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat. export LCG_CONFIG=x86_64-el9-gcc13-dbg. . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxElement {};. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BAS",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1223,deployability,build,build,1223,"htlies/dev4/Sat. export LCG_CONFIG=x86_64-el9-gcc13-dbg. . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxElement {};. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {};. template <class T>. cl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1312,deployability,build,build,1312,"s/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxElement {};. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {};. template <class T>. class DataVector<T, NoBase> {};. #endif // not ATHCONTAINERS_DATAVECTOR_H. ```. AthContaine",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1390,deployability,build,build,1390," build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxElement {};. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {};. template <class T>. class DataVector<T, NoBase> {};. #endif // not ATHCONTAINERS_DATAVECTOR_H. ```. AthContainers/selection.xml. ```. <lcgdict>. <class name=""AuxElement""/>. </lcgdict>. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1498,deployability,build,build,1498,"/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxElement {};. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {};. template <class T>. class DataVector<T, NoBase> {};. #endif // not ATHCONTAINERS_DATAVECTOR_H. ```. AthContainers/selection.xml. ```. <lcgdict>. <class name=""AuxElement""/>. </lcgdict>. ```. xAODEgamma/selection.xml:. ```. <lcgdict>. <class name=""Egamma_v1"" />. <class name=""DataVector<Egamma_v1>"" ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1521,deployability,build,build,1521,"IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxElement {};. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {};. template <class T>. class DataVector<T, NoBase> {};. #endif // not ATHCONTAINERS_DATAVECTOR_H. ```. AthContainers/selection.xml. ```. <lcgdict>. <class name=""AuxElement""/>. </lcgdict>. ```. xAODEgamma/selection.xml:. ```. <lcgdict>. <class name=""Egamma_v1"" />. <class name=""DataVector<Egamma_v1>"" />. </lcgdict>. ```. xA",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1584,deployability,build,build,1584,"thContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxElement {};. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {};. template <class T>. class DataVector<T, NoBase> {};. #endif // not ATHCONTAINERS_DATAVECTOR_H. ```. AthContainers/selection.xml. ```. <lcgdict>. <class name=""AuxElement""/>. </lcgdict>. ```. xAODEgamma/selection.xml:. ```. <lcgdict>. <class name=""Egamma_v1"" />. <class name=""DataVector<Egamma_v1>"" />. </lcgdict>. ```. xAODEgamma/xAODEgammaDict.h. ```. #include ""AthContainers/DataVec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1611,deployability,build,build,1611,"rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxElement {};. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {};. template <class T>. class DataVector<T, NoBase> {};. #endif // not ATHCONTAINERS_DATAVECTOR_H. ```. AthContainers/selection.xml. ```. <lcgdict>. <class name=""AuxElement""/>. </lcgdict>. ```. xAODEgamma/selection.xml:. ```. <lcgdict>. <class name=""Egamma_v1"" />. <class name=""DataVector<Egamma_v1>"" />. </lcgdict>. ```. xAODEgamma/xAODEgammaDict.h. ```. #include ""AthContainers/DataVector.h"". class Egamma_v1 :pu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:2187,integrability,pub,public,2187,"ed -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxElement {};. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {};. template <class T>. class DataVector<T, NoBase> {};. #endif // not ATHCONTAINERS_DATAVECTOR_H. ```. AthContainers/selection.xml. ```. <lcgdict>. <class name=""AuxElement""/>. </lcgdict>. ```. xAODEgamma/selection.xml:. ```. <lcgdict>. <class name=""Egamma_v1"" />. <class name=""DataVector<Egamma_v1>"" />. </lcgdict>. ```. xAODEgamma/xAODEgammaDict.h. ```. #include ""AthContainers/DataVector.h"". class Egamma_v1 :public AuxElement { };. template <> struct DataVectorBase<Egamma_v1>. { typedef DataVector<AuxElement> Base; }; . template class DataVector<Egamma_v1>;. ```. xAODTracking/selection.xml:. ```. <lcgdict>. <class name=""TrackParticle_v1"" />. <class name=""DataVector<TrackParticle_v1>"" />. </lcgdict>. ```. xAODTracking/xAODTrackingDict.h:. ```. #include ""AthContainers/DataVector.h"". class TrackParticle_v1 : public AuxElement { };. template <> struct DataVectorBase<TrackParticle_v1>. { typedef DataVector<AuxElement> Base; }; . template class DataVector<TrackParticle_v1>;. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:2612,integrability,pub,public,2612,"ed -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxElement {};. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {};. template <class T>. class DataVector<T, NoBase> {};. #endif // not ATHCONTAINERS_DATAVECTOR_H. ```. AthContainers/selection.xml. ```. <lcgdict>. <class name=""AuxElement""/>. </lcgdict>. ```. xAODEgamma/selection.xml:. ```. <lcgdict>. <class name=""Egamma_v1"" />. <class name=""DataVector<Egamma_v1>"" />. </lcgdict>. ```. xAODEgamma/xAODEgammaDict.h. ```. #include ""AthContainers/DataVector.h"". class Egamma_v1 :public AuxElement { };. template <> struct DataVectorBase<Egamma_v1>. { typedef DataVector<AuxElement> Base; }; . template class DataVector<Egamma_v1>;. ```. xAODTracking/selection.xml:. ```. <lcgdict>. <class name=""TrackParticle_v1"" />. <class name=""DataVector<TrackParticle_v1>"" />. </lcgdict>. ```. xAODTracking/xAODTrackingDict.h:. ```. #include ""AthContainers/DataVector.h"". class TrackParticle_v1 : public AuxElement { };. template <> struct DataVectorBase<TrackParticle_v1>. { typedef DataVector<AuxElement> Base; }; . template class DataVector<TrackParticle_v1>;. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:3017,integrability,pub,public,3017,"ed -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxElement {};. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {};. template <class T>. class DataVector<T, NoBase> {};. #endif // not ATHCONTAINERS_DATAVECTOR_H. ```. AthContainers/selection.xml. ```. <lcgdict>. <class name=""AuxElement""/>. </lcgdict>. ```. xAODEgamma/selection.xml:. ```. <lcgdict>. <class name=""Egamma_v1"" />. <class name=""DataVector<Egamma_v1>"" />. </lcgdict>. ```. xAODEgamma/xAODEgammaDict.h. ```. #include ""AthContainers/DataVector.h"". class Egamma_v1 :public AuxElement { };. template <> struct DataVectorBase<Egamma_v1>. { typedef DataVector<AuxElement> Base; }; . template class DataVector<Egamma_v1>;. ```. xAODTracking/selection.xml:. ```. <lcgdict>. <class name=""TrackParticle_v1"" />. <class name=""DataVector<TrackParticle_v1>"" />. </lcgdict>. ```. xAODTracking/xAODTrackingDict.h:. ```. #include ""AthContainers/DataVector.h"". class TrackParticle_v1 : public AuxElement { };. template <> struct DataVectorBase<TrackParticle_v1>. { typedef DataVector<AuxElement> Base; }; . template class DataVector<TrackParticle_v1>;. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:566,interoperability,xml,xml,566,"And once again, github refuses tar files and silently disappears zip files. It is again available on lxplus at ~ssnyder/fwddict-crash.tar. Here's the contents:. setup:. ```. export LCG_ROOT=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat. export LCG_CONFIG=x86_64-el9-gcc13-dbg. . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxEle",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:776,interoperability,share,shared,776,"And once again, github refuses tar files and silently disappears zip files. It is again available on lxplus at ~ssnyder/fwddict-crash.tar. Here's the contents:. setup:. ```. export LCG_ROOT=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat. export LCG_CONFIG=x86_64-el9-gcc13-dbg. . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxEle",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:978,interoperability,xml,xml,978,"And once again, github refuses tar files and silently disappears zip files. It is again available on lxplus at ~ssnyder/fwddict-crash.tar. Here's the contents:. setup:. ```. export LCG_ROOT=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat. export LCG_CONFIG=x86_64-el9-gcc13-dbg. . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxEle",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1184,interoperability,share,shared,1184,"OT=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat. export LCG_CONFIG=x86_64-el9-gcc13-dbg. . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxElement {};. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1376,interoperability,xml,xml,1376,"RARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxElement {};. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {};. template <class T>. class DataVector<T, NoBase> {};. #endif // not ATHCONTAINERS_DATAVECTOR_H. ```. AthContainers/selection.xml. ```. <lcgdict>. <class name=""AuxElement""/>. <",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1574,interoperability,share,shared,1574,"ap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxElement {};. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {};. template <class T>. class DataVector<T, NoBase> {};. #endif // not ATHCONTAINERS_DATAVECTOR_H. ```. AthContainers/selection.xml. ```. <lcgdict>. <class name=""AuxElement""/>. </lcgdict>. ```. xAODEgamma/selection.xml:. ```. <lcgdict>. <class name=""Egamma_v1"" />. <class name=""DataVector<Egamma_v1>"" />. </lcgdict>. ```. xAODEgamma/xAODEgammaDict.h. ```. #include ""AthContaine",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:2328,interoperability,xml,xml,2328,"ed -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxElement {};. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {};. template <class T>. class DataVector<T, NoBase> {};. #endif // not ATHCONTAINERS_DATAVECTOR_H. ```. AthContainers/selection.xml. ```. <lcgdict>. <class name=""AuxElement""/>. </lcgdict>. ```. xAODEgamma/selection.xml:. ```. <lcgdict>. <class name=""Egamma_v1"" />. <class name=""DataVector<Egamma_v1>"" />. </lcgdict>. ```. xAODEgamma/xAODEgammaDict.h. ```. #include ""AthContainers/DataVector.h"". class Egamma_v1 :public AuxElement { };. template <> struct DataVectorBase<Egamma_v1>. { typedef DataVector<AuxElement> Base; }; . template class DataVector<Egamma_v1>;. ```. xAODTracking/selection.xml:. ```. <lcgdict>. <class name=""TrackParticle_v1"" />. <class name=""DataVector<TrackParticle_v1>"" />. </lcgdict>. ```. xAODTracking/xAODTrackingDict.h:. ```. #include ""AthContainers/DataVector.h"". class TrackParticle_v1 : public AuxElement { };. template <> struct DataVectorBase<TrackParticle_v1>. { typedef DataVector<AuxElement> Base; }; . template class DataVector<TrackParticle_v1>;. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:2415,interoperability,xml,xml,2415,"ed -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxElement {};. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {};. template <class T>. class DataVector<T, NoBase> {};. #endif // not ATHCONTAINERS_DATAVECTOR_H. ```. AthContainers/selection.xml. ```. <lcgdict>. <class name=""AuxElement""/>. </lcgdict>. ```. xAODEgamma/selection.xml:. ```. <lcgdict>. <class name=""Egamma_v1"" />. <class name=""DataVector<Egamma_v1>"" />. </lcgdict>. ```. xAODEgamma/xAODEgammaDict.h. ```. #include ""AthContainers/DataVector.h"". class Egamma_v1 :public AuxElement { };. template <> struct DataVectorBase<Egamma_v1>. { typedef DataVector<AuxElement> Base; }; . template class DataVector<Egamma_v1>;. ```. xAODTracking/selection.xml:. ```. <lcgdict>. <class name=""TrackParticle_v1"" />. <class name=""DataVector<TrackParticle_v1>"" />. </lcgdict>. ```. xAODTracking/xAODTrackingDict.h:. ```. #include ""AthContainers/DataVector.h"". class TrackParticle_v1 : public AuxElement { };. template <> struct DataVectorBase<TrackParticle_v1>. { typedef DataVector<AuxElement> Base; }; . template class DataVector<TrackParticle_v1>;. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:2793,interoperability,xml,xml,2793,"ed -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxElement {};. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {};. template <class T>. class DataVector<T, NoBase> {};. #endif // not ATHCONTAINERS_DATAVECTOR_H. ```. AthContainers/selection.xml. ```. <lcgdict>. <class name=""AuxElement""/>. </lcgdict>. ```. xAODEgamma/selection.xml:. ```. <lcgdict>. <class name=""Egamma_v1"" />. <class name=""DataVector<Egamma_v1>"" />. </lcgdict>. ```. xAODEgamma/xAODEgammaDict.h. ```. #include ""AthContainers/DataVector.h"". class Egamma_v1 :public AuxElement { };. template <> struct DataVectorBase<Egamma_v1>. { typedef DataVector<AuxElement> Base; }; . template class DataVector<Egamma_v1>;. ```. xAODTracking/selection.xml:. ```. <lcgdict>. <class name=""TrackParticle_v1"" />. <class name=""DataVector<TrackParticle_v1>"" />. </lcgdict>. ```. xAODTracking/xAODTrackingDict.h:. ```. #include ""AthContainers/DataVector.h"". class TrackParticle_v1 : public AuxElement { };. template <> struct DataVectorBase<TrackParticle_v1>. { typedef DataVector<AuxElement> Base; }; . template class DataVector<TrackParticle_v1>;. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:150,performance,content,contents,150,"And once again, github refuses tar files and silently disappears zip files. It is again available on lxplus at ~ssnyder/fwddict-crash.tar. Here's the contents:. setup:. ```. export LCG_ROOT=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat. export LCG_CONFIG=x86_64-el9-gcc13-dbg. . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxEle",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:88,reliability,availab,available,88,"And once again, github refuses tar files and silently disappears zip files. It is again available on lxplus at ~ssnyder/fwddict-crash.tar. Here's the contents:. setup:. ```. export LCG_ROOT=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat. export LCG_CONFIG=x86_64-el9-gcc13-dbg. . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxEle",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:88,safety,avail,available,88,"And once again, github refuses tar files and silently disappears zip files. It is again available on lxplus at ~ssnyder/fwddict-crash.tar. Here's the contents:. setup:. ```. export LCG_ROOT=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat. export LCG_CONFIG=x86_64-el9-gcc13-dbg. . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxEle",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:309,safety,patch,patches,309,"And once again, github refuses tar files and silently disappears zip files. It is again available on lxplus at ~ssnyder/fwddict-crash.tar. Here's the contents:. setup:. ```. export LCG_ROOT=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat. export LCG_CONFIG=x86_64-el9-gcc13-dbg. . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxEle",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1662,safety,test,test,1662,"++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxElement {};. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {};. template <class T>. class DataVector<T, NoBase> {};. #endif // not ATHCONTAINERS_DATAVECTOR_H. ```. AthContainers/selection.xml. ```. <lcgdict>. <class name=""AuxElement""/>. </lcgdict>. ```. xAODEgamma/selection.xml:. ```. <lcgdict>. <class name=""Egamma_v1"" />. <class name=""DataVector<Egamma_v1>"" />. </lcgdict>. ```. xAODEgamma/xAODEgammaDict.h. ```. #include ""AthContainers/DataVector.h"". class Egamma_v1 :public AuxElement { };. template <> struct DataVecto",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:88,security,availab,available,88,"And once again, github refuses tar files and silently disappears zip files. It is again available on lxplus at ~ssnyder/fwddict-crash.tar. Here's the contents:. setup:. ```. export LCG_ROOT=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat. export LCG_CONFIG=x86_64-el9-gcc13-dbg. . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxEle",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:309,security,patch,patches,309,"And once again, github refuses tar files and silently disappears zip files. It is again available on lxplus at ~ssnyder/fwddict-crash.tar. Here's the contents:. setup:. ```. export LCG_ROOT=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat. export LCG_CONFIG=x86_64-el9-gcc13-dbg. . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH. ```. build.sh:. ```. #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxEle",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1662,testability,test,test,1662,"++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20. g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include . g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore. ```. test.py:. ```. import ROOT. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. AthContainers/AthContainersDict.h:. ```. #include ""AthContainers/DataVector.h"". ```. AthContainers/DataVector.h. ```. #ifndef ATHCONTAINERS_DATAVECTOR_H. #define ATHCONTAINERS_DATAVECTOR_H. class AuxElement {};. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {};. template <class T>. class DataVector<T, NoBase> {};. #endif // not ATHCONTAINERS_DATAVECTOR_H. ```. AthContainers/selection.xml. ```. <lcgdict>. <class name=""AuxElement""/>. </lcgdict>. ```. xAODEgamma/selection.xml:. ```. <lcgdict>. <class name=""Egamma_v1"" />. <class name=""DataVector<Egamma_v1>"" />. </lcgdict>. ```. xAODEgamma/xAODEgammaDict.h. ```. #include ""AthContainers/DataVector.h"". class Egamma_v1 :public AuxElement { };. template <> struct DataVecto",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14188:40,deployability,releas,release,40,"> builtin_nlohmann is off in the binary release, so the Findpackage CMake script should not require it to be found. Is binary release build with system-provided `nlohmann_json`? Should one add it to docker as requirement?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:126,deployability,releas,release,126,"> builtin_nlohmann is off in the binary release, so the Findpackage CMake script should not require it to be found. Is binary release build with system-provided `nlohmann_json`? Should one add it to docker as requirement?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:134,deployability,build,build,134,"> builtin_nlohmann is off in the binary release, so the Findpackage CMake script should not require it to be found. Is binary release build with system-provided `nlohmann_json`? Should one add it to docker as requirement?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:59,deployability,releas,release,59,"@ferdymercury :. > `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. Not sure I can follow. The binary release requires `builtin_nlohmann`, so indeed the Findpackage CMake script should probably complain if it's not found? I.e. is @linev 's suggestion what's needed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:169,deployability,releas,release,169,"@ferdymercury :. > `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. Not sure I can follow. The binary release requires `builtin_nlohmann`, so indeed the Findpackage CMake script should probably complain if it's not found? I.e. is @linev 's suggestion what's needed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:261,safety,compl,complain,261,"@ferdymercury :. > `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. Not sure I can follow. The binary release requires `builtin_nlohmann`, so indeed the Findpackage CMake script should probably complain if it's not found? I.e. is @linev 's suggestion what's needed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:261,security,compl,complain,261,"@ferdymercury :. > `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. Not sure I can follow. The binary release requires `builtin_nlohmann`, so indeed the Findpackage CMake script should probably complain if it's not found? I.e. is @linev 's suggestion what's needed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:96,deployability,instal,install,96,@ferdymercury says in original message that `builtin_nlohmann` is off in binary. Therefore when install ROOT via docker one has to ensure that system-wide `nlohmann_json` is provided. That are other solutions?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:31,integrability,messag,message,31,@ferdymercury says in original message that `builtin_nlohmann` is off in binary. Therefore when install ROOT via docker one has to ensure that system-wide `nlohmann_json` is provided. That are other solutions?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:31,interoperability,messag,message,31,@ferdymercury says in original message that `builtin_nlohmann` is off in binary. Therefore when install ROOT via docker one has to ensure that system-wide `nlohmann_json` is provided. That are other solutions?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:364,deployability,instal,installed,364,"See https://github.com/root-project/root/pull/14178#discussion_r1415583863. nlohmann_json is no longer builtin in the binaries in 6.30 vs 6.28. So either we disable looking for it as mandatory in the Find CMake script, leaving it as optional, as it does not seem essential, or we add it as requirement in the website of prerequisites if it is important that it is installed system-wide.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:249,reliability,doe,does,249,"See https://github.com/root-project/root/pull/14178#discussion_r1415583863. nlohmann_json is no longer builtin in the binaries in 6.30 vs 6.28. So either we disable looking for it as mandatory in the Find CMake script, leaving it as optional, as it does not seem essential, or we add it as requirement in the website of prerequisites if it is important that it is installed system-wide.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:231,deployability,build,build,231,"Reason why it searched - it uses in public interfaces in following libraries:. * `ROOTEve`,. * `RooFitJSONInterface`. * `RooFitMultiProcess`. Without external `nlohmann_json` is not possible to link with these libraries. . If ROOT build with external `nlohmann_json`, such external `nlohmann_json` must be provided.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:36,integrability,pub,public,36,"Reason why it searched - it uses in public interfaces in following libraries:. * `ROOTEve`,. * `RooFitJSONInterface`. * `RooFitMultiProcess`. Without external `nlohmann_json` is not possible to link with these libraries. . If ROOT build with external `nlohmann_json`, such external `nlohmann_json` must be provided.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:43,integrability,interfac,interfaces,43,"Reason why it searched - it uses in public interfaces in following libraries:. * `ROOTEve`,. * `RooFitJSONInterface`. * `RooFitMultiProcess`. Without external `nlohmann_json` is not possible to link with these libraries. . If ROOT build with external `nlohmann_json`, such external `nlohmann_json` must be provided.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:43,interoperability,interfac,interfaces,43,"Reason why it searched - it uses in public interfaces in following libraries:. * `ROOTEve`,. * `RooFitJSONInterface`. * `RooFitMultiProcess`. Without external `nlohmann_json` is not possible to link with these libraries. . If ROOT build with external `nlohmann_json`, such external `nlohmann_json` must be provided.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:43,modifiability,interfac,interfaces,43,"Reason why it searched - it uses in public interfaces in following libraries:. * `ROOTEve`,. * `RooFitJSONInterface`. * `RooFitMultiProcess`. Without external `nlohmann_json` is not possible to link with these libraries. . If ROOT build with external `nlohmann_json`, such external `nlohmann_json` must be provided.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:208,deployability,releas,releases,208,"> Without external `nlohmann_json` is not possible to link with these libraries. I see, thanks for the explanation. So from my point of view, either builtin should be turned always to ON as before for binary releases, or the cmake find-script should only require it if ROOTEve is linked, or the requirement for external installation should be added to the dependencies website.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:320,deployability,instal,installation,320,"> Without external `nlohmann_json` is not possible to link with these libraries. I see, thanks for the explanation. So from my point of view, either builtin should be turned always to ON as before for binary releases, or the cmake find-script should only require it if ROOTEve is linked, or the requirement for external installation should be added to the dependencies website.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:356,deployability,depend,dependencies,356,"> Without external `nlohmann_json` is not possible to link with these libraries. I see, thanks for the explanation. So from my point of view, either builtin should be turned always to ON as before for binary releases, or the cmake find-script should only require it if ROOTEve is linked, or the requirement for external installation should be added to the dependencies website.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:356,integrability,depend,dependencies,356,"> Without external `nlohmann_json` is not possible to link with these libraries. I see, thanks for the explanation. So from my point of view, either builtin should be turned always to ON as before for binary releases, or the cmake find-script should only require it if ROOTEve is linked, or the requirement for external installation should be added to the dependencies website.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:356,modifiability,depend,dependencies,356,"> Without external `nlohmann_json` is not possible to link with these libraries. I see, thanks for the explanation. So from my point of view, either builtin should be turned always to ON as before for binary releases, or the cmake find-script should only require it if ROOTEve is linked, or the requirement for external installation should be added to the dependencies website.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:356,safety,depend,dependencies,356,"> Without external `nlohmann_json` is not possible to link with these libraries. I see, thanks for the explanation. So from my point of view, either builtin should be turned always to ON as before for binary releases, or the cmake find-script should only require it if ROOTEve is linked, or the requirement for external installation should be added to the dependencies website.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:356,testability,depend,dependencies,356,"> Without external `nlohmann_json` is not possible to link with these libraries. I see, thanks for the explanation. So from my point of view, either builtin should be turned always to ON as before for binary releases, or the cmake find-script should only require it if ROOTEve is linked, or the requirement for external installation should be added to the dependencies website.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:225,deployability,build,build,225,"> cmake find-script should only require it if ROOTEve is linked,. I have no good idea how to implement this in ROOT itself. It only can be done in users cmake files - who knows which libraries are linked. But again - if ROOT build with external `nlohmann_json` - it should be provided before ROOT binary can be installed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:311,deployability,instal,installed,311,"> cmake find-script should only require it if ROOTEve is linked,. I have no good idea how to implement this in ROOT itself. It only can be done in users cmake files - who knows which libraries are linked. But again - if ROOT build with external `nlohmann_json` - it should be provided before ROOT binary can be installed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:147,usability,user,users,147,"> cmake find-script should only require it if ROOTEve is linked,. I have no good idea how to implement this in ROOT itself. It only can be done in users cmake files - who knows which libraries are linked. But again - if ROOT build with external `nlohmann_json` - it should be provided before ROOT binary can be installed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:34,availability,down,download,34,"I am still a bit confused. When I download 6.30 binary release, and run tutorials/eve7/boxset.C. it correctly opens a web browser and all looks fine, JSON communication works. But then (in 6.30):. ```. root-config --has-builtin_nlohmannjson. no. ```. How is it possible then that the tutorial is working correctly? And why, in 6.28, was the behavior:. ```. root-config --has-builtin_nlohmannjson. yes. ```. Maybe @krasznaa has some ideas on the CMake part.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:55,deployability,releas,release,55,"I am still a bit confused. When I download 6.30 binary release, and run tutorials/eve7/boxset.C. it correctly opens a web browser and all looks fine, JSON communication works. But then (in 6.30):. ```. root-config --has-builtin_nlohmannjson. no. ```. How is it possible then that the tutorial is working correctly? And why, in 6.28, was the behavior:. ```. root-config --has-builtin_nlohmannjson. yes. ```. Maybe @krasznaa has some ideas on the CMake part.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:341,usability,behavi,behavior,341,"I am still a bit confused. When I download 6.30 binary release, and run tutorials/eve7/boxset.C. it correctly opens a web browser and all looks fine, JSON communication works. But then (in 6.30):. ```. root-config --has-builtin_nlohmannjson. no. ```. How is it possible then that the tutorial is working correctly? And why, in 6.28, was the behavior:. ```. root-config --has-builtin_nlohmannjson. yes. ```. Maybe @krasznaa has some ideas on the CMake part.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:511,deployability,build,build,511,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it? The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:. - https://github.com/acts-project/algebra-plugins/. - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:741,deployability,instal,installed,741,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it? The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:. - https://github.com/acts-project/algebra-plugins/. - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:800,deployability,build,builds,800,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it? The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:. - https://github.com/acts-project/algebra-plugins/. - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:832,deployability,build,build,832,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it? The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:. - https://github.com/acts-project/algebra-plugins/. - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:948,deployability,configurat,configuration,948,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it? The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:. - https://github.com/acts-project/algebra-plugins/. - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1193,deployability,automat,automation,1193,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it? The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:. - https://github.com/acts-project/algebra-plugins/. - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1215,deployability,build,build,1215,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it? The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:. - https://github.com/acts-project/algebra-plugins/. - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:529,integrability,pub,publicly,529,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it? The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:. - https://github.com/acts-project/algebra-plugins/. - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:948,integrability,configur,configuration,948,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it? The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:. - https://github.com/acts-project/algebra-plugins/. - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:274,interoperability,distribut,distributed,274,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it? The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:. - https://github.com/acts-project/algebra-plugins/. - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1108,interoperability,specif,specify,1108,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it? The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:. - https://github.com/acts-project/algebra-plugins/. - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1527,interoperability,plug,plugins,1527,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it? The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:. - https://github.com/acts-project/algebra-plugins/. - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1579,interoperability,plug,plugins,1579,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it? The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:. - https://github.com/acts-project/algebra-plugins/. - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:948,modifiability,configur,configuration,948,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it? The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:. - https://github.com/acts-project/algebra-plugins/. - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:144,reliability,doe,doesn,144,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it? The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:. - https://github.com/acts-project/algebra-plugins/. - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:186,reliability,doe,does,186,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it? The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:. - https://github.com/acts-project/algebra-plugins/. - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:254,reliability,doe,does,254,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it? The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:. - https://github.com/acts-project/algebra-plugins/. - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:888,reliability,doe,does,888,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it? The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:. - https://github.com/acts-project/algebra-plugins/. - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:948,security,configur,configuration,948,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it? The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:. - https://github.com/acts-project/algebra-plugins/. - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:15,testability,understand,understand,15,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it? The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:. - https://github.com/acts-project/algebra-plugins/. - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:661,testability,simpl,simple,661,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it? The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:. - https://github.com/acts-project/algebra-plugins/. - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1193,testability,automat,automation,1193,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it? The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:. - https://github.com/acts-project/algebra-plugins/. - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:661,usability,simpl,simple,661,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it? The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:. - https://github.com/acts-project/algebra-plugins/. - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1089,usability,user,user,1089,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it? The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:. - https://github.com/acts-project/algebra-plugins/. - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1324,usability,help,help,1324,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it? The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:. - https://github.com/acts-project/algebra-plugins/. - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1389,usability,user,users,1389,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it? The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:. - https://github.com/acts-project/algebra-plugins/. - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:336,integrability,Event,Event,336,"> root tutorials/eve7/event_demo.C+. Looks good. ```. EVEMNG ............. streaming the world scene. sending json, len = 6535. for now assume world-scene has no render data, binary-size=0. EVEMNG ............. streaming scene [Geometry scene]. sending json, len = 749. sending binary, len = 5832. EVEMNG ............. streaming scene [Event scene]. sending json, len = 16121. sending binary, len = 10688. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:329,availability,state,statement,329,"> I don't really understand your question. 😕. > . Thanks for the explanation. My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:189,deployability,depend,dependency,189,"> I don't really understand your question. 😕. > . Thanks for the explanation. My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:255,deployability,depend,depending,255,"> I don't really understand your question. 😕. > . Thanks for the explanation. My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:189,integrability,depend,dependency,189,"> I don't really understand your question. 😕. > . Thanks for the explanation. My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:255,integrability,depend,depending,255,"> I don't really understand your question. 😕. > . Thanks for the explanation. My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:282,integrability,COMPON,COMPONENTS,282,"> I don't really understand your question. 😕. > . Thanks for the explanation. My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:329,integrability,state,statement,329,"> I don't really understand your question. 😕. > . Thanks for the explanation. My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:282,interoperability,COMPON,COMPONENTS,282,"> I don't really understand your question. 😕. > . Thanks for the explanation. My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:189,modifiability,depend,dependency,189,"> I don't really understand your question. 😕. > . Thanks for the explanation. My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:255,modifiability,depend,depending,255,"> I don't really understand your question. 😕. > . Thanks for the explanation. My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:282,modifiability,COMPON,COMPONENTS,282,"> I don't really understand your question. 😕. > . Thanks for the explanation. My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:189,safety,depend,dependency,189,"> I don't really understand your question. 😕. > . Thanks for the explanation. My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:255,safety,depend,depending,255,"> I don't really understand your question. 😕. > . Thanks for the explanation. My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:113,security,modif,modify,113,"> I don't really understand your question. 😕. > . Thanks for the explanation. My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:17,testability,understand,understand,17,"> I don't really understand your question. 😕. > . Thanks for the explanation. My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:189,testability,depend,dependency,189,"> I don't really understand your question. 😕. > . Thanks for the explanation. My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:255,testability,depend,depending,255,"> I don't really understand your question. 😕. > . Thanks for the explanation. My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:347,usability,user,user,347,"> I don't really understand your question. 😕. > . Thanks for the explanation. My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:278,deployability,version,versions,278,"Actually, we do not have example with REve code where `nlohmann::json` interface is used. In the `REveElement.hxx` header file I see such construct:. ```. #if __has_include(<nlohmann/json_fwd.hpp>). #include <nlohmann/json_fwd.hpp>. #else. // This forward declaration works for versions before 3.11.0, which introduced. // a ""versioned, ABI-tagged inline namespace"". The json_fwd.hpp header is. // present in multi-header installations (the default as of version 3.11.0), and. // single-header installations of version 3.11.2+. ```. Means it can compile macro - as long as json interface is not really involved. . But will fail if one has to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:326,deployability,version,versioned,326,"Actually, we do not have example with REve code where `nlohmann::json` interface is used. In the `REveElement.hxx` header file I see such construct:. ```. #if __has_include(<nlohmann/json_fwd.hpp>). #include <nlohmann/json_fwd.hpp>. #else. // This forward declaration works for versions before 3.11.0, which introduced. // a ""versioned, ABI-tagged inline namespace"". The json_fwd.hpp header is. // present in multi-header installations (the default as of version 3.11.0), and. // single-header installations of version 3.11.2+. ```. Means it can compile macro - as long as json interface is not really involved. . But will fail if one has to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:422,deployability,instal,installations,422,"Actually, we do not have example with REve code where `nlohmann::json` interface is used. In the `REveElement.hxx` header file I see such construct:. ```. #if __has_include(<nlohmann/json_fwd.hpp>). #include <nlohmann/json_fwd.hpp>. #else. // This forward declaration works for versions before 3.11.0, which introduced. // a ""versioned, ABI-tagged inline namespace"". The json_fwd.hpp header is. // present in multi-header installations (the default as of version 3.11.0), and. // single-header installations of version 3.11.2+. ```. Means it can compile macro - as long as json interface is not really involved. . But will fail if one has to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:455,deployability,version,version,455,"Actually, we do not have example with REve code where `nlohmann::json` interface is used. In the `REveElement.hxx` header file I see such construct:. ```. #if __has_include(<nlohmann/json_fwd.hpp>). #include <nlohmann/json_fwd.hpp>. #else. // This forward declaration works for versions before 3.11.0, which introduced. // a ""versioned, ABI-tagged inline namespace"". The json_fwd.hpp header is. // present in multi-header installations (the default as of version 3.11.0), and. // single-header installations of version 3.11.2+. ```. Means it can compile macro - as long as json interface is not really involved. . But will fail if one has to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:494,deployability,instal,installations,494,"Actually, we do not have example with REve code where `nlohmann::json` interface is used. In the `REveElement.hxx` header file I see such construct:. ```. #if __has_include(<nlohmann/json_fwd.hpp>). #include <nlohmann/json_fwd.hpp>. #else. // This forward declaration works for versions before 3.11.0, which introduced. // a ""versioned, ABI-tagged inline namespace"". The json_fwd.hpp header is. // present in multi-header installations (the default as of version 3.11.0), and. // single-header installations of version 3.11.2+. ```. Means it can compile macro - as long as json interface is not really involved. . But will fail if one has to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:511,deployability,version,version,511,"Actually, we do not have example with REve code where `nlohmann::json` interface is used. In the `REveElement.hxx` header file I see such construct:. ```. #if __has_include(<nlohmann/json_fwd.hpp>). #include <nlohmann/json_fwd.hpp>. #else. // This forward declaration works for versions before 3.11.0, which introduced. // a ""versioned, ABI-tagged inline namespace"". The json_fwd.hpp header is. // present in multi-header installations (the default as of version 3.11.0), and. // single-header installations of version 3.11.2+. ```. Means it can compile macro - as long as json interface is not really involved. . But will fail if one has to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:623,deployability,fail,fail,623,"Actually, we do not have example with REve code where `nlohmann::json` interface is used. In the `REveElement.hxx` header file I see such construct:. ```. #if __has_include(<nlohmann/json_fwd.hpp>). #include <nlohmann/json_fwd.hpp>. #else. // This forward declaration works for versions before 3.11.0, which introduced. // a ""versioned, ABI-tagged inline namespace"". The json_fwd.hpp header is. // present in multi-header installations (the default as of version 3.11.0), and. // single-header installations of version 3.11.2+. ```. Means it can compile macro - as long as json interface is not really involved. . But will fail if one has to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:71,integrability,interfac,interface,71,"Actually, we do not have example with REve code where `nlohmann::json` interface is used. In the `REveElement.hxx` header file I see such construct:. ```. #if __has_include(<nlohmann/json_fwd.hpp>). #include <nlohmann/json_fwd.hpp>. #else. // This forward declaration works for versions before 3.11.0, which introduced. // a ""versioned, ABI-tagged inline namespace"". The json_fwd.hpp header is. // present in multi-header installations (the default as of version 3.11.0), and. // single-header installations of version 3.11.2+. ```. Means it can compile macro - as long as json interface is not really involved. . But will fail if one has to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:278,integrability,version,versions,278,"Actually, we do not have example with REve code where `nlohmann::json` interface is used. In the `REveElement.hxx` header file I see such construct:. ```. #if __has_include(<nlohmann/json_fwd.hpp>). #include <nlohmann/json_fwd.hpp>. #else. // This forward declaration works for versions before 3.11.0, which introduced. // a ""versioned, ABI-tagged inline namespace"". The json_fwd.hpp header is. // present in multi-header installations (the default as of version 3.11.0), and. // single-header installations of version 3.11.2+. ```. Means it can compile macro - as long as json interface is not really involved. . But will fail if one has to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:326,integrability,version,versioned,326,"Actually, we do not have example with REve code where `nlohmann::json` interface is used. In the `REveElement.hxx` header file I see such construct:. ```. #if __has_include(<nlohmann/json_fwd.hpp>). #include <nlohmann/json_fwd.hpp>. #else. // This forward declaration works for versions before 3.11.0, which introduced. // a ""versioned, ABI-tagged inline namespace"". The json_fwd.hpp header is. // present in multi-header installations (the default as of version 3.11.0), and. // single-header installations of version 3.11.2+. ```. Means it can compile macro - as long as json interface is not really involved. . But will fail if one has to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:455,integrability,version,version,455,"Actually, we do not have example with REve code where `nlohmann::json` interface is used. In the `REveElement.hxx` header file I see such construct:. ```. #if __has_include(<nlohmann/json_fwd.hpp>). #include <nlohmann/json_fwd.hpp>. #else. // This forward declaration works for versions before 3.11.0, which introduced. // a ""versioned, ABI-tagged inline namespace"". The json_fwd.hpp header is. // present in multi-header installations (the default as of version 3.11.0), and. // single-header installations of version 3.11.2+. ```. Means it can compile macro - as long as json interface is not really involved. . But will fail if one has to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:511,integrability,version,version,511,"Actually, we do not have example with REve code where `nlohmann::json` interface is used. In the `REveElement.hxx` header file I see such construct:. ```. #if __has_include(<nlohmann/json_fwd.hpp>). #include <nlohmann/json_fwd.hpp>. #else. // This forward declaration works for versions before 3.11.0, which introduced. // a ""versioned, ABI-tagged inline namespace"". The json_fwd.hpp header is. // present in multi-header installations (the default as of version 3.11.0), and. // single-header installations of version 3.11.2+. ```. Means it can compile macro - as long as json interface is not really involved. . But will fail if one has to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:578,integrability,interfac,interface,578,"Actually, we do not have example with REve code where `nlohmann::json` interface is used. In the `REveElement.hxx` header file I see such construct:. ```. #if __has_include(<nlohmann/json_fwd.hpp>). #include <nlohmann/json_fwd.hpp>. #else. // This forward declaration works for versions before 3.11.0, which introduced. // a ""versioned, ABI-tagged inline namespace"". The json_fwd.hpp header is. // present in multi-header installations (the default as of version 3.11.0), and. // single-header installations of version 3.11.2+. ```. Means it can compile macro - as long as json interface is not really involved. . But will fail if one has to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:71,interoperability,interfac,interface,71,"Actually, we do not have example with REve code where `nlohmann::json` interface is used. In the `REveElement.hxx` header file I see such construct:. ```. #if __has_include(<nlohmann/json_fwd.hpp>). #include <nlohmann/json_fwd.hpp>. #else. // This forward declaration works for versions before 3.11.0, which introduced. // a ""versioned, ABI-tagged inline namespace"". The json_fwd.hpp header is. // present in multi-header installations (the default as of version 3.11.0), and. // single-header installations of version 3.11.2+. ```. Means it can compile macro - as long as json interface is not really involved. . But will fail if one has to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:578,interoperability,interfac,interface,578,"Actually, we do not have example with REve code where `nlohmann::json` interface is used. In the `REveElement.hxx` header file I see such construct:. ```. #if __has_include(<nlohmann/json_fwd.hpp>). #include <nlohmann/json_fwd.hpp>. #else. // This forward declaration works for versions before 3.11.0, which introduced. // a ""versioned, ABI-tagged inline namespace"". The json_fwd.hpp header is. // present in multi-header installations (the default as of version 3.11.0), and. // single-header installations of version 3.11.2+. ```. Means it can compile macro - as long as json interface is not really involved. . But will fail if one has to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:71,modifiability,interfac,interface,71,"Actually, we do not have example with REve code where `nlohmann::json` interface is used. In the `REveElement.hxx` header file I see such construct:. ```. #if __has_include(<nlohmann/json_fwd.hpp>). #include <nlohmann/json_fwd.hpp>. #else. // This forward declaration works for versions before 3.11.0, which introduced. // a ""versioned, ABI-tagged inline namespace"". The json_fwd.hpp header is. // present in multi-header installations (the default as of version 3.11.0), and. // single-header installations of version 3.11.2+. ```. Means it can compile macro - as long as json interface is not really involved. . But will fail if one has to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:278,modifiability,version,versions,278,"Actually, we do not have example with REve code where `nlohmann::json` interface is used. In the `REveElement.hxx` header file I see such construct:. ```. #if __has_include(<nlohmann/json_fwd.hpp>). #include <nlohmann/json_fwd.hpp>. #else. // This forward declaration works for versions before 3.11.0, which introduced. // a ""versioned, ABI-tagged inline namespace"". The json_fwd.hpp header is. // present in multi-header installations (the default as of version 3.11.0), and. // single-header installations of version 3.11.2+. ```. Means it can compile macro - as long as json interface is not really involved. . But will fail if one has to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:326,modifiability,version,versioned,326,"Actually, we do not have example with REve code where `nlohmann::json` interface is used. In the `REveElement.hxx` header file I see such construct:. ```. #if __has_include(<nlohmann/json_fwd.hpp>). #include <nlohmann/json_fwd.hpp>. #else. // This forward declaration works for versions before 3.11.0, which introduced. // a ""versioned, ABI-tagged inline namespace"". The json_fwd.hpp header is. // present in multi-header installations (the default as of version 3.11.0), and. // single-header installations of version 3.11.2+. ```. Means it can compile macro - as long as json interface is not really involved. . But will fail if one has to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:455,modifiability,version,version,455,"Actually, we do not have example with REve code where `nlohmann::json` interface is used. In the `REveElement.hxx` header file I see such construct:. ```. #if __has_include(<nlohmann/json_fwd.hpp>). #include <nlohmann/json_fwd.hpp>. #else. // This forward declaration works for versions before 3.11.0, which introduced. // a ""versioned, ABI-tagged inline namespace"". The json_fwd.hpp header is. // present in multi-header installations (the default as of version 3.11.0), and. // single-header installations of version 3.11.2+. ```. Means it can compile macro - as long as json interface is not really involved. . But will fail if one has to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:511,modifiability,version,version,511,"Actually, we do not have example with REve code where `nlohmann::json` interface is used. In the `REveElement.hxx` header file I see such construct:. ```. #if __has_include(<nlohmann/json_fwd.hpp>). #include <nlohmann/json_fwd.hpp>. #else. // This forward declaration works for versions before 3.11.0, which introduced. // a ""versioned, ABI-tagged inline namespace"". The json_fwd.hpp header is. // present in multi-header installations (the default as of version 3.11.0), and. // single-header installations of version 3.11.2+. ```. Means it can compile macro - as long as json interface is not really involved. . But will fail if one has to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:578,modifiability,interfac,interface,578,"Actually, we do not have example with REve code where `nlohmann::json` interface is used. In the `REveElement.hxx` header file I see such construct:. ```. #if __has_include(<nlohmann/json_fwd.hpp>). #include <nlohmann/json_fwd.hpp>. #else. // This forward declaration works for versions before 3.11.0, which introduced. // a ""versioned, ABI-tagged inline namespace"". The json_fwd.hpp header is. // present in multi-header installations (the default as of version 3.11.0), and. // single-header installations of version 3.11.2+. ```. Means it can compile macro - as long as json interface is not really involved. . But will fail if one has to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:623,reliability,fail,fail,623,"Actually, we do not have example with REve code where `nlohmann::json` interface is used. In the `REveElement.hxx` header file I see such construct:. ```. #if __has_include(<nlohmann/json_fwd.hpp>). #include <nlohmann/json_fwd.hpp>. #else. // This forward declaration works for versions before 3.11.0, which introduced. // a ""versioned, ABI-tagged inline namespace"". The json_fwd.hpp header is. // present in multi-header installations (the default as of version 3.11.0), and. // single-header installations of version 3.11.2+. ```. Means it can compile macro - as long as json interface is not really involved. . But will fail if one has to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:88,availability,state,statement,88,"> So to say, that depending on the REQUIRED COMPONENTS that you use in the find_package statement in your user code, it is more or less 'requiring'. Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:18,deployability,depend,depending,18,"> So to say, that depending on the REQUIRED COMPONENTS that you use in the find_package statement in your user code, it is more or less 'requiring'. Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:18,integrability,depend,depending,18,"> So to say, that depending on the REQUIRED COMPONENTS that you use in the find_package statement in your user code, it is more or less 'requiring'. Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:44,integrability,COMPON,COMPONENTS,44,"> So to say, that depending on the REQUIRED COMPONENTS that you use in the find_package statement in your user code, it is more or less 'requiring'. Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:88,integrability,state,statement,88,"> So to say, that depending on the REQUIRED COMPONENTS that you use in the find_package statement in your user code, it is more or less 'requiring'. Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:213,integrability,compon,components,213,"> So to say, that depending on the REQUIRED COMPONENTS that you use in the find_package statement in your user code, it is more or less 'requiring'. Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:44,interoperability,COMPON,COMPONENTS,44,"> So to say, that depending on the REQUIRED COMPONENTS that you use in the find_package statement in your user code, it is more or less 'requiring'. Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:213,interoperability,compon,components,213,"> So to say, that depending on the REQUIRED COMPONENTS that you use in the find_package statement in your user code, it is more or less 'requiring'. Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:18,modifiability,depend,depending,18,"> So to say, that depending on the REQUIRED COMPONENTS that you use in the find_package statement in your user code, it is more or less 'requiring'. Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:44,modifiability,COMPON,COMPONENTS,44,"> So to say, that depending on the REQUIRED COMPONENTS that you use in the find_package statement in your user code, it is more or less 'requiring'. Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:213,modifiability,compon,components,213,"> So to say, that depending on the REQUIRED COMPONENTS that you use in the find_package statement in your user code, it is more or less 'requiring'. Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:18,safety,depend,depending,18,"> So to say, that depending on the REQUIRED COMPONENTS that you use in the find_package statement in your user code, it is more or less 'requiring'. Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:18,testability,depend,depending,18,"> So to say, that depending on the REQUIRED COMPONENTS that you use in the find_package statement in your user code, it is more or less 'requiring'. Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:106,usability,user,user,106,"> So to say, that depending on the REQUIRED COMPONENTS that you use in the find_package statement in your user code, it is more or less 'requiring'. Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:253,availability,state,statement,253,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:113,deployability,depend,dependency,113,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:179,deployability,depend,depending,179,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:548,deployability,depend,dependency,548,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:711,deployability,build,build,711,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:931,deployability,depend,depends,931,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1326,deployability,depend,depends,1326,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1416,deployability,configurat,configuration,1416,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1442,deployability,fail,fail,1442,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1545,deployability,depend,depend,1545,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1600,deployability,depend,dependencies,1600,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1677,deployability,modul,module,1677,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:113,integrability,depend,dependency,113,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:179,integrability,depend,depending,179,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:206,integrability,COMPON,COMPONENTS,206,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:253,integrability,state,statement,253,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:548,integrability,depend,dependency,548,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:745,integrability,pub,publicly,745,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:931,integrability,depend,depends,931,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1326,integrability,depend,depends,1326,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1416,integrability,configur,configuration,1416,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1536,integrability,pub,publicly,1536,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1545,integrability,depend,depend,1545,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1600,integrability,depend,dependencies,1600,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:206,interoperability,COMPON,COMPONENTS,206,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:113,modifiability,depend,dependency,113,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:179,modifiability,depend,depending,179,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:206,modifiability,COMPON,COMPONENTS,206,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:548,modifiability,depend,dependency,548,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:931,modifiability,depend,depends,931,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1326,modifiability,depend,depends,1326,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1416,modifiability,configur,configuration,1416,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1545,modifiability,depend,depend,1545,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1600,modifiability,depend,dependencies,1600,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1677,modifiability,modul,module,1677,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1269,reliability,doe,doesn,1269,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1442,reliability,fail,fail,1442,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:113,safety,depend,dependency,113,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:179,safety,depend,depending,179,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:548,safety,depend,dependency,548,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:931,safety,depend,depends,931,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1326,safety,depend,depends,1326,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1455,safety,compl,complaint,1455,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1545,safety,depend,depend,1545,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1600,safety,depend,dependencies,1600,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1677,safety,modul,module,1677,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:37,security,modif,modify,37,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1416,security,configur,configuration,1416,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1455,security,compl,complaint,1455,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:113,testability,depend,dependency,113,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:179,testability,depend,depending,179,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:430,testability,simpl,simple,430,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:548,testability,depend,dependency,548,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:931,testability,depend,depends,931,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1326,testability,depend,depends,1326,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1545,testability,depend,depend,1545,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1600,testability,depend,dependencies,1600,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:271,usability,user,user,271,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:430,usability,simpl,simple,430,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:604,usability,behavi,behaviour,604,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1041,usability,user,user,1041,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1665,usability,help,help,1665,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1761,usability,user,user,1761,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:91,deployability,instal,install,91,Thanks! So I guess the easiest solution would be to add nlohmann-json to https://root.cern/install/dependencies/ and we're all set.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:99,deployability,depend,dependencies,99,Thanks! So I guess the easiest solution would be to add nlohmann-json to https://root.cern/install/dependencies/ and we're all set.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:99,integrability,depend,dependencies,99,Thanks! So I guess the easiest solution would be to add nlohmann-json to https://root.cern/install/dependencies/ and we're all set.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:99,modifiability,depend,dependencies,99,Thanks! So I guess the easiest solution would be to add nlohmann-json to https://root.cern/install/dependencies/ and we're all set.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:99,safety,depend,dependencies,99,Thanks! So I guess the easiest solution would be to add nlohmann-json to https://root.cern/install/dependencies/ and we're all set.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:99,testability,depend,dependencies,99,Thanks! So I guess the easiest solution would be to add nlohmann-json to https://root.cern/install/dependencies/ and we're all set.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:565,deployability,log,logic,565,"> Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro? As I wrote, I don't think it would be the way. But still, you get the values specified by the user in `ROOT_FIND_COMPONENTS`. https://cmake.org/cmake/help/latest/command/find_package.html#package-file-interface-variables. For instance we use that in another project of ours, to check if the user is asking for one of the optional components of the project. https://github.com/acts-project/vecmem/blob/main/cmake/vecmem-config.cmake.in#L38-L45. Note that this logic is figuring out if something that the user asked for exists at all. This machinery is not meant to figure out whether the user wants to actively use something that (always?) does exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:66,integrability,compon,components,66,"> Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro? As I wrote, I don't think it would be the way. But still, you get the values specified by the user in `ROOT_FIND_COMPONENTS`. https://cmake.org/cmake/help/latest/command/find_package.html#package-file-interface-variables. For instance we use that in another project of ours, to check if the user is asking for one of the optional components of the project. https://github.com/acts-project/vecmem/blob/main/cmake/vecmem-config.cmake.in#L38-L45. Note that this logic is figuring out if something that the user asked for exists at all. This machinery is not meant to figure out whether the user wants to actively use something that (always?) does exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:307,integrability,interfac,interface-variables,307,"> Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro? As I wrote, I don't think it would be the way. But still, you get the values specified by the user in `ROOT_FIND_COMPONENTS`. https://cmake.org/cmake/help/latest/command/find_package.html#package-file-interface-variables. For instance we use that in another project of ours, to check if the user is asking for one of the optional components of the project. https://github.com/acts-project/vecmem/blob/main/cmake/vecmem-config.cmake.in#L38-L45. Note that this logic is figuring out if something that the user asked for exists at all. This machinery is not meant to figure out whether the user wants to actively use something that (always?) does exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:436,integrability,compon,components,436,"> Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro? As I wrote, I don't think it would be the way. But still, you get the values specified by the user in `ROOT_FIND_COMPONENTS`. https://cmake.org/cmake/help/latest/command/find_package.html#package-file-interface-variables. For instance we use that in another project of ours, to check if the user is asking for one of the optional components of the project. https://github.com/acts-project/vecmem/blob/main/cmake/vecmem-config.cmake.in#L38-L45. Note that this logic is figuring out if something that the user asked for exists at all. This machinery is not meant to figure out whether the user wants to actively use something that (always?) does exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:66,interoperability,compon,components,66,"> Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro? As I wrote, I don't think it would be the way. But still, you get the values specified by the user in `ROOT_FIND_COMPONENTS`. https://cmake.org/cmake/help/latest/command/find_package.html#package-file-interface-variables. For instance we use that in another project of ours, to check if the user is asking for one of the optional components of the project. https://github.com/acts-project/vecmem/blob/main/cmake/vecmem-config.cmake.in#L38-L45. Note that this logic is figuring out if something that the user asked for exists at all. This machinery is not meant to figure out whether the user wants to actively use something that (always?) does exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:183,interoperability,specif,specified,183,"> Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro? As I wrote, I don't think it would be the way. But still, you get the values specified by the user in `ROOT_FIND_COMPONENTS`. https://cmake.org/cmake/help/latest/command/find_package.html#package-file-interface-variables. For instance we use that in another project of ours, to check if the user is asking for one of the optional components of the project. https://github.com/acts-project/vecmem/blob/main/cmake/vecmem-config.cmake.in#L38-L45. Note that this logic is figuring out if something that the user asked for exists at all. This machinery is not meant to figure out whether the user wants to actively use something that (always?) does exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:307,interoperability,interfac,interface-variables,307,"> Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro? As I wrote, I don't think it would be the way. But still, you get the values specified by the user in `ROOT_FIND_COMPONENTS`. https://cmake.org/cmake/help/latest/command/find_package.html#package-file-interface-variables. For instance we use that in another project of ours, to check if the user is asking for one of the optional components of the project. https://github.com/acts-project/vecmem/blob/main/cmake/vecmem-config.cmake.in#L38-L45. Note that this logic is figuring out if something that the user asked for exists at all. This machinery is not meant to figure out whether the user wants to actively use something that (always?) does exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:436,interoperability,compon,components,436,"> Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro? As I wrote, I don't think it would be the way. But still, you get the values specified by the user in `ROOT_FIND_COMPONENTS`. https://cmake.org/cmake/help/latest/command/find_package.html#package-file-interface-variables. For instance we use that in another project of ours, to check if the user is asking for one of the optional components of the project. https://github.com/acts-project/vecmem/blob/main/cmake/vecmem-config.cmake.in#L38-L45. Note that this logic is figuring out if something that the user asked for exists at all. This machinery is not meant to figure out whether the user wants to actively use something that (always?) does exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:66,modifiability,compon,components,66,"> Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro? As I wrote, I don't think it would be the way. But still, you get the values specified by the user in `ROOT_FIND_COMPONENTS`. https://cmake.org/cmake/help/latest/command/find_package.html#package-file-interface-variables. For instance we use that in another project of ours, to check if the user is asking for one of the optional components of the project. https://github.com/acts-project/vecmem/blob/main/cmake/vecmem-config.cmake.in#L38-L45. Note that this logic is figuring out if something that the user asked for exists at all. This machinery is not meant to figure out whether the user wants to actively use something that (always?) does exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:294,modifiability,pac,package-file-interface-variables,294,"> Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro? As I wrote, I don't think it would be the way. But still, you get the values specified by the user in `ROOT_FIND_COMPONENTS`. https://cmake.org/cmake/help/latest/command/find_package.html#package-file-interface-variables. For instance we use that in another project of ours, to check if the user is asking for one of the optional components of the project. https://github.com/acts-project/vecmem/blob/main/cmake/vecmem-config.cmake.in#L38-L45. Note that this logic is figuring out if something that the user asked for exists at all. This machinery is not meant to figure out whether the user wants to actively use something that (always?) does exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:436,modifiability,compon,components,436,"> Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro? As I wrote, I don't think it would be the way. But still, you get the values specified by the user in `ROOT_FIND_COMPONENTS`. https://cmake.org/cmake/help/latest/command/find_package.html#package-file-interface-variables. For instance we use that in another project of ours, to check if the user is asking for one of the optional components of the project. https://github.com/acts-project/vecmem/blob/main/cmake/vecmem-config.cmake.in#L38-L45. Note that this logic is figuring out if something that the user asked for exists at all. This machinery is not meant to figure out whether the user wants to actively use something that (always?) does exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:745,reliability,doe,does,745,"> Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro? As I wrote, I don't think it would be the way. But still, you get the values specified by the user in `ROOT_FIND_COMPONENTS`. https://cmake.org/cmake/help/latest/command/find_package.html#package-file-interface-variables. For instance we use that in another project of ours, to check if the user is asking for one of the optional components of the project. https://github.com/acts-project/vecmem/blob/main/cmake/vecmem-config.cmake.in#L38-L45. Note that this logic is figuring out if something that the user asked for exists at all. This machinery is not meant to figure out whether the user wants to actively use something that (always?) does exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:565,safety,log,logic,565,"> Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro? As I wrote, I don't think it would be the way. But still, you get the values specified by the user in `ROOT_FIND_COMPONENTS`. https://cmake.org/cmake/help/latest/command/find_package.html#package-file-interface-variables. For instance we use that in another project of ours, to check if the user is asking for one of the optional components of the project. https://github.com/acts-project/vecmem/blob/main/cmake/vecmem-config.cmake.in#L38-L45. Note that this logic is figuring out if something that the user asked for exists at all. This machinery is not meant to figure out whether the user wants to actively use something that (always?) does exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:565,security,log,logic,565,"> Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro? As I wrote, I don't think it would be the way. But still, you get the values specified by the user in `ROOT_FIND_COMPONENTS`. https://cmake.org/cmake/help/latest/command/find_package.html#package-file-interface-variables. For instance we use that in another project of ours, to check if the user is asking for one of the optional components of the project. https://github.com/acts-project/vecmem/blob/main/cmake/vecmem-config.cmake.in#L38-L45. Note that this logic is figuring out if something that the user asked for exists at all. This machinery is not meant to figure out whether the user wants to actively use something that (always?) does exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:565,testability,log,logic,565,"> Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro? As I wrote, I don't think it would be the way. But still, you get the values specified by the user in `ROOT_FIND_COMPONENTS`. https://cmake.org/cmake/help/latest/command/find_package.html#package-file-interface-variables. For instance we use that in another project of ours, to check if the user is asking for one of the optional components of the project. https://github.com/acts-project/vecmem/blob/main/cmake/vecmem-config.cmake.in#L38-L45. Note that this logic is figuring out if something that the user asked for exists at all. This machinery is not meant to figure out whether the user wants to actively use something that (always?) does exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:200,usability,user,user,200,"> Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro? As I wrote, I don't think it would be the way. But still, you get the values specified by the user in `ROOT_FIND_COMPONENTS`. https://cmake.org/cmake/help/latest/command/find_package.html#package-file-interface-variables. For instance we use that in another project of ours, to check if the user is asking for one of the optional components of the project. https://github.com/acts-project/vecmem/blob/main/cmake/vecmem-config.cmake.in#L38-L45. Note that this logic is figuring out if something that the user asked for exists at all. This machinery is not meant to figure out whether the user wants to actively use something that (always?) does exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:256,usability,help,help,256,"> Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro? As I wrote, I don't think it would be the way. But still, you get the values specified by the user in `ROOT_FIND_COMPONENTS`. https://cmake.org/cmake/help/latest/command/find_package.html#package-file-interface-variables. For instance we use that in another project of ours, to check if the user is asking for one of the optional components of the project. https://github.com/acts-project/vecmem/blob/main/cmake/vecmem-config.cmake.in#L38-L45. Note that this logic is figuring out if something that the user asked for exists at all. This machinery is not meant to figure out whether the user wants to actively use something that (always?) does exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:268,usability,command,command,268,"> Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro? As I wrote, I don't think it would be the way. But still, you get the values specified by the user in `ROOT_FIND_COMPONENTS`. https://cmake.org/cmake/help/latest/command/find_package.html#package-file-interface-variables. For instance we use that in another project of ours, to check if the user is asking for one of the optional components of the project. https://github.com/acts-project/vecmem/blob/main/cmake/vecmem-config.cmake.in#L38-L45. Note that this logic is figuring out if something that the user asked for exists at all. This machinery is not meant to figure out whether the user wants to actively use something that (always?) does exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:397,usability,user,user,397,"> Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro? As I wrote, I don't think it would be the way. But still, you get the values specified by the user in `ROOT_FIND_COMPONENTS`. https://cmake.org/cmake/help/latest/command/find_package.html#package-file-interface-variables. For instance we use that in another project of ours, to check if the user is asking for one of the optional components of the project. https://github.com/acts-project/vecmem/blob/main/cmake/vecmem-config.cmake.in#L38-L45. Note that this logic is figuring out if something that the user asked for exists at all. This machinery is not meant to figure out whether the user wants to actively use something that (always?) does exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:609,usability,user,user,609,"> Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro? As I wrote, I don't think it would be the way. But still, you get the values specified by the user in `ROOT_FIND_COMPONENTS`. https://cmake.org/cmake/help/latest/command/find_package.html#package-file-interface-variables. For instance we use that in another project of ours, to check if the user is asking for one of the optional components of the project. https://github.com/acts-project/vecmem/blob/main/cmake/vecmem-config.cmake.in#L38-L45. Note that this logic is figuring out if something that the user asked for exists at all. This machinery is not meant to figure out whether the user wants to actively use something that (always?) does exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:693,usability,user,user,693,"> Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro? As I wrote, I don't think it would be the way. But still, you get the values specified by the user in `ROOT_FIND_COMPONENTS`. https://cmake.org/cmake/help/latest/command/find_package.html#package-file-interface-variables. For instance we use that in another project of ours, to check if the user is asking for one of the optional components of the project. https://github.com/acts-project/vecmem/blob/main/cmake/vecmem-config.cmake.in#L38-L45. Note that this logic is figuring out if something that the user asked for exists at all. This machinery is not meant to figure out whether the user wants to actively use something that (always?) does exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:98,security,modif,modifying,98,I propose PR https://github.com/root-project/root/pull/14192. @ferdymercury You can try it - just modifying `ROOTConfig.cmake` by hand.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:259,deployability,build,build,259,"> Reason why it searched - it uses in public interfaces in following libraries:. > . > * `ROOTEve`,. > . > * `RooFitJSONInterface`. > . > * `RooFitMultiProcess`. > . > . > Without external `nlohmann_json` is not possible to link with these libraries. If ROOT build with external `nlohmann_json`, such external `nlohmann_json` must be provided. Note that after https://github.com/root-project/root/pull/14266, this is not true anymore since `ROOTEve` is the only library that still publicly depends on nlohmann-json.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:490,deployability,depend,depends,490,"> Reason why it searched - it uses in public interfaces in following libraries:. > . > * `ROOTEve`,. > . > * `RooFitJSONInterface`. > . > * `RooFitMultiProcess`. > . > . > Without external `nlohmann_json` is not possible to link with these libraries. If ROOT build with external `nlohmann_json`, such external `nlohmann_json` must be provided. Note that after https://github.com/root-project/root/pull/14266, this is not true anymore since `ROOTEve` is the only library that still publicly depends on nlohmann-json.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:38,integrability,pub,public,38,"> Reason why it searched - it uses in public interfaces in following libraries:. > . > * `ROOTEve`,. > . > * `RooFitJSONInterface`. > . > * `RooFitMultiProcess`. > . > . > Without external `nlohmann_json` is not possible to link with these libraries. If ROOT build with external `nlohmann_json`, such external `nlohmann_json` must be provided. Note that after https://github.com/root-project/root/pull/14266, this is not true anymore since `ROOTEve` is the only library that still publicly depends on nlohmann-json.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:45,integrability,interfac,interfaces,45,"> Reason why it searched - it uses in public interfaces in following libraries:. > . > * `ROOTEve`,. > . > * `RooFitJSONInterface`. > . > * `RooFitMultiProcess`. > . > . > Without external `nlohmann_json` is not possible to link with these libraries. If ROOT build with external `nlohmann_json`, such external `nlohmann_json` must be provided. Note that after https://github.com/root-project/root/pull/14266, this is not true anymore since `ROOTEve` is the only library that still publicly depends on nlohmann-json.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:481,integrability,pub,publicly,481,"> Reason why it searched - it uses in public interfaces in following libraries:. > . > * `ROOTEve`,. > . > * `RooFitJSONInterface`. > . > * `RooFitMultiProcess`. > . > . > Without external `nlohmann_json` is not possible to link with these libraries. If ROOT build with external `nlohmann_json`, such external `nlohmann_json` must be provided. Note that after https://github.com/root-project/root/pull/14266, this is not true anymore since `ROOTEve` is the only library that still publicly depends on nlohmann-json.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:490,integrability,depend,depends,490,"> Reason why it searched - it uses in public interfaces in following libraries:. > . > * `ROOTEve`,. > . > * `RooFitJSONInterface`. > . > * `RooFitMultiProcess`. > . > . > Without external `nlohmann_json` is not possible to link with these libraries. If ROOT build with external `nlohmann_json`, such external `nlohmann_json` must be provided. Note that after https://github.com/root-project/root/pull/14266, this is not true anymore since `ROOTEve` is the only library that still publicly depends on nlohmann-json.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:45,interoperability,interfac,interfaces,45,"> Reason why it searched - it uses in public interfaces in following libraries:. > . > * `ROOTEve`,. > . > * `RooFitJSONInterface`. > . > * `RooFitMultiProcess`. > . > . > Without external `nlohmann_json` is not possible to link with these libraries. If ROOT build with external `nlohmann_json`, such external `nlohmann_json` must be provided. Note that after https://github.com/root-project/root/pull/14266, this is not true anymore since `ROOTEve` is the only library that still publicly depends on nlohmann-json.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:45,modifiability,interfac,interfaces,45,"> Reason why it searched - it uses in public interfaces in following libraries:. > . > * `ROOTEve`,. > . > * `RooFitJSONInterface`. > . > * `RooFitMultiProcess`. > . > . > Without external `nlohmann_json` is not possible to link with these libraries. If ROOT build with external `nlohmann_json`, such external `nlohmann_json` must be provided. Note that after https://github.com/root-project/root/pull/14266, this is not true anymore since `ROOTEve` is the only library that still publicly depends on nlohmann-json.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:490,modifiability,depend,depends,490,"> Reason why it searched - it uses in public interfaces in following libraries:. > . > * `ROOTEve`,. > . > * `RooFitJSONInterface`. > . > * `RooFitMultiProcess`. > . > . > Without external `nlohmann_json` is not possible to link with these libraries. If ROOT build with external `nlohmann_json`, such external `nlohmann_json` must be provided. Note that after https://github.com/root-project/root/pull/14266, this is not true anymore since `ROOTEve` is the only library that still publicly depends on nlohmann-json.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:490,safety,depend,depends,490,"> Reason why it searched - it uses in public interfaces in following libraries:. > . > * `ROOTEve`,. > . > * `RooFitJSONInterface`. > . > * `RooFitMultiProcess`. > . > . > Without external `nlohmann_json` is not possible to link with these libraries. If ROOT build with external `nlohmann_json`, such external `nlohmann_json` must be provided. Note that after https://github.com/root-project/root/pull/14266, this is not true anymore since `ROOTEve` is the only library that still publicly depends on nlohmann-json.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:490,testability,depend,depends,490,"> Reason why it searched - it uses in public interfaces in following libraries:. > . > * `ROOTEve`,. > . > * `RooFitJSONInterface`. > . > * `RooFitMultiProcess`. > . > . > Without external `nlohmann_json` is not possible to link with these libraries. If ROOT build with external `nlohmann_json`, such external `nlohmann_json` must be provided. Note that after https://github.com/root-project/root/pull/14266, this is not true anymore since `ROOTEve` is the only library that still publicly depends on nlohmann-json.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/pull/14189:208,energy efficiency,current,current,208,"In general it would help the discussion and review a lot if you could create separate PRs for all the different aspects you handle here:. - handling of rootrc values. - loopback device. - `--web`. - exposing current dir. - reconnect. They are really independent (maybe not code-wise, but that should not be a burden to the reviewers), and having to review them all together adds significant complexity. That's probably for future PRs, we can see what people think about this one. The commits are indeed nice and focused!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:44,safety,review,review,44,"In general it would help the discussion and review a lot if you could create separate PRs for all the different aspects you handle here:. - handling of rootrc values. - loopback device. - `--web`. - exposing current dir. - reconnect. They are really independent (maybe not code-wise, but that should not be a burden to the reviewers), and having to review them all together adds significant complexity. That's probably for future PRs, we can see what people think about this one. The commits are indeed nice and focused!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:323,safety,review,reviewers,323,"In general it would help the discussion and review a lot if you could create separate PRs for all the different aspects you handle here:. - handling of rootrc values. - loopback device. - `--web`. - exposing current dir. - reconnect. They are really independent (maybe not code-wise, but that should not be a burden to the reviewers), and having to review them all together adds significant complexity. That's probably for future PRs, we can see what people think about this one. The commits are indeed nice and focused!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:349,safety,review,review,349,"In general it would help the discussion and review a lot if you could create separate PRs for all the different aspects you handle here:. - handling of rootrc values. - loopback device. - `--web`. - exposing current dir. - reconnect. They are really independent (maybe not code-wise, but that should not be a burden to the reviewers), and having to review them all together adds significant complexity. That's probably for future PRs, we can see what people think about this one. The commits are indeed nice and focused!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:391,safety,compl,complexity,391,"In general it would help the discussion and review a lot if you could create separate PRs for all the different aspects you handle here:. - handling of rootrc values. - loopback device. - `--web`. - exposing current dir. - reconnect. They are really independent (maybe not code-wise, but that should not be a burden to the reviewers), and having to review them all together adds significant complexity. That's probably for future PRs, we can see what people think about this one. The commits are indeed nice and focused!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:199,security,expos,exposing,199,"In general it would help the discussion and review a lot if you could create separate PRs for all the different aspects you handle here:. - handling of rootrc values. - loopback device. - `--web`. - exposing current dir. - reconnect. They are really independent (maybe not code-wise, but that should not be a burden to the reviewers), and having to review them all together adds significant complexity. That's probably for future PRs, we can see what people think about this one. The commits are indeed nice and focused!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:379,security,sign,significant,379,"In general it would help the discussion and review a lot if you could create separate PRs for all the different aspects you handle here:. - handling of rootrc values. - loopback device. - `--web`. - exposing current dir. - reconnect. They are really independent (maybe not code-wise, but that should not be a burden to the reviewers), and having to review them all together adds significant complexity. That's probably for future PRs, we can see what people think about this one. The commits are indeed nice and focused!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:391,security,compl,complexity,391,"In general it would help the discussion and review a lot if you could create separate PRs for all the different aspects you handle here:. - handling of rootrc values. - loopback device. - `--web`. - exposing current dir. - reconnect. They are really independent (maybe not code-wise, but that should not be a burden to the reviewers), and having to review them all together adds significant complexity. That's probably for future PRs, we can see what people think about this one. The commits are indeed nice and focused!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:44,testability,review,review,44,"In general it would help the discussion and review a lot if you could create separate PRs for all the different aspects you handle here:. - handling of rootrc values. - loopback device. - `--web`. - exposing current dir. - reconnect. They are really independent (maybe not code-wise, but that should not be a burden to the reviewers), and having to review them all together adds significant complexity. That's probably for future PRs, we can see what people think about this one. The commits are indeed nice and focused!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:323,testability,review,reviewers,323,"In general it would help the discussion and review a lot if you could create separate PRs for all the different aspects you handle here:. - handling of rootrc values. - loopback device. - `--web`. - exposing current dir. - reconnect. They are really independent (maybe not code-wise, but that should not be a burden to the reviewers), and having to review them all together adds significant complexity. That's probably for future PRs, we can see what people think about this one. The commits are indeed nice and focused!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:349,testability,review,review,349,"In general it would help the discussion and review a lot if you could create separate PRs for all the different aspects you handle here:. - handling of rootrc values. - loopback device. - `--web`. - exposing current dir. - reconnect. They are really independent (maybe not code-wise, but that should not be a burden to the reviewers), and having to review them all together adds significant complexity. That's probably for future PRs, we can see what people think about this one. The commits are indeed nice and focused!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:20,usability,help,help,20,"In general it would help the discussion and review a lot if you could create separate PRs for all the different aspects you handle here:. - handling of rootrc values. - loopback device. - `--web`. - exposing current dir. - reconnect. They are really independent (maybe not code-wise, but that should not be a burden to the reviewers), and having to review them all together adds significant complexity. That's probably for future PRs, we can see what people think about this one. The commits are indeed nice and focused!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:38,integrability,sub,sub-PRs,38,I do not think that splitting PR on 6 sub-PRs help and make it easy. . Especially if you want to have warning message defined in one place. Where?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:110,integrability,messag,message,110,I do not think that splitting PR on 6 sub-PRs help and make it easy. . Especially if you want to have warning message defined in one place. Where?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:110,interoperability,messag,message,110,I do not think that splitting PR on 6 sub-PRs help and make it easy. . Especially if you want to have warning message defined in one place. Where?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:46,usability,help,help,46,I do not think that splitting PR on 6 sub-PRs help and make it easy. . Especially if you want to have warning message defined in one place. Where?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:37,integrability,messag,message,37,"I rebase PR doing:. - adjust warning message, putting there full URL, . - add protection for ""TreeViewer.Name"" rootrc parameter. - provide initializer for TROOT webdisplay flags in header file",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:37,interoperability,messag,message,37,"I rebase PR doing:. - adjust warning message, putting there full URL, . - add protection for ""TreeViewer.Name"" rootrc parameter. - provide initializer for TROOT webdisplay flags in header file",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:118,modifiability,paramet,parameter,118,"I rebase PR doing:. - adjust warning message, putting there full URL, . - add protection for ""TreeViewer.Name"" rootrc parameter. - provide initializer for TROOT webdisplay flags in header file",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:516,deployability,contain,contain,516,"One more thought in order to progress more quickly: perhaps it makes sense to split the PR in two: first part that temporarily turns off things, second part that improves connection handling etc. > Disable --web option of TApplication. Only `--web=off` is allowed. Show warning that option is disabled. Only direct `gROOT->SetWebDisplay()` call is possible. > . > Ignore ""WebGui.Display"" rootrc parameter. It is equivalent of --web argument. Show warning. > . > If rootrc parameters ""Browser.Name"" and ""Canvas.Name"" contain web-based widgets - ignore them, show warning and create normal widgets. Only if `gROOT->SetWebDisplay()` was called before - allow to use web widgets as before. Perhaps the above could be the first PR. > Introduce `RWebWindowsManager::SetLoopbackMode()` to let change binding to loopback device. > . > Do not expose current directory via webgui http server. > . > Do not allow to reconnect to RBrowser. And this could be a second PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:841,energy efficiency,current,current,841,"One more thought in order to progress more quickly: perhaps it makes sense to split the PR in two: first part that temporarily turns off things, second part that improves connection handling etc. > Disable --web option of TApplication. Only `--web=off` is allowed. Show warning that option is disabled. Only direct `gROOT->SetWebDisplay()` call is possible. > . > Ignore ""WebGui.Display"" rootrc parameter. It is equivalent of --web argument. Show warning. > . > If rootrc parameters ""Browser.Name"" and ""Canvas.Name"" contain web-based widgets - ignore them, show warning and create normal widgets. Only if `gROOT->SetWebDisplay()` was called before - allow to use web widgets as before. Perhaps the above could be the first PR. > Introduce `RWebWindowsManager::SetLoopbackMode()` to let change binding to loopback device. > . > Do not expose current directory via webgui http server. > . > Do not allow to reconnect to RBrowser. And this could be a second PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:793,interoperability,bind,binding,793,"One more thought in order to progress more quickly: perhaps it makes sense to split the PR in two: first part that temporarily turns off things, second part that improves connection handling etc. > Disable --web option of TApplication. Only `--web=off` is allowed. Show warning that option is disabled. Only direct `gROOT->SetWebDisplay()` call is possible. > . > Ignore ""WebGui.Display"" rootrc parameter. It is equivalent of --web argument. Show warning. > . > If rootrc parameters ""Browser.Name"" and ""Canvas.Name"" contain web-based widgets - ignore them, show warning and create normal widgets. Only if `gROOT->SetWebDisplay()` was called before - allow to use web widgets as before. Perhaps the above could be the first PR. > Introduce `RWebWindowsManager::SetLoopbackMode()` to let change binding to loopback device. > . > Do not expose current directory via webgui http server. > . > Do not allow to reconnect to RBrowser. And this could be a second PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:395,modifiability,paramet,parameter,395,"One more thought in order to progress more quickly: perhaps it makes sense to split the PR in two: first part that temporarily turns off things, second part that improves connection handling etc. > Disable --web option of TApplication. Only `--web=off` is allowed. Show warning that option is disabled. Only direct `gROOT->SetWebDisplay()` call is possible. > . > Ignore ""WebGui.Display"" rootrc parameter. It is equivalent of --web argument. Show warning. > . > If rootrc parameters ""Browser.Name"" and ""Canvas.Name"" contain web-based widgets - ignore them, show warning and create normal widgets. Only if `gROOT->SetWebDisplay()` was called before - allow to use web widgets as before. Perhaps the above could be the first PR. > Introduce `RWebWindowsManager::SetLoopbackMode()` to let change binding to loopback device. > . > Do not expose current directory via webgui http server. > . > Do not allow to reconnect to RBrowser. And this could be a second PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:472,modifiability,paramet,parameters,472,"One more thought in order to progress more quickly: perhaps it makes sense to split the PR in two: first part that temporarily turns off things, second part that improves connection handling etc. > Disable --web option of TApplication. Only `--web=off` is allowed. Show warning that option is disabled. Only direct `gROOT->SetWebDisplay()` call is possible. > . > Ignore ""WebGui.Display"" rootrc parameter. It is equivalent of --web argument. Show warning. > . > If rootrc parameters ""Browser.Name"" and ""Canvas.Name"" contain web-based widgets - ignore them, show warning and create normal widgets. Only if `gROOT->SetWebDisplay()` was called before - allow to use web widgets as before. Perhaps the above could be the first PR. > Introduce `RWebWindowsManager::SetLoopbackMode()` to let change binding to loopback device. > . > Do not expose current directory via webgui http server. > . > Do not allow to reconnect to RBrowser. And this could be a second PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:793,modifiability,bind,binding,793,"One more thought in order to progress more quickly: perhaps it makes sense to split the PR in two: first part that temporarily turns off things, second part that improves connection handling etc. > Disable --web option of TApplication. Only `--web=off` is allowed. Show warning that option is disabled. Only direct `gROOT->SetWebDisplay()` call is possible. > . > Ignore ""WebGui.Display"" rootrc parameter. It is equivalent of --web argument. Show warning. > . > If rootrc parameters ""Browser.Name"" and ""Canvas.Name"" contain web-based widgets - ignore them, show warning and create normal widgets. Only if `gROOT->SetWebDisplay()` was called before - allow to use web widgets as before. Perhaps the above could be the first PR. > Introduce `RWebWindowsManager::SetLoopbackMode()` to let change binding to loopback device. > . > Do not expose current directory via webgui http server. > . > Do not allow to reconnect to RBrowser. And this could be a second PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:834,security,expos,expose,834,"One more thought in order to progress more quickly: perhaps it makes sense to split the PR in two: first part that temporarily turns off things, second part that improves connection handling etc. > Disable --web option of TApplication. Only `--web=off` is allowed. Show warning that option is disabled. Only direct `gROOT->SetWebDisplay()` call is possible. > . > Ignore ""WebGui.Display"" rootrc parameter. It is equivalent of --web argument. Show warning. > . > If rootrc parameters ""Browser.Name"" and ""Canvas.Name"" contain web-based widgets - ignore them, show warning and create normal widgets. Only if `gROOT->SetWebDisplay()` was called before - allow to use web widgets as before. Perhaps the above could be the first PR. > Introduce `RWebWindowsManager::SetLoopbackMode()` to let change binding to loopback device. > . > Do not expose current directory via webgui http server. > . > Do not allow to reconnect to RBrowser. And this could be a second PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:29,usability,progress,progress,29,"One more thought in order to progress more quickly: perhaps it makes sense to split the PR in two: first part that temporarily turns off things, second part that improves connection handling etc. > Disable --web option of TApplication. Only `--web=off` is allowed. Show warning that option is disabled. Only direct `gROOT->SetWebDisplay()` call is possible. > . > Ignore ""WebGui.Display"" rootrc parameter. It is equivalent of --web argument. Show warning. > . > If rootrc parameters ""Browser.Name"" and ""Canvas.Name"" contain web-based widgets - ignore them, show warning and create normal widgets. Only if `gROOT->SetWebDisplay()` was called before - allow to use web widgets as before. Perhaps the above could be the first PR. > Introduce `RWebWindowsManager::SetLoopbackMode()` to let change binding to loopback device. > . > Do not expose current directory via webgui http server. > . > Do not allow to reconnect to RBrowser. And this could be a second PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:534,usability,widget,widgets,534,"One more thought in order to progress more quickly: perhaps it makes sense to split the PR in two: first part that temporarily turns off things, second part that improves connection handling etc. > Disable --web option of TApplication. Only `--web=off` is allowed. Show warning that option is disabled. Only direct `gROOT->SetWebDisplay()` call is possible. > . > Ignore ""WebGui.Display"" rootrc parameter. It is equivalent of --web argument. Show warning. > . > If rootrc parameters ""Browser.Name"" and ""Canvas.Name"" contain web-based widgets - ignore them, show warning and create normal widgets. Only if `gROOT->SetWebDisplay()` was called before - allow to use web widgets as before. Perhaps the above could be the first PR. > Introduce `RWebWindowsManager::SetLoopbackMode()` to let change binding to loopback device. > . > Do not expose current directory via webgui http server. > . > Do not allow to reconnect to RBrowser. And this could be a second PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:588,usability,widget,widgets,588,"One more thought in order to progress more quickly: perhaps it makes sense to split the PR in two: first part that temporarily turns off things, second part that improves connection handling etc. > Disable --web option of TApplication. Only `--web=off` is allowed. Show warning that option is disabled. Only direct `gROOT->SetWebDisplay()` call is possible. > . > Ignore ""WebGui.Display"" rootrc parameter. It is equivalent of --web argument. Show warning. > . > If rootrc parameters ""Browser.Name"" and ""Canvas.Name"" contain web-based widgets - ignore them, show warning and create normal widgets. Only if `gROOT->SetWebDisplay()` was called before - allow to use web widgets as before. Perhaps the above could be the first PR. > Introduce `RWebWindowsManager::SetLoopbackMode()` to let change binding to loopback device. > . > Do not expose current directory via webgui http server. > . > Do not allow to reconnect to RBrowser. And this could be a second PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:667,usability,widget,widgets,667,"One more thought in order to progress more quickly: perhaps it makes sense to split the PR in two: first part that temporarily turns off things, second part that improves connection handling etc. > Disable --web option of TApplication. Only `--web=off` is allowed. Show warning that option is disabled. Only direct `gROOT->SetWebDisplay()` call is possible. > . > Ignore ""WebGui.Display"" rootrc parameter. It is equivalent of --web argument. Show warning. > . > If rootrc parameters ""Browser.Name"" and ""Canvas.Name"" contain web-based widgets - ignore them, show warning and create normal widgets. Only if `gROOT->SetWebDisplay()` was called before - allow to use web widgets as before. Perhaps the above could be the first PR. > Introduce `RWebWindowsManager::SetLoopbackMode()` to let change binding to loopback device. > . > Do not expose current directory via webgui http server. > . > Do not allow to reconnect to RBrowser. And this could be a second PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:426,deployability,API,API,426,"> In general, I am still a little bit fuzzy about the interplay of the classes wrt. . There are several layers between `civetweb` and `RBrowser`. But in this PR none of communication layers are touched or changed. Main idea of PR - change all defaults to none-webgui and do not let enable webgui with rootrc or `--web` flags. Plus closing two potential caveats: exposing currentdir and reconnection to RBrowser. And allow via API change loopback binding to false. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:371,energy efficiency,current,currentdir,371,"> In general, I am still a little bit fuzzy about the interplay of the classes wrt. . There are several layers between `civetweb` and `RBrowser`. But in this PR none of communication layers are touched or changed. Main idea of PR - change all defaults to none-webgui and do not let enable webgui with rootrc or `--web` flags. Plus closing two potential caveats: exposing currentdir and reconnection to RBrowser. And allow via API change loopback binding to false. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:426,integrability,API,API,426,"> In general, I am still a little bit fuzzy about the interplay of the classes wrt. . There are several layers between `civetweb` and `RBrowser`. But in this PR none of communication layers are touched or changed. Main idea of PR - change all defaults to none-webgui and do not let enable webgui with rootrc or `--web` flags. Plus closing two potential caveats: exposing currentdir and reconnection to RBrowser. And allow via API change loopback binding to false. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:426,interoperability,API,API,426,"> In general, I am still a little bit fuzzy about the interplay of the classes wrt. . There are several layers between `civetweb` and `RBrowser`. But in this PR none of communication layers are touched or changed. Main idea of PR - change all defaults to none-webgui and do not let enable webgui with rootrc or `--web` flags. Plus closing two potential caveats: exposing currentdir and reconnection to RBrowser. And allow via API change loopback binding to false. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:446,interoperability,bind,binding,446,"> In general, I am still a little bit fuzzy about the interplay of the classes wrt. . There are several layers between `civetweb` and `RBrowser`. But in this PR none of communication layers are touched or changed. Main idea of PR - change all defaults to none-webgui and do not let enable webgui with rootrc or `--web` flags. Plus closing two potential caveats: exposing currentdir and reconnection to RBrowser. And allow via API change loopback binding to false. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:104,modifiability,layer,layers,104,"> In general, I am still a little bit fuzzy about the interplay of the classes wrt. . There are several layers between `civetweb` and `RBrowser`. But in this PR none of communication layers are touched or changed. Main idea of PR - change all defaults to none-webgui and do not let enable webgui with rootrc or `--web` flags. Plus closing two potential caveats: exposing currentdir and reconnection to RBrowser. And allow via API change loopback binding to false. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:183,modifiability,layer,layers,183,"> In general, I am still a little bit fuzzy about the interplay of the classes wrt. . There are several layers between `civetweb` and `RBrowser`. But in this PR none of communication layers are touched or changed. Main idea of PR - change all defaults to none-webgui and do not let enable webgui with rootrc or `--web` flags. Plus closing two potential caveats: exposing currentdir and reconnection to RBrowser. And allow via API change loopback binding to false. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:446,modifiability,bind,binding,446,"> In general, I am still a little bit fuzzy about the interplay of the classes wrt. . There are several layers between `civetweb` and `RBrowser`. But in this PR none of communication layers are touched or changed. Main idea of PR - change all defaults to none-webgui and do not let enable webgui with rootrc or `--web` flags. Plus closing two potential caveats: exposing currentdir and reconnection to RBrowser. And allow via API change loopback binding to false. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:362,security,expos,exposing,362,"> In general, I am still a little bit fuzzy about the interplay of the classes wrt. . There are several layers between `civetweb` and `RBrowser`. But in this PR none of communication layers are touched or changed. Main idea of PR - change all defaults to none-webgui and do not let enable webgui with rootrc or `--web` flags. Plus closing two potential caveats: exposing currentdir and reconnection to RBrowser. And allow via API change loopback binding to false. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:38,testability,fuzzy,fuzzy,38,"> In general, I am still a little bit fuzzy about the interplay of the classes wrt. . There are several layers between `civetweb` and `RBrowser`. But in this PR none of communication layers are touched or changed. Main idea of PR - change all defaults to none-webgui and do not let enable webgui with rootrc or `--web` flags. Plus closing two potential caveats: exposing currentdir and reconnection to RBrowser. And allow via API change loopback binding to false. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:375,deployability,API,API,375,"Sergey - I think both Jonas and I are trying to communicate to you that more targeted PRs (in the future) will help, a lot. You said:. > Main idea of PR - change all defaults to none-webgui and do not let enable webgui with rootrc or --web flags. That's one. > Plus closing two potential caveats: exposing currentdir and reconnection to RBrowser. That's two. > And allow via API change loopback binding to false. That's three! That's a perfect list of three PRs. Yes they change the same files - but then please do one after the other to reduce the complexity of review and discussion. Next time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:306,energy efficiency,current,currentdir,306,"Sergey - I think both Jonas and I are trying to communicate to you that more targeted PRs (in the future) will help, a lot. You said:. > Main idea of PR - change all defaults to none-webgui and do not let enable webgui with rootrc or --web flags. That's one. > Plus closing two potential caveats: exposing currentdir and reconnection to RBrowser. That's two. > And allow via API change loopback binding to false. That's three! That's a perfect list of three PRs. Yes they change the same files - but then please do one after the other to reduce the complexity of review and discussion. Next time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:538,energy efficiency,reduc,reduce,538,"Sergey - I think both Jonas and I are trying to communicate to you that more targeted PRs (in the future) will help, a lot. You said:. > Main idea of PR - change all defaults to none-webgui and do not let enable webgui with rootrc or --web flags. That's one. > Plus closing two potential caveats: exposing currentdir and reconnection to RBrowser. That's two. > And allow via API change loopback binding to false. That's three! That's a perfect list of three PRs. Yes they change the same files - but then please do one after the other to reduce the complexity of review and discussion. Next time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:375,integrability,API,API,375,"Sergey - I think both Jonas and I are trying to communicate to you that more targeted PRs (in the future) will help, a lot. You said:. > Main idea of PR - change all defaults to none-webgui and do not let enable webgui with rootrc or --web flags. That's one. > Plus closing two potential caveats: exposing currentdir and reconnection to RBrowser. That's two. > And allow via API change loopback binding to false. That's three! That's a perfect list of three PRs. Yes they change the same files - but then please do one after the other to reduce the complexity of review and discussion. Next time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:375,interoperability,API,API,375,"Sergey - I think both Jonas and I are trying to communicate to you that more targeted PRs (in the future) will help, a lot. You said:. > Main idea of PR - change all defaults to none-webgui and do not let enable webgui with rootrc or --web flags. That's one. > Plus closing two potential caveats: exposing currentdir and reconnection to RBrowser. That's two. > And allow via API change loopback binding to false. That's three! That's a perfect list of three PRs. Yes they change the same files - but then please do one after the other to reduce the complexity of review and discussion. Next time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:395,interoperability,bind,binding,395,"Sergey - I think both Jonas and I are trying to communicate to you that more targeted PRs (in the future) will help, a lot. You said:. > Main idea of PR - change all defaults to none-webgui and do not let enable webgui with rootrc or --web flags. That's one. > Plus closing two potential caveats: exposing currentdir and reconnection to RBrowser. That's two. > And allow via API change loopback binding to false. That's three! That's a perfect list of three PRs. Yes they change the same files - but then please do one after the other to reduce the complexity of review and discussion. Next time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:395,modifiability,bind,binding,395,"Sergey - I think both Jonas and I are trying to communicate to you that more targeted PRs (in the future) will help, a lot. You said:. > Main idea of PR - change all defaults to none-webgui and do not let enable webgui with rootrc or --web flags. That's one. > Plus closing two potential caveats: exposing currentdir and reconnection to RBrowser. That's two. > And allow via API change loopback binding to false. That's three! That's a perfect list of three PRs. Yes they change the same files - but then please do one after the other to reduce the complexity of review and discussion. Next time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:591,performance,time,time,591,"Sergey - I think both Jonas and I are trying to communicate to you that more targeted PRs (in the future) will help, a lot. You said:. > Main idea of PR - change all defaults to none-webgui and do not let enable webgui with rootrc or --web flags. That's one. > Plus closing two potential caveats: exposing currentdir and reconnection to RBrowser. That's two. > And allow via API change loopback binding to false. That's three! That's a perfect list of three PRs. Yes they change the same files - but then please do one after the other to reduce the complexity of review and discussion. Next time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:549,safety,compl,complexity,549,"Sergey - I think both Jonas and I are trying to communicate to you that more targeted PRs (in the future) will help, a lot. You said:. > Main idea of PR - change all defaults to none-webgui and do not let enable webgui with rootrc or --web flags. That's one. > Plus closing two potential caveats: exposing currentdir and reconnection to RBrowser. That's two. > And allow via API change loopback binding to false. That's three! That's a perfect list of three PRs. Yes they change the same files - but then please do one after the other to reduce the complexity of review and discussion. Next time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:563,safety,review,review,563,"Sergey - I think both Jonas and I are trying to communicate to you that more targeted PRs (in the future) will help, a lot. You said:. > Main idea of PR - change all defaults to none-webgui and do not let enable webgui with rootrc or --web flags. That's one. > Plus closing two potential caveats: exposing currentdir and reconnection to RBrowser. That's two. > And allow via API change loopback binding to false. That's three! That's a perfect list of three PRs. Yes they change the same files - but then please do one after the other to reduce the complexity of review and discussion. Next time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:297,security,expos,exposing,297,"Sergey - I think both Jonas and I are trying to communicate to you that more targeted PRs (in the future) will help, a lot. You said:. > Main idea of PR - change all defaults to none-webgui and do not let enable webgui with rootrc or --web flags. That's one. > Plus closing two potential caveats: exposing currentdir and reconnection to RBrowser. That's two. > And allow via API change loopback binding to false. That's three! That's a perfect list of three PRs. Yes they change the same files - but then please do one after the other to reduce the complexity of review and discussion. Next time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:549,security,compl,complexity,549,"Sergey - I think both Jonas and I are trying to communicate to you that more targeted PRs (in the future) will help, a lot. You said:. > Main idea of PR - change all defaults to none-webgui and do not let enable webgui with rootrc or --web flags. That's one. > Plus closing two potential caveats: exposing currentdir and reconnection to RBrowser. That's two. > And allow via API change loopback binding to false. That's three! That's a perfect list of three PRs. Yes they change the same files - but then please do one after the other to reduce the complexity of review and discussion. Next time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:563,testability,review,review,563,"Sergey - I think both Jonas and I are trying to communicate to you that more targeted PRs (in the future) will help, a lot. You said:. > Main idea of PR - change all defaults to none-webgui and do not let enable webgui with rootrc or --web flags. That's one. > Plus closing two potential caveats: exposing currentdir and reconnection to RBrowser. That's two. > And allow via API change loopback binding to false. That's three! That's a perfect list of three PRs. Yes they change the same files - but then please do one after the other to reduce the complexity of review and discussion. Next time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:111,usability,help,help,111,"Sergey - I think both Jonas and I are trying to communicate to you that more targeted PRs (in the future) will help, a lot. You said:. > Main idea of PR - change all defaults to none-webgui and do not let enable webgui with rootrc or --web flags. That's one. > Plus closing two potential caveats: exposing currentdir and reconnection to RBrowser. That's two. > And allow via API change loopback binding to false. That's three! That's a perfect list of three PRs. Yes they change the same files - but then please do one after the other to reduce the complexity of review and discussion. Next time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14190:47,interoperability,specif,specification,47,"> could you also add a little paragraph to the specification.md explaining the relationship between RBlob TKeys and pages / metadata objects. This would be a new paragraph, right? Would `specification.md` even be the right place for this since it's about the `TFile` embedding?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14190
https://github.com/root-project/root/pull/14190:187,interoperability,specif,specification,187,"> could you also add a little paragraph to the specification.md explaining the relationship between RBlob TKeys and pages / metadata objects. This would be a new paragraph, right? Would `specification.md` even be the right place for this since it's about the `TFile` embedding?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14190
https://github.com/root-project/root/pull/14190:49,interoperability,specif,specification,49,"> > could you also add a little paragraph to the specification.md explaining the relationship between RBlob TKeys and pages / metadata objects. > . > This would be a new paragraph, right? Would `specification.md` even be the right place for this since it's about the `TFile` embedding? Okay, I found the part of `specification.md` that talks about the embedding (in particular the locators and anchors), and added a paragraph about the RBlob keys and saying that there is no semantic mapping established by the RNTuple format (aka ""just use the offsets""). > The new methods for reserving blobs and writing into reserved blobs should probably be unit tested in the RMiniFile unit tests. Now also done. In the process found a mistake in the `RKeyBlob` embedding into proper `TFile`s where the keylen would be wrong...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14190
https://github.com/root-project/root/pull/14190:195,interoperability,specif,specification,195,"> > could you also add a little paragraph to the specification.md explaining the relationship between RBlob TKeys and pages / metadata objects. > . > This would be a new paragraph, right? Would `specification.md` even be the right place for this since it's about the `TFile` embedding? Okay, I found the part of `specification.md` that talks about the embedding (in particular the locators and anchors), and added a paragraph about the RBlob keys and saying that there is no semantic mapping established by the RNTuple format (aka ""just use the offsets""). > The new methods for reserving blobs and writing into reserved blobs should probably be unit tested in the RMiniFile unit tests. Now also done. In the process found a mistake in the `RKeyBlob` embedding into proper `TFile`s where the keylen would be wrong...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14190
https://github.com/root-project/root/pull/14190:313,interoperability,specif,specification,313,"> > could you also add a little paragraph to the specification.md explaining the relationship between RBlob TKeys and pages / metadata objects. > . > This would be a new paragraph, right? Would `specification.md` even be the right place for this since it's about the `TFile` embedding? Okay, I found the part of `specification.md` that talks about the embedding (in particular the locators and anchors), and added a paragraph about the RBlob keys and saying that there is no semantic mapping established by the RNTuple format (aka ""just use the offsets""). > The new methods for reserving blobs and writing into reserved blobs should probably be unit tested in the RMiniFile unit tests. Now also done. In the process found a mistake in the `RKeyBlob` embedding into proper `TFile`s where the keylen would be wrong...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14190
https://github.com/root-project/root/pull/14190:475,interoperability,semant,semantic,475,"> > could you also add a little paragraph to the specification.md explaining the relationship between RBlob TKeys and pages / metadata objects. > . > This would be a new paragraph, right? Would `specification.md` even be the right place for this since it's about the `TFile` embedding? Okay, I found the part of `specification.md` that talks about the embedding (in particular the locators and anchors), and added a paragraph about the RBlob keys and saying that there is no semantic mapping established by the RNTuple format (aka ""just use the offsets""). > The new methods for reserving blobs and writing into reserved blobs should probably be unit tested in the RMiniFile unit tests. Now also done. In the process found a mistake in the `RKeyBlob` embedding into proper `TFile`s where the keylen would be wrong...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14190
https://github.com/root-project/root/pull/14190:519,interoperability,format,format,519,"> > could you also add a little paragraph to the specification.md explaining the relationship between RBlob TKeys and pages / metadata objects. > . > This would be a new paragraph, right? Would `specification.md` even be the right place for this since it's about the `TFile` embedding? Okay, I found the part of `specification.md` that talks about the embedding (in particular the locators and anchors), and added a paragraph about the RBlob keys and saying that there is no semantic mapping established by the RNTuple format (aka ""just use the offsets""). > The new methods for reserving blobs and writing into reserved blobs should probably be unit tested in the RMiniFile unit tests. Now also done. In the process found a mistake in the `RKeyBlob` embedding into proper `TFile`s where the keylen would be wrong...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14190
https://github.com/root-project/root/pull/14190:650,safety,test,tested,650,"> > could you also add a little paragraph to the specification.md explaining the relationship between RBlob TKeys and pages / metadata objects. > . > This would be a new paragraph, right? Would `specification.md` even be the right place for this since it's about the `TFile` embedding? Okay, I found the part of `specification.md` that talks about the embedding (in particular the locators and anchors), and added a paragraph about the RBlob keys and saying that there is no semantic mapping established by the RNTuple format (aka ""just use the offsets""). > The new methods for reserving blobs and writing into reserved blobs should probably be unit tested in the RMiniFile unit tests. Now also done. In the process found a mistake in the `RKeyBlob` embedding into proper `TFile`s where the keylen would be wrong...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14190
https://github.com/root-project/root/pull/14190:679,safety,test,tests,679,"> > could you also add a little paragraph to the specification.md explaining the relationship between RBlob TKeys and pages / metadata objects. > . > This would be a new paragraph, right? Would `specification.md` even be the right place for this since it's about the `TFile` embedding? Okay, I found the part of `specification.md` that talks about the embedding (in particular the locators and anchors), and added a paragraph about the RBlob keys and saying that there is no semantic mapping established by the RNTuple format (aka ""just use the offsets""). > The new methods for reserving blobs and writing into reserved blobs should probably be unit tested in the RMiniFile unit tests. Now also done. In the process found a mistake in the `RKeyBlob` embedding into proper `TFile`s where the keylen would be wrong...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14190
https://github.com/root-project/root/pull/14190:645,testability,unit,unit,645,"> > could you also add a little paragraph to the specification.md explaining the relationship between RBlob TKeys and pages / metadata objects. > . > This would be a new paragraph, right? Would `specification.md` even be the right place for this since it's about the `TFile` embedding? Okay, I found the part of `specification.md` that talks about the embedding (in particular the locators and anchors), and added a paragraph about the RBlob keys and saying that there is no semantic mapping established by the RNTuple format (aka ""just use the offsets""). > The new methods for reserving blobs and writing into reserved blobs should probably be unit tested in the RMiniFile unit tests. Now also done. In the process found a mistake in the `RKeyBlob` embedding into proper `TFile`s where the keylen would be wrong...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14190
https://github.com/root-project/root/pull/14190:650,testability,test,tested,650,"> > could you also add a little paragraph to the specification.md explaining the relationship between RBlob TKeys and pages / metadata objects. > . > This would be a new paragraph, right? Would `specification.md` even be the right place for this since it's about the `TFile` embedding? Okay, I found the part of `specification.md` that talks about the embedding (in particular the locators and anchors), and added a paragraph about the RBlob keys and saying that there is no semantic mapping established by the RNTuple format (aka ""just use the offsets""). > The new methods for reserving blobs and writing into reserved blobs should probably be unit tested in the RMiniFile unit tests. Now also done. In the process found a mistake in the `RKeyBlob` embedding into proper `TFile`s where the keylen would be wrong...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14190
https://github.com/root-project/root/pull/14190:674,testability,unit,unit,674,"> > could you also add a little paragraph to the specification.md explaining the relationship between RBlob TKeys and pages / metadata objects. > . > This would be a new paragraph, right? Would `specification.md` even be the right place for this since it's about the `TFile` embedding? Okay, I found the part of `specification.md` that talks about the embedding (in particular the locators and anchors), and added a paragraph about the RBlob keys and saying that there is no semantic mapping established by the RNTuple format (aka ""just use the offsets""). > The new methods for reserving blobs and writing into reserved blobs should probably be unit tested in the RMiniFile unit tests. Now also done. In the process found a mistake in the `RKeyBlob` embedding into proper `TFile`s where the keylen would be wrong...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14190
https://github.com/root-project/root/pull/14190:679,testability,test,tests,679,"> > could you also add a little paragraph to the specification.md explaining the relationship between RBlob TKeys and pages / metadata objects. > . > This would be a new paragraph, right? Would `specification.md` even be the right place for this since it's about the `TFile` embedding? Okay, I found the part of `specification.md` that talks about the embedding (in particular the locators and anchors), and added a paragraph about the RBlob keys and saying that there is no semantic mapping established by the RNTuple format (aka ""just use the offsets""). > The new methods for reserving blobs and writing into reserved blobs should probably be unit tested in the RMiniFile unit tests. Now also done. In the process found a mistake in the `RKeyBlob` embedding into proper `TFile`s where the keylen would be wrong...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14190
https://github.com/root-project/root/pull/14190:174,integrability,coupl,couple,174,"I removed the commit changing the signedness of `fObjLen`: After resolving the conflicts, it leads to additional compilation warnings and while investigating, I found that a couple of other fields have incorrect types as well. I plan to make a more thorough check for a followup PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14190
https://github.com/root-project/root/pull/14190:79,interoperability,conflict,conflicts,79,"I removed the commit changing the signedness of `fObjLen`: After resolving the conflicts, it leads to additional compilation warnings and while investigating, I found that a couple of other fields have incorrect types as well. I plan to make a more thorough check for a followup PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14190
https://github.com/root-project/root/pull/14190:174,modifiability,coupl,couple,174,"I removed the commit changing the signedness of `fObjLen`: After resolving the conflicts, it leads to additional compilation warnings and while investigating, I found that a couple of other fields have incorrect types as well. I plan to make a more thorough check for a followup PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14190
https://github.com/root-project/root/pull/14190:34,security,sign,signedness,34,"I removed the commit changing the signedness of `fObjLen`: After resolving the conflicts, it leads to additional compilation warnings and while investigating, I found that a couple of other fields have incorrect types as well. I plan to make a more thorough check for a followup PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14190
https://github.com/root-project/root/pull/14190:174,testability,coupl,couple,174,"I removed the commit changing the signedness of `fObjLen`: After resolving the conflicts, it leads to additional compilation warnings and while investigating, I found that a couple of other fields have incorrect types as well. I plan to make a more thorough check for a followup PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14190
https://github.com/root-project/root/pull/14190:229,testability,plan,plan,229,"I removed the commit changing the signedness of `fObjLen`: After resolving the conflicts, it leads to additional compilation warnings and while investigating, I found that a couple of other fields have incorrect types as well. I plan to make a more thorough check for a followup PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14190
https://github.com/root-project/root/pull/14192:276,usability,user,users,276,"> But for me this is not a step in the right direction. I was not a big fan of adding such search to `ROOTConfig.cmake` - because it has different side effects. Especially when external, but not system-wide `nlohman_json` is used for ROOT compilation. It is really tricky for users to get it working - for little use. . Therefore I want give it a try,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14192
https://github.com/root-project/root/pull/14193:35,deployability,updat,update,35,"This is ready for review, the last update keeps a constant resource consumption and doesn't inflate the buffer usage of the non-IMT case anymore (IMT of course uses more memory because it needs buffers for the uncompressed and compressed / sealed pages). I'm still not entirely happy because I noticed that `SealPage` allocates a temporary buffer if the element is not mappable, but that's not for this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14193
https://github.com/root-project/root/pull/14193:59,deployability,resourc,resource,59,"This is ready for review, the last update keeps a constant resource consumption and doesn't inflate the buffer usage of the non-IMT case anymore (IMT of course uses more memory because it needs buffers for the uncompressed and compressed / sealed pages). I'm still not entirely happy because I noticed that `SealPage` allocates a temporary buffer if the element is not mappable, but that's not for this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14193
https://github.com/root-project/root/pull/14193:59,energy efficiency,resourc,resource,59,"This is ready for review, the last update keeps a constant resource consumption and doesn't inflate the buffer usage of the non-IMT case anymore (IMT of course uses more memory because it needs buffers for the uncompressed and compressed / sealed pages). I'm still not entirely happy because I noticed that `SealPage` allocates a temporary buffer if the element is not mappable, but that's not for this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14193
https://github.com/root-project/root/pull/14193:318,energy efficiency,alloc,allocates,318,"This is ready for review, the last update keeps a constant resource consumption and doesn't inflate the buffer usage of the non-IMT case anymore (IMT of course uses more memory because it needs buffers for the uncompressed and compressed / sealed pages). I'm still not entirely happy because I noticed that `SealPage` allocates a temporary buffer if the element is not mappable, but that's not for this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14193
https://github.com/root-project/root/pull/14193:104,integrability,buffer,buffer,104,"This is ready for review, the last update keeps a constant resource consumption and doesn't inflate the buffer usage of the non-IMT case anymore (IMT of course uses more memory because it needs buffers for the uncompressed and compressed / sealed pages). I'm still not entirely happy because I noticed that `SealPage` allocates a temporary buffer if the element is not mappable, but that's not for this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14193
https://github.com/root-project/root/pull/14193:194,integrability,buffer,buffers,194,"This is ready for review, the last update keeps a constant resource consumption and doesn't inflate the buffer usage of the non-IMT case anymore (IMT of course uses more memory because it needs buffers for the uncompressed and compressed / sealed pages). I'm still not entirely happy because I noticed that `SealPage` allocates a temporary buffer if the element is not mappable, but that's not for this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14193
https://github.com/root-project/root/pull/14193:340,integrability,buffer,buffer,340,"This is ready for review, the last update keeps a constant resource consumption and doesn't inflate the buffer usage of the non-IMT case anymore (IMT of course uses more memory because it needs buffers for the uncompressed and compressed / sealed pages). I'm still not entirely happy because I noticed that `SealPage` allocates a temporary buffer if the element is not mappable, but that's not for this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14193
https://github.com/root-project/root/pull/14193:59,performance,resourc,resource,59,"This is ready for review, the last update keeps a constant resource consumption and doesn't inflate the buffer usage of the non-IMT case anymore (IMT of course uses more memory because it needs buffers for the uncompressed and compressed / sealed pages). I'm still not entirely happy because I noticed that `SealPage` allocates a temporary buffer if the element is not mappable, but that's not for this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14193
https://github.com/root-project/root/pull/14193:170,performance,memor,memory,170,"This is ready for review, the last update keeps a constant resource consumption and doesn't inflate the buffer usage of the non-IMT case anymore (IMT of course uses more memory because it needs buffers for the uncompressed and compressed / sealed pages). I'm still not entirely happy because I noticed that `SealPage` allocates a temporary buffer if the element is not mappable, but that's not for this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14193
https://github.com/root-project/root/pull/14193:84,reliability,doe,doesn,84,"This is ready for review, the last update keeps a constant resource consumption and doesn't inflate the buffer usage of the non-IMT case anymore (IMT of course uses more memory because it needs buffers for the uncompressed and compressed / sealed pages). I'm still not entirely happy because I noticed that `SealPage` allocates a temporary buffer if the element is not mappable, but that's not for this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14193
https://github.com/root-project/root/pull/14193:18,safety,review,review,18,"This is ready for review, the last update keeps a constant resource consumption and doesn't inflate the buffer usage of the non-IMT case anymore (IMT of course uses more memory because it needs buffers for the uncompressed and compressed / sealed pages). I'm still not entirely happy because I noticed that `SealPage` allocates a temporary buffer if the element is not mappable, but that's not for this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14193
https://github.com/root-project/root/pull/14193:35,safety,updat,update,35,"This is ready for review, the last update keeps a constant resource consumption and doesn't inflate the buffer usage of the non-IMT case anymore (IMT of course uses more memory because it needs buffers for the uncompressed and compressed / sealed pages). I'm still not entirely happy because I noticed that `SealPage` allocates a temporary buffer if the element is not mappable, but that's not for this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14193
https://github.com/root-project/root/pull/14193:59,safety,resourc,resource,59,"This is ready for review, the last update keeps a constant resource consumption and doesn't inflate the buffer usage of the non-IMT case anymore (IMT of course uses more memory because it needs buffers for the uncompressed and compressed / sealed pages). I'm still not entirely happy because I noticed that `SealPage` allocates a temporary buffer if the element is not mappable, but that's not for this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14193
https://github.com/root-project/root/pull/14193:35,security,updat,update,35,"This is ready for review, the last update keeps a constant resource consumption and doesn't inflate the buffer usage of the non-IMT case anymore (IMT of course uses more memory because it needs buffers for the uncompressed and compressed / sealed pages). I'm still not entirely happy because I noticed that `SealPage` allocates a temporary buffer if the element is not mappable, but that's not for this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14193
https://github.com/root-project/root/pull/14193:18,testability,review,review,18,"This is ready for review, the last update keeps a constant resource consumption and doesn't inflate the buffer usage of the non-IMT case anymore (IMT of course uses more memory because it needs buffers for the uncompressed and compressed / sealed pages). I'm still not entirely happy because I noticed that `SealPage` allocates a temporary buffer if the element is not mappable, but that's not for this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14193
https://github.com/root-project/root/pull/14193:59,testability,resourc,resource,59,"This is ready for review, the last update keeps a constant resource consumption and doesn't inflate the buffer usage of the non-IMT case anymore (IMT of course uses more memory because it needs buffers for the uncompressed and compressed / sealed pages). I'm still not entirely happy because I noticed that `SealPage` allocates a temporary buffer if the element is not mappable, but that's not for this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14193
https://github.com/root-project/root/pull/14193:170,usability,memor,memory,170,"This is ready for review, the last update keeps a constant resource consumption and doesn't inflate the buffer usage of the non-IMT case anymore (IMT of course uses more memory because it needs buffers for the uncompressed and compressed / sealed pages). I'm still not entirely happy because I noticed that `SealPage` allocates a temporary buffer if the element is not mappable, but that's not for this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14193
https://github.com/root-project/root/pull/14194:90,usability,workflow,workflows,90,"@Axel-Naumann there is no `civetweb` in the CI (neither in `rootspi` nor in `root/.github/workflows`). Should it be added? And should it be `builtin_civetweb=ON` everywhere by default? EDIT: Ooops! Sorry, it's a new option...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:66,deployability,fail,fail,66,"@linev since it's a new option and `ON` by default, it should not fail in Jenkins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:66,reliability,fail,fail,66,"@linev since it's a new option and `ON` by default, it should not fail in Jenkins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:18,availability,error,error,18,"@bellenot You see error messages in the begin? It is exactly this. As I understand, @Axel-Naumann create list of supported options and all others disabled by default. One need to add `builtin_civetweb` into such list.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:24,integrability,messag,messages,24,"@bellenot You see error messages in the begin? It is exactly this. As I understand, @Axel-Naumann create list of supported options and all others disabled by default. One need to add `builtin_civetweb` into such list.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:24,interoperability,messag,messages,24,"@bellenot You see error messages in the begin? It is exactly this. As I understand, @Axel-Naumann create list of supported options and all others disabled by default. One need to add `builtin_civetweb` into such list.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:18,performance,error,error,18,"@bellenot You see error messages in the begin? It is exactly this. As I understand, @Axel-Naumann create list of supported options and all others disabled by default. One need to add `builtin_civetweb` into such list.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:18,safety,error,error,18,"@bellenot You see error messages in the begin? It is exactly this. As I understand, @Axel-Naumann create list of supported options and all others disabled by default. One need to add `builtin_civetweb` into such list.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:72,testability,understand,understand,72,"@bellenot You see error messages in the begin? It is exactly this. As I understand, @Axel-Naumann create list of supported options and all others disabled by default. One need to add `builtin_civetweb` into such list.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:18,usability,error,error,18,"@bellenot You see error messages in the begin? It is exactly this. As I understand, @Axel-Naumann create list of supported options and all others disabled by default. One need to add `builtin_civetweb` into such list.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:113,usability,support,supported,113,"@bellenot You see error messages in the begin? It is exactly this. As I understand, @Axel-Naumann create list of supported options and all others disabled by default. One need to add `builtin_civetweb` into such list.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:24,deployability,instal,install,24,"What about this: I will install civetweb on distros where it exists, and we use those. For platforms where it doesn't exist we use the builtin. :+1: :-1: ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:91,interoperability,platform,platforms,91,"What about this: I will install civetweb on distros where it exists, and we use those. For platforms where it doesn't exist we use the builtin. :+1: :-1: ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:110,reliability,doe,doesn,110,"What about this: I will install civetweb on distros where it exists, and we use those. For platforms where it doesn't exist we use the builtin. :+1: :-1: ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:151,modifiability,maintain,maintainer,151,"@Axel-Naumann . Most probably civetweb from distros compiled without websocket support and therefore unusable for us. . I get in contact with OpenSUSE maintainer of civetweb, but it will take time before something will come out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:192,performance,time,time,192,"@Axel-Naumann . Most probably civetweb from distros compiled without websocket support and therefore unusable for us. . I get in contact with OpenSUSE maintainer of civetweb, but it will take time before something will come out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:151,safety,maintain,maintainer,151,"@Axel-Naumann . Most probably civetweb from distros compiled without websocket support and therefore unusable for us. . I get in contact with OpenSUSE maintainer of civetweb, but it will take time before something will come out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:79,usability,support,support,79,"@Axel-Naumann . Most probably civetweb from distros compiled without websocket support and therefore unusable for us. . I get in contact with OpenSUSE maintainer of civetweb, but it will take time before something will come out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:21,deployability,build,build,21,This is how opensuse build civetweb:. https://build.opensuse.org/package/show/server:http/civetweb. It uses wrong build flags and enables mostly nothing. I hope to change it - but it also requires some changes in `civetweb` cmake. See:. https://github.com/civetweb/civetweb/pull/1225. https://github.com/civetweb/civetweb/issues/1226.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:46,deployability,build,build,46,This is how opensuse build civetweb:. https://build.opensuse.org/package/show/server:http/civetweb. It uses wrong build flags and enables mostly nothing. I hope to change it - but it also requires some changes in `civetweb` cmake. See:. https://github.com/civetweb/civetweb/pull/1225. https://github.com/civetweb/civetweb/issues/1226.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:114,deployability,build,build,114,This is how opensuse build civetweb:. https://build.opensuse.org/package/show/server:http/civetweb. It uses wrong build flags and enables mostly nothing. I hope to change it - but it also requires some changes in `civetweb` cmake. See:. https://github.com/civetweb/civetweb/pull/1225. https://github.com/civetweb/civetweb/issues/1226.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:65,modifiability,pac,package,65,This is how opensuse build civetweb:. https://build.opensuse.org/package/show/server:http/civetweb. It uses wrong build flags and enables mostly nothing. I hope to change it - but it also requires some changes in `civetweb` cmake. See:. https://github.com/civetweb/civetweb/pull/1225. https://github.com/civetweb/civetweb/issues/1226.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/issues/14195:192,deployability,releas,release,192,"This is a duplicate of https://github.com/root-project/root/issues/14163, and it was fixed yesterday by https://github.com/root-project/root/pull/14178 (you'll need to wait for 6.30.04 or .06 release I guess)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/pull/14200:11,availability,failur,failures,11,The New CI failures seems unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:11,deployability,fail,failures,11,The New CI failures seems unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:11,performance,failur,failures,11,The New CI failures seems unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:11,reliability,fail,failures,11,The New CI failures seems unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:0,deployability,Patch,Patch,0,Patch was successfully back-ported to 6.30/02 and [reported by Mu2e](https://github.com/art-framework-suite/art/issues/142#issuecomment-1881361842) as resolving https://github.com/art-framework-suite/art/issues/142,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:0,safety,Patch,Patch,0,Patch was successfully back-ported to 6.30/02 and [reported by Mu2e](https://github.com/art-framework-suite/art/issues/142#issuecomment-1881361842) as resolving https://github.com/art-framework-suite/art/issues/142,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:0,security,Patch,Patch,0,Patch was successfully back-ported to 6.30/02 and [reported by Mu2e](https://github.com/art-framework-suite/art/issues/142#issuecomment-1881361842) as resolving https://github.com/art-framework-suite/art/issues/142,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:17,availability,down,down,17,"It's hard to pin down, but looking through the commit history and its incremental builds it seems that this PR made `tutorial-multicore-imt101_parTreeProcessing` very likely to fail on Windows 64-bit... FYI @bellenot",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:82,deployability,build,builds,82,"It's hard to pin down, but looking through the commit history and its incremental builds it seems that this PR made `tutorial-multicore-imt101_parTreeProcessing` very likely to fail on Windows 64-bit... FYI @bellenot",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:177,deployability,fail,fail,177,"It's hard to pin down, but looking through the commit history and its incremental builds it seems that this PR made `tutorial-multicore-imt101_parTreeProcessing` very likely to fail on Windows 64-bit... FYI @bellenot",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:177,reliability,fail,fail,177,"It's hard to pin down, but looking through the commit history and its incremental builds it seems that this PR made `tutorial-multicore-imt101_parTreeProcessing` very likely to fail on Windows 64-bit... FYI @bellenot",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:108,availability,error,error,108,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:421,availability,Error,Error,421,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:500,availability,error,error,500,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:889,availability,Error,Error,889,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:968,availability,error,error,968,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1324,availability,Error,Error,1324,"erpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Asserti",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1403,availability,error,error,1403,"ssertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1737,availability,Error,Error,1737,", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1816,availability,error,error,1816,"c/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2113,availability,Error,Error,2113,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2192,availability,error,error,2192,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2545,availability,Error,Error,2545,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2624,availability,error,error,2624,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2927,availability,Error,Error,2927,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:3006,availability,error,error,3006,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:234,deployability,fail,failed,234,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:442,deployability,build,build,442,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:638,deployability,fail,failed,638,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:861,deployability,fail,failed,861,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:910,deployability,build,build,910,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1106,deployability,fail,failed,1106,"rror messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CM",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1196,deployability,releas,release,1196,"reeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error co",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1345,deployability,build,build,1345,"\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1541,deployability,fail,failed,1541,"ssing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1722,deployability,fail,failed,1722,"light at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_p",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1758,deployability,build,build,1758,"t\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1954,deployability,fail,failed,1954,"ge):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2098,deployability,fail,failed,2098,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2134,deployability,build,build,2134,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2330,deployability,fail,failed,2330,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2523,deployability,fail,failed,2523,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2566,deployability,build,build,2566,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2762,deployability,fail,failed,2762,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2948,deployability,build,build,2948,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2798,energy efficiency,current,current,2798,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:114,integrability,messag,messages,114,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:484,integrability,messag,message,484,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:952,integrability,messag,message,952,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1387,integrability,messag,message,1387,"ne 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Inval",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1800,integrability,messag,message,1800,"lude\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no curren",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2176,integrability,messag,message,2176,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2608,integrability,messag,message,2608,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2990,integrability,messag,message,2990,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:114,interoperability,messag,messages,114,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:484,interoperability,messag,message,484,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:952,interoperability,messag,message,952,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1387,interoperability,messag,message,1387,"ne 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Inval",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1800,interoperability,messag,message,1800,"lude\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no curren",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2176,interoperability,messag,message,2176,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2608,interoperability,messag,message,2608,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2990,interoperability,messag,message,2990,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:108,performance,error,error,108,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:421,performance,Error,Error,421,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:500,performance,error,error,500,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:889,performance,Error,Error,889,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:968,performance,error,error,968,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1324,performance,Error,Error,1324,"erpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Asserti",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1403,performance,error,error,1403,"ssertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1597,performance,cach,caching,1597,"arTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmak",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1737,performance,Error,Error,1737,", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1816,performance,error,error,1816,"c/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2113,performance,Error,Error,2113,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2192,performance,error,error,2192,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2545,performance,Error,Error,2545,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2624,performance,error,error,2624,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2927,performance,Error,Error,2927,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:3006,performance,error,error,3006,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:234,reliability,fail,failed,234,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:638,reliability,fail,failed,638,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:709,reliability,diagno,diagnostics,709,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:821,reliability,Diagno,Diagnostic,821,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:861,reliability,fail,failed,861,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1106,reliability,fail,failed,1106,"rror messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CM",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1541,reliability,fail,failed,1541,"ssing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1722,reliability,fail,failed,1722,"light at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_p",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1954,reliability,fail,failed,1954,"ge):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2098,reliability,fail,failed,2098,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2330,reliability,fail,failed,2330,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2394,reliability,diagno,diagnostic,2394,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2479,reliability,Diagno,DiagnosticIDs,2479,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2523,reliability,fail,failed,2523,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2762,reliability,fail,failed,2762,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:108,safety,error,error,108,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:421,safety,Error,Error,421,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:500,safety,error,error,500,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:889,safety,Error,Error,889,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:968,safety,error,error,968,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1324,safety,Error,Error,1324,"erpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Asserti",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1403,safety,error,error,1403,"ssertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1737,safety,Error,Error,1737,", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1816,safety,error,error,1816,"c/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2113,safety,Error,Error,2113,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2192,safety,error,error,2192,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2545,safety,Error,Error,2545,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2624,safety,error,error,2624,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2927,safety,Error,Error,2927,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:3006,safety,error,error,3006,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2064,security,Token,Token,2064,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:224,testability,Assert,Assertion,224,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:405,testability,Assert,Assertion,405,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:628,testability,Assert,Assertion,628,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:709,testability,diagno,diagnostics,709,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:821,testability,Diagno,Diagnostic,821,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:851,testability,Assert,Assertion,851,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1096,testability,Assert,Assertion,1096,"ferent error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion fai",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1531,testability,Assert,Assertion,1531,"8: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1712,testability,Assert,Assertion,1712,"ics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1944,testability,Assert,Assertion,1944,"2 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/b",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2088,testability,Assert,Assertion,2088,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2320,testability,Assert,Assertion,2320,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2394,testability,diagno,diagnostic,2394,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2479,testability,Diagno,DiagnosticIDs,2479,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2513,testability,Assert,Assertion,2513,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2752,testability,Assert,Assertion,2752,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2,usability,confirm,confirm,2,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:108,usability,error,error,108,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:421,usability,Error,Error,421,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:500,usability,error,error,500,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:889,usability,Error,Error,889,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:968,usability,error,error,968,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:. ```. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1324,usability,Error,Error,1324,"erpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874. 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Asserti",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1403,usability,error,error,1403,"ssertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1737,usability,Error,Error,1737,", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:1816,usability,error,error,1816,"c/Diagnostic.h, line 1545. 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2113,usability,Error,Error,2113,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2192,usability,error,error,2192,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2545,usability,Error,Error,2545,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2624,usability,error,error,2624,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:2927,usability,Error,Error,2927,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:3006,usability,error,error,3006,"orials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538. 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99. 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208. 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379. 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C... 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPLexerChange.cpp, line 531. 768: ACMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):. 768: error code: Exit code 0xc0000409. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14201:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14201
https://github.com/root-project/root/pull/14201:127,safety,review,reviewed,127,> Not totally sure what I need to do here. You don't need to do anything (for now :slightly_smiling_face:) this PR needs to be reviewed by @bellenot.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14201
https://github.com/root-project/root/pull/14201:127,testability,review,reviewed,127,> Not totally sure what I need to do here. You don't need to do anything (for now :slightly_smiling_face:) this PR needs to be reviewed by @bellenot.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14201
https://github.com/root-project/root/pull/14204:42,deployability,releas,release,42,LGTM. Maybe it should be added to 6.30.04 release notes https://github.com/root-project/root/blob/master/README/ReleaseNotes/v630/index.md,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14204
https://github.com/root-project/root/pull/14204:112,deployability,Releas,ReleaseNotes,112,LGTM. Maybe it should be added to 6.30.04 release notes https://github.com/root-project/root/blob/master/README/ReleaseNotes/v630/index.md,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14204
https://github.com/root-project/root/issues/14207:129,deployability,BUILD,BUILD,129,Additional details. This happens because the .h is generated (as expected and correctly so) via:. ```. cd /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers && /Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/bin/protoc --cpp_out /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/onnx_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:302,deployability,BUILD,BUILD,302,Additional details. This happens because the .h is generated (as expected and correctly so) via:. ```. cd /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers && /Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/bin/protoc --cpp_out /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/onnx_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:2727,deployability,BUILD,BUILD,2727,ore/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/t,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:4145,deployability,BUILD,BUILD,4145,ild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf3d/g3d/inc -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++ -O2 -g -DNDEBUG -std=c++17 -arc,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:4233,deployability,BUILD,BUILD,4233,ibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf3d/g3d/inc -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++ -O2 -g -DNDEBUG -std=c++17 -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:5274,deployability,version,version-min,5274,alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf3d/g3d/inc -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++ -O2 -g -DNDEBUG -std=c++17 -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk -mmacosx-version-min=10.15 -fPIC -MD -MT tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -MF tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o.d -o tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -c /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/src/ParseConv.cxx. In file included from /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/src/ParseConv.cxx. ```. Notice how `-I/opt/homebrew/include` is in the wrong place.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:783,energy efficiency,core,core,783,Additional details. This happens because the .h is generated (as expected and correctly so) via:. ```. cd /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers && /Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/bin/protoc --cpp_out /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/onnx_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:875,energy efficiency,core,core,875,Additional details. This happens because the .h is generated (as expected and correctly so) via:. ```. cd /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers && /Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/bin/protoc --cpp_out /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/onnx_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:959,energy efficiency,core,core,959,Additional details. This happens because the .h is generated (as expected and correctly so) via:. ```. cd /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers && /Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/bin/protoc --cpp_out /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/onnx_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1069,energy efficiency,core,core,1069,ed and correctly so) via:. ```. cd /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers && /Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/bin/protoc --cpp_out /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/onnx_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/c,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1153,energy efficiency,core,core,1153,8e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers && /Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/bin/protoc --cpp_out /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/onnx_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1298,energy efficiency,core,core,1298,w/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/onnx_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1382,energy efficiency,core,core,1382,libuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/onnx_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SO,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1465,energy efficiency,core,core,1465,rs/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/onnx_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tm,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1551,energy efficiency,core,core,1551,x_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1640,energy efficiency,core,core,1640,sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1729,energy efficiency,core,core,1729,tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUIL,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1813,energy efficiency,core,core,1813,libuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SO,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1897,energy efficiency,core,core,1897,libuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SO,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1980,energy efficiency,core,core,1980,homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tm,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:2070,energy efficiency,core,core,2070,e/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/S,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:2163,energy efficiency,core,core,2163, -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCE,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:2253,energy efficiency,core,core,2253,URCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURC,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:2337,energy efficiency,core,core,2337,URCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_ar,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:2427,energy efficiency,core,core,2427,OOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:2517,energy efficiency,core,core,2517,v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-0,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:2601,energy efficiency,core,core,2601,ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-0,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:2688,energy efficiency,core,core,2688,S/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:3295,energy efficiency,core,core,3295,ES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_p,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:3861,energy efficiency,core,core,3861,tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf3d/g3d/inc -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitiali,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:4611,energy efficiency,core,core,4611,ath/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf3d/g3d/inc -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++ -O2 -g -DNDEBUG -std=c++17 -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk -mmacosx-version-min=10.15 -fPIC -MD -MT tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -MF tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o.d -o tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -c /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:5274,integrability,version,version-min,5274,alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf3d/g3d/inc -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++ -O2 -g -DNDEBUG -std=c++17 -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk -mmacosx-version-min=10.15 -fPIC -MD -MT tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -MF tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o.d -o tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -c /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/src/ParseConv.cxx. In file included from /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/src/ParseConv.cxx. ```. Notice how `-I/opt/homebrew/include` is in the wrong place.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:4027,interoperability,xml,xml,4027,e1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf3d/g3d/inc -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -W,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:4996,interoperability,convers,conversion,4996,alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf3d/g3d/inc -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++ -O2 -g -DNDEBUG -std=c++17 -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk -mmacosx-version-min=10.15 -fPIC -MD -MT tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -MF tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o.d -o tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -c /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/src/ParseConv.cxx. In file included from /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/src/ParseConv.cxx. ```. Notice how `-I/opt/homebrew/include` is in the wrong place.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:5209,interoperability,Platform,Platforms,5209,alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf3d/g3d/inc -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++ -O2 -g -DNDEBUG -std=c++17 -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk -mmacosx-version-min=10.15 -fPIC -MD -MT tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -MF tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o.d -o tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -c /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/src/ParseConv.cxx. In file included from /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/src/ParseConv.cxx. ```. Notice how `-I/opt/homebrew/include` is in the wrong place.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:5226,interoperability,platform,platform,5226,alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf3d/g3d/inc -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++ -O2 -g -DNDEBUG -std=c++17 -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk -mmacosx-version-min=10.15 -fPIC -MD -MT tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -MF tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o.d -o tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -c /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/src/ParseConv.cxx. In file included from /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/src/ParseConv.cxx. ```. Notice how `-I/opt/homebrew/include` is in the wrong place.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:5274,modifiability,version,version-min,5274,alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf3d/g3d/inc -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++ -O2 -g -DNDEBUG -std=c++17 -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk -mmacosx-version-min=10.15 -fPIC -MD -MT tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -MF tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o.d -o tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -c /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/src/ParseConv.cxx. In file included from /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/src/ParseConv.cxx. ```. Notice how `-I/opt/homebrew/include` is in the wrong place.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:976,performance,I/o,I/opt,976,Additional details. This happens because the .h is generated (as expected and correctly so) via:. ```. cd /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers && /Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/bin/protoc --cpp_out /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/onnx_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:5190,performance,Content,Contents,5190,alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf3d/g3d/inc -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++ -O2 -g -DNDEBUG -std=c++17 -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk -mmacosx-version-min=10.15 -fPIC -MD -MT tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -MF tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o.d -o tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -c /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/src/ParseConv.cxx. In file included from /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/src/ParseConv.cxx. ```. Notice how `-I/opt/homebrew/include` is in the wrong place.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:5792,performance,I/o,I/opt,5792,alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf3d/g3d/inc -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++ -O2 -g -DNDEBUG -std=c++17 -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk -mmacosx-version-min=10.15 -fPIC -MD -MT tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -MF tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o.d -o tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -c /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/src/ParseConv.cxx. In file included from /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/src/ParseConv.cxx. ```. Notice how `-I/opt/homebrew/include` is in the wrong place.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:107,usability,User,Users,107,Additional details. This happens because the .h is generated (as expected and correctly so) via:. ```. cd /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers && /Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/bin/protoc --cpp_out /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/onnx_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:204,usability,User,Users,204,Additional details. This happens because the .h is generated (as expected and correctly so) via:. ```. cd /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers && /Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/bin/protoc --cpp_out /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/onnx_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:280,usability,User,Users,280,Additional details. This happens because the .h is generated (as expected and correctly so) via:. ```. cd /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers && /Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/bin/protoc --cpp_out /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/onnx_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:377,usability,User,Users,377,Additional details. This happens because the .h is generated (as expected and correctly so) via:. ```. cd /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers && /Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/bin/protoc --cpp_out /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/onnx_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:464,usability,User,Users,464,Additional details. This happens because the .h is generated (as expected and correctly so) via:. ```. cd /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers && /Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/bin/protoc --cpp_out /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/onnx_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:623,usability,User,Users,623,Additional details. This happens because the .h is generated (as expected and correctly so) via:. ```. cd /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers && /Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/bin/protoc --cpp_out /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/onnx_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:716,usability,User,Users,716,Additional details. This happens because the .h is generated (as expected and correctly so) via:. ```. cd /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers && /Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/bin/protoc --cpp_out /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/onnx_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:808,usability,User,Users,808,Additional details. This happens because the .h is generated (as expected and correctly so) via:. ```. cd /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers && /Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/bin/protoc --cpp_out /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/onnx_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:892,usability,User,Users,892,Additional details. This happens because the .h is generated (as expected and correctly so) via:. ```. cd /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers && /Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/bin/protoc --cpp_out /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/onnx_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1002,usability,User,Users,1002,ional details. This happens because the .h is generated (as expected and correctly so) via:. ```. cd /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers && /Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/bin/protoc --cpp_out /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/onnx_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Us,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1086,usability,User,Users,1086,o) via:. ```. cd /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers && /Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/bin/protoc --cpp_out /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/onnx_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1169,usability,User,Users,1169,88f/ROOT/tmva/sofie_parsers && /Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/bin/protoc --cpp_out /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/onnx_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foun,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1231,usability,User,Users,1231,4/protobuf/v21.9-local1/bin/protoc --cpp_out /Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/onnx_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alic,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1315,usability,User,Users,1315,8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/onnx_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alic,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1398,usability,User,Users,1398,URCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/onnx_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1484,usability,User,Users,1484,OURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/onnx_proto3. ```. while it gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1573,usability,User,Users,1573, gets compiled with:. ```. /usr/bin/clang++ -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-0,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1662,usability,User,Users,1662,1-alice1/v6-30-01-alice1/tmva/sofie_parsers/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1746,usability,User,Users,1746,T/v6-30-01-alice1/v6-30-01-alice1/core/unix/../clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069ef,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1830,usability,User,Users,1830,RCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/unix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-0,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1913,usability,User,Users,1913,URCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/macosx/inc -I/opt/homebrew/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:2003,usability,User,Users,2003,s/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zstd/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:2096,usability,User,Users,2096,d/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lz4/inc -I/Users/alibuild/tmp/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:2186,usability,User,Users,2186,w/osx_arm64/lzma/v5.2.3-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:2270,usability,User,Users,2270,1-alice1/v6-30-01-alice1/core/lzma/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-a,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:2360,usability,User,Users,2360,e1/v6-30-01-alice1/core/zip/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:2450,usability,User,Users,2450,0-01-alice1/core/thread/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:2534,usability,User,Users,2534,-30-01-alice1/core/textinput/src -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:2621,usability,User,Users,2621,v6-30-01-alice1/core/textinput/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:2705,usability,User,Users,2705,ice1/v6-30-01-alice1/core/rint/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/i,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:2791,usability,User,Users,2791,e1/v6-30-01-alice1/core/meta/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:2875,usability,User,Users,2875,e1/v6-30-01-alice1/core/gui/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:2965,usability,User,Users,2965,0-01-alice1/core/foundation/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibu,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:3049,usability,User,Users,3049,1/v6-30-01-alice1/core/foundation/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:3137,usability,User,Users,3137,alice1/v6-30-01-alice1/core/foundation/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tm,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:3228,usability,User,Users,3228,lice1/v6-30-01-alice1/core/cont/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/s,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:3311,usability,User,Users,3311,alice1/v6-30-01-alice1/core/clingutils/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/a,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:3375,usability,User,Users,3375,/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clingutils/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:3461,usability,User,Users,3461,/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:3545,usability,User,Users,3545,/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/User,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:3631,usability,User,Users,3631,d/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/base/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/U,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:3714,usability,User,Users,3714,ld/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/ginclude -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Us,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:3794,usability,User,Users,3794,alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/tmva/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf3d/g3d/inc ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:3878,usability,User,Users,3878,alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/treeplayer/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf3d/g3d/inc -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:3957,usability,User,Users,3957,c -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/hist/hist/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf3d/g3d/inc -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -W,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:4038,usability,User,Users,4038,/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf3d/g3d/inc -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-v,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:4123,usability,User,Users,4123,ore/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mathcore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf3d/g3d/inc -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++ -O2 -g -D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:4211,usability,User,Users,4211,ore/v7/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/imt/inc -I/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf3d/g3d/inc -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++ -O2 -g -DNDEBUG -std=c++17 -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platf,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:4307,usability,User,Users,4307,/Users/alibuild/tmp/sw/osx_arm64/TBB/v2021.5.0-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf3d/g3d/inc -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++ -O2 -g -DNDEBUG -std=c++17 -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk -mmacosx-version-min=10.15 -fPIC -MD -MT tmva,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:4372,usability,User,Users,4372,Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/matrix/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf3d/g3d/inc -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++ -O2 -g -DNDEBUG -std=c++17 -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk -mmacosx-version-min=10.15 -fPIC -MD -MT tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.c,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:4458,usability,User,Users,4458,Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tree/tree/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf3d/g3d/inc -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++ -O2 -g -DNDEBUG -std=c++17 -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk -mmacosx-version-min=10.15 -fPIC -MD -MT tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -MF tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o.d -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:4544,usability,User,Users,4544,ers/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/minuit/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf3d/g3d/inc -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++ -O2 -g -DNDEBUG -std=c++17 -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk -mmacosx-version-min=10.15 -fPIC -MD -MT tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -MF tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o.d -o tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -c /Users/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:4633,usability,User,Users,4633,/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/math/mlp/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf3d/g3d/inc -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++ -O2 -g -DNDEBUG -std=c++17 -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk -mmacosx-version-min=10.15 -fPIC -MD -MT tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -MF tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o.d -o tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -c /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/src/Parse,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:4715,usability,User,Users,4715,s/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/io/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf3d/g3d/inc -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++ -O2 -g -DNDEBUG -std=c++17 -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk -mmacosx-version-min=10.15 -fPIC -MD -MT tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -MF tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o.d -o tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -c /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/src/ParseConv.cxx. In file included from /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:5541,usability,User,Users,5541,alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf3d/g3d/inc -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++ -O2 -g -DNDEBUG -std=c++17 -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk -mmacosx-version-min=10.15 -fPIC -MD -MT tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -MF tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o.d -o tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -c /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/src/ParseConv.cxx. In file included from /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/src/ParseConv.cxx. ```. Notice how `-I/opt/homebrew/include` is in the wrong place.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:5669,usability,User,Users,5669,alice1/v6-30-01-alice1/core/clib/res -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/builtins -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/io/xml/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie/inc -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie -I/Users/alibuild/tmp/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers -I/Users/alibuild/tmp/sw/osx_arm64/protobuf/v21.9-local1/include -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/gpad/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf2d/graf/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/core/multiproc/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/net/net/inc -I/Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/graf3d/g3d/inc -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++ -O2 -g -DNDEBUG -std=c++17 -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk -mmacosx-version-min=10.15 -fPIC -MD -MT tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -MF tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o.d -o tmva/sofie_parsers/CMakeFiles/ROOTTMVASofieParser.dir/src/ParseConv.cxx.o -c /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/src/ParseConv.cxx. In file included from /Users/alibuild/tmp/sw/SOURCES/ROOT/v6-30-01-alice1/v6-30-01-alice1/tmva/sofie_parsers/src/ParseConv.cxx. ```. Notice how `-I/opt/homebrew/include` is in the wrong place.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:13,deployability,build,build,13,_Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew._. I am not sure to fully understand what that means. Maybe @bellenot can help?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:70,interoperability,incompatib,incompatible,70,_Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew._. I am not sure to fully understand what that means. Maybe @bellenot can help?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:143,testability,understand,understand,143,_Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew._. I am not sure to fully understand what that means. Maybe @bellenot can help?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:191,usability,help,help,191,_Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew._. I am not sure to fully understand what that means. Maybe @bellenot can help?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:17,deployability,Instal,Install,17,"To reproduce:. - Install protobuf from homebrew (e.g. 24.3 in our case). - Compile your own version of protobuf 21.9. - Pass `-DProtobuf_DIR=<installation path of protobuf 21.9>` to cmake. ROOT build will fail because despite the fact you passed the correct Protobuf_DIR and it was picked up correctly, as one can check in the CMakeCache.txt, somehow /opt/homebrew/include ends up in the include chain and overrides $Protobuf_DIR/include in the case of the compilation of the .pb via protobuf_generate_cpp as used in `tmva/sofie_parsers/CMakeLists.txt` .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:92,deployability,version,version,92,"To reproduce:. - Install protobuf from homebrew (e.g. 24.3 in our case). - Compile your own version of protobuf 21.9. - Pass `-DProtobuf_DIR=<installation path of protobuf 21.9>` to cmake. ROOT build will fail because despite the fact you passed the correct Protobuf_DIR and it was picked up correctly, as one can check in the CMakeCache.txt, somehow /opt/homebrew/include ends up in the include chain and overrides $Protobuf_DIR/include in the case of the compilation of the .pb via protobuf_generate_cpp as used in `tmva/sofie_parsers/CMakeLists.txt` .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:142,deployability,instal,installation,142,"To reproduce:. - Install protobuf from homebrew (e.g. 24.3 in our case). - Compile your own version of protobuf 21.9. - Pass `-DProtobuf_DIR=<installation path of protobuf 21.9>` to cmake. ROOT build will fail because despite the fact you passed the correct Protobuf_DIR and it was picked up correctly, as one can check in the CMakeCache.txt, somehow /opt/homebrew/include ends up in the include chain and overrides $Protobuf_DIR/include in the case of the compilation of the .pb via protobuf_generate_cpp as used in `tmva/sofie_parsers/CMakeLists.txt` .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:194,deployability,build,build,194,"To reproduce:. - Install protobuf from homebrew (e.g. 24.3 in our case). - Compile your own version of protobuf 21.9. - Pass `-DProtobuf_DIR=<installation path of protobuf 21.9>` to cmake. ROOT build will fail because despite the fact you passed the correct Protobuf_DIR and it was picked up correctly, as one can check in the CMakeCache.txt, somehow /opt/homebrew/include ends up in the include chain and overrides $Protobuf_DIR/include in the case of the compilation of the .pb via protobuf_generate_cpp as used in `tmva/sofie_parsers/CMakeLists.txt` .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:205,deployability,fail,fail,205,"To reproduce:. - Install protobuf from homebrew (e.g. 24.3 in our case). - Compile your own version of protobuf 21.9. - Pass `-DProtobuf_DIR=<installation path of protobuf 21.9>` to cmake. ROOT build will fail because despite the fact you passed the correct Protobuf_DIR and it was picked up correctly, as one can check in the CMakeCache.txt, somehow /opt/homebrew/include ends up in the include chain and overrides $Protobuf_DIR/include in the case of the compilation of the .pb via protobuf_generate_cpp as used in `tmva/sofie_parsers/CMakeLists.txt` .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:92,integrability,version,version,92,"To reproduce:. - Install protobuf from homebrew (e.g. 24.3 in our case). - Compile your own version of protobuf 21.9. - Pass `-DProtobuf_DIR=<installation path of protobuf 21.9>` to cmake. ROOT build will fail because despite the fact you passed the correct Protobuf_DIR and it was picked up correctly, as one can check in the CMakeCache.txt, somehow /opt/homebrew/include ends up in the include chain and overrides $Protobuf_DIR/include in the case of the compilation of the .pb via protobuf_generate_cpp as used in `tmva/sofie_parsers/CMakeLists.txt` .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:92,modifiability,version,version,92,"To reproduce:. - Install protobuf from homebrew (e.g. 24.3 in our case). - Compile your own version of protobuf 21.9. - Pass `-DProtobuf_DIR=<installation path of protobuf 21.9>` to cmake. ROOT build will fail because despite the fact you passed the correct Protobuf_DIR and it was picked up correctly, as one can check in the CMakeCache.txt, somehow /opt/homebrew/include ends up in the include chain and overrides $Protobuf_DIR/include in the case of the compilation of the .pb via protobuf_generate_cpp as used in `tmva/sofie_parsers/CMakeLists.txt` .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:205,reliability,fail,fail,205,"To reproduce:. - Install protobuf from homebrew (e.g. 24.3 in our case). - Compile your own version of protobuf 21.9. - Pass `-DProtobuf_DIR=<installation path of protobuf 21.9>` to cmake. ROOT build will fail because despite the fact you passed the correct Protobuf_DIR and it was picked up correctly, as one can check in the CMakeCache.txt, somehow /opt/homebrew/include ends up in the include chain and overrides $Protobuf_DIR/include in the case of the compilation of the .pb via protobuf_generate_cpp as used in `tmva/sofie_parsers/CMakeLists.txt` .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:33,safety,test,test,33,"Hi Giulio, there is no way I can test, but I'll try to guess what can be the issue...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:33,testability,test,test,33,"Hi Giulio, there is no way I can test, but I'll try to guess what can be the issue...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:149,integrability,configur,configure,149,"Hi, . The workaround should be to pass both the protobuf library and the protoc compiler to cmake used to generate the header file. . Can you try to configure with: . ```. -DProtobuf_LIBRARY=full_path_to_protobuf_21.9_library -DProtobuf_PROTOC_EXECUTABLE=full_path_to_protoc_21.9. ```. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:149,modifiability,configur,configure,149,"Hi, . The workaround should be to pass both the protobuf library and the protoc compiler to cmake used to generate the header file. . Can you try to configure with: . ```. -DProtobuf_LIBRARY=full_path_to_protobuf_21.9_library -DProtobuf_PROTOC_EXECUTABLE=full_path_to_protoc_21.9. ```. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:149,security,configur,configure,149,"Hi, . The workaround should be to pass both the protobuf library and the protoc compiler to cmake used to generate the header file. . Can you try to configure with: . ```. -DProtobuf_LIBRARY=full_path_to_protobuf_21.9_library -DProtobuf_PROTOC_EXECUTABLE=full_path_to_protoc_21.9. ```. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:170,deployability,manag,managed,170,"No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7 which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:430,deployability,patch,patch,430,"No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7 which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:449,deployability,build,build,449,"No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7 which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:170,energy efficiency,manag,managed,170,"No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7 which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:53,integrability,configur,configured,53,"No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7 which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:53,modifiability,configur,configured,53,"No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7 which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:170,safety,manag,managed,170,"No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7 which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:430,safety,patch,patch,430,"No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7 which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:53,security,configur,configured,53,"No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7 which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:430,security,patch,patch,430,"No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7 which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:423,testability,simpl,simply,423,"No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7 which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:423,usability,simpl,simply,423,"No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7 which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:172,deployability,manag,managed,172,"> No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing [alisw@526782c](https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7) which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build. So if it works we can implement it in ROOT. @lmoneta what do you think? Can you give it a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:449,deployability,patch,patch,449,"> No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing [alisw@526782c](https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7) which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build. So if it works we can implement it in ROOT. @lmoneta what do you think? Can you give it a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:468,deployability,build,build,468,"> No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing [alisw@526782c](https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7) which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build. So if it works we can implement it in ROOT. @lmoneta what do you think? Can you give it a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:172,energy efficiency,manag,managed,172,"> No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing [alisw@526782c](https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7) which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build. So if it works we can implement it in ROOT. @lmoneta what do you think? Can you give it a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:55,integrability,configur,configured,55,"> No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing [alisw@526782c](https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7) which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build. So if it works we can implement it in ROOT. @lmoneta what do you think? Can you give it a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:55,modifiability,configur,configured,55,"> No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing [alisw@526782c](https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7) which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build. So if it works we can implement it in ROOT. @lmoneta what do you think? Can you give it a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:172,safety,manag,managed,172,"> No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing [alisw@526782c](https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7) which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build. So if it works we can implement it in ROOT. @lmoneta what do you think? Can you give it a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:449,safety,patch,patch,449,"> No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing [alisw@526782c](https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7) which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build. So if it works we can implement it in ROOT. @lmoneta what do you think? Can you give it a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:55,security,configur,configured,55,"> No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing [alisw@526782c](https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7) which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build. So if it works we can implement it in ROOT. @lmoneta what do you think? Can you give it a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:449,security,patch,patch,449,"> No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing [alisw@526782c](https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7) which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build. So if it works we can implement it in ROOT. @lmoneta what do you think? Can you give it a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:442,testability,simpl,simply,442,"> No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing [alisw@526782c](https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7) which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build. So if it works we can implement it in ROOT. @lmoneta what do you think? Can you give it a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:442,usability,simpl,simply,442,"> No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing [alisw@526782c](https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7) which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build. So if it works we can implement it in ROOT. @lmoneta what do you think? Can you give it a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:32,deployability,patch,patch,32,"Sure, we can certainly add this patch used by ALICE SW. I will make a PR for this, hoping it fixes the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:32,safety,patch,patch,32,"Sure, we can certainly add this patch used by ALICE SW. I will make a PR for this, hoping it fixes the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:32,security,patch,patch,32,"Sure, we can certainly add this patch used by ALICE SW. I will make a PR for this, hoping it fixes the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:20,deployability,contain,contains,20,"Actually the master contains a fix for building with new version of protobuf, see #14144. @ktf , will the current master work for you or do we need to patch it ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:39,deployability,build,building,39,"Actually the master contains a fix for building with new version of protobuf, see #14144. @ktf , will the current master work for you or do we need to patch it ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:57,deployability,version,version,57,"Actually the master contains a fix for building with new version of protobuf, see #14144. @ktf , will the current master work for you or do we need to patch it ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:151,deployability,patch,patch,151,"Actually the master contains a fix for building with new version of protobuf, see #14144. @ktf , will the current master work for you or do we need to patch it ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:106,energy efficiency,current,current,106,"Actually the master contains a fix for building with new version of protobuf, see #14144. @ktf , will the current master work for you or do we need to patch it ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:57,integrability,version,version,57,"Actually the master contains a fix for building with new version of protobuf, see #14144. @ktf , will the current master work for you or do we need to patch it ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:57,modifiability,version,version,57,"Actually the master contains a fix for building with new version of protobuf, see #14144. @ktf , will the current master work for you or do we need to patch it ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:151,safety,patch,patch,151,"Actually the master contains a fix for building with new version of protobuf, see #14144. @ktf , will the current master work for you or do we need to patch it ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:151,security,patch,patch,151,"Actually the master contains a fix for building with new version of protobuf, see #14144. @ktf , will the current master work for you or do we need to patch it ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:57,safety,test,test,57,"Yes, I suspect that will work for us, but have no way to test right now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:57,testability,test,test,57,"Yes, I suspect that will work for us, but have no way to test right now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:40,usability,close,close,40,"Hi @kft, did it work in the end? Can we close this issue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14209:11,deployability,upgrad,upgrade,11,"During the upgrade to LLVM 18, we enabled JITLink for AArch64 on Linux, because we had to (there were problems with RuntimeDyld that we could not solve). In order to switch x86 as well, we need a solution for `CLING_DEBUG` and `CLING_PROFILE`. It's not clear to me how this works with JITLink, does it have an equivalent interface to `registerJITEventListener`? Maybe @lhames can comment...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14209
https://github.com/root-project/root/issues/14209:321,integrability,interfac,interface,321,"During the upgrade to LLVM 18, we enabled JITLink for AArch64 on Linux, because we had to (there were problems with RuntimeDyld that we could not solve). In order to switch x86 as well, we need a solution for `CLING_DEBUG` and `CLING_PROFILE`. It's not clear to me how this works with JITLink, does it have an equivalent interface to `registerJITEventListener`? Maybe @lhames can comment...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14209
https://github.com/root-project/root/issues/14209:321,interoperability,interfac,interface,321,"During the upgrade to LLVM 18, we enabled JITLink for AArch64 on Linux, because we had to (there were problems with RuntimeDyld that we could not solve). In order to switch x86 as well, we need a solution for `CLING_DEBUG` and `CLING_PROFILE`. It's not clear to me how this works with JITLink, does it have an equivalent interface to `registerJITEventListener`? Maybe @lhames can comment...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14209
https://github.com/root-project/root/issues/14209:11,modifiability,upgrad,upgrade,11,"During the upgrade to LLVM 18, we enabled JITLink for AArch64 on Linux, because we had to (there were problems with RuntimeDyld that we could not solve). In order to switch x86 as well, we need a solution for `CLING_DEBUG` and `CLING_PROFILE`. It's not clear to me how this works with JITLink, does it have an equivalent interface to `registerJITEventListener`? Maybe @lhames can comment...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14209
https://github.com/root-project/root/issues/14209:321,modifiability,interfac,interface,321,"During the upgrade to LLVM 18, we enabled JITLink for AArch64 on Linux, because we had to (there were problems with RuntimeDyld that we could not solve). In order to switch x86 as well, we need a solution for `CLING_DEBUG` and `CLING_PROFILE`. It's not clear to me how this works with JITLink, does it have an equivalent interface to `registerJITEventListener`? Maybe @lhames can comment...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14209
https://github.com/root-project/root/issues/14209:294,reliability,doe,does,294,"During the upgrade to LLVM 18, we enabled JITLink for AArch64 on Linux, because we had to (there were problems with RuntimeDyld that we could not solve). In order to switch x86 as well, we need a solution for `CLING_DEBUG` and `CLING_PROFILE`. It's not clear to me how this works with JITLink, does it have an equivalent interface to `registerJITEventListener`? Maybe @lhames can comment...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14209
https://github.com/root-project/root/issues/14209:253,usability,clear,clear,253,"During the upgrade to LLVM 18, we enabled JITLink for AArch64 on Linux, because we had to (there were problems with RuntimeDyld that we could not solve). In order to switch x86 as well, we need a solution for `CLING_DEBUG` and `CLING_PROFILE`. It's not clear to me how this works with JITLink, does it have an equivalent interface to `registerJITEventListener`? Maybe @lhames can comment...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14209
https://github.com/root-project/root/issues/14210:504,deployability,modul,modules,504,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:649,deployability,modul,modules,649,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1474,deployability,modul,modules,1474,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:719,energy efficiency,core,core,719,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:80,integrability,coupl,couple,80,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:118,interoperability,bind,bindings,118,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:254,interoperability,bind,bindings,254,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:391,interoperability,bind,bindings,391,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:80,modifiability,coupl,couple,80,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:118,modifiability,bind,bindings,118,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:254,modifiability,bind,bindings,254,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:391,modifiability,bind,bindings,391,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:504,modifiability,modul,modules,504,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:649,modifiability,modul,modules,649,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1474,modifiability,modul,modules,1474,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:422,safety,test,test,422,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:504,safety,modul,modules,504,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:596,safety,test,tests,596,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:649,safety,modul,modules,649,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:731,safety,test,test,731,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:836,safety,test,test,836,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:911,safety,test,test,911,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:987,safety,test,test,987,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1062,safety,test,test,1062,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1138,safety,test,test,1138,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1223,safety,test,test,1223,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1313,safety,test,test,1313,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1474,safety,modul,modules,1474,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:80,testability,coupl,couple,80,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:422,testability,test,test,422,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:596,testability,test,tests,596,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:731,testability,test,test,731,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:836,testability,test,test,836,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:911,testability,test,test,911,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:987,testability,test,test,987,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1062,testability,test,test,1062,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1138,testability,test,test,1138,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1223,testability,test,test,1223,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1313,testability,test,test,1313,"not sure if it should go in this issue, but llvm13 should be renamed to 16 in a couple of places:. ```. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:317,deployability,version,version,317,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:498,deployability,modul,modules,498,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:645,deployability,modul,modules,645,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1490,deployability,modul,modules,1490,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1672,deployability,upgrad,upgrade,1672,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1763,deployability,upgrad,upgrade,1763,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:717,energy efficiency,core,core,717,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:317,integrability,version,version,317,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:23,interoperability,bind,bindings,23,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:161,interoperability,bind,bindings,161,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:383,interoperability,bind,bindings,383,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:23,modifiability,bind,bindings,23,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:161,modifiability,bind,bindings,161,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:317,modifiability,version,version,317,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:383,modifiability,bind,bindings,383,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:498,modifiability,modul,modules,498,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:645,modifiability,modul,modules,645,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1490,modifiability,modul,modules,1490,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1672,modifiability,upgrad,upgrade,1672,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1763,modifiability,upgrad,upgrade,1763,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:414,safety,test,test,414,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:498,safety,modul,modules,498,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:590,safety,test,tests,590,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:645,safety,modul,modules,645,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:729,safety,test,test,729,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:836,safety,test,test,836,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:913,safety,test,test,913,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:991,safety,test,test,991,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1068,safety,test,test,1068,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1146,safety,test,test,1146,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1233,safety,test,test,1233,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1325,safety,test,test,1325,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1490,safety,modul,modules,1490,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1639,safety,test,tests,1639,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1708,safety,review,reviewed,1708,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:414,testability,test,test,414,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:590,testability,test,tests,590,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:729,testability,test,test,729,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:836,testability,test,test,836,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:913,testability,test,test,913,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:991,testability,test,test,991,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1068,testability,test,test,1068,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1146,testability,test,test,1146,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1233,testability,test,test,1233,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1325,testability,test,test,1325,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1639,testability,test,tests,1639,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:1708,testability,review,reviewed,1708,"> ```. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE. > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE. > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```. > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""). > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests). > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests). > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests). > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""). > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:52,deployability,upgrad,upgrade,52,"Yes, I still see the `FIXME`s in the code after the upgrade to LLVM 18. FYI @devajithvs this is the issue we were discussing yesterday...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:52,modifiability,upgrad,upgrade,52,"Yes, I still see the `FIXME`s in the code after the upgrade to LLVM 18. FYI @devajithvs this is the issue we were discussing yesterday...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/pull/14212:22,availability,failur,failures,22,"FWIW I think the test failures are because of temporary problems with `eospublic`, not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14212
https://github.com/root-project/root/pull/14212:22,deployability,fail,failures,22,"FWIW I think the test failures are because of temporary problems with `eospublic`, not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14212
https://github.com/root-project/root/pull/14212:22,performance,failur,failures,22,"FWIW I think the test failures are because of temporary problems with `eospublic`, not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14212
https://github.com/root-project/root/pull/14212:22,reliability,fail,failures,22,"FWIW I think the test failures are because of temporary problems with `eospublic`, not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14212
https://github.com/root-project/root/pull/14212:17,safety,test,test,17,"FWIW I think the test failures are because of temporary problems with `eospublic`, not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14212
https://github.com/root-project/root/pull/14212:17,testability,test,test,17,"FWIW I think the test failures are because of temporary problems with `eospublic`, not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14212
https://github.com/root-project/root/issues/14215:7,usability,clear,clear,7,"> t is clear that that inner track isn't iterating anywhere nearly as much as it should be. What is the actual difference? How much is expected vs how much is gotten? Is it for the exact same file? What code is your colleague using? Did you consider using RDataFrame? In the code shown above, the only relevant number are `AutreeData.GetEntries()` and the set of `AutreeData.tracknumber`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:35,integrability,event,event,35,"He is using different code but our event counts are identical and track counts should be identical. Sorry about the irrelevant details. 14,957,212,539 are expected but 8,195,379,712 are performed. It is for the exact same set of files. I have not considered using an RDataFrame.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:186,performance,perform,performed,186,"He is using different code but our event counts are identical and track counts should be identical. Sorry about the irrelevant details. 14,957,212,539 are expected but 8,195,379,712 are performed. It is for the exact same set of files. I have not considered using an RDataFrame.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:52,security,ident,identical,52,"He is using different code but our event counts are identical and track counts should be identical. Sorry about the irrelevant details. 14,957,212,539 are expected but 8,195,379,712 are performed. It is for the exact same set of files. I have not considered using an RDataFrame.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:89,security,ident,identical,89,"He is using different code but our event counts are identical and track counts should be identical. Sorry about the irrelevant details. 14,957,212,539 are expected but 8,195,379,712 are performed. It is for the exact same set of files. I have not considered using an RDataFrame.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:186,usability,perform,performed,186,"He is using different code but our event counts are identical and track counts should be identical. Sorry about the irrelevant details. 14,957,212,539 are expected but 8,195,379,712 are performed. It is for the exact same set of files. I have not considered using an RDataFrame.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:10,integrability,event,event,10,"> but our event counts are identical and track counts should be identical. . Compare the result of . ```. AutreeData->Scan(""Tracknumber"");. ```. in his case and in yours.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:27,security,ident,identical,27,"> but our event counts are identical and track counts should be identical. . Compare the result of . ```. AutreeData->Scan(""Tracknumber"");. ```. in his case and in yours.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:64,security,ident,identical,64,"> but our event counts are identical and track counts should be identical. . Compare the result of . ```. AutreeData->Scan(""Tracknumber"");. ```. in his case and in yours.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:44,integrability,event,events,44,"I should clarify. I meant we were comparing events and tracks remaining after various cuts, not at the beginning.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:105,performance,synch,synchronize,105,"Hi @mcgordon91! I think @pcanal is right. It is very likely that you and your colleague didn't correctly synchronize you even selection, and a bit far-fetched that this is a ROOT bug. And since your reproducer is not standalone, we also can't verify if this is an actual ROOT problem or not. I'll therefore close this issue and encourage you to a bit more synchronization work with your colleague :slightly_smiling_face: Feel free to ask questions in the ROOT forum about ROOT/PyROOT usage. The GitHub issue tracker is more for confirmed bugs in ROOT, improvement suggestions, and feature requests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:356,performance,synch,synchronization,356,"Hi @mcgordon91! I think @pcanal is right. It is very likely that you and your colleague didn't correctly synchronize you even selection, and a bit far-fetched that this is a ROOT bug. And since your reproducer is not standalone, we also can't verify if this is an actual ROOT problem or not. I'll therefore close this issue and encourage you to a bit more synchronization work with your colleague :slightly_smiling_face: Feel free to ask questions in the ROOT forum about ROOT/PyROOT usage. The GitHub issue tracker is more for confirmed bugs in ROOT, improvement suggestions, and feature requests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:243,testability,verif,verify,243,"Hi @mcgordon91! I think @pcanal is right. It is very likely that you and your colleague didn't correctly synchronize you even selection, and a bit far-fetched that this is a ROOT bug. And since your reproducer is not standalone, we also can't verify if this is an actual ROOT problem or not. I'll therefore close this issue and encourage you to a bit more synchronization work with your colleague :slightly_smiling_face: Feel free to ask questions in the ROOT forum about ROOT/PyROOT usage. The GitHub issue tracker is more for confirmed bugs in ROOT, improvement suggestions, and feature requests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:307,usability,close,close,307,"Hi @mcgordon91! I think @pcanal is right. It is very likely that you and your colleague didn't correctly synchronize you even selection, and a bit far-fetched that this is a ROOT bug. And since your reproducer is not standalone, we also can't verify if this is an actual ROOT problem or not. I'll therefore close this issue and encourage you to a bit more synchronization work with your colleague :slightly_smiling_face: Feel free to ask questions in the ROOT forum about ROOT/PyROOT usage. The GitHub issue tracker is more for confirmed bugs in ROOT, improvement suggestions, and feature requests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:528,usability,confirm,confirmed,528,"Hi @mcgordon91! I think @pcanal is right. It is very likely that you and your colleague didn't correctly synchronize you even selection, and a bit far-fetched that this is a ROOT bug. And since your reproducer is not standalone, we also can't verify if this is an actual ROOT problem or not. I'll therefore close this issue and encourage you to a bit more synchronization work with your colleague :slightly_smiling_face: Feel free to ask questions in the ROOT forum about ROOT/PyROOT usage. The GitHub issue tracker is more for confirmed bugs in ROOT, improvement suggestions, and feature requests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/pull/14216:118,deployability,build,buildconfig,118,Needs to be rebased and set just in https://github.com/root-project/root/blob/master/.github/workflows/root-ci-config/buildconfig/fedora39.txt,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14216
https://github.com/root-project/root/pull/14216:93,usability,workflow,workflows,93,Needs to be rebased and set just in https://github.com/root-project/root/blob/master/.github/workflows/root-ci-config/buildconfig/fedora39.txt,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14216
https://github.com/root-project/root/pull/14216:137,testability,coverag,coverage,137,"It seems this works now with LLVM 18 (FYI @devajithvs :partying_face:), so I think we should enable Pythia 8 on Fedora to get broader CI coverage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14216
https://github.com/root-project/root/issues/14217:26,deployability,upgrad,upgrade,26,This seems fixed with the upgrade to LLVM 18 :partying_face:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:26,modifiability,upgrad,upgrade,26,This seems fixed with the upgrade to LLVM 18 :partying_face:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/pull/14218:113,deployability,version,version,113,"I think we want to support the ""regular"" `<source_location>` / `std::source_location` here, not the experimental version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:113,integrability,version,version,113,"I think we want to support the ""regular"" `<source_location>` / `std::source_location` here, not the experimental version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:113,modifiability,version,version,113,"I think we want to support the ""regular"" `<source_location>` / `std::source_location` here, not the experimental version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:19,usability,support,support,19,"I think we want to support the ""regular"" `<source_location>` / `std::source_location` here, not the experimental version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:152,availability,servic,services,152,> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/191362/console). > ### Errors:. > . > * [2023-12-13T16:51:50.723Z] FAILED: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/ValuePrinter.cpp.o. > . > * [2023-12-13T16:51:50.723Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:44:10: fatal error: 'source_location' file not found. This needs to be understood as well; maybe the SDK doesn't have all C++20 headers yet? Maybe we have to use the feature macro [`__cpp_lib_source_location`](https://en.cppreference.com/w/cpp/feature_test#cpp_lib_source_location) instead...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:233,availability,Error,Errors,233,> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/191362/console). > ### Errors:. > . > * [2023-12-13T16:51:50.723Z] FAILED: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/ValuePrinter.cpp.o. > . > * [2023-12-13T16:51:50.723Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:44:10: fatal error: 'source_location' file not found. This needs to be understood as well; maybe the SDK doesn't have all C++20 headers yet? Maybe we have to use the feature macro [`__cpp_lib_source_location`](https://en.cppreference.com/w/cpp/feature_test#cpp_lib_source_location) instead...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:535,availability,error,error,535,> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/191362/console). > ### Errors:. > . > * [2023-12-13T16:51:50.723Z] FAILED: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/ValuePrinter.cpp.o. > . > * [2023-12-13T16:51:50.723Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:44:10: fatal error: 'source_location' file not found. This needs to be understood as well; maybe the SDK doesn't have all C++20 headers yet? Maybe we have to use the feature macro [`__cpp_lib_source_location`](https://en.cppreference.com/w/cpp/feature_test#cpp_lib_source_location) instead...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:2,deployability,Build,Build,2,> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/191362/console). > ### Errors:. > . > * [2023-12-13T16:51:50.723Z] FAILED: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/ValuePrinter.cpp.o. > . > * [2023-12-13T16:51:50.723Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:44:10: fatal error: 'source_location' file not found. This needs to be understood as well; maybe the SDK doesn't have all C++20 headers yet? Maybe we have to use the feature macro [`__cpp_lib_source_location`](https://en.cppreference.com/w/cpp/feature_test#cpp_lib_source_location) instead...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:8,deployability,fail,failed,8,> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/191362/console). > ### Errors:. > . > * [2023-12-13T16:51:50.723Z] FAILED: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/ValuePrinter.cpp.o. > . > * [2023-12-13T16:51:50.723Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:44:10: fatal error: 'source_location' file not found. This needs to be understood as well; maybe the SDK doesn't have all C++20 headers yet? Maybe we have to use the feature macro [`__cpp_lib_source_location`](https://en.cppreference.com/w/cpp/feature_test#cpp_lib_source_location) instead...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:76,deployability,build,build,76,> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/191362/console). > ### Errors:. > . > * [2023-12-13T16:51:50.723Z] FAILED: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/ValuePrinter.cpp.o. > . > * [2023-12-13T16:51:50.723Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:44:10: fatal error: 'source_location' file not found. This needs to be understood as well; maybe the SDK doesn't have all C++20 headers yet? Maybe we have to use the feature macro [`__cpp_lib_source_location`](https://en.cppreference.com/w/cpp/feature_test#cpp_lib_source_location) instead...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:110,deployability,build,build,110,> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/191362/console). > ### Errors:. > . > * [2023-12-13T16:51:50.723Z] FAILED: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/ValuePrinter.cpp.o. > . > * [2023-12-13T16:51:50.723Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:44:10: fatal error: 'source_location' file not found. This needs to be understood as well; maybe the SDK doesn't have all C++20 headers yet? Maybe we have to use the feature macro [`__cpp_lib_source_location`](https://en.cppreference.com/w/cpp/feature_test#cpp_lib_source_location) instead...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:152,deployability,servic,services,152,> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/191362/console). > ### Errors:. > . > * [2023-12-13T16:51:50.723Z] FAILED: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/ValuePrinter.cpp.o. > . > * [2023-12-13T16:51:50.723Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:44:10: fatal error: 'source_location' file not found. This needs to be understood as well; maybe the SDK doesn't have all C++20 headers yet? Maybe we have to use the feature macro [`__cpp_lib_source_location`](https://en.cppreference.com/w/cpp/feature_test#cpp_lib_source_location) instead...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:204,deployability,build,build,204,> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/191362/console). > ### Errors:. > . > * [2023-12-13T16:51:50.723Z] FAILED: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/ValuePrinter.cpp.o. > . > * [2023-12-13T16:51:50.723Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:44:10: fatal error: 'source_location' file not found. This needs to be understood as well; maybe the SDK doesn't have all C++20 headers yet? Maybe we have to use the feature macro [`__cpp_lib_source_location`](https://en.cppreference.com/w/cpp/feature_test#cpp_lib_source_location) instead...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:277,deployability,FAIL,FAILED,277,> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/191362/console). > ### Errors:. > . > * [2023-12-13T16:51:50.723Z] FAILED: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/ValuePrinter.cpp.o. > . > * [2023-12-13T16:51:50.723Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:44:10: fatal error: 'source_location' file not found. This needs to be understood as well; maybe the SDK doesn't have all C++20 headers yet? Maybe we have to use the feature macro [`__cpp_lib_source_location`](https://en.cppreference.com/w/cpp/feature_test#cpp_lib_source_location) instead...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:426,deployability,build,build,426,> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/191362/console). > ### Errors:. > . > * [2023-12-13T16:51:50.723Z] FAILED: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/ValuePrinter.cpp.o. > . > * [2023-12-13T16:51:50.723Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:44:10: fatal error: 'source_location' file not found. This needs to be understood as well; maybe the SDK doesn't have all C++20 headers yet? Maybe we have to use the feature macro [`__cpp_lib_source_location`](https://en.cppreference.com/w/cpp/feature_test#cpp_lib_source_location) instead...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:460,deployability,build,build,460,> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/191362/console). > ### Errors:. > . > * [2023-12-13T16:51:50.723Z] FAILED: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/ValuePrinter.cpp.o. > . > * [2023-12-13T16:51:50.723Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:44:10: fatal error: 'source_location' file not found. This needs to be understood as well; maybe the SDK doesn't have all C++20 headers yet? Maybe we have to use the feature macro [`__cpp_lib_source_location`](https://en.cppreference.com/w/cpp/feature_test#cpp_lib_source_location) instead...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:152,integrability,servic,services,152,> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/191362/console). > ### Errors:. > . > * [2023-12-13T16:51:50.723Z] FAILED: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/ValuePrinter.cpp.o. > . > * [2023-12-13T16:51:50.723Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:44:10: fatal error: 'source_location' file not found. This needs to be understood as well; maybe the SDK doesn't have all C++20 headers yet? Maybe we have to use the feature macro [`__cpp_lib_source_location`](https://en.cppreference.com/w/cpp/feature_test#cpp_lib_source_location) instead...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:152,modifiability,servic,services,152,> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/191362/console). > ### Errors:. > . > * [2023-12-13T16:51:50.723Z] FAILED: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/ValuePrinter.cpp.o. > . > * [2023-12-13T16:51:50.723Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:44:10: fatal error: 'source_location' file not found. This needs to be understood as well; maybe the SDK doesn't have all C++20 headers yet? Maybe we have to use the feature macro [`__cpp_lib_source_location`](https://en.cppreference.com/w/cpp/feature_test#cpp_lib_source_location) instead...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:233,performance,Error,Errors,233,> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/191362/console). > ### Errors:. > . > * [2023-12-13T16:51:50.723Z] FAILED: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/ValuePrinter.cpp.o. > . > * [2023-12-13T16:51:50.723Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:44:10: fatal error: 'source_location' file not found. This needs to be understood as well; maybe the SDK doesn't have all C++20 headers yet? Maybe we have to use the feature macro [`__cpp_lib_source_location`](https://en.cppreference.com/w/cpp/feature_test#cpp_lib_source_location) instead...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:535,performance,error,error,535,> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/191362/console). > ### Errors:. > . > * [2023-12-13T16:51:50.723Z] FAILED: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/ValuePrinter.cpp.o. > . > * [2023-12-13T16:51:50.723Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:44:10: fatal error: 'source_location' file not found. This needs to be understood as well; maybe the SDK doesn't have all C++20 headers yet? Maybe we have to use the feature macro [`__cpp_lib_source_location`](https://en.cppreference.com/w/cpp/feature_test#cpp_lib_source_location) instead...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:8,reliability,fail,failed,8,> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/191362/console). > ### Errors:. > . > * [2023-12-13T16:51:50.723Z] FAILED: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/ValuePrinter.cpp.o. > . > * [2023-12-13T16:51:50.723Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:44:10: fatal error: 'source_location' file not found. This needs to be understood as well; maybe the SDK doesn't have all C++20 headers yet? Maybe we have to use the feature macro [`__cpp_lib_source_location`](https://en.cppreference.com/w/cpp/feature_test#cpp_lib_source_location) instead...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:277,reliability,FAIL,FAILED,277,> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/191362/console). > ### Errors:. > . > * [2023-12-13T16:51:50.723Z] FAILED: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/ValuePrinter.cpp.o. > . > * [2023-12-13T16:51:50.723Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:44:10: fatal error: 'source_location' file not found. This needs to be understood as well; maybe the SDK doesn't have all C++20 headers yet? Maybe we have to use the feature macro [`__cpp_lib_source_location`](https://en.cppreference.com/w/cpp/feature_test#cpp_lib_source_location) instead...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:627,reliability,doe,doesn,627,> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/191362/console). > ### Errors:. > . > * [2023-12-13T16:51:50.723Z] FAILED: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/ValuePrinter.cpp.o. > . > * [2023-12-13T16:51:50.723Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:44:10: fatal error: 'source_location' file not found. This needs to be understood as well; maybe the SDK doesn't have all C++20 headers yet? Maybe we have to use the feature macro [`__cpp_lib_source_location`](https://en.cppreference.com/w/cpp/feature_test#cpp_lib_source_location) instead...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:233,safety,Error,Errors,233,> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/191362/console). > ### Errors:. > . > * [2023-12-13T16:51:50.723Z] FAILED: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/ValuePrinter.cpp.o. > . > * [2023-12-13T16:51:50.723Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:44:10: fatal error: 'source_location' file not found. This needs to be understood as well; maybe the SDK doesn't have all C++20 headers yet? Maybe we have to use the feature macro [`__cpp_lib_source_location`](https://en.cppreference.com/w/cpp/feature_test#cpp_lib_source_location) instead...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:535,safety,error,error,535,> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/191362/console). > ### Errors:. > . > * [2023-12-13T16:51:50.723Z] FAILED: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/ValuePrinter.cpp.o. > . > * [2023-12-13T16:51:50.723Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:44:10: fatal error: 'source_location' file not found. This needs to be understood as well; maybe the SDK doesn't have all C++20 headers yet? Maybe we have to use the feature macro [`__cpp_lib_source_location`](https://en.cppreference.com/w/cpp/feature_test#cpp_lib_source_location) instead...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:61,usability,User,Users,61,> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/191362/console). > ### Errors:. > . > * [2023-12-13T16:51:50.723Z] FAILED: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/ValuePrinter.cpp.o. > . > * [2023-12-13T16:51:50.723Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:44:10: fatal error: 'source_location' file not found. This needs to be understood as well; maybe the SDK doesn't have all C++20 headers yet? Maybe we have to use the feature macro [`__cpp_lib_source_location`](https://en.cppreference.com/w/cpp/feature_test#cpp_lib_source_location) instead...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:233,usability,Error,Errors,233,> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/191362/console). > ### Errors:. > . > * [2023-12-13T16:51:50.723Z] FAILED: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/ValuePrinter.cpp.o. > . > * [2023-12-13T16:51:50.723Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:44:10: fatal error: 'source_location' file not found. This needs to be understood as well; maybe the SDK doesn't have all C++20 headers yet? Maybe we have to use the feature macro [`__cpp_lib_source_location`](https://en.cppreference.com/w/cpp/feature_test#cpp_lib_source_location) instead...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:411,usability,User,Users,411,> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/191362/console). > ### Errors:. > . > * [2023-12-13T16:51:50.723Z] FAILED: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/ValuePrinter.cpp.o. > . > * [2023-12-13T16:51:50.723Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:44:10: fatal error: 'source_location' file not found. This needs to be understood as well; maybe the SDK doesn't have all C++20 headers yet? Maybe we have to use the feature macro [`__cpp_lib_source_location`](https://en.cppreference.com/w/cpp/feature_test#cpp_lib_source_location) instead...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:535,usability,error,error,535,> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/191362/console). > ### Errors:. > . > * [2023-12-13T16:51:50.723Z] FAILED: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/ValuePrinter.cpp.o. > . > * [2023-12-13T16:51:50.723Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:44:10: fatal error: 'source_location' file not found. This needs to be understood as well; maybe the SDK doesn't have all C++20 headers yet? Maybe we have to use the feature macro [`__cpp_lib_source_location`](https://en.cppreference.com/w/cpp/feature_test#cpp_lib_source_location) instead...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:71,deployability,build,builds,71,Still need to find a way to disable `source_location` test for <=C++17 builds of Cling.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:54,safety,test,test,54,Still need to find a way to disable `source_location` test for <=C++17 builds of Cling.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:54,testability,test,test,54,Still need to find a way to disable `source_location` test for <=C++17 builds of Cling.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:90,availability,avail,available,90,"> It would be good to have a test for this. May need a bit of work to only run with C++20 available... `// UNSUPPORTED: c++03, c++11, c++14, c++17` already works out of the box for the lit test. We will still need to check for the feature macro __cpp_lib_source_location to ensure the feature exist. EDIT: I was wrong about it working out of the box. The feature already exist for libcxx in llvm and we might have to duplicate the same. For now, a conditional check prevents the test from failing if the feature doesn't exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:489,deployability,fail,failing,489,"> It would be good to have a test for this. May need a bit of work to only run with C++20 available... `// UNSUPPORTED: c++03, c++11, c++14, c++17` already works out of the box for the lit test. We will still need to check for the feature macro __cpp_lib_source_location to ensure the feature exist. EDIT: I was wrong about it working out of the box. The feature already exist for libcxx in llvm and we might have to duplicate the same. For now, a conditional check prevents the test from failing if the feature doesn't exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:90,reliability,availab,available,90,"> It would be good to have a test for this. May need a bit of work to only run with C++20 available... `// UNSUPPORTED: c++03, c++11, c++14, c++17` already works out of the box for the lit test. We will still need to check for the feature macro __cpp_lib_source_location to ensure the feature exist. EDIT: I was wrong about it working out of the box. The feature already exist for libcxx in llvm and we might have to duplicate the same. For now, a conditional check prevents the test from failing if the feature doesn't exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:489,reliability,fail,failing,489,"> It would be good to have a test for this. May need a bit of work to only run with C++20 available... `// UNSUPPORTED: c++03, c++11, c++14, c++17` already works out of the box for the lit test. We will still need to check for the feature macro __cpp_lib_source_location to ensure the feature exist. EDIT: I was wrong about it working out of the box. The feature already exist for libcxx in llvm and we might have to duplicate the same. For now, a conditional check prevents the test from failing if the feature doesn't exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:512,reliability,doe,doesn,512,"> It would be good to have a test for this. May need a bit of work to only run with C++20 available... `// UNSUPPORTED: c++03, c++11, c++14, c++17` already works out of the box for the lit test. We will still need to check for the feature macro __cpp_lib_source_location to ensure the feature exist. EDIT: I was wrong about it working out of the box. The feature already exist for libcxx in llvm and we might have to duplicate the same. For now, a conditional check prevents the test from failing if the feature doesn't exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:29,safety,test,test,29,"> It would be good to have a test for this. May need a bit of work to only run with C++20 available... `// UNSUPPORTED: c++03, c++11, c++14, c++17` already works out of the box for the lit test. We will still need to check for the feature macro __cpp_lib_source_location to ensure the feature exist. EDIT: I was wrong about it working out of the box. The feature already exist for libcxx in llvm and we might have to duplicate the same. For now, a conditional check prevents the test from failing if the feature doesn't exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:90,safety,avail,available,90,"> It would be good to have a test for this. May need a bit of work to only run with C++20 available... `// UNSUPPORTED: c++03, c++11, c++14, c++17` already works out of the box for the lit test. We will still need to check for the feature macro __cpp_lib_source_location to ensure the feature exist. EDIT: I was wrong about it working out of the box. The feature already exist for libcxx in llvm and we might have to duplicate the same. For now, a conditional check prevents the test from failing if the feature doesn't exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:189,safety,test,test,189,"> It would be good to have a test for this. May need a bit of work to only run with C++20 available... `// UNSUPPORTED: c++03, c++11, c++14, c++17` already works out of the box for the lit test. We will still need to check for the feature macro __cpp_lib_source_location to ensure the feature exist. EDIT: I was wrong about it working out of the box. The feature already exist for libcxx in llvm and we might have to duplicate the same. For now, a conditional check prevents the test from failing if the feature doesn't exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:466,safety,prevent,prevents,466,"> It would be good to have a test for this. May need a bit of work to only run with C++20 available... `// UNSUPPORTED: c++03, c++11, c++14, c++17` already works out of the box for the lit test. We will still need to check for the feature macro __cpp_lib_source_location to ensure the feature exist. EDIT: I was wrong about it working out of the box. The feature already exist for libcxx in llvm and we might have to duplicate the same. For now, a conditional check prevents the test from failing if the feature doesn't exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:479,safety,test,test,479,"> It would be good to have a test for this. May need a bit of work to only run with C++20 available... `// UNSUPPORTED: c++03, c++11, c++14, c++17` already works out of the box for the lit test. We will still need to check for the feature macro __cpp_lib_source_location to ensure the feature exist. EDIT: I was wrong about it working out of the box. The feature already exist for libcxx in llvm and we might have to duplicate the same. For now, a conditional check prevents the test from failing if the feature doesn't exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:90,security,availab,available,90,"> It would be good to have a test for this. May need a bit of work to only run with C++20 available... `// UNSUPPORTED: c++03, c++11, c++14, c++17` already works out of the box for the lit test. We will still need to check for the feature macro __cpp_lib_source_location to ensure the feature exist. EDIT: I was wrong about it working out of the box. The feature already exist for libcxx in llvm and we might have to duplicate the same. For now, a conditional check prevents the test from failing if the feature doesn't exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:466,security,preven,prevents,466,"> It would be good to have a test for this. May need a bit of work to only run with C++20 available... `// UNSUPPORTED: c++03, c++11, c++14, c++17` already works out of the box for the lit test. We will still need to check for the feature macro __cpp_lib_source_location to ensure the feature exist. EDIT: I was wrong about it working out of the box. The feature already exist for libcxx in llvm and we might have to duplicate the same. For now, a conditional check prevents the test from failing if the feature doesn't exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:29,testability,test,test,29,"> It would be good to have a test for this. May need a bit of work to only run with C++20 available... `// UNSUPPORTED: c++03, c++11, c++14, c++17` already works out of the box for the lit test. We will still need to check for the feature macro __cpp_lib_source_location to ensure the feature exist. EDIT: I was wrong about it working out of the box. The feature already exist for libcxx in llvm and we might have to duplicate the same. For now, a conditional check prevents the test from failing if the feature doesn't exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:189,testability,test,test,189,"> It would be good to have a test for this. May need a bit of work to only run with C++20 available... `// UNSUPPORTED: c++03, c++11, c++14, c++17` already works out of the box for the lit test. We will still need to check for the feature macro __cpp_lib_source_location to ensure the feature exist. EDIT: I was wrong about it working out of the box. The feature already exist for libcxx in llvm and we might have to duplicate the same. For now, a conditional check prevents the test from failing if the feature doesn't exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:479,testability,test,test,479,"> It would be good to have a test for this. May need a bit of work to only run with C++20 available... `// UNSUPPORTED: c++03, c++11, c++14, c++17` already works out of the box for the lit test. We will still need to check for the feature macro __cpp_lib_source_location to ensure the feature exist. EDIT: I was wrong about it working out of the box. The feature already exist for libcxx in llvm and we might have to duplicate the same. For now, a conditional check prevents the test from failing if the feature doesn't exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/issues/14223:145,availability,slo,slow,145,"Hi @MarkusFrankATcernch ,. I am sorry you experienced this issue. We know that importing ROOT using LCG releases, perhaps on lxplus nodes can be slow. For this reason, we implemented a first pack of optimisations in PyROOT for the ROOT release 6.30. Unfortunately, this is not available yet in any LCG stack. Is it easy for you to perform the same measurement with a dev3 lcg stack? That would allow you to use ROOT master and benefit from the latest optimisations. I know this might not be a solution to the problem you report, but it might be a start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:277,availability,avail,available,277,"Hi @MarkusFrankATcernch ,. I am sorry you experienced this issue. We know that importing ROOT using LCG releases, perhaps on lxplus nodes can be slow. For this reason, we implemented a first pack of optimisations in PyROOT for the ROOT release 6.30. Unfortunately, this is not available yet in any LCG stack. Is it easy for you to perform the same measurement with a dev3 lcg stack? That would allow you to use ROOT master and benefit from the latest optimisations. I know this might not be a solution to the problem you report, but it might be a start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:104,deployability,releas,releases,104,"Hi @MarkusFrankATcernch ,. I am sorry you experienced this issue. We know that importing ROOT using LCG releases, perhaps on lxplus nodes can be slow. For this reason, we implemented a first pack of optimisations in PyROOT for the ROOT release 6.30. Unfortunately, this is not available yet in any LCG stack. Is it easy for you to perform the same measurement with a dev3 lcg stack? That would allow you to use ROOT master and benefit from the latest optimisations. I know this might not be a solution to the problem you report, but it might be a start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:236,deployability,releas,release,236,"Hi @MarkusFrankATcernch ,. I am sorry you experienced this issue. We know that importing ROOT using LCG releases, perhaps on lxplus nodes can be slow. For this reason, we implemented a first pack of optimisations in PyROOT for the ROOT release 6.30. Unfortunately, this is not available yet in any LCG stack. Is it easy for you to perform the same measurement with a dev3 lcg stack? That would allow you to use ROOT master and benefit from the latest optimisations. I know this might not be a solution to the problem you report, but it might be a start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:302,deployability,stack,stack,302,"Hi @MarkusFrankATcernch ,. I am sorry you experienced this issue. We know that importing ROOT using LCG releases, perhaps on lxplus nodes can be slow. For this reason, we implemented a first pack of optimisations in PyROOT for the ROOT release 6.30. Unfortunately, this is not available yet in any LCG stack. Is it easy for you to perform the same measurement with a dev3 lcg stack? That would allow you to use ROOT master and benefit from the latest optimisations. I know this might not be a solution to the problem you report, but it might be a start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:376,deployability,stack,stack,376,"Hi @MarkusFrankATcernch ,. I am sorry you experienced this issue. We know that importing ROOT using LCG releases, perhaps on lxplus nodes can be slow. For this reason, we implemented a first pack of optimisations in PyROOT for the ROOT release 6.30. Unfortunately, this is not available yet in any LCG stack. Is it easy for you to perform the same measurement with a dev3 lcg stack? That would allow you to use ROOT master and benefit from the latest optimisations. I know this might not be a solution to the problem you report, but it might be a start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:199,energy efficiency,optim,optimisations,199,"Hi @MarkusFrankATcernch ,. I am sorry you experienced this issue. We know that importing ROOT using LCG releases, perhaps on lxplus nodes can be slow. For this reason, we implemented a first pack of optimisations in PyROOT for the ROOT release 6.30. Unfortunately, this is not available yet in any LCG stack. Is it easy for you to perform the same measurement with a dev3 lcg stack? That would allow you to use ROOT master and benefit from the latest optimisations. I know this might not be a solution to the problem you report, but it might be a start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:348,energy efficiency,measur,measurement,348,"Hi @MarkusFrankATcernch ,. I am sorry you experienced this issue. We know that importing ROOT using LCG releases, perhaps on lxplus nodes can be slow. For this reason, we implemented a first pack of optimisations in PyROOT for the ROOT release 6.30. Unfortunately, this is not available yet in any LCG stack. Is it easy for you to perform the same measurement with a dev3 lcg stack? That would allow you to use ROOT master and benefit from the latest optimisations. I know this might not be a solution to the problem you report, but it might be a start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:451,energy efficiency,optim,optimisations,451,"Hi @MarkusFrankATcernch ,. I am sorry you experienced this issue. We know that importing ROOT using LCG releases, perhaps on lxplus nodes can be slow. For this reason, we implemented a first pack of optimisations in PyROOT for the ROOT release 6.30. Unfortunately, this is not available yet in any LCG stack. Is it easy for you to perform the same measurement with a dev3 lcg stack? That would allow you to use ROOT master and benefit from the latest optimisations. I know this might not be a solution to the problem you report, but it might be a start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:191,modifiability,pac,pack,191,"Hi @MarkusFrankATcernch ,. I am sorry you experienced this issue. We know that importing ROOT using LCG releases, perhaps on lxplus nodes can be slow. For this reason, we implemented a first pack of optimisations in PyROOT for the ROOT release 6.30. Unfortunately, this is not available yet in any LCG stack. Is it easy for you to perform the same measurement with a dev3 lcg stack? That would allow you to use ROOT master and benefit from the latest optimisations. I know this might not be a solution to the problem you report, but it might be a start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:331,performance,perform,perform,331,"Hi @MarkusFrankATcernch ,. I am sorry you experienced this issue. We know that importing ROOT using LCG releases, perhaps on lxplus nodes can be slow. For this reason, we implemented a first pack of optimisations in PyROOT for the ROOT release 6.30. Unfortunately, this is not available yet in any LCG stack. Is it easy for you to perform the same measurement with a dev3 lcg stack? That would allow you to use ROOT master and benefit from the latest optimisations. I know this might not be a solution to the problem you report, but it might be a start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:145,reliability,slo,slow,145,"Hi @MarkusFrankATcernch ,. I am sorry you experienced this issue. We know that importing ROOT using LCG releases, perhaps on lxplus nodes can be slow. For this reason, we implemented a first pack of optimisations in PyROOT for the ROOT release 6.30. Unfortunately, this is not available yet in any LCG stack. Is it easy for you to perform the same measurement with a dev3 lcg stack? That would allow you to use ROOT master and benefit from the latest optimisations. I know this might not be a solution to the problem you report, but it might be a start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:277,reliability,availab,available,277,"Hi @MarkusFrankATcernch ,. I am sorry you experienced this issue. We know that importing ROOT using LCG releases, perhaps on lxplus nodes can be slow. For this reason, we implemented a first pack of optimisations in PyROOT for the ROOT release 6.30. Unfortunately, this is not available yet in any LCG stack. Is it easy for you to perform the same measurement with a dev3 lcg stack? That would allow you to use ROOT master and benefit from the latest optimisations. I know this might not be a solution to the problem you report, but it might be a start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:277,safety,avail,available,277,"Hi @MarkusFrankATcernch ,. I am sorry you experienced this issue. We know that importing ROOT using LCG releases, perhaps on lxplus nodes can be slow. For this reason, we implemented a first pack of optimisations in PyROOT for the ROOT release 6.30. Unfortunately, this is not available yet in any LCG stack. Is it easy for you to perform the same measurement with a dev3 lcg stack? That would allow you to use ROOT master and benefit from the latest optimisations. I know this might not be a solution to the problem you report, but it might be a start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:277,security,availab,available,277,"Hi @MarkusFrankATcernch ,. I am sorry you experienced this issue. We know that importing ROOT using LCG releases, perhaps on lxplus nodes can be slow. For this reason, we implemented a first pack of optimisations in PyROOT for the ROOT release 6.30. Unfortunately, this is not available yet in any LCG stack. Is it easy for you to perform the same measurement with a dev3 lcg stack? That would allow you to use ROOT master and benefit from the latest optimisations. I know this might not be a solution to the problem you report, but it might be a start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:42,usability,experien,experienced,42,"Hi @MarkusFrankATcernch ,. I am sorry you experienced this issue. We know that importing ROOT using LCG releases, perhaps on lxplus nodes can be slow. For this reason, we implemented a first pack of optimisations in PyROOT for the ROOT release 6.30. Unfortunately, this is not available yet in any LCG stack. Is it easy for you to perform the same measurement with a dev3 lcg stack? That would allow you to use ROOT master and benefit from the latest optimisations. I know this might not be a solution to the problem you report, but it might be a start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:331,usability,perform,perform,331,"Hi @MarkusFrankATcernch ,. I am sorry you experienced this issue. We know that importing ROOT using LCG releases, perhaps on lxplus nodes can be slow. For this reason, we implemented a first pack of optimisations in PyROOT for the ROOT release 6.30. Unfortunately, this is not available yet in any LCG stack. Is it easy for you to perform the same measurement with a dev3 lcg stack? That would allow you to use ROOT master and benefit from the latest optimisations. I know this might not be a solution to the problem you report, but it might be a start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:190,deployability,build,build,190,"Hi @dpiparo,. the problem is not the top-short-term fix, but the longer term. I started to see this behavior in summer and reported it to Axel, when I could not use the LCG views anymore to build dd4hep. Unfortunately Axel was highly busy since and I am glad you now take care! However, now I also start seeing the behavior also in the LHCb-online nightly builds, because tests sometimes tend to fail, because images activated from python using pyROOT simetimes take several 100 seconds (I have set the timeout now to 300 seconds) to start up. This is not really good anymore given that the dictionaries for these apps are far from gigantic and starting (during the same test run) the same app using some kind of ini files does not at all suffer from this problem. Tell me if I should test using a private build with root master. Markus.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:356,deployability,build,builds,356,"Hi @dpiparo,. the problem is not the top-short-term fix, but the longer term. I started to see this behavior in summer and reported it to Axel, when I could not use the LCG views anymore to build dd4hep. Unfortunately Axel was highly busy since and I am glad you now take care! However, now I also start seeing the behavior also in the LHCb-online nightly builds, because tests sometimes tend to fail, because images activated from python using pyROOT simetimes take several 100 seconds (I have set the timeout now to 300 seconds) to start up. This is not really good anymore given that the dictionaries for these apps are far from gigantic and starting (during the same test run) the same app using some kind of ini files does not at all suffer from this problem. Tell me if I should test using a private build with root master. Markus.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:396,deployability,fail,fail,396,"Hi @dpiparo,. the problem is not the top-short-term fix, but the longer term. I started to see this behavior in summer and reported it to Axel, when I could not use the LCG views anymore to build dd4hep. Unfortunately Axel was highly busy since and I am glad you now take care! However, now I also start seeing the behavior also in the LHCb-online nightly builds, because tests sometimes tend to fail, because images activated from python using pyROOT simetimes take several 100 seconds (I have set the timeout now to 300 seconds) to start up. This is not really good anymore given that the dictionaries for these apps are far from gigantic and starting (during the same test run) the same app using some kind of ini files does not at all suffer from this problem. Tell me if I should test using a private build with root master. Markus.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:806,deployability,build,build,806,"Hi @dpiparo,. the problem is not the top-short-term fix, but the longer term. I started to see this behavior in summer and reported it to Axel, when I could not use the LCG views anymore to build dd4hep. Unfortunately Axel was highly busy since and I am glad you now take care! However, now I also start seeing the behavior also in the LHCb-online nightly builds, because tests sometimes tend to fail, because images activated from python using pyROOT simetimes take several 100 seconds (I have set the timeout now to 300 seconds) to start up. This is not really good anymore given that the dictionaries for these apps are far from gigantic and starting (during the same test run) the same app using some kind of ini files does not at all suffer from this problem. Tell me if I should test using a private build with root master. Markus.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:503,performance,time,timeout,503,"Hi @dpiparo,. the problem is not the top-short-term fix, but the longer term. I started to see this behavior in summer and reported it to Axel, when I could not use the LCG views anymore to build dd4hep. Unfortunately Axel was highly busy since and I am glad you now take care! However, now I also start seeing the behavior also in the LHCb-online nightly builds, because tests sometimes tend to fail, because images activated from python using pyROOT simetimes take several 100 seconds (I have set the timeout now to 300 seconds) to start up. This is not really good anymore given that the dictionaries for these apps are far from gigantic and starting (during the same test run) the same app using some kind of ini files does not at all suffer from this problem. Tell me if I should test using a private build with root master. Markus.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:396,reliability,fail,fail,396,"Hi @dpiparo,. the problem is not the top-short-term fix, but the longer term. I started to see this behavior in summer and reported it to Axel, when I could not use the LCG views anymore to build dd4hep. Unfortunately Axel was highly busy since and I am glad you now take care! However, now I also start seeing the behavior also in the LHCb-online nightly builds, because tests sometimes tend to fail, because images activated from python using pyROOT simetimes take several 100 seconds (I have set the timeout now to 300 seconds) to start up. This is not really good anymore given that the dictionaries for these apps are far from gigantic and starting (during the same test run) the same app using some kind of ini files does not at all suffer from this problem. Tell me if I should test using a private build with root master. Markus.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:723,reliability,doe,does,723,"Hi @dpiparo,. the problem is not the top-short-term fix, but the longer term. I started to see this behavior in summer and reported it to Axel, when I could not use the LCG views anymore to build dd4hep. Unfortunately Axel was highly busy since and I am glad you now take care! However, now I also start seeing the behavior also in the LHCb-online nightly builds, because tests sometimes tend to fail, because images activated from python using pyROOT simetimes take several 100 seconds (I have set the timeout now to 300 seconds) to start up. This is not really good anymore given that the dictionaries for these apps are far from gigantic and starting (during the same test run) the same app using some kind of ini files does not at all suffer from this problem. Tell me if I should test using a private build with root master. Markus.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:372,safety,test,tests,372,"Hi @dpiparo,. the problem is not the top-short-term fix, but the longer term. I started to see this behavior in summer and reported it to Axel, when I could not use the LCG views anymore to build dd4hep. Unfortunately Axel was highly busy since and I am glad you now take care! However, now I also start seeing the behavior also in the LHCb-online nightly builds, because tests sometimes tend to fail, because images activated from python using pyROOT simetimes take several 100 seconds (I have set the timeout now to 300 seconds) to start up. This is not really good anymore given that the dictionaries for these apps are far from gigantic and starting (during the same test run) the same app using some kind of ini files does not at all suffer from this problem. Tell me if I should test using a private build with root master. Markus.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:503,safety,timeout,timeout,503,"Hi @dpiparo,. the problem is not the top-short-term fix, but the longer term. I started to see this behavior in summer and reported it to Axel, when I could not use the LCG views anymore to build dd4hep. Unfortunately Axel was highly busy since and I am glad you now take care! However, now I also start seeing the behavior also in the LHCb-online nightly builds, because tests sometimes tend to fail, because images activated from python using pyROOT simetimes take several 100 seconds (I have set the timeout now to 300 seconds) to start up. This is not really good anymore given that the dictionaries for these apps are far from gigantic and starting (during the same test run) the same app using some kind of ini files does not at all suffer from this problem. Tell me if I should test using a private build with root master. Markus.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:671,safety,test,test,671,"Hi @dpiparo,. the problem is not the top-short-term fix, but the longer term. I started to see this behavior in summer and reported it to Axel, when I could not use the LCG views anymore to build dd4hep. Unfortunately Axel was highly busy since and I am glad you now take care! However, now I also start seeing the behavior also in the LHCb-online nightly builds, because tests sometimes tend to fail, because images activated from python using pyROOT simetimes take several 100 seconds (I have set the timeout now to 300 seconds) to start up. This is not really good anymore given that the dictionaries for these apps are far from gigantic and starting (during the same test run) the same app using some kind of ini files does not at all suffer from this problem. Tell me if I should test using a private build with root master. Markus.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:785,safety,test,test,785,"Hi @dpiparo,. the problem is not the top-short-term fix, but the longer term. I started to see this behavior in summer and reported it to Axel, when I could not use the LCG views anymore to build dd4hep. Unfortunately Axel was highly busy since and I am glad you now take care! However, now I also start seeing the behavior also in the LHCb-online nightly builds, because tests sometimes tend to fail, because images activated from python using pyROOT simetimes take several 100 seconds (I have set the timeout now to 300 seconds) to start up. This is not really good anymore given that the dictionaries for these apps are far from gigantic and starting (during the same test run) the same app using some kind of ini files does not at all suffer from this problem. Tell me if I should test using a private build with root master. Markus.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:372,testability,test,tests,372,"Hi @dpiparo,. the problem is not the top-short-term fix, but the longer term. I started to see this behavior in summer and reported it to Axel, when I could not use the LCG views anymore to build dd4hep. Unfortunately Axel was highly busy since and I am glad you now take care! However, now I also start seeing the behavior also in the LHCb-online nightly builds, because tests sometimes tend to fail, because images activated from python using pyROOT simetimes take several 100 seconds (I have set the timeout now to 300 seconds) to start up. This is not really good anymore given that the dictionaries for these apps are far from gigantic and starting (during the same test run) the same app using some kind of ini files does not at all suffer from this problem. Tell me if I should test using a private build with root master. Markus.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:671,testability,test,test,671,"Hi @dpiparo,. the problem is not the top-short-term fix, but the longer term. I started to see this behavior in summer and reported it to Axel, when I could not use the LCG views anymore to build dd4hep. Unfortunately Axel was highly busy since and I am glad you now take care! However, now I also start seeing the behavior also in the LHCb-online nightly builds, because tests sometimes tend to fail, because images activated from python using pyROOT simetimes take several 100 seconds (I have set the timeout now to 300 seconds) to start up. This is not really good anymore given that the dictionaries for these apps are far from gigantic and starting (during the same test run) the same app using some kind of ini files does not at all suffer from this problem. Tell me if I should test using a private build with root master. Markus.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:785,testability,test,test,785,"Hi @dpiparo,. the problem is not the top-short-term fix, but the longer term. I started to see this behavior in summer and reported it to Axel, when I could not use the LCG views anymore to build dd4hep. Unfortunately Axel was highly busy since and I am glad you now take care! However, now I also start seeing the behavior also in the LHCb-online nightly builds, because tests sometimes tend to fail, because images activated from python using pyROOT simetimes take several 100 seconds (I have set the timeout now to 300 seconds) to start up. This is not really good anymore given that the dictionaries for these apps are far from gigantic and starting (during the same test run) the same app using some kind of ini files does not at all suffer from this problem. Tell me if I should test using a private build with root master. Markus.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:100,usability,behavi,behavior,100,"Hi @dpiparo,. the problem is not the top-short-term fix, but the longer term. I started to see this behavior in summer and reported it to Axel, when I could not use the LCG views anymore to build dd4hep. Unfortunately Axel was highly busy since and I am glad you now take care! However, now I also start seeing the behavior also in the LHCb-online nightly builds, because tests sometimes tend to fail, because images activated from python using pyROOT simetimes take several 100 seconds (I have set the timeout now to 300 seconds) to start up. This is not really good anymore given that the dictionaries for these apps are far from gigantic and starting (during the same test run) the same app using some kind of ini files does not at all suffer from this problem. Tell me if I should test using a private build with root master. Markus.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:315,usability,behavi,behavior,315,"Hi @dpiparo,. the problem is not the top-short-term fix, but the longer term. I started to see this behavior in summer and reported it to Axel, when I could not use the LCG views anymore to build dd4hep. Unfortunately Axel was highly busy since and I am glad you now take care! However, now I also start seeing the behavior also in the LHCb-online nightly builds, because tests sometimes tend to fail, because images activated from python using pyROOT simetimes take several 100 seconds (I have set the timeout now to 300 seconds) to start up. This is not really good anymore given that the dictionaries for these apps are far from gigantic and starting (during the same test run) the same app using some kind of ini files does not at all suffer from this problem. Tell me if I should test using a private build with root master. Markus.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:31,security,sign,significant,31,@MarkusFrankATcernch There was significant progress in this area recently in the master. Can you check if you are still seeing this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:43,usability,progress,progress,43,@MarkusFrankATcernch There was significant progress in this area recently in the master. Can you check if you are still seeing this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:93,availability,slo,slot,93,"@pcanal From what I see in the nightly builds, things have significantly improved in the dev slot. This kind of timeout seems to have disappeared. Hence, for me this looks fine. I think this issue may be closed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:39,deployability,build,builds,39,"@pcanal From what I see in the nightly builds, things have significantly improved in the dev slot. This kind of timeout seems to have disappeared. Hence, for me this looks fine. I think this issue may be closed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:112,performance,time,timeout,112,"@pcanal From what I see in the nightly builds, things have significantly improved in the dev slot. This kind of timeout seems to have disappeared. Hence, for me this looks fine. I think this issue may be closed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:93,reliability,slo,slot,93,"@pcanal From what I see in the nightly builds, things have significantly improved in the dev slot. This kind of timeout seems to have disappeared. Hence, for me this looks fine. I think this issue may be closed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:112,safety,timeout,timeout,112,"@pcanal From what I see in the nightly builds, things have significantly improved in the dev slot. This kind of timeout seems to have disappeared. Hence, for me this looks fine. I think this issue may be closed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:59,security,sign,significantly,59,"@pcanal From what I see in the nightly builds, things have significantly improved in the dev slot. This kind of timeout seems to have disappeared. Hence, for me this looks fine. I think this issue may be closed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:204,usability,close,closed,204,"@pcanal From what I see in the nightly builds, things have significantly improved in the dev slot. This kind of timeout seems to have disappeared. Hence, for me this looks fine. I think this issue may be closed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:16,usability,help,help,16,"Thanks for your help, @MarkusFrankATcernch",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14225:6,deployability,manag,managed,6,"Hi, I managed to prepare a relatively simple code that reproduces the issue:. ```c++. void crash() {. RooStats::HistFactory::Measurement meas(""mwe"",""mwe"");. meas.SetOutputFilePrefix(""./"");. meas.SetPOI(""signalStrength"");. meas.SetLumi(1);. meas.AddConstantParam(""Lumi"");. RooStats::HistFactory::Channel chan1(""channel1"");. chan1.SetData("""","""");. RooStats::HistFactory::Sample sample1(""sample1"");. sample1.SetHistoName(""emu_OS_1b_Ma"");. sample1.SetHistoPath("""");. sample1.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample1.SetNormalizeByTheory(false);. sample1.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample1.AddNormFactor(""b"", 0.543, 0.5, 0.6);. sample1.AddOverallSys(""Dummy"",1,1);. RooStats::HistFactory::Sample sample2(""sample2"");. sample2.SetHistoName(""emu_OS_1b_Mb"");. sample2.SetHistoPath("""");. sample2.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample2.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample2.AddNormFactor(""minusONE"", -1, -1.1, -0.9);. sample2.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample2.AddOverallSys(""Dummy"",1,1);. chan1.AddSample(sample1);. chan1.AddSample(sample2);. RooStats::HistFactory::Channel chan2(""channel2"");. chan2.SetData("""","""");. RooStats::HistFactory::Sample sample3(""sample3"");. sample3.SetHistoName(""emu_OS_2b_Mc"");. sample3.SetHistoPath("""");. sample3.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample3.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample3.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample3.AddOverallSys(""Dummy"",1,1);. chan2.AddSample(sample3);. meas.AddPreprocessFunction(""b2"",""b*b"",""b[0.543,0.0,1.0]"");. meas.AddConstantParam(""minusONE"");. meas.AddChannel(chan1);. meas.AddChannel(chan2);. meas.CollectHistograms();. RooStats::HistFactory::MakeModelAndMeasurementFast(meas);. }. ```. The code and the input can be found here: `/afs/cern.ch/user/t/tdado/public/ROOT_issue_14225`. It is probably n",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:6,energy efficiency,manag,managed,6,"Hi, I managed to prepare a relatively simple code that reproduces the issue:. ```c++. void crash() {. RooStats::HistFactory::Measurement meas(""mwe"",""mwe"");. meas.SetOutputFilePrefix(""./"");. meas.SetPOI(""signalStrength"");. meas.SetLumi(1);. meas.AddConstantParam(""Lumi"");. RooStats::HistFactory::Channel chan1(""channel1"");. chan1.SetData("""","""");. RooStats::HistFactory::Sample sample1(""sample1"");. sample1.SetHistoName(""emu_OS_1b_Ma"");. sample1.SetHistoPath("""");. sample1.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample1.SetNormalizeByTheory(false);. sample1.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample1.AddNormFactor(""b"", 0.543, 0.5, 0.6);. sample1.AddOverallSys(""Dummy"",1,1);. RooStats::HistFactory::Sample sample2(""sample2"");. sample2.SetHistoName(""emu_OS_1b_Mb"");. sample2.SetHistoPath("""");. sample2.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample2.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample2.AddNormFactor(""minusONE"", -1, -1.1, -0.9);. sample2.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample2.AddOverallSys(""Dummy"",1,1);. chan1.AddSample(sample1);. chan1.AddSample(sample2);. RooStats::HistFactory::Channel chan2(""channel2"");. chan2.SetData("""","""");. RooStats::HistFactory::Sample sample3(""sample3"");. sample3.SetHistoName(""emu_OS_2b_Mc"");. sample3.SetHistoPath("""");. sample3.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample3.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample3.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample3.AddOverallSys(""Dummy"",1,1);. chan2.AddSample(sample3);. meas.AddPreprocessFunction(""b2"",""b*b"",""b[0.543,0.0,1.0]"");. meas.AddConstantParam(""minusONE"");. meas.AddChannel(chan1);. meas.AddChannel(chan2);. meas.CollectHistograms();. RooStats::HistFactory::MakeModelAndMeasurementFast(meas);. }. ```. The code and the input can be found here: `/afs/cern.ch/user/t/tdado/public/ROOT_issue_14225`. It is probably n",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:125,energy efficiency,Measur,Measurement,125,"Hi, I managed to prepare a relatively simple code that reproduces the issue:. ```c++. void crash() {. RooStats::HistFactory::Measurement meas(""mwe"",""mwe"");. meas.SetOutputFilePrefix(""./"");. meas.SetPOI(""signalStrength"");. meas.SetLumi(1);. meas.AddConstantParam(""Lumi"");. RooStats::HistFactory::Channel chan1(""channel1"");. chan1.SetData("""","""");. RooStats::HistFactory::Sample sample1(""sample1"");. sample1.SetHistoName(""emu_OS_1b_Ma"");. sample1.SetHistoPath("""");. sample1.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample1.SetNormalizeByTheory(false);. sample1.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample1.AddNormFactor(""b"", 0.543, 0.5, 0.6);. sample1.AddOverallSys(""Dummy"",1,1);. RooStats::HistFactory::Sample sample2(""sample2"");. sample2.SetHistoName(""emu_OS_1b_Mb"");. sample2.SetHistoPath("""");. sample2.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample2.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample2.AddNormFactor(""minusONE"", -1, -1.1, -0.9);. sample2.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample2.AddOverallSys(""Dummy"",1,1);. chan1.AddSample(sample1);. chan1.AddSample(sample2);. RooStats::HistFactory::Channel chan2(""channel2"");. chan2.SetData("""","""");. RooStats::HistFactory::Sample sample3(""sample3"");. sample3.SetHistoName(""emu_OS_2b_Mc"");. sample3.SetHistoPath("""");. sample3.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample3.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample3.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample3.AddOverallSys(""Dummy"",1,1);. chan2.AddSample(sample3);. meas.AddPreprocessFunction(""b2"",""b*b"",""b[0.543,0.0,1.0]"");. meas.AddConstantParam(""minusONE"");. meas.AddChannel(chan1);. meas.AddChannel(chan2);. meas.CollectHistograms();. RooStats::HistFactory::MakeModelAndMeasurementFast(meas);. }. ```. The code and the input can be found here: `/afs/cern.ch/user/t/tdado/public/ROOT_issue_14225`. It is probably n",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:2095,energy efficiency,measur,measurement,2095,"as.SetLumi(1);. meas.AddConstantParam(""Lumi"");. RooStats::HistFactory::Channel chan1(""channel1"");. chan1.SetData("""","""");. RooStats::HistFactory::Sample sample1(""sample1"");. sample1.SetHistoName(""emu_OS_1b_Ma"");. sample1.SetHistoPath("""");. sample1.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample1.SetNormalizeByTheory(false);. sample1.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample1.AddNormFactor(""b"", 0.543, 0.5, 0.6);. sample1.AddOverallSys(""Dummy"",1,1);. RooStats::HistFactory::Sample sample2(""sample2"");. sample2.SetHistoName(""emu_OS_1b_Mb"");. sample2.SetHistoPath("""");. sample2.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample2.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample2.AddNormFactor(""minusONE"", -1, -1.1, -0.9);. sample2.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample2.AddOverallSys(""Dummy"",1,1);. chan1.AddSample(sample1);. chan1.AddSample(sample2);. RooStats::HistFactory::Channel chan2(""channel2"");. chan2.SetData("""","""");. RooStats::HistFactory::Sample sample3(""sample3"");. sample3.SetHistoName(""emu_OS_2b_Mc"");. sample3.SetHistoPath("""");. sample3.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample3.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample3.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample3.AddOverallSys(""Dummy"",1,1);. chan2.AddSample(sample3);. meas.AddPreprocessFunction(""b2"",""b*b"",""b[0.543,0.0,1.0]"");. meas.AddConstantParam(""minusONE"");. meas.AddChannel(chan1);. meas.AddChannel(chan2);. meas.CollectHistograms();. RooStats::HistFactory::MakeModelAndMeasurementFast(meas);. }. ```. The code and the input can be found here: `/afs/cern.ch/user/t/tdado/public/ROOT_issue_14225`. It is probably not the simplest example, but it is realistic (the histograms and the setup come from an actual measurement). Note that using only the first channel does _not_ lead to a crash. I hope this helps, let me know if I can do more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:1958,integrability,pub,public,1958,"as.SetLumi(1);. meas.AddConstantParam(""Lumi"");. RooStats::HistFactory::Channel chan1(""channel1"");. chan1.SetData("""","""");. RooStats::HistFactory::Sample sample1(""sample1"");. sample1.SetHistoName(""emu_OS_1b_Ma"");. sample1.SetHistoPath("""");. sample1.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample1.SetNormalizeByTheory(false);. sample1.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample1.AddNormFactor(""b"", 0.543, 0.5, 0.6);. sample1.AddOverallSys(""Dummy"",1,1);. RooStats::HistFactory::Sample sample2(""sample2"");. sample2.SetHistoName(""emu_OS_1b_Mb"");. sample2.SetHistoPath("""");. sample2.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample2.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample2.AddNormFactor(""minusONE"", -1, -1.1, -0.9);. sample2.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample2.AddOverallSys(""Dummy"",1,1);. chan1.AddSample(sample1);. chan1.AddSample(sample2);. RooStats::HistFactory::Channel chan2(""channel2"");. chan2.SetData("""","""");. RooStats::HistFactory::Sample sample3(""sample3"");. sample3.SetHistoName(""emu_OS_2b_Mc"");. sample3.SetHistoPath("""");. sample3.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample3.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample3.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample3.AddOverallSys(""Dummy"",1,1);. chan2.AddSample(sample3);. meas.AddPreprocessFunction(""b2"",""b*b"",""b[0.543,0.0,1.0]"");. meas.AddConstantParam(""minusONE"");. meas.AddChannel(chan1);. meas.AddChannel(chan2);. meas.CollectHistograms();. RooStats::HistFactory::MakeModelAndMeasurementFast(meas);. }. ```. The code and the input can be found here: `/afs/cern.ch/user/t/tdado/public/ROOT_issue_14225`. It is probably not the simplest example, but it is realistic (the histograms and the setup come from an actual measurement). Note that using only the first channel does _not_ lead to a crash. I hope this helps, let me know if I can do more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:2148,reliability,doe,does,2148,"as.SetLumi(1);. meas.AddConstantParam(""Lumi"");. RooStats::HistFactory::Channel chan1(""channel1"");. chan1.SetData("""","""");. RooStats::HistFactory::Sample sample1(""sample1"");. sample1.SetHistoName(""emu_OS_1b_Ma"");. sample1.SetHistoPath("""");. sample1.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample1.SetNormalizeByTheory(false);. sample1.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample1.AddNormFactor(""b"", 0.543, 0.5, 0.6);. sample1.AddOverallSys(""Dummy"",1,1);. RooStats::HistFactory::Sample sample2(""sample2"");. sample2.SetHistoName(""emu_OS_1b_Mb"");. sample2.SetHistoPath("""");. sample2.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample2.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample2.AddNormFactor(""minusONE"", -1, -1.1, -0.9);. sample2.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample2.AddOverallSys(""Dummy"",1,1);. chan1.AddSample(sample1);. chan1.AddSample(sample2);. RooStats::HistFactory::Channel chan2(""channel2"");. chan2.SetData("""","""");. RooStats::HistFactory::Sample sample3(""sample3"");. sample3.SetHistoName(""emu_OS_2b_Mc"");. sample3.SetHistoPath("""");. sample3.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample3.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample3.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample3.AddOverallSys(""Dummy"",1,1);. chan2.AddSample(sample3);. meas.AddPreprocessFunction(""b2"",""b*b"",""b[0.543,0.0,1.0]"");. meas.AddConstantParam(""minusONE"");. meas.AddChannel(chan1);. meas.AddChannel(chan2);. meas.CollectHistograms();. RooStats::HistFactory::MakeModelAndMeasurementFast(meas);. }. ```. The code and the input can be found here: `/afs/cern.ch/user/t/tdado/public/ROOT_issue_14225`. It is probably not the simplest example, but it is realistic (the histograms and the setup come from an actual measurement). Note that using only the first channel does _not_ lead to a crash. I hope this helps, let me know if I can do more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:6,safety,manag,managed,6,"Hi, I managed to prepare a relatively simple code that reproduces the issue:. ```c++. void crash() {. RooStats::HistFactory::Measurement meas(""mwe"",""mwe"");. meas.SetOutputFilePrefix(""./"");. meas.SetPOI(""signalStrength"");. meas.SetLumi(1);. meas.AddConstantParam(""Lumi"");. RooStats::HistFactory::Channel chan1(""channel1"");. chan1.SetData("""","""");. RooStats::HistFactory::Sample sample1(""sample1"");. sample1.SetHistoName(""emu_OS_1b_Ma"");. sample1.SetHistoPath("""");. sample1.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample1.SetNormalizeByTheory(false);. sample1.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample1.AddNormFactor(""b"", 0.543, 0.5, 0.6);. sample1.AddOverallSys(""Dummy"",1,1);. RooStats::HistFactory::Sample sample2(""sample2"");. sample2.SetHistoName(""emu_OS_1b_Mb"");. sample2.SetHistoPath("""");. sample2.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample2.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample2.AddNormFactor(""minusONE"", -1, -1.1, -0.9);. sample2.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample2.AddOverallSys(""Dummy"",1,1);. chan1.AddSample(sample1);. chan1.AddSample(sample2);. RooStats::HistFactory::Channel chan2(""channel2"");. chan2.SetData("""","""");. RooStats::HistFactory::Sample sample3(""sample3"");. sample3.SetHistoName(""emu_OS_2b_Mc"");. sample3.SetHistoPath("""");. sample3.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample3.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample3.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample3.AddOverallSys(""Dummy"",1,1);. chan2.AddSample(sample3);. meas.AddPreprocessFunction(""b2"",""b*b"",""b[0.543,0.0,1.0]"");. meas.AddConstantParam(""minusONE"");. meas.AddChannel(chan1);. meas.AddChannel(chan2);. meas.CollectHistograms();. RooStats::HistFactory::MakeModelAndMeasurementFast(meas);. }. ```. The code and the input can be found here: `/afs/cern.ch/user/t/tdado/public/ROOT_issue_14225`. It is probably n",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:1906,safety,input,input,1906,"as.SetLumi(1);. meas.AddConstantParam(""Lumi"");. RooStats::HistFactory::Channel chan1(""channel1"");. chan1.SetData("""","""");. RooStats::HistFactory::Sample sample1(""sample1"");. sample1.SetHistoName(""emu_OS_1b_Ma"");. sample1.SetHistoPath("""");. sample1.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample1.SetNormalizeByTheory(false);. sample1.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample1.AddNormFactor(""b"", 0.543, 0.5, 0.6);. sample1.AddOverallSys(""Dummy"",1,1);. RooStats::HistFactory::Sample sample2(""sample2"");. sample2.SetHistoName(""emu_OS_1b_Mb"");. sample2.SetHistoPath("""");. sample2.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample2.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample2.AddNormFactor(""minusONE"", -1, -1.1, -0.9);. sample2.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample2.AddOverallSys(""Dummy"",1,1);. chan1.AddSample(sample1);. chan1.AddSample(sample2);. RooStats::HistFactory::Channel chan2(""channel2"");. chan2.SetData("""","""");. RooStats::HistFactory::Sample sample3(""sample3"");. sample3.SetHistoName(""emu_OS_2b_Mc"");. sample3.SetHistoPath("""");. sample3.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample3.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample3.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample3.AddOverallSys(""Dummy"",1,1);. chan2.AddSample(sample3);. meas.AddPreprocessFunction(""b2"",""b*b"",""b[0.543,0.0,1.0]"");. meas.AddConstantParam(""minusONE"");. meas.AddChannel(chan1);. meas.AddChannel(chan2);. meas.CollectHistograms();. RooStats::HistFactory::MakeModelAndMeasurementFast(meas);. }. ```. The code and the input can be found here: `/afs/cern.ch/user/t/tdado/public/ROOT_issue_14225`. It is probably not the simplest example, but it is realistic (the histograms and the setup come from an actual measurement). Note that using only the first channel does _not_ lead to a crash. I hope this helps, let me know if I can do more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:203,security,sign,signalStrength,203,"Hi, I managed to prepare a relatively simple code that reproduces the issue:. ```c++. void crash() {. RooStats::HistFactory::Measurement meas(""mwe"",""mwe"");. meas.SetOutputFilePrefix(""./"");. meas.SetPOI(""signalStrength"");. meas.SetLumi(1);. meas.AddConstantParam(""Lumi"");. RooStats::HistFactory::Channel chan1(""channel1"");. chan1.SetData("""","""");. RooStats::HistFactory::Sample sample1(""sample1"");. sample1.SetHistoName(""emu_OS_1b_Ma"");. sample1.SetHistoPath("""");. sample1.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample1.SetNormalizeByTheory(false);. sample1.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample1.AddNormFactor(""b"", 0.543, 0.5, 0.6);. sample1.AddOverallSys(""Dummy"",1,1);. RooStats::HistFactory::Sample sample2(""sample2"");. sample2.SetHistoName(""emu_OS_1b_Mb"");. sample2.SetHistoPath("""");. sample2.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample2.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample2.AddNormFactor(""minusONE"", -1, -1.1, -0.9);. sample2.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample2.AddOverallSys(""Dummy"",1,1);. chan1.AddSample(sample1);. chan1.AddSample(sample2);. RooStats::HistFactory::Channel chan2(""channel2"");. chan2.SetData("""","""");. RooStats::HistFactory::Sample sample3(""sample3"");. sample3.SetHistoName(""emu_OS_2b_Mc"");. sample3.SetHistoPath("""");. sample3.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample3.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample3.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample3.AddOverallSys(""Dummy"",1,1);. chan2.AddSample(sample3);. meas.AddPreprocessFunction(""b2"",""b*b"",""b[0.543,0.0,1.0]"");. meas.AddConstantParam(""minusONE"");. meas.AddChannel(chan1);. meas.AddChannel(chan2);. meas.CollectHistograms();. RooStats::HistFactory::MakeModelAndMeasurementFast(meas);. }. ```. The code and the input can be found here: `/afs/cern.ch/user/t/tdado/public/ROOT_issue_14225`. It is probably n",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:595,security,sign,signalStrength,595,"Hi, I managed to prepare a relatively simple code that reproduces the issue:. ```c++. void crash() {. RooStats::HistFactory::Measurement meas(""mwe"",""mwe"");. meas.SetOutputFilePrefix(""./"");. meas.SetPOI(""signalStrength"");. meas.SetLumi(1);. meas.AddConstantParam(""Lumi"");. RooStats::HistFactory::Channel chan1(""channel1"");. chan1.SetData("""","""");. RooStats::HistFactory::Sample sample1(""sample1"");. sample1.SetHistoName(""emu_OS_1b_Ma"");. sample1.SetHistoPath("""");. sample1.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample1.SetNormalizeByTheory(false);. sample1.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample1.AddNormFactor(""b"", 0.543, 0.5, 0.6);. sample1.AddOverallSys(""Dummy"",1,1);. RooStats::HistFactory::Sample sample2(""sample2"");. sample2.SetHistoName(""emu_OS_1b_Mb"");. sample2.SetHistoPath("""");. sample2.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample2.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample2.AddNormFactor(""minusONE"", -1, -1.1, -0.9);. sample2.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample2.AddOverallSys(""Dummy"",1,1);. chan1.AddSample(sample1);. chan1.AddSample(sample2);. RooStats::HistFactory::Channel chan2(""channel2"");. chan2.SetData("""","""");. RooStats::HistFactory::Sample sample3(""sample3"");. sample3.SetHistoName(""emu_OS_2b_Mc"");. sample3.SetHistoPath("""");. sample3.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample3.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample3.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample3.AddOverallSys(""Dummy"",1,1);. chan2.AddSample(sample3);. meas.AddPreprocessFunction(""b2"",""b*b"",""b[0.543,0.0,1.0]"");. meas.AddConstantParam(""minusONE"");. meas.AddChannel(chan1);. meas.AddChannel(chan2);. meas.CollectHistograms();. RooStats::HistFactory::MakeModelAndMeasurementFast(meas);. }. ```. The code and the input can be found here: `/afs/cern.ch/user/t/tdado/public/ROOT_issue_14225`. It is probably n",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:959,security,sign,signalStrength,959,"Hi, I managed to prepare a relatively simple code that reproduces the issue:. ```c++. void crash() {. RooStats::HistFactory::Measurement meas(""mwe"",""mwe"");. meas.SetOutputFilePrefix(""./"");. meas.SetPOI(""signalStrength"");. meas.SetLumi(1);. meas.AddConstantParam(""Lumi"");. RooStats::HistFactory::Channel chan1(""channel1"");. chan1.SetData("""","""");. RooStats::HistFactory::Sample sample1(""sample1"");. sample1.SetHistoName(""emu_OS_1b_Ma"");. sample1.SetHistoPath("""");. sample1.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample1.SetNormalizeByTheory(false);. sample1.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample1.AddNormFactor(""b"", 0.543, 0.5, 0.6);. sample1.AddOverallSys(""Dummy"",1,1);. RooStats::HistFactory::Sample sample2(""sample2"");. sample2.SetHistoName(""emu_OS_1b_Mb"");. sample2.SetHistoPath("""");. sample2.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample2.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample2.AddNormFactor(""minusONE"", -1, -1.1, -0.9);. sample2.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample2.AddOverallSys(""Dummy"",1,1);. chan1.AddSample(sample1);. chan1.AddSample(sample2);. RooStats::HistFactory::Channel chan2(""channel2"");. chan2.SetData("""","""");. RooStats::HistFactory::Sample sample3(""sample3"");. sample3.SetHistoName(""emu_OS_2b_Mc"");. sample3.SetHistoPath("""");. sample3.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample3.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample3.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample3.AddOverallSys(""Dummy"",1,1);. chan2.AddSample(sample3);. meas.AddPreprocessFunction(""b2"",""b*b"",""b[0.543,0.0,1.0]"");. meas.AddConstantParam(""minusONE"");. meas.AddChannel(chan1);. meas.AddChannel(chan2);. meas.CollectHistograms();. RooStats::HistFactory::MakeModelAndMeasurementFast(meas);. }. ```. The code and the input can be found here: `/afs/cern.ch/user/t/tdado/public/ROOT_issue_14225`. It is probably n",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:1505,security,sign,signalStrength,1505,"as.SetLumi(1);. meas.AddConstantParam(""Lumi"");. RooStats::HistFactory::Channel chan1(""channel1"");. chan1.SetData("""","""");. RooStats::HistFactory::Sample sample1(""sample1"");. sample1.SetHistoName(""emu_OS_1b_Ma"");. sample1.SetHistoPath("""");. sample1.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample1.SetNormalizeByTheory(false);. sample1.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample1.AddNormFactor(""b"", 0.543, 0.5, 0.6);. sample1.AddOverallSys(""Dummy"",1,1);. RooStats::HistFactory::Sample sample2(""sample2"");. sample2.SetHistoName(""emu_OS_1b_Mb"");. sample2.SetHistoPath("""");. sample2.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample2.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample2.AddNormFactor(""minusONE"", -1, -1.1, -0.9);. sample2.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample2.AddOverallSys(""Dummy"",1,1);. chan1.AddSample(sample1);. chan1.AddSample(sample2);. RooStats::HistFactory::Channel chan2(""channel2"");. chan2.SetData("""","""");. RooStats::HistFactory::Sample sample3(""sample3"");. sample3.SetHistoName(""emu_OS_2b_Mc"");. sample3.SetHistoPath("""");. sample3.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample3.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample3.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample3.AddOverallSys(""Dummy"",1,1);. chan2.AddSample(sample3);. meas.AddPreprocessFunction(""b2"",""b*b"",""b[0.543,0.0,1.0]"");. meas.AddConstantParam(""minusONE"");. meas.AddChannel(chan1);. meas.AddChannel(chan2);. meas.CollectHistograms();. RooStats::HistFactory::MakeModelAndMeasurementFast(meas);. }. ```. The code and the input can be found here: `/afs/cern.ch/user/t/tdado/public/ROOT_issue_14225`. It is probably not the simplest example, but it is realistic (the histograms and the setup come from an actual measurement). Note that using only the first channel does _not_ lead to a crash. I hope this helps, let me know if I can do more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:38,testability,simpl,simple,38,"Hi, I managed to prepare a relatively simple code that reproduces the issue:. ```c++. void crash() {. RooStats::HistFactory::Measurement meas(""mwe"",""mwe"");. meas.SetOutputFilePrefix(""./"");. meas.SetPOI(""signalStrength"");. meas.SetLumi(1);. meas.AddConstantParam(""Lumi"");. RooStats::HistFactory::Channel chan1(""channel1"");. chan1.SetData("""","""");. RooStats::HistFactory::Sample sample1(""sample1"");. sample1.SetHistoName(""emu_OS_1b_Ma"");. sample1.SetHistoPath("""");. sample1.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample1.SetNormalizeByTheory(false);. sample1.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample1.AddNormFactor(""b"", 0.543, 0.5, 0.6);. sample1.AddOverallSys(""Dummy"",1,1);. RooStats::HistFactory::Sample sample2(""sample2"");. sample2.SetHistoName(""emu_OS_1b_Mb"");. sample2.SetHistoPath("""");. sample2.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample2.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample2.AddNormFactor(""minusONE"", -1, -1.1, -0.9);. sample2.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample2.AddOverallSys(""Dummy"",1,1);. chan1.AddSample(sample1);. chan1.AddSample(sample2);. RooStats::HistFactory::Channel chan2(""channel2"");. chan2.SetData("""","""");. RooStats::HistFactory::Sample sample3(""sample3"");. sample3.SetHistoName(""emu_OS_2b_Mc"");. sample3.SetHistoPath("""");. sample3.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample3.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample3.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample3.AddOverallSys(""Dummy"",1,1);. chan2.AddSample(sample3);. meas.AddPreprocessFunction(""b2"",""b*b"",""b[0.543,0.0,1.0]"");. meas.AddConstantParam(""minusONE"");. meas.AddChannel(chan1);. meas.AddChannel(chan2);. meas.CollectHistograms();. RooStats::HistFactory::MakeModelAndMeasurementFast(meas);. }. ```. The code and the input can be found here: `/afs/cern.ch/user/t/tdado/public/ROOT_issue_14225`. It is probably n",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:2007,testability,simpl,simplest,2007,"as.SetLumi(1);. meas.AddConstantParam(""Lumi"");. RooStats::HistFactory::Channel chan1(""channel1"");. chan1.SetData("""","""");. RooStats::HistFactory::Sample sample1(""sample1"");. sample1.SetHistoName(""emu_OS_1b_Ma"");. sample1.SetHistoPath("""");. sample1.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample1.SetNormalizeByTheory(false);. sample1.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample1.AddNormFactor(""b"", 0.543, 0.5, 0.6);. sample1.AddOverallSys(""Dummy"",1,1);. RooStats::HistFactory::Sample sample2(""sample2"");. sample2.SetHistoName(""emu_OS_1b_Mb"");. sample2.SetHistoPath("""");. sample2.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample2.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample2.AddNormFactor(""minusONE"", -1, -1.1, -0.9);. sample2.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample2.AddOverallSys(""Dummy"",1,1);. chan1.AddSample(sample1);. chan1.AddSample(sample2);. RooStats::HistFactory::Channel chan2(""channel2"");. chan2.SetData("""","""");. RooStats::HistFactory::Sample sample3(""sample3"");. sample3.SetHistoName(""emu_OS_2b_Mc"");. sample3.SetHistoPath("""");. sample3.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample3.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample3.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample3.AddOverallSys(""Dummy"",1,1);. chan2.AddSample(sample3);. meas.AddPreprocessFunction(""b2"",""b*b"",""b[0.543,0.0,1.0]"");. meas.AddConstantParam(""minusONE"");. meas.AddChannel(chan1);. meas.AddChannel(chan2);. meas.CollectHistograms();. RooStats::HistFactory::MakeModelAndMeasurementFast(meas);. }. ```. The code and the input can be found here: `/afs/cern.ch/user/t/tdado/public/ROOT_issue_14225`. It is probably not the simplest example, but it is realistic (the histograms and the setup come from an actual measurement). Note that using only the first channel does _not_ lead to a crash. I hope this helps, let me know if I can do more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:38,usability,simpl,simple,38,"Hi, I managed to prepare a relatively simple code that reproduces the issue:. ```c++. void crash() {. RooStats::HistFactory::Measurement meas(""mwe"",""mwe"");. meas.SetOutputFilePrefix(""./"");. meas.SetPOI(""signalStrength"");. meas.SetLumi(1);. meas.AddConstantParam(""Lumi"");. RooStats::HistFactory::Channel chan1(""channel1"");. chan1.SetData("""","""");. RooStats::HistFactory::Sample sample1(""sample1"");. sample1.SetHistoName(""emu_OS_1b_Ma"");. sample1.SetHistoPath("""");. sample1.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample1.SetNormalizeByTheory(false);. sample1.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample1.AddNormFactor(""b"", 0.543, 0.5, 0.6);. sample1.AddOverallSys(""Dummy"",1,1);. RooStats::HistFactory::Sample sample2(""sample2"");. sample2.SetHistoName(""emu_OS_1b_Mb"");. sample2.SetHistoPath("""");. sample2.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample2.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample2.AddNormFactor(""minusONE"", -1, -1.1, -0.9);. sample2.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample2.AddOverallSys(""Dummy"",1,1);. chan1.AddSample(sample1);. chan1.AddSample(sample2);. RooStats::HistFactory::Channel chan2(""channel2"");. chan2.SetData("""","""");. RooStats::HistFactory::Sample sample3(""sample3"");. sample3.SetHistoName(""emu_OS_2b_Mc"");. sample3.SetHistoPath("""");. sample3.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample3.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample3.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample3.AddOverallSys(""Dummy"",1,1);. chan2.AddSample(sample3);. meas.AddPreprocessFunction(""b2"",""b*b"",""b[0.543,0.0,1.0]"");. meas.AddConstantParam(""minusONE"");. meas.AddChannel(chan1);. meas.AddChannel(chan2);. meas.CollectHistograms();. RooStats::HistFactory::MakeModelAndMeasurementFast(meas);. }. ```. The code and the input can be found here: `/afs/cern.ch/user/t/tdado/public/ROOT_issue_14225`. It is probably n",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:1906,usability,input,input,1906,"as.SetLumi(1);. meas.AddConstantParam(""Lumi"");. RooStats::HistFactory::Channel chan1(""channel1"");. chan1.SetData("""","""");. RooStats::HistFactory::Sample sample1(""sample1"");. sample1.SetHistoName(""emu_OS_1b_Ma"");. sample1.SetHistoPath("""");. sample1.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample1.SetNormalizeByTheory(false);. sample1.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample1.AddNormFactor(""b"", 0.543, 0.5, 0.6);. sample1.AddOverallSys(""Dummy"",1,1);. RooStats::HistFactory::Sample sample2(""sample2"");. sample2.SetHistoName(""emu_OS_1b_Mb"");. sample2.SetHistoPath("""");. sample2.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample2.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample2.AddNormFactor(""minusONE"", -1, -1.1, -0.9);. sample2.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample2.AddOverallSys(""Dummy"",1,1);. chan1.AddSample(sample1);. chan1.AddSample(sample2);. RooStats::HistFactory::Channel chan2(""channel2"");. chan2.SetData("""","""");. RooStats::HistFactory::Sample sample3(""sample3"");. sample3.SetHistoName(""emu_OS_2b_Mc"");. sample3.SetHistoPath("""");. sample3.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample3.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample3.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample3.AddOverallSys(""Dummy"",1,1);. chan2.AddSample(sample3);. meas.AddPreprocessFunction(""b2"",""b*b"",""b[0.543,0.0,1.0]"");. meas.AddConstantParam(""minusONE"");. meas.AddChannel(chan1);. meas.AddChannel(chan2);. meas.CollectHistograms();. RooStats::HistFactory::MakeModelAndMeasurementFast(meas);. }. ```. The code and the input can be found here: `/afs/cern.ch/user/t/tdado/public/ROOT_issue_14225`. It is probably not the simplest example, but it is realistic (the histograms and the setup come from an actual measurement). Note that using only the first channel does _not_ lead to a crash. I hope this helps, let me know if I can do more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:1945,usability,user,user,1945,"as.SetLumi(1);. meas.AddConstantParam(""Lumi"");. RooStats::HistFactory::Channel chan1(""channel1"");. chan1.SetData("""","""");. RooStats::HistFactory::Sample sample1(""sample1"");. sample1.SetHistoName(""emu_OS_1b_Ma"");. sample1.SetHistoPath("""");. sample1.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample1.SetNormalizeByTheory(false);. sample1.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample1.AddNormFactor(""b"", 0.543, 0.5, 0.6);. sample1.AddOverallSys(""Dummy"",1,1);. RooStats::HistFactory::Sample sample2(""sample2"");. sample2.SetHistoName(""emu_OS_1b_Mb"");. sample2.SetHistoPath("""");. sample2.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample2.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample2.AddNormFactor(""minusONE"", -1, -1.1, -0.9);. sample2.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample2.AddOverallSys(""Dummy"",1,1);. chan1.AddSample(sample1);. chan1.AddSample(sample2);. RooStats::HistFactory::Channel chan2(""channel2"");. chan2.SetData("""","""");. RooStats::HistFactory::Sample sample3(""sample3"");. sample3.SetHistoName(""emu_OS_2b_Mc"");. sample3.SetHistoPath("""");. sample3.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample3.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample3.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample3.AddOverallSys(""Dummy"",1,1);. chan2.AddSample(sample3);. meas.AddPreprocessFunction(""b2"",""b*b"",""b[0.543,0.0,1.0]"");. meas.AddConstantParam(""minusONE"");. meas.AddChannel(chan1);. meas.AddChannel(chan2);. meas.CollectHistograms();. RooStats::HistFactory::MakeModelAndMeasurementFast(meas);. }. ```. The code and the input can be found here: `/afs/cern.ch/user/t/tdado/public/ROOT_issue_14225`. It is probably not the simplest example, but it is realistic (the histograms and the setup come from an actual measurement). Note that using only the first channel does _not_ lead to a crash. I hope this helps, let me know if I can do more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:2007,usability,simpl,simplest,2007,"as.SetLumi(1);. meas.AddConstantParam(""Lumi"");. RooStats::HistFactory::Channel chan1(""channel1"");. chan1.SetData("""","""");. RooStats::HistFactory::Sample sample1(""sample1"");. sample1.SetHistoName(""emu_OS_1b_Ma"");. sample1.SetHistoPath("""");. sample1.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample1.SetNormalizeByTheory(false);. sample1.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample1.AddNormFactor(""b"", 0.543, 0.5, 0.6);. sample1.AddOverallSys(""Dummy"",1,1);. RooStats::HistFactory::Sample sample2(""sample2"");. sample2.SetHistoName(""emu_OS_1b_Mb"");. sample2.SetHistoPath("""");. sample2.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample2.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample2.AddNormFactor(""minusONE"", -1, -1.1, -0.9);. sample2.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample2.AddOverallSys(""Dummy"",1,1);. chan1.AddSample(sample1);. chan1.AddSample(sample2);. RooStats::HistFactory::Channel chan2(""channel2"");. chan2.SetData("""","""");. RooStats::HistFactory::Sample sample3(""sample3"");. sample3.SetHistoName(""emu_OS_2b_Mc"");. sample3.SetHistoPath("""");. sample3.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample3.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample3.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample3.AddOverallSys(""Dummy"",1,1);. chan2.AddSample(sample3);. meas.AddPreprocessFunction(""b2"",""b*b"",""b[0.543,0.0,1.0]"");. meas.AddConstantParam(""minusONE"");. meas.AddChannel(chan1);. meas.AddChannel(chan2);. meas.CollectHistograms();. RooStats::HistFactory::MakeModelAndMeasurementFast(meas);. }. ```. The code and the input can be found here: `/afs/cern.ch/user/t/tdado/public/ROOT_issue_14225`. It is probably not the simplest example, but it is realistic (the histograms and the setup come from an actual measurement). Note that using only the first channel does _not_ lead to a crash. I hope this helps, let me know if I can do more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:2188,usability,help,helps,2188,"as.SetLumi(1);. meas.AddConstantParam(""Lumi"");. RooStats::HistFactory::Channel chan1(""channel1"");. chan1.SetData("""","""");. RooStats::HistFactory::Sample sample1(""sample1"");. sample1.SetHistoName(""emu_OS_1b_Ma"");. sample1.SetHistoPath("""");. sample1.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample1.SetNormalizeByTheory(false);. sample1.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample1.AddNormFactor(""b"", 0.543, 0.5, 0.6);. sample1.AddOverallSys(""Dummy"",1,1);. RooStats::HistFactory::Sample sample2(""sample2"");. sample2.SetHistoName(""emu_OS_1b_Mb"");. sample2.SetHistoPath("""");. sample2.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample2.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample2.AddNormFactor(""minusONE"", -1, -1.1, -0.9);. sample2.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample2.AddOverallSys(""Dummy"",1,1);. chan1.AddSample(sample1);. chan1.AddSample(sample2);. RooStats::HistFactory::Channel chan2(""channel2"");. chan2.SetData("""","""");. RooStats::HistFactory::Sample sample3(""sample3"");. sample3.SetHistoName(""emu_OS_2b_Mc"");. sample3.SetHistoPath("""");. sample3.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");. sample3.SetNormalizeByTheory(false);. sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);. sample3.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);. sample3.AddOverallSys(""Dummy"",1,1);. chan2.AddSample(sample3);. meas.AddPreprocessFunction(""b2"",""b*b"",""b[0.543,0.0,1.0]"");. meas.AddConstantParam(""minusONE"");. meas.AddChannel(chan1);. meas.AddChannel(chan2);. meas.CollectHistograms();. RooStats::HistFactory::MakeModelAndMeasurementFast(meas);. }. ```. The code and the input can be found here: `/afs/cern.ch/user/t/tdado/public/ROOT_issue_14225`. It is probably not the simplest example, but it is realistic (the histograms and the setup come from an actual measurement). Note that using only the first channel does _not_ lead to a crash. I hope this helps, let me know if I can do more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:305,availability,error,error,305,"Am skeptical this could ever have worked even in older releases, because looking at the code I see the method ""MakeSingleChannelWorkspace"" where the measurement object is passed, and therefore it is assuming any parameter in the constant list *must* be present in the channel??? Tomas do you get the same error message about ""cannot find the variable"" in 6.28, but it succeeds? It might be blind luck that it did. . If so the fix is a simple one to just skip over said variable if its not found in the channel.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:55,deployability,releas,releases,55,"Am skeptical this could ever have worked even in older releases, because looking at the code I see the method ""MakeSingleChannelWorkspace"" where the measurement object is passed, and therefore it is assuming any parameter in the constant list *must* be present in the channel??? Tomas do you get the same error message about ""cannot find the variable"" in 6.28, but it succeeds? It might be blind luck that it did. . If so the fix is a simple one to just skip over said variable if its not found in the channel.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:149,energy efficiency,measur,measurement,149,"Am skeptical this could ever have worked even in older releases, because looking at the code I see the method ""MakeSingleChannelWorkspace"" where the measurement object is passed, and therefore it is assuming any parameter in the constant list *must* be present in the channel??? Tomas do you get the same error message about ""cannot find the variable"" in 6.28, but it succeeds? It might be blind luck that it did. . If so the fix is a simple one to just skip over said variable if its not found in the channel.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:311,integrability,messag,message,311,"Am skeptical this could ever have worked even in older releases, because looking at the code I see the method ""MakeSingleChannelWorkspace"" where the measurement object is passed, and therefore it is assuming any parameter in the constant list *must* be present in the channel??? Tomas do you get the same error message about ""cannot find the variable"" in 6.28, but it succeeds? It might be blind luck that it did. . If so the fix is a simple one to just skip over said variable if its not found in the channel.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:311,interoperability,messag,message,311,"Am skeptical this could ever have worked even in older releases, because looking at the code I see the method ""MakeSingleChannelWorkspace"" where the measurement object is passed, and therefore it is assuming any parameter in the constant list *must* be present in the channel??? Tomas do you get the same error message about ""cannot find the variable"" in 6.28, but it succeeds? It might be blind luck that it did. . If so the fix is a simple one to just skip over said variable if its not found in the channel.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:212,modifiability,paramet,parameter,212,"Am skeptical this could ever have worked even in older releases, because looking at the code I see the method ""MakeSingleChannelWorkspace"" where the measurement object is passed, and therefore it is assuming any parameter in the constant list *must* be present in the channel??? Tomas do you get the same error message about ""cannot find the variable"" in 6.28, but it succeeds? It might be blind luck that it did. . If so the fix is a simple one to just skip over said variable if its not found in the channel.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:342,modifiability,variab,variable,342,"Am skeptical this could ever have worked even in older releases, because looking at the code I see the method ""MakeSingleChannelWorkspace"" where the measurement object is passed, and therefore it is assuming any parameter in the constant list *must* be present in the channel??? Tomas do you get the same error message about ""cannot find the variable"" in 6.28, but it succeeds? It might be blind luck that it did. . If so the fix is a simple one to just skip over said variable if its not found in the channel.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:469,modifiability,variab,variable,469,"Am skeptical this could ever have worked even in older releases, because looking at the code I see the method ""MakeSingleChannelWorkspace"" where the measurement object is passed, and therefore it is assuming any parameter in the constant list *must* be present in the channel??? Tomas do you get the same error message about ""cannot find the variable"" in 6.28, but it succeeds? It might be blind luck that it did. . If so the fix is a simple one to just skip over said variable if its not found in the channel.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:305,performance,error,error,305,"Am skeptical this could ever have worked even in older releases, because looking at the code I see the method ""MakeSingleChannelWorkspace"" where the measurement object is passed, and therefore it is assuming any parameter in the constant list *must* be present in the channel??? Tomas do you get the same error message about ""cannot find the variable"" in 6.28, but it succeeds? It might be blind luck that it did. . If so the fix is a simple one to just skip over said variable if its not found in the channel.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:305,safety,error,error,305,"Am skeptical this could ever have worked even in older releases, because looking at the code I see the method ""MakeSingleChannelWorkspace"" where the measurement object is passed, and therefore it is assuming any parameter in the constant list *must* be present in the channel??? Tomas do you get the same error message about ""cannot find the variable"" in 6.28, but it succeeds? It might be blind luck that it did. . If so the fix is a simple one to just skip over said variable if its not found in the channel.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:435,testability,simpl,simple,435,"Am skeptical this could ever have worked even in older releases, because looking at the code I see the method ""MakeSingleChannelWorkspace"" where the measurement object is passed, and therefore it is assuming any parameter in the constant list *must* be present in the channel??? Tomas do you get the same error message about ""cannot find the variable"" in 6.28, but it succeeds? It might be blind luck that it did. . If so the fix is a simple one to just skip over said variable if its not found in the channel.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:305,usability,error,error,305,"Am skeptical this could ever have worked even in older releases, because looking at the code I see the method ""MakeSingleChannelWorkspace"" where the measurement object is passed, and therefore it is assuming any parameter in the constant list *must* be present in the channel??? Tomas do you get the same error message about ""cannot find the variable"" in 6.28, but it succeeds? It might be blind luck that it did. . If so the fix is a simple one to just skip over said variable if its not found in the channel.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:435,usability,simpl,simple,435,"Am skeptical this could ever have worked even in older releases, because looking at the code I see the method ""MakeSingleChannelWorkspace"" where the measurement object is passed, and therefore it is assuming any parameter in the constant list *must* be present in the channel??? Tomas do you get the same error message about ""cannot find the variable"" in 6.28, but it succeeds? It might be blind luck that it did. . If so the fix is a simple one to just skip over said variable if its not found in the channel.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:23,availability,error,error,23,"Indeed, I get the same error in 6.28.04! I also noticed this error:. ```. [#2] ERROR:HistFactory -- could not corresponding auxiliary measurement nom_minusONE. ```. But it is amazing that it never crashed in 6.28 even with O(20) runs on different machines/OS/gcc versions",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:61,availability,error,error,61,"Indeed, I get the same error in 6.28.04! I also noticed this error:. ```. [#2] ERROR:HistFactory -- could not corresponding auxiliary measurement nom_minusONE. ```. But it is amazing that it never crashed in 6.28 even with O(20) runs on different machines/OS/gcc versions",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:79,availability,ERROR,ERROR,79,"Indeed, I get the same error in 6.28.04! I also noticed this error:. ```. [#2] ERROR:HistFactory -- could not corresponding auxiliary measurement nom_minusONE. ```. But it is amazing that it never crashed in 6.28 even with O(20) runs on different machines/OS/gcc versions",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:263,deployability,version,versions,263,"Indeed, I get the same error in 6.28.04! I also noticed this error:. ```. [#2] ERROR:HistFactory -- could not corresponding auxiliary measurement nom_minusONE. ```. But it is amazing that it never crashed in 6.28 even with O(20) runs on different machines/OS/gcc versions",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:134,energy efficiency,measur,measurement,134,"Indeed, I get the same error in 6.28.04! I also noticed this error:. ```. [#2] ERROR:HistFactory -- could not corresponding auxiliary measurement nom_minusONE. ```. But it is amazing that it never crashed in 6.28 even with O(20) runs on different machines/OS/gcc versions",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:263,integrability,version,versions,263,"Indeed, I get the same error in 6.28.04! I also noticed this error:. ```. [#2] ERROR:HistFactory -- could not corresponding auxiliary measurement nom_minusONE. ```. But it is amazing that it never crashed in 6.28 even with O(20) runs on different machines/OS/gcc versions",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:263,modifiability,version,versions,263,"Indeed, I get the same error in 6.28.04! I also noticed this error:. ```. [#2] ERROR:HistFactory -- could not corresponding auxiliary measurement nom_minusONE. ```. But it is amazing that it never crashed in 6.28 even with O(20) runs on different machines/OS/gcc versions",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:23,performance,error,error,23,"Indeed, I get the same error in 6.28.04! I also noticed this error:. ```. [#2] ERROR:HistFactory -- could not corresponding auxiliary measurement nom_minusONE. ```. But it is amazing that it never crashed in 6.28 even with O(20) runs on different machines/OS/gcc versions",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:61,performance,error,error,61,"Indeed, I get the same error in 6.28.04! I also noticed this error:. ```. [#2] ERROR:HistFactory -- could not corresponding auxiliary measurement nom_minusONE. ```. But it is amazing that it never crashed in 6.28 even with O(20) runs on different machines/OS/gcc versions",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:79,performance,ERROR,ERROR,79,"Indeed, I get the same error in 6.28.04! I also noticed this error:. ```. [#2] ERROR:HistFactory -- could not corresponding auxiliary measurement nom_minusONE. ```. But it is amazing that it never crashed in 6.28 even with O(20) runs on different machines/OS/gcc versions",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:23,safety,error,error,23,"Indeed, I get the same error in 6.28.04! I also noticed this error:. ```. [#2] ERROR:HistFactory -- could not corresponding auxiliary measurement nom_minusONE. ```. But it is amazing that it never crashed in 6.28 even with O(20) runs on different machines/OS/gcc versions",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:61,safety,error,error,61,"Indeed, I get the same error in 6.28.04! I also noticed this error:. ```. [#2] ERROR:HistFactory -- could not corresponding auxiliary measurement nom_minusONE. ```. But it is amazing that it never crashed in 6.28 even with O(20) runs on different machines/OS/gcc versions",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:79,safety,ERROR,ERROR,79,"Indeed, I get the same error in 6.28.04! I also noticed this error:. ```. [#2] ERROR:HistFactory -- could not corresponding auxiliary measurement nom_minusONE. ```. But it is amazing that it never crashed in 6.28 even with O(20) runs on different machines/OS/gcc versions",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:23,usability,error,error,23,"Indeed, I get the same error in 6.28.04! I also noticed this error:. ```. [#2] ERROR:HistFactory -- could not corresponding auxiliary measurement nom_minusONE. ```. But it is amazing that it never crashed in 6.28 even with O(20) runs on different machines/OS/gcc versions",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:61,usability,error,error,61,"Indeed, I get the same error in 6.28.04! I also noticed this error:. ```. [#2] ERROR:HistFactory -- could not corresponding auxiliary measurement nom_minusONE. ```. But it is amazing that it never crashed in 6.28 even with O(20) runs on different machines/OS/gcc versions",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:79,usability,ERROR,ERROR,79,"Indeed, I get the same error in 6.28.04! I also noticed this error:. ```. [#2] ERROR:HistFactory -- could not corresponding auxiliary measurement nom_minusONE. ```. But it is amazing that it never crashed in 6.28 even with O(20) runs on different machines/OS/gcc versions",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/pull/14238:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14238
https://github.com/root-project/root/pull/14238:129,performance,time,time,129,"> @veprbl @hahnjo, should be backport it to 6.30? Yes, will do today :+1: (I only didn't merge on Saturday because I was lacking time to watch that everything works fine on `master` after it's in). *edit:* now https://github.com/root-project/root/pull/14264",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14238
https://github.com/root-project/root/pull/14241:0,integrability,Messag,Messages,0,Messages are not identical - only reference on the issue on `root.cern` website. `TROOT::PrintWebIssuseWarning()` will have to print different output. But I will try to add such method in following PR. In `TRootBrowser::ExecPlugin` IsWebGUI is checked. I will add check for gROOT->IsWebDisplay() . `rootbrowse.py` invokes default TBrowser - checks already done in correspondent factory classes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14241
https://github.com/root-project/root/pull/14241:0,interoperability,Messag,Messages,0,Messages are not identical - only reference on the issue on `root.cern` website. `TROOT::PrintWebIssuseWarning()` will have to print different output. But I will try to add such method in following PR. In `TRootBrowser::ExecPlugin` IsWebGUI is checked. I will add check for gROOT->IsWebDisplay() . `rootbrowse.py` invokes default TBrowser - checks already done in correspondent factory classes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14241
https://github.com/root-project/root/pull/14241:17,security,ident,identical,17,Messages are not identical - only reference on the issue on `root.cern` website. `TROOT::PrintWebIssuseWarning()` will have to print different output. But I will try to add such method in following PR. In `TRootBrowser::ExecPlugin` IsWebGUI is checked. I will add check for gROOT->IsWebDisplay() . `rootbrowse.py` invokes default TBrowser - checks already done in correspondent factory classes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14241
https://github.com/root-project/root/issues/14244:46,deployability,version,version,46,Any chance this could be backported to 6.30.x version?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14244
https://github.com/root-project/root/issues/14244:46,integrability,version,version,46,Any chance this could be backported to 6.30.x version?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14244
https://github.com/root-project/root/issues/14244:46,modifiability,version,version,46,Any chance this could be backported to 6.30.x version?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14244
https://github.com/root-project/root/issues/14244:62,deployability,version,version,62,"Sure, why not! C++17 was already the minimum standard in that version, so the `string_view` backport was also not needed there. I'll take care of the backport.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14244
https://github.com/root-project/root/issues/14244:62,integrability,version,version,62,"Sure, why not! C++17 was already the minimum standard in that version, so the `string_view` backport was also not needed there. I'll take care of the backport.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14244
https://github.com/root-project/root/issues/14244:45,interoperability,standard,standard,45,"Sure, why not! C++17 was already the minimum standard in that version, so the `string_view` backport was also not needed there. I'll take care of the backport.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14244
https://github.com/root-project/root/issues/14244:62,modifiability,version,version,62,"Sure, why not! C++17 was already the minimum standard in that version, so the `string_view` backport was also not needed there. I'll take care of the backport.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14244
https://github.com/root-project/root/issues/14244:37,usability,minim,minimum,37,"Sure, why not! C++17 was already the minimum standard in that version, so the `string_view` backport was also not needed there. I'll take care of the backport.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14244
https://github.com/root-project/root/pull/14245:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14245
https://github.com/root-project/root/pull/14245:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14245
https://github.com/root-project/root/pull/14246:69,deployability,upgrad,upgrade,69,That’s a good direction. Let’s wait for the dust to settle after the upgrade for a few weeks before landing this. There were several significant changes between llvm16 and llvm17 in order for jitlink to become default. Can you check the llvm git history?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:69,modifiability,upgrad,upgrade,69,That’s a good direction. Let’s wait for the dust to settle after the upgrade for a few weeks before landing this. There were several significant changes between llvm16 and llvm17 in order for jitlink to become default. Can you check the llvm git history?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:133,security,sign,significant,133,That’s a good direction. Let’s wait for the dust to settle after the upgrade for a few weeks before landing this. There were several significant changes between llvm16 and llvm17 in order for jitlink to become default. Can you check the llvm git history?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:71,deployability,upgrad,upgrade,71,"> That’s a good direction. Let’s wait for the dust to settle after the upgrade for a few weeks before landing this. Yes, we discussed to not merge before early next year. > There were several significant changes between llvm16 and llvm17 in order for jitlink to become default. Can you check the llvm git history? I put a bit more documentation in https://github.com/root-project/root/issues/14209; the switch to default happened very early in the LLVM 17 cycle (February and April, after branching in January). I was hoping there are only very few fixes around that time, if at all...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:71,modifiability,upgrad,upgrade,71,"> That’s a good direction. Let’s wait for the dust to settle after the upgrade for a few weeks before landing this. Yes, we discussed to not merge before early next year. > There were several significant changes between llvm16 and llvm17 in order for jitlink to become default. Can you check the llvm git history? I put a bit more documentation in https://github.com/root-project/root/issues/14209; the switch to default happened very early in the LLVM 17 cycle (February and April, after branching in January). I was hoping there are only very few fixes around that time, if at all...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:567,performance,time,time,567,"> That’s a good direction. Let’s wait for the dust to settle after the upgrade for a few weeks before landing this. Yes, we discussed to not merge before early next year. > There were several significant changes between llvm16 and llvm17 in order for jitlink to become default. Can you check the llvm git history? I put a bit more documentation in https://github.com/root-project/root/issues/14209; the switch to default happened very early in the LLVM 17 cycle (February and April, after branching in January). I was hoping there are only very few fixes around that time, if at all...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:192,security,sign,significant,192,"> That’s a good direction. Let’s wait for the dust to settle after the upgrade for a few weeks before landing this. Yes, we discussed to not merge before early next year. > There were several significant changes between llvm16 and llvm17 in order for jitlink to become default. Can you check the llvm git history? I put a bit more documentation in https://github.com/root-project/root/issues/14209; the switch to default happened very early in the LLVM 17 cycle (February and April, after branching in January). I was hoping there are only very few fixes around that time, if at all...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:331,usability,document,documentation,331,"> That’s a good direction. Let’s wait for the dust to settle after the upgrade for a few weeks before landing this. Yes, we discussed to not merge before early next year. > There were several significant changes between llvm16 and llvm17 in order for jitlink to become default. Can you check the llvm git history? I put a bit more documentation in https://github.com/root-project/root/issues/14209; the switch to default happened very early in the LLVM 17 cycle (February and April, after branching in January). I was hoping there are only very few fixes around that time, if at all...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:90,availability,failur,failures,90,"Hi @lhames, following the deprecation procedure for RuntimeDyld we are hitting a few test failures. Some of them have things like `cling JIT session error: In graph cling-module-315-jitted-objectbuffer, section .eh_frame: relocation target ""DW.ref.__gxx_personality_v0"" at address 0x7f8d0b32f040 is out of range of Delta32 fixup at 0x7f8c6c00d7c3 (<anonymous block> @ 0x7f8c6c00d7b0 + 0x13)`. You can find more here: https://github.com/root-project/root/runs/28400824352. I am not sure what's our way forward here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:149,availability,error,error,149,"Hi @lhames, following the deprecation procedure for RuntimeDyld we are hitting a few test failures. Some of them have things like `cling JIT session error: In graph cling-module-315-jitted-objectbuffer, section .eh_frame: relocation target ""DW.ref.__gxx_personality_v0"" at address 0x7f8d0b32f040 is out of range of Delta32 fixup at 0x7f8c6c00d7c3 (<anonymous block> @ 0x7f8c6c00d7b0 + 0x13)`. You can find more here: https://github.com/root-project/root/runs/28400824352. I am not sure what's our way forward here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:90,deployability,fail,failures,90,"Hi @lhames, following the deprecation procedure for RuntimeDyld we are hitting a few test failures. Some of them have things like `cling JIT session error: In graph cling-module-315-jitted-objectbuffer, section .eh_frame: relocation target ""DW.ref.__gxx_personality_v0"" at address 0x7f8d0b32f040 is out of range of Delta32 fixup at 0x7f8c6c00d7c3 (<anonymous block> @ 0x7f8c6c00d7b0 + 0x13)`. You can find more here: https://github.com/root-project/root/runs/28400824352. I am not sure what's our way forward here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:171,deployability,modul,module-,171,"Hi @lhames, following the deprecation procedure for RuntimeDyld we are hitting a few test failures. Some of them have things like `cling JIT session error: In graph cling-module-315-jitted-objectbuffer, section .eh_frame: relocation target ""DW.ref.__gxx_personality_v0"" at address 0x7f8d0b32f040 is out of range of Delta32 fixup at 0x7f8c6c00d7c3 (<anonymous block> @ 0x7f8c6c00d7b0 + 0x13)`. You can find more here: https://github.com/root-project/root/runs/28400824352. I am not sure what's our way forward here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:171,modifiability,modul,module-,171,"Hi @lhames, following the deprecation procedure for RuntimeDyld we are hitting a few test failures. Some of them have things like `cling JIT session error: In graph cling-module-315-jitted-objectbuffer, section .eh_frame: relocation target ""DW.ref.__gxx_personality_v0"" at address 0x7f8d0b32f040 is out of range of Delta32 fixup at 0x7f8c6c00d7c3 (<anonymous block> @ 0x7f8c6c00d7b0 + 0x13)`. You can find more here: https://github.com/root-project/root/runs/28400824352. I am not sure what's our way forward here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:90,performance,failur,failures,90,"Hi @lhames, following the deprecation procedure for RuntimeDyld we are hitting a few test failures. Some of them have things like `cling JIT session error: In graph cling-module-315-jitted-objectbuffer, section .eh_frame: relocation target ""DW.ref.__gxx_personality_v0"" at address 0x7f8d0b32f040 is out of range of Delta32 fixup at 0x7f8c6c00d7c3 (<anonymous block> @ 0x7f8c6c00d7b0 + 0x13)`. You can find more here: https://github.com/root-project/root/runs/28400824352. I am not sure what's our way forward here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:149,performance,error,error,149,"Hi @lhames, following the deprecation procedure for RuntimeDyld we are hitting a few test failures. Some of them have things like `cling JIT session error: In graph cling-module-315-jitted-objectbuffer, section .eh_frame: relocation target ""DW.ref.__gxx_personality_v0"" at address 0x7f8d0b32f040 is out of range of Delta32 fixup at 0x7f8c6c00d7c3 (<anonymous block> @ 0x7f8c6c00d7b0 + 0x13)`. You can find more here: https://github.com/root-project/root/runs/28400824352. I am not sure what's our way forward here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:90,reliability,fail,failures,90,"Hi @lhames, following the deprecation procedure for RuntimeDyld we are hitting a few test failures. Some of them have things like `cling JIT session error: In graph cling-module-315-jitted-objectbuffer, section .eh_frame: relocation target ""DW.ref.__gxx_personality_v0"" at address 0x7f8d0b32f040 is out of range of Delta32 fixup at 0x7f8c6c00d7c3 (<anonymous block> @ 0x7f8c6c00d7b0 + 0x13)`. You can find more here: https://github.com/root-project/root/runs/28400824352. I am not sure what's our way forward here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:85,safety,test,test,85,"Hi @lhames, following the deprecation procedure for RuntimeDyld we are hitting a few test failures. Some of them have things like `cling JIT session error: In graph cling-module-315-jitted-objectbuffer, section .eh_frame: relocation target ""DW.ref.__gxx_personality_v0"" at address 0x7f8d0b32f040 is out of range of Delta32 fixup at 0x7f8c6c00d7c3 (<anonymous block> @ 0x7f8c6c00d7b0 + 0x13)`. You can find more here: https://github.com/root-project/root/runs/28400824352. I am not sure what's our way forward here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:149,safety,error,error,149,"Hi @lhames, following the deprecation procedure for RuntimeDyld we are hitting a few test failures. Some of them have things like `cling JIT session error: In graph cling-module-315-jitted-objectbuffer, section .eh_frame: relocation target ""DW.ref.__gxx_personality_v0"" at address 0x7f8d0b32f040 is out of range of Delta32 fixup at 0x7f8c6c00d7c3 (<anonymous block> @ 0x7f8c6c00d7b0 + 0x13)`. You can find more here: https://github.com/root-project/root/runs/28400824352. I am not sure what's our way forward here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:171,safety,modul,module-,171,"Hi @lhames, following the deprecation procedure for RuntimeDyld we are hitting a few test failures. Some of them have things like `cling JIT session error: In graph cling-module-315-jitted-objectbuffer, section .eh_frame: relocation target ""DW.ref.__gxx_personality_v0"" at address 0x7f8d0b32f040 is out of range of Delta32 fixup at 0x7f8c6c00d7c3 (<anonymous block> @ 0x7f8c6c00d7b0 + 0x13)`. You can find more here: https://github.com/root-project/root/runs/28400824352. I am not sure what's our way forward here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:141,security,session,session,141,"Hi @lhames, following the deprecation procedure for RuntimeDyld we are hitting a few test failures. Some of them have things like `cling JIT session error: In graph cling-module-315-jitted-objectbuffer, section .eh_frame: relocation target ""DW.ref.__gxx_personality_v0"" at address 0x7f8d0b32f040 is out of range of Delta32 fixup at 0x7f8c6c00d7c3 (<anonymous block> @ 0x7f8c6c00d7b0 + 0x13)`. You can find more here: https://github.com/root-project/root/runs/28400824352. I am not sure what's our way forward here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:85,testability,test,test,85,"Hi @lhames, following the deprecation procedure for RuntimeDyld we are hitting a few test failures. Some of them have things like `cling JIT session error: In graph cling-module-315-jitted-objectbuffer, section .eh_frame: relocation target ""DW.ref.__gxx_personality_v0"" at address 0x7f8d0b32f040 is out of range of Delta32 fixup at 0x7f8c6c00d7c3 (<anonymous block> @ 0x7f8c6c00d7b0 + 0x13)`. You can find more here: https://github.com/root-project/root/runs/28400824352. I am not sure what's our way forward here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:149,usability,error,error,149,"Hi @lhames, following the deprecation procedure for RuntimeDyld we are hitting a few test failures. Some of them have things like `cling JIT session error: In graph cling-module-315-jitted-objectbuffer, section .eh_frame: relocation target ""DW.ref.__gxx_personality_v0"" at address 0x7f8d0b32f040 is out of range of Delta32 fixup at 0x7f8c6c00d7c3 (<anonymous block> @ 0x7f8c6c00d7b0 + 0x13)`. You can find more here: https://github.com/root-project/root/runs/28400824352. I am not sure what's our way forward here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:108,availability,error,errors,108,"I now understand what is going wrong: @Axel-Naumann pushed me into the right direction by noticing that the errors concern vtables and typeinfo symbols, which are subject to reemission on our side. Then our `WeakTypeinfoVTablePass` will mark them as `weak` to make sure the JIT infrastructure deduplicates the symbols as needed. Additionally, `ReuseExistingWeakSymbols` will entirely remove the definitions if the symbol can be found in the process, for example for compiled classes. Now the problem is that the symbols were originally marked as ""local to the shared library"" and relocations can take advantage of this. This is where `PreventLocalOptPass` comes in, but it ran before the two passes mentioned before and therefore doesn't consider these symbols. So tldr, we can fix the problems by reordering the passes. Let's slot this change in after the upgrade to LLVM 18, which is also where upstream changed to the default to JITLink.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:827,availability,slo,slot,827,"I now understand what is going wrong: @Axel-Naumann pushed me into the right direction by noticing that the errors concern vtables and typeinfo symbols, which are subject to reemission on our side. Then our `WeakTypeinfoVTablePass` will mark them as `weak` to make sure the JIT infrastructure deduplicates the symbols as needed. Additionally, `ReuseExistingWeakSymbols` will entirely remove the definitions if the symbol can be found in the process, for example for compiled classes. Now the problem is that the symbols were originally marked as ""local to the shared library"" and relocations can take advantage of this. This is where `PreventLocalOptPass` comes in, but it ran before the two passes mentioned before and therefore doesn't consider these symbols. So tldr, we can fix the problems by reordering the passes. Let's slot this change in after the upgrade to LLVM 18, which is also where upstream changed to the default to JITLink.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:278,deployability,infrastructur,infrastructure,278,"I now understand what is going wrong: @Axel-Naumann pushed me into the right direction by noticing that the errors concern vtables and typeinfo symbols, which are subject to reemission on our side. Then our `WeakTypeinfoVTablePass` will mark them as `weak` to make sure the JIT infrastructure deduplicates the symbols as needed. Additionally, `ReuseExistingWeakSymbols` will entirely remove the definitions if the symbol can be found in the process, for example for compiled classes. Now the problem is that the symbols were originally marked as ""local to the shared library"" and relocations can take advantage of this. This is where `PreventLocalOptPass` comes in, but it ran before the two passes mentioned before and therefore doesn't consider these symbols. So tldr, we can fix the problems by reordering the passes. Let's slot this change in after the upgrade to LLVM 18, which is also where upstream changed to the default to JITLink.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:857,deployability,upgrad,upgrade,857,"I now understand what is going wrong: @Axel-Naumann pushed me into the right direction by noticing that the errors concern vtables and typeinfo symbols, which are subject to reemission on our side. Then our `WeakTypeinfoVTablePass` will mark them as `weak` to make sure the JIT infrastructure deduplicates the symbols as needed. Additionally, `ReuseExistingWeakSymbols` will entirely remove the definitions if the symbol can be found in the process, for example for compiled classes. Now the problem is that the symbols were originally marked as ""local to the shared library"" and relocations can take advantage of this. This is where `PreventLocalOptPass` comes in, but it ran before the two passes mentioned before and therefore doesn't consider these symbols. So tldr, we can fix the problems by reordering the passes. Let's slot this change in after the upgrade to LLVM 18, which is also where upstream changed to the default to JITLink.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:163,integrability,sub,subject,163,"I now understand what is going wrong: @Axel-Naumann pushed me into the right direction by noticing that the errors concern vtables and typeinfo symbols, which are subject to reemission on our side. Then our `WeakTypeinfoVTablePass` will mark them as `weak` to make sure the JIT infrastructure deduplicates the symbols as needed. Additionally, `ReuseExistingWeakSymbols` will entirely remove the definitions if the symbol can be found in the process, for example for compiled classes. Now the problem is that the symbols were originally marked as ""local to the shared library"" and relocations can take advantage of this. This is where `PreventLocalOptPass` comes in, but it ran before the two passes mentioned before and therefore doesn't consider these symbols. So tldr, we can fix the problems by reordering the passes. Let's slot this change in after the upgrade to LLVM 18, which is also where upstream changed to the default to JITLink.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:560,interoperability,share,shared,560,"I now understand what is going wrong: @Axel-Naumann pushed me into the right direction by noticing that the errors concern vtables and typeinfo symbols, which are subject to reemission on our side. Then our `WeakTypeinfoVTablePass` will mark them as `weak` to make sure the JIT infrastructure deduplicates the symbols as needed. Additionally, `ReuseExistingWeakSymbols` will entirely remove the definitions if the symbol can be found in the process, for example for compiled classes. Now the problem is that the symbols were originally marked as ""local to the shared library"" and relocations can take advantage of this. This is where `PreventLocalOptPass` comes in, but it ran before the two passes mentioned before and therefore doesn't consider these symbols. So tldr, we can fix the problems by reordering the passes. Let's slot this change in after the upgrade to LLVM 18, which is also where upstream changed to the default to JITLink.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:115,modifiability,concern,concern,115,"I now understand what is going wrong: @Axel-Naumann pushed me into the right direction by noticing that the errors concern vtables and typeinfo symbols, which are subject to reemission on our side. Then our `WeakTypeinfoVTablePass` will mark them as `weak` to make sure the JIT infrastructure deduplicates the symbols as needed. Additionally, `ReuseExistingWeakSymbols` will entirely remove the definitions if the symbol can be found in the process, for example for compiled classes. Now the problem is that the symbols were originally marked as ""local to the shared library"" and relocations can take advantage of this. This is where `PreventLocalOptPass` comes in, but it ran before the two passes mentioned before and therefore doesn't consider these symbols. So tldr, we can fix the problems by reordering the passes. Let's slot this change in after the upgrade to LLVM 18, which is also where upstream changed to the default to JITLink.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:344,modifiability,Reu,ReuseExistingWeakSymbols,344,"I now understand what is going wrong: @Axel-Naumann pushed me into the right direction by noticing that the errors concern vtables and typeinfo symbols, which are subject to reemission on our side. Then our `WeakTypeinfoVTablePass` will mark them as `weak` to make sure the JIT infrastructure deduplicates the symbols as needed. Additionally, `ReuseExistingWeakSymbols` will entirely remove the definitions if the symbol can be found in the process, for example for compiled classes. Now the problem is that the symbols were originally marked as ""local to the shared library"" and relocations can take advantage of this. This is where `PreventLocalOptPass` comes in, but it ran before the two passes mentioned before and therefore doesn't consider these symbols. So tldr, we can fix the problems by reordering the passes. Let's slot this change in after the upgrade to LLVM 18, which is also where upstream changed to the default to JITLink.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:857,modifiability,upgrad,upgrade,857,"I now understand what is going wrong: @Axel-Naumann pushed me into the right direction by noticing that the errors concern vtables and typeinfo symbols, which are subject to reemission on our side. Then our `WeakTypeinfoVTablePass` will mark them as `weak` to make sure the JIT infrastructure deduplicates the symbols as needed. Additionally, `ReuseExistingWeakSymbols` will entirely remove the definitions if the symbol can be found in the process, for example for compiled classes. Now the problem is that the symbols were originally marked as ""local to the shared library"" and relocations can take advantage of this. This is where `PreventLocalOptPass` comes in, but it ran before the two passes mentioned before and therefore doesn't consider these symbols. So tldr, we can fix the problems by reordering the passes. Let's slot this change in after the upgrade to LLVM 18, which is also where upstream changed to the default to JITLink.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:108,performance,error,errors,108,"I now understand what is going wrong: @Axel-Naumann pushed me into the right direction by noticing that the errors concern vtables and typeinfo symbols, which are subject to reemission on our side. Then our `WeakTypeinfoVTablePass` will mark them as `weak` to make sure the JIT infrastructure deduplicates the symbols as needed. Additionally, `ReuseExistingWeakSymbols` will entirely remove the definitions if the symbol can be found in the process, for example for compiled classes. Now the problem is that the symbols were originally marked as ""local to the shared library"" and relocations can take advantage of this. This is where `PreventLocalOptPass` comes in, but it ran before the two passes mentioned before and therefore doesn't consider these symbols. So tldr, we can fix the problems by reordering the passes. Let's slot this change in after the upgrade to LLVM 18, which is also where upstream changed to the default to JITLink.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:730,reliability,doe,doesn,730,"I now understand what is going wrong: @Axel-Naumann pushed me into the right direction by noticing that the errors concern vtables and typeinfo symbols, which are subject to reemission on our side. Then our `WeakTypeinfoVTablePass` will mark them as `weak` to make sure the JIT infrastructure deduplicates the symbols as needed. Additionally, `ReuseExistingWeakSymbols` will entirely remove the definitions if the symbol can be found in the process, for example for compiled classes. Now the problem is that the symbols were originally marked as ""local to the shared library"" and relocations can take advantage of this. This is where `PreventLocalOptPass` comes in, but it ran before the two passes mentioned before and therefore doesn't consider these symbols. So tldr, we can fix the problems by reordering the passes. Let's slot this change in after the upgrade to LLVM 18, which is also where upstream changed to the default to JITLink.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:827,reliability,slo,slot,827,"I now understand what is going wrong: @Axel-Naumann pushed me into the right direction by noticing that the errors concern vtables and typeinfo symbols, which are subject to reemission on our side. Then our `WeakTypeinfoVTablePass` will mark them as `weak` to make sure the JIT infrastructure deduplicates the symbols as needed. Additionally, `ReuseExistingWeakSymbols` will entirely remove the definitions if the symbol can be found in the process, for example for compiled classes. Now the problem is that the symbols were originally marked as ""local to the shared library"" and relocations can take advantage of this. This is where `PreventLocalOptPass` comes in, but it ran before the two passes mentioned before and therefore doesn't consider these symbols. So tldr, we can fix the problems by reordering the passes. Let's slot this change in after the upgrade to LLVM 18, which is also where upstream changed to the default to JITLink.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:108,safety,error,errors,108,"I now understand what is going wrong: @Axel-Naumann pushed me into the right direction by noticing that the errors concern vtables and typeinfo symbols, which are subject to reemission on our side. Then our `WeakTypeinfoVTablePass` will mark them as `weak` to make sure the JIT infrastructure deduplicates the symbols as needed. Additionally, `ReuseExistingWeakSymbols` will entirely remove the definitions if the symbol can be found in the process, for example for compiled classes. Now the problem is that the symbols were originally marked as ""local to the shared library"" and relocations can take advantage of this. This is where `PreventLocalOptPass` comes in, but it ran before the two passes mentioned before and therefore doesn't consider these symbols. So tldr, we can fix the problems by reordering the passes. Let's slot this change in after the upgrade to LLVM 18, which is also where upstream changed to the default to JITLink.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:635,safety,Prevent,PreventLocalOptPass,635,"I now understand what is going wrong: @Axel-Naumann pushed me into the right direction by noticing that the errors concern vtables and typeinfo symbols, which are subject to reemission on our side. Then our `WeakTypeinfoVTablePass` will mark them as `weak` to make sure the JIT infrastructure deduplicates the symbols as needed. Additionally, `ReuseExistingWeakSymbols` will entirely remove the definitions if the symbol can be found in the process, for example for compiled classes. Now the problem is that the symbols were originally marked as ""local to the shared library"" and relocations can take advantage of this. This is where `PreventLocalOptPass` comes in, but it ran before the two passes mentioned before and therefore doesn't consider these symbols. So tldr, we can fix the problems by reordering the passes. Let's slot this change in after the upgrade to LLVM 18, which is also where upstream changed to the default to JITLink.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:635,security,Preven,PreventLocalOptPass,635,"I now understand what is going wrong: @Axel-Naumann pushed me into the right direction by noticing that the errors concern vtables and typeinfo symbols, which are subject to reemission on our side. Then our `WeakTypeinfoVTablePass` will mark them as `weak` to make sure the JIT infrastructure deduplicates the symbols as needed. Additionally, `ReuseExistingWeakSymbols` will entirely remove the definitions if the symbol can be found in the process, for example for compiled classes. Now the problem is that the symbols were originally marked as ""local to the shared library"" and relocations can take advantage of this. This is where `PreventLocalOptPass` comes in, but it ran before the two passes mentioned before and therefore doesn't consider these symbols. So tldr, we can fix the problems by reordering the passes. Let's slot this change in after the upgrade to LLVM 18, which is also where upstream changed to the default to JITLink.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:6,testability,understand,understand,6,"I now understand what is going wrong: @Axel-Naumann pushed me into the right direction by noticing that the errors concern vtables and typeinfo symbols, which are subject to reemission on our side. Then our `WeakTypeinfoVTablePass` will mark them as `weak` to make sure the JIT infrastructure deduplicates the symbols as needed. Additionally, `ReuseExistingWeakSymbols` will entirely remove the definitions if the symbol can be found in the process, for example for compiled classes. Now the problem is that the symbols were originally marked as ""local to the shared library"" and relocations can take advantage of this. This is where `PreventLocalOptPass` comes in, but it ran before the two passes mentioned before and therefore doesn't consider these symbols. So tldr, we can fix the problems by reordering the passes. Let's slot this change in after the upgrade to LLVM 18, which is also where upstream changed to the default to JITLink.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:115,testability,concern,concern,115,"I now understand what is going wrong: @Axel-Naumann pushed me into the right direction by noticing that the errors concern vtables and typeinfo symbols, which are subject to reemission on our side. Then our `WeakTypeinfoVTablePass` will mark them as `weak` to make sure the JIT infrastructure deduplicates the symbols as needed. Additionally, `ReuseExistingWeakSymbols` will entirely remove the definitions if the symbol can be found in the process, for example for compiled classes. Now the problem is that the symbols were originally marked as ""local to the shared library"" and relocations can take advantage of this. This is where `PreventLocalOptPass` comes in, but it ran before the two passes mentioned before and therefore doesn't consider these symbols. So tldr, we can fix the problems by reordering the passes. Let's slot this change in after the upgrade to LLVM 18, which is also where upstream changed to the default to JITLink.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:108,usability,error,errors,108,"I now understand what is going wrong: @Axel-Naumann pushed me into the right direction by noticing that the errors concern vtables and typeinfo symbols, which are subject to reemission on our side. Then our `WeakTypeinfoVTablePass` will mark them as `weak` to make sure the JIT infrastructure deduplicates the symbols as needed. Additionally, `ReuseExistingWeakSymbols` will entirely remove the definitions if the symbol can be found in the process, for example for compiled classes. Now the problem is that the symbols were originally marked as ""local to the shared library"" and relocations can take advantage of this. This is where `PreventLocalOptPass` comes in, but it ran before the two passes mentioned before and therefore doesn't consider these symbols. So tldr, we can fix the problems by reordering the passes. Let's slot this change in after the upgrade to LLVM 18, which is also where upstream changed to the default to JITLink.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/issues/14247:356,deployability,version,version,356,"looks fine for me with master:. ```. % root --web=off. ------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Dec 18 2023, 07:03:39 |. | From heads/master@v6-31-01-516-g1477d3adeb |. | With Apple clang version 15.0.0 (clang-1500.1.0.2.5) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] new TGSpeedo. (TGSpeedo *) 0x7f846473b940. root [1] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:356,integrability,version,version,356,"looks fine for me with master:. ```. % root --web=off. ------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Dec 18 2023, 07:03:39 |. | From heads/master@v6-31-01-516-g1477d3adeb |. | With Apple clang version 15.0.0 (clang-1500.1.0.2.5) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] new TGSpeedo. (TGSpeedo *) 0x7f846473b940. root [1] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:356,modifiability,version,version,356,"looks fine for me with master:. ```. % root --web=off. ------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Dec 18 2023, 07:03:39 |. | From heads/master@v6-31-01-516-g1477d3adeb |. | With Apple clang version 15.0.0 (clang-1500.1.0.2.5) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] new TGSpeedo. (TGSpeedo *) 0x7f846473b940. root [1] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:196,security,Team,Team,196,"looks fine for me with master:. ```. % root --web=off. ------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Dec 18 2023, 07:03:39 |. | From heads/master@v6-31-01-516-g1477d3adeb |. | With Apple clang version 15.0.0 (clang-1500.1.0.2.5) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] new TGSpeedo. (TGSpeedo *) 0x7f846473b940. root [1] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:403,usability,help,help,403,"looks fine for me with master:. ```. % root --web=off. ------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Dec 18 2023, 07:03:39 |. | From heads/master@v6-31-01-516-g1477d3adeb |. | With Apple clang version 15.0.0 (clang-1500.1.0.2.5) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] new TGSpeedo. (TGSpeedo *) 0x7f846473b940. root [1] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:13,deployability,instal,install,13,I can try to install root on ubuntu to see if that's the case,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:64,availability,down,downloading,64,"Note: if I build from source, it works fine. It fails only when downloading the binary release. So it seems a packaging issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:11,deployability,build,build,11,"Note: if I build from source, it works fine. It fails only when downloading the binary release. So it seems a packaging issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:48,deployability,fail,fails,48,"Note: if I build from source, it works fine. It fails only when downloading the binary release. So it seems a packaging issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:87,deployability,releas,release,87,"Note: if I build from source, it works fine. It fails only when downloading the binary release. So it seems a packaging issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:110,modifiability,pac,packaging,110,"Note: if I build from source, it works fine. It fails only when downloading the binary release. So it seems a packaging issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:48,reliability,fail,fails,48,"Note: if I build from source, it works fine. It fails only when downloading the binary release. So it seems a packaging issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:17,deployability,build,build,17,With normal ROOT build I cannot reproduce problem too. @ferdymercury You say it happens with binary release. Is speedo.gif image really missing there? Or just widget not able to find it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:100,deployability,releas,release,100,With normal ROOT build I cannot reproduce problem too. @ferdymercury You say it happens with binary release. Is speedo.gif image really missing there? Or just widget not able to find it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:159,usability,widget,widget,159,With normal ROOT build I cannot reproduce problem too. @ferdymercury You say it happens with binary release. Is speedo.gif image really missing there? Or just widget not able to find it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:617,availability,Error,Error,617,"`speedo.gif` is there, widget is not finding it. ```. /opt/root$ find ./ -name speedo.gif. ./icons/speedo.gif. source bin/thisroot.sh. root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] new TGSpeedo. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. (TGSpeedo *) 0x560e76068590. gROOT->GetIconPath(). /opt/root/icons. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:647,deployability,Build,Build,647,"`speedo.gif` is there, widget is not finding it. ```. /opt/root$ find ./ -name speedo.gif. ./icons/speedo.gif. source bin/thisroot.sh. root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] new TGSpeedo. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. (TGSpeedo *) 0x560e76068590. gROOT->GetIconPath(). /opt/root/icons. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:617,performance,Error,Error,617,"`speedo.gif` is there, widget is not finding it. ```. /opt/root$ find ./ -name speedo.gif. ./icons/speedo.gif. source bin/thisroot.sh. root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] new TGSpeedo. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. (TGSpeedo *) 0x560e76068590. gROOT->GetIconPath(). /opt/root/icons. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:617,safety,Error,Error,617,"`speedo.gif` is there, widget is not finding it. ```. /opt/root$ find ./ -name speedo.gif. ./icons/speedo.gif. source bin/thisroot.sh. root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] new TGSpeedo. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. (TGSpeedo *) 0x560e76068590. gROOT->GetIconPath(). /opt/root/icons. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:282,security,Team,Team,282,"`speedo.gif` is there, widget is not finding it. ```. /opt/root$ find ./ -name speedo.gif. ./icons/speedo.gif. source bin/thisroot.sh. root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] new TGSpeedo. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. (TGSpeedo *) 0x560e76068590. gROOT->GetIconPath(). /opt/root/icons. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:23,usability,widget,widget,23,"`speedo.gif` is there, widget is not finding it. ```. /opt/root$ find ./ -name speedo.gif. ./icons/speedo.gif. source bin/thisroot.sh. root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] new TGSpeedo. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. (TGSpeedo *) 0x560e76068590. gROOT->GetIconPath(). /opt/root/icons. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:465,usability,help,help,465,"`speedo.gif` is there, widget is not finding it. ```. /opt/root$ find ./ -name speedo.gif. ./icons/speedo.gif. source bin/thisroot.sh. root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] new TGSpeedo. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. (TGSpeedo *) 0x560e76068590. gROOT->GetIconPath(). /opt/root/icons. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:617,usability,Error,Error,617,"`speedo.gif` is there, widget is not finding it. ```. /opt/root$ find ./ -name speedo.gif. ./icons/speedo.gif. source bin/thisroot.sh. root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] new TGSpeedo. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. (TGSpeedo *) 0x560e76068590. gROOT->GetIconPath(). /opt/root/icons. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:87,energy efficiency,CPU,CPUMeter,87,I tried on Windows and it works just fine. And then I suppose the macro `tutorials/gui/CPUMeter.C` doesn't work?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:87,performance,CPU,CPUMeter,87,I tried on Windows and it works just fine. And then I suppose the macro `tutorials/gui/CPUMeter.C` doesn't work?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:99,reliability,doe,doesn,99,I tried on Windows and it works just fine. And then I suppose the macro `tutorials/gui/CPUMeter.C` doesn't work?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:191,availability,Error,Error,191,"```. root -l tutorials/gui/CPUMeter.C+. root [0] . Processing tutorials/gui/CPUMeter.C+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//opt/root/./tutorials/gui/CPUMeter_C.so. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc7260ea3ea in __GI___wait4 (pid=996538, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007fc7260ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007fc726050bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007fc726b13034 in TUnixSystem::StackTrace() () at /opt/root/lib/libCore.so. #4 0x00007fc726b10365 in TUnixSystem::DispatchSignals(ESignals) () at /opt/root/lib/libCore.so. #5 0x00007fc726042520 in <signal handler called> () at /lib/x86_64-linux-gnu/libc.so.6. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fd",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:221,deployability,Build,Build,221,"```. root -l tutorials/gui/CPUMeter.C+. root [0] . Processing tutorials/gui/CPUMeter.C+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//opt/root/./tutorials/gui/CPUMeter_C.so. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc7260ea3ea in __GI___wait4 (pid=996538, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007fc7260ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007fc726050bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007fc726b13034 in TUnixSystem::StackTrace() () at /opt/root/lib/libCore.so. #4 0x00007fc726b10365 in TUnixSystem::DispatchSignals(ESignals) () at /opt/root/lib/libCore.so. #5 0x00007fc726042520 in <signal handler called> () at /lib/x86_64-linux-gnu/libc.so.6. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fd",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:388,deployability,stack,stack,388,"```. root -l tutorials/gui/CPUMeter.C+. root [0] . Processing tutorials/gui/CPUMeter.C+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//opt/root/./tutorials/gui/CPUMeter_C.so. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc7260ea3ea in __GI___wait4 (pid=996538, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007fc7260ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007fc726050bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007fc726b13034 in TUnixSystem::StackTrace() () at /opt/root/lib/libCore.so. #4 0x00007fc726b10365 in TUnixSystem::DispatchSignals(ESignals) () at /opt/root/lib/libCore.so. #5 0x00007fc726042520 in <signal handler called> () at /lib/x86_64-linux-gnu/libc.so.6. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fd",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:946,deployability,Stack,StackTrace,946,"```. root -l tutorials/gui/CPUMeter.C+. root [0] . Processing tutorials/gui/CPUMeter.C+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//opt/root/./tutorials/gui/CPUMeter_C.so. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc7260ea3ea in __GI___wait4 (pid=996538, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007fc7260ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007fc726050bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007fc726b13034 in TUnixSystem::StackTrace() () at /opt/root/lib/libCore.so. #4 0x00007fc726b10365 in TUnixSystem::DispatchSignals(ESignals) () at /opt/root/lib/libCore.so. #5 0x00007fc726042520 in <signal handler called> () at /lib/x86_64-linux-gnu/libc.so.6. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fd",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:3275,deployability,stack,stack,3275,"g::Interpreter::CompilationResult&, cling::Value*, bool) () at /opt/root/lib/libCling.so. #15 0x00007fc71fcf6b3c in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) () at /opt/root/lib/libCling.so. #16 0x00007fc71fd0b0a8 in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) () at /opt/root/lib/libCling.so. #17 0x00007fc71fd0b53b in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) () at /opt/root/lib/libCling.so. #18 0x00007fc7269ab055 in TApplication::ExecuteFile(char const*, int*, bool) () at /opt/root/lib/libCore.so. #19 0x00007fc726d602e0 in TRint::ProcessLineNr(char const*, char const*, int*) () at /opt/root/lib/libRint.so. #20 0x00007fc726d621f5 in TRint::Run(bool) () at /opt/root/lib/libRint.so. #21 0x0000555d7106a2f3 in main (). ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:3731,deployability,stack,stack,3731,"preter::EErrorCode*) () at /opt/root/lib/libCling.so. #18 0x00007fc7269ab055 in TApplication::ExecuteFile(char const*, int*, bool) () at /opt/root/lib/libCore.so. #19 0x00007fc726d602e0 in TRint::ProcessLineNr(char const*, char const*, int*) () at /opt/root/lib/libRint.so. #20 0x00007fc726d621f5 in TRint::Run(bool) () at /opt/root/lib/libRint.so. #21 0x0000555d7106a2f3 in main (). ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fdf0558 in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:27,energy efficiency,CPU,CPUMeter,27,"```. root -l tutorials/gui/CPUMeter.C+. root [0] . Processing tutorials/gui/CPUMeter.C+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//opt/root/./tutorials/gui/CPUMeter_C.so. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc7260ea3ea in __GI___wait4 (pid=996538, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007fc7260ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007fc726050bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007fc726b13034 in TUnixSystem::StackTrace() () at /opt/root/lib/libCore.so. #4 0x00007fc726b10365 in TUnixSystem::DispatchSignals(ESignals) () at /opt/root/lib/libCore.so. #5 0x00007fc726042520 in <signal handler called> () at /lib/x86_64-linux-gnu/libc.so.6. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fd",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:76,energy efficiency,CPU,CPUMeter,76,"```. root -l tutorials/gui/CPUMeter.C+. root [0] . Processing tutorials/gui/CPUMeter.C+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//opt/root/./tutorials/gui/CPUMeter_C.so. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc7260ea3ea in __GI___wait4 (pid=996538, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007fc7260ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007fc726050bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007fc726b13034 in TUnixSystem::StackTrace() () at /opt/root/lib/libCore.so. #4 0x00007fc726b10365 in TUnixSystem::DispatchSignals(ESignals) () at /opt/root/lib/libCore.so. #5 0x00007fc726042520 in <signal handler called> () at /lib/x86_64-linux-gnu/libc.so.6. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fd",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:708,energy efficiency,optim,optimized,708,"```. root -l tutorials/gui/CPUMeter.C+. root [0] . Processing tutorials/gui/CPUMeter.C+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//opt/root/./tutorials/gui/CPUMeter_C.so. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc7260ea3ea in __GI___wait4 (pid=996538, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007fc7260ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007fc726050bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007fc726b13034 in TUnixSystem::StackTrace() () at /opt/root/lib/libCore.so. #4 0x00007fc726b10365 in TUnixSystem::DispatchSignals(ESignals) () at /opt/root/lib/libCore.so. #5 0x00007fc726042520 in <signal handler called> () at /lib/x86_64-linux-gnu/libc.so.6. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fd",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:858,energy efficiency,optim,optimized,858,"```. root -l tutorials/gui/CPUMeter.C+. root [0] . Processing tutorials/gui/CPUMeter.C+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//opt/root/./tutorials/gui/CPUMeter_C.so. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc7260ea3ea in __GI___wait4 (pid=996538, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007fc7260ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007fc726050bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007fc726b13034 in TUnixSystem::StackTrace() () at /opt/root/lib/libCore.so. #4 0x00007fc726b10365 in TUnixSystem::DispatchSignals(ESignals) () at /opt/root/lib/libCore.so. #5 0x00007fc726042520 in <signal handler called> () at /lib/x86_64-linux-gnu/libc.so.6. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fd",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:1328,energy efficiency,CPU,CPUMeter,1328,"================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc7260ea3ea in __GI___wait4 (pid=996538, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007fc7260ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007fc726050bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007fc726b13034 in TUnixSystem::StackTrace() () at /opt/root/lib/libCore.so. #4 0x00007fc726b10365 in TUnixSystem::DispatchSignals(ESignals) () at /opt/root/lib/libCore.so. #5 0x00007fc726042520 in <signal handler called> () at /lib/x86_64-linux-gnu/libc.so.6. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fdf0558 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () at /opt/root/lib/libCling.so. #14 0x00007fc71fed2987 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, boo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:1845,energy efficiency,alloc,allocator,1845," (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007fc726b13034 in TUnixSystem::StackTrace() () at /opt/root/lib/libCore.so. #4 0x00007fc726b10365 in TUnixSystem::DispatchSignals(ESignals) () at /opt/root/lib/libCore.so. #5 0x00007fc726042520 in <signal handler called> () at /lib/x86_64-linux-gnu/libc.so.6. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fdf0558 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () at /opt/root/lib/libCling.so. #14 0x00007fc71fed2987 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () at /opt/root/lib/libCling.so. #15 0x00007fc71fcf6b3c in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) () at /opt/root/lib/libCling.so. #16 0x00007fc71fd0b0a8 in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) () at /opt/root/lib/libCling.so. #17 0x00007fc71fd0b53b in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) () at /opt/root/lib/libCling.so. #18 0x00007fc7269ab055 in TApplication::ExecuteFile(char const",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:2099,energy efficiency,alloc,allocator,2099,"2520 in <signal handler called> () at /lib/x86_64-linux-gnu/libc.so.6. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fdf0558 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () at /opt/root/lib/libCling.so. #14 0x00007fc71fed2987 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () at /opt/root/lib/libCling.so. #15 0x00007fc71fcf6b3c in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) () at /opt/root/lib/libCling.so. #16 0x00007fc71fd0b0a8 in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) () at /opt/root/lib/libCling.so. #17 0x00007fc71fd0b53b in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) () at /opt/root/lib/libCling.so. #18 0x00007fc7269ab055 in TApplication::ExecuteFile(char const*, int*, bool) () at /opt/root/lib/libCore.so. #19 0x00007fc726d602e0 in TRint::ProcessLineNr(char const*, char const*, int*) () at /opt/root/lib/libRint.so. #20 0x00007fc726d621f5 in TRint::Run(bool) () at /opt/root/lib/libRint.so. #21 0x0000555d7106a2f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:4054,energy efficiency,CPU,CPUMeter,4054,"opt/root/lib/libRint.so. #21 0x0000555d7106a2f3 in main (). ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fdf0558 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () at /opt/root/lib/libCling.so. #14 0x00007fc71fed2987 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, boo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:4571,energy efficiency,alloc,allocator,4571,"abled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fdf0558 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () at /opt/root/lib/libCling.so. #14 0x00007fc71fed2987 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () at /opt/root/lib/libCling.so. #15 0x00007fc71fcf6b3c in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) () at /opt/root/lib/libCling.so. ===========================================================. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:4825,energy efficiency,alloc,allocator,4825,"abled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fdf0558 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () at /opt/root/lib/libCling.so. #14 0x00007fc71fed2987 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () at /opt/root/lib/libCling.so. #15 0x00007fc71fcf6b3c in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) () at /opt/root/lib/libCling.so. ===========================================================. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:3600,integrability,sub,submit,3600," TInterpreter::EErrorCode*) () at /opt/root/lib/libCling.so. #17 0x00007fc71fd0b53b in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) () at /opt/root/lib/libCling.so. #18 0x00007fc7269ab055 in TApplication::ExecuteFile(char const*, int*, bool) () at /opt/root/lib/libCore.so. #19 0x00007fc726d602e0 in TRint::ProcessLineNr(char const*, char const*, int*) () at /opt/root/lib/libRint.so. #20 0x00007fc726d621f5 in TRint::Run(bool) () at /opt/root/lib/libRint.so. #21 0x0000555d7106a2f3 in main (). ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:130,interoperability,share,shared,130,"```. root -l tutorials/gui/CPUMeter.C+. root [0] . Processing tutorials/gui/CPUMeter.C+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//opt/root/./tutorials/gui/CPUMeter_C.so. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc7260ea3ea in __GI___wait4 (pid=996538, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007fc7260ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007fc726050bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007fc726b13034 in TUnixSystem::StackTrace() () at /opt/root/lib/libCore.so. #4 0x00007fc726b10365 in TUnixSystem::DispatchSignals(ESignals) () at /opt/root/lib/libCore.so. #5 0x00007fc726042520 in <signal handler called> () at /lib/x86_64-linux-gnu/libc.so.6. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fd",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:3378,modifiability,variab,variable,3378,"1fcf6b3c in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) () at /opt/root/lib/libCling.so. #16 0x00007fc71fd0b0a8 in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) () at /opt/root/lib/libCling.so. #17 0x00007fc71fd0b53b in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) () at /opt/root/lib/libCling.so. #18 0x00007fc7269ab055 in TApplication::ExecuteFile(char const*, int*, bool) () at /opt/root/lib/libCore.so. #19 0x00007fc726d602e0 in TRint::ProcessLineNr(char const*, char const*, int*) () at /opt/root/lib/libRint.so. #20 0x00007fc726d621f5 in TRint::Run(bool) () at /opt/root/lib/libRint.so. #21 0x0000555d7106a2f3 in main (). ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::Funct",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:27,performance,CPU,CPUMeter,27,"```. root -l tutorials/gui/CPUMeter.C+. root [0] . Processing tutorials/gui/CPUMeter.C+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//opt/root/./tutorials/gui/CPUMeter_C.so. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc7260ea3ea in __GI___wait4 (pid=996538, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007fc7260ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007fc726050bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007fc726b13034 in TUnixSystem::StackTrace() () at /opt/root/lib/libCore.so. #4 0x00007fc726b10365 in TUnixSystem::DispatchSignals(ESignals) () at /opt/root/lib/libCore.so. #5 0x00007fc726042520 in <signal handler called> () at /lib/x86_64-linux-gnu/libc.so.6. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fd",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:76,performance,CPU,CPUMeter,76,"```. root -l tutorials/gui/CPUMeter.C+. root [0] . Processing tutorials/gui/CPUMeter.C+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//opt/root/./tutorials/gui/CPUMeter_C.so. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc7260ea3ea in __GI___wait4 (pid=996538, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007fc7260ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007fc726050bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007fc726b13034 in TUnixSystem::StackTrace() () at /opt/root/lib/libCore.so. #4 0x00007fc726b10365 in TUnixSystem::DispatchSignals(ESignals) () at /opt/root/lib/libCore.so. #5 0x00007fc726042520 in <signal handler called> () at /lib/x86_64-linux-gnu/libc.so.6. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fd",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:191,performance,Error,Error,191,"```. root -l tutorials/gui/CPUMeter.C+. root [0] . Processing tutorials/gui/CPUMeter.C+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//opt/root/./tutorials/gui/CPUMeter_C.so. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc7260ea3ea in __GI___wait4 (pid=996538, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007fc7260ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007fc726050bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007fc726b13034 in TUnixSystem::StackTrace() () at /opt/root/lib/libCore.so. #4 0x00007fc726b10365 in TUnixSystem::DispatchSignals(ESignals) () at /opt/root/lib/libCore.so. #5 0x00007fc726042520 in <signal handler called> () at /lib/x86_64-linux-gnu/libc.so.6. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fd",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:708,performance,optimiz,optimized,708,"```. root -l tutorials/gui/CPUMeter.C+. root [0] . Processing tutorials/gui/CPUMeter.C+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//opt/root/./tutorials/gui/CPUMeter_C.so. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc7260ea3ea in __GI___wait4 (pid=996538, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007fc7260ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007fc726050bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007fc726b13034 in TUnixSystem::StackTrace() () at /opt/root/lib/libCore.so. #4 0x00007fc726b10365 in TUnixSystem::DispatchSignals(ESignals) () at /opt/root/lib/libCore.so. #5 0x00007fc726042520 in <signal handler called> () at /lib/x86_64-linux-gnu/libc.so.6. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fd",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:858,performance,optimiz,optimized,858,"```. root -l tutorials/gui/CPUMeter.C+. root [0] . Processing tutorials/gui/CPUMeter.C+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//opt/root/./tutorials/gui/CPUMeter_C.so. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc7260ea3ea in __GI___wait4 (pid=996538, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007fc7260ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007fc726050bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007fc726b13034 in TUnixSystem::StackTrace() () at /opt/root/lib/libCore.so. #4 0x00007fc726b10365 in TUnixSystem::DispatchSignals(ESignals) () at /opt/root/lib/libCore.so. #5 0x00007fc726042520 in <signal handler called> () at /lib/x86_64-linux-gnu/libc.so.6. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fd",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:1328,performance,CPU,CPUMeter,1328,"================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc7260ea3ea in __GI___wait4 (pid=996538, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007fc7260ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007fc726050bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007fc726b13034 in TUnixSystem::StackTrace() () at /opt/root/lib/libCore.so. #4 0x00007fc726b10365 in TUnixSystem::DispatchSignals(ESignals) () at /opt/root/lib/libCore.so. #5 0x00007fc726042520 in <signal handler called> () at /lib/x86_64-linux-gnu/libc.so.6. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fdf0558 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () at /opt/root/lib/libCling.so. #14 0x00007fc71fed2987 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, boo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:4054,performance,CPU,CPUMeter,4054,"opt/root/lib/libRint.so. #21 0x0000555d7106a2f3 in main (). ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fdf0558 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () at /opt/root/lib/libCling.so. #14 0x00007fc71fed2987 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, boo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:191,safety,Error,Error,191,"```. root -l tutorials/gui/CPUMeter.C+. root [0] . Processing tutorials/gui/CPUMeter.C+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//opt/root/./tutorials/gui/CPUMeter_C.so. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc7260ea3ea in __GI___wait4 (pid=996538, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007fc7260ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007fc726050bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007fc726b13034 in TUnixSystem::StackTrace() () at /opt/root/lib/libCore.so. #4 0x00007fc726b10365 in TUnixSystem::DispatchSignals(ESignals) () at /opt/root/lib/libCore.so. #5 0x00007fc726042520 in <signal handler called> () at /lib/x86_64-linux-gnu/libc.so.6. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fd",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:1113,security,sign,signal,1113,"iC>: creating shared library /tmp//opt/root/./tutorials/gui/CPUMeter_C.so. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc7260ea3ea in __GI___wait4 (pid=996538, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007fc7260ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007fc726050bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007fc726b13034 in TUnixSystem::StackTrace() () at /opt/root/lib/libCore.so. #4 0x00007fc726b10365 in TUnixSystem::DispatchSignals(ESignals) () at /opt/root/lib/libCore.so. #5 0x00007fc726042520 in <signal handler called> () at /lib/x86_64-linux-gnu/libc.so.6. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fdf0558 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:394,testability,trace,trace,394,"```. root -l tutorials/gui/CPUMeter.C+. root [0] . Processing tutorials/gui/CPUMeter.C+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//opt/root/./tutorials/gui/CPUMeter_C.so. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc7260ea3ea in __GI___wait4 (pid=996538, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007fc7260ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007fc726050bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007fc726b13034 in TUnixSystem::StackTrace() () at /opt/root/lib/libCore.so. #4 0x00007fc726b10365 in TUnixSystem::DispatchSignals(ESignals) () at /opt/root/lib/libCore.so. #5 0x00007fc726042520 in <signal handler called> () at /lib/x86_64-linux-gnu/libc.so.6. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fd",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:3281,testability,trace,trace,3281,"erpreter::CompilationResult&, cling::Value*, bool) () at /opt/root/lib/libCling.so. #15 0x00007fc71fcf6b3c in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) () at /opt/root/lib/libCling.so. #16 0x00007fc71fd0b0a8 in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) () at /opt/root/lib/libCling.so. #17 0x00007fc71fd0b53b in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) () at /opt/root/lib/libCling.so. #18 0x00007fc7269ab055 in TApplication::ExecuteFile(char const*, int*, bool) () at /opt/root/lib/libCore.so. #19 0x00007fc726d602e0 in TRint::ProcessLineNr(char const*, char const*, int*) () at /opt/root/lib/libRint.so. #20 0x00007fc726d621f5 in TRint::Run(bool) () at /opt/root/lib/libRint.so. #21 0x0000555d7106a2f3 in main (). ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:3737,testability,trace,trace,3737,"::EErrorCode*) () at /opt/root/lib/libCling.so. #18 0x00007fc7269ab055 in TApplication::ExecuteFile(char const*, int*, bool) () at /opt/root/lib/libCore.so. #19 0x00007fc726d602e0 in TRint::ProcessLineNr(char const*, char const*, int*) () at /opt/root/lib/libRint.so. #20 0x00007fc726d621f5 in TRint::Run(bool) () at /opt/root/lib/libRint.so. #21 0x0000555d7106a2f3 in main (). ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fdf0558 in cling",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:191,usability,Error,Error,191,"```. root -l tutorials/gui/CPUMeter.C+. root [0] . Processing tutorials/gui/CPUMeter.C+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//opt/root/./tutorials/gui/CPUMeter_C.so. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc7260ea3ea in __GI___wait4 (pid=996538, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007fc7260ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffebfaa2898, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007fc726050bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007fc726b13034 in TUnixSystem::StackTrace() () at /opt/root/lib/libCore.so. #4 0x00007fc726b10365 in TUnixSystem::DispatchSignals(ESignals) () at /opt/root/lib/libCore.so. #5 0x00007fc726042520 in <signal handler called> () at /lib/x86_64-linux-gnu/libc.so.6. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fd",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:3201,usability,hint,hint,3201,"4 0x00007fc71fed2987 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () at /opt/root/lib/libCling.so. #15 0x00007fc71fcf6b3c in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) () at /opt/root/lib/libCling.so. #16 0x00007fc71fd0b0a8 in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) () at /opt/root/lib/libCling.so. #17 0x00007fc71fd0b53b in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) () at /opt/root/lib/libCling.so. #18 0x00007fc7269ab055 in TApplication::ExecuteFile(char const*, int*, bool) () at /opt/root/lib/libCore.so. #19 0x00007fc726d602e0 in TRint::ProcessLineNr(char const*, char const*, int*) () at /opt/root/lib/libRint.so. #20 0x00007fc726d621f5 in TRint::Run(bool) () at /opt/root/lib/libRint.so. #21 0x0000555d7106a2f3 in main (). ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:3415,usability,help,help,3415,"ion(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) () at /opt/root/lib/libCling.so. #16 0x00007fc71fd0b0a8 in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) () at /opt/root/lib/libCling.so. #17 0x00007fc71fd0b53b in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) () at /opt/root/lib/libCling.so. #18 0x00007fc7269ab055 in TApplication::ExecuteFile(char const*, int*, bool) () at /opt/root/lib/libCore.so. #19 0x00007fc726d602e0 in TRint::ProcessLineNr(char const*, char const*, int*) () at /opt/root/lib/libRint.so. #20 0x00007fc726d621f5 in TRint::Run(bool) () at /opt/root/lib/libRint.so. #21 0x0000555d7106a2f3 in main (). ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:3473,usability,prefer,preferably,3473,"ompilationResult&, cling::Value*) () at /opt/root/lib/libCling.so. #16 0x00007fc71fd0b0a8 in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) () at /opt/root/lib/libCling.so. #17 0x00007fc71fd0b53b in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) () at /opt/root/lib/libCling.so. #18 0x00007fc7269ab055 in TApplication::ExecuteFile(char const*, int*, bool) () at /opt/root/lib/libCore.so. #19 0x00007fc726d602e0 in TRint::ProcessLineNr(char const*, char const*, int*) () at /opt/root/lib/libRint.so. #20 0x00007fc726d621f5 in TRint::Run(bool) () at /opt/root/lib/libRint.so. #21 0x0000555d7106a2f3 in main (). ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:3494,usability,command,command,3494,"ling::Value*) () at /opt/root/lib/libCling.so. #16 0x00007fc71fd0b0a8 in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) () at /opt/root/lib/libCling.so. #17 0x00007fc71fd0b53b in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) () at /opt/root/lib/libCling.so. #18 0x00007fc7269ab055 in TApplication::ExecuteFile(char const*, int*, bool) () at /opt/root/lib/libCore.so. #19 0x00007fc726d602e0 in TRint::ProcessLineNr(char const*, char const*, int*) () at /opt/root/lib/libRint.so. #20 0x00007fc726d621f5 in TRint::Run(bool) () at /opt/root/lib/libRint.so. #21 0x0000555d7106a2f3 in main (). ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::Evalua",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:3647,usability,prefer,preferably,3647,"ibCling.so. #17 0x00007fc71fd0b53b in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) () at /opt/root/lib/libCling.so. #18 0x00007fc7269ab055 in TApplication::ExecuteFile(char const*, int*, bool) () at /opt/root/lib/libCore.so. #19 0x00007fc726d602e0 in TRint::ProcessLineNr(char const*, char const*, int*) () at /opt/root/lib/libRint.so. #20 0x00007fc726d621f5 in TRint::Run(bool) () at /opt/root/lib/libRint.so. #21 0x0000555d7106a2f3 in main (). ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:3669,usability,command,command,3669,"07fc71fd0b53b in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) () at /opt/root/lib/libCling.so. #18 0x00007fc7269ab055 in TApplication::ExecuteFile(char const*, int*, bool) () at /opt/root/lib/libCore.so. #19 0x00007fc726d602e0 in TRint::ProcessLineNr(char const*, char const*, int*) () at /opt/root/lib/libRint.so. #20 0x00007fc726d621f5 in TRint::Run(bool) () at /opt/root/lib/libRint.so. #21 0x0000555d7106a2f3 in main (). ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned lon",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:3813,usability,help,help,3813,"Application::ExecuteFile(char const*, int*, bool) () at /opt/root/lib/libCore.so. #19 0x00007fc726d602e0 in TRint::ProcessLineNr(char const*, char const*, int*) () at /opt/root/lib/libRint.so. #20 0x00007fc726d621f5 in TRint::Run(bool) () at /opt/root/lib/libRint.so. #21 0x0000555d7106a2f3 in main (). ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fc726637453 in TGShapedMain::TGShapedMain(TGWindow const*, int, int) () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #7 0x00007fc7266376cd in CPUMeter() () at /tmp/opt/root/tutorials/gui/CPUMeter_C.so. #8 0x00007fc726d2603f in (). #9 0x00007ffebfaa5970 in (). #10 0x00007fc71fe72fa8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () at /opt/root/lib/libCling.so. #11 0x00007fc71fdefbec in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () at /opt/root/lib/libCling.so. #12 0x00007fc71fdf0337 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () at /opt/root/lib/libCling.so. #13 0x00007fc71fdf0558 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<ch",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:24,deployability,fail,fails,24,"Then I don't see how it fails. I tried:. ```. root [0] TString name = ""speedo.gif"";. root [1] auto img = TImage::Open(name). (TImage *) 0x1c09f814b60. root [2] img->IsValid(). (bool) true. root [3]. ```. If this works for you I'll try on a Linux node...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:24,reliability,fail,fails,24,"Then I don't see how it fails. I tried:. ```. root [0] TString name = ""speedo.gif"";. root [1] auto img = TImage::Open(name). (TImage *) 0x1c09f814b60. root [2] img->IsValid(). (bool) true. root [3]. ```. If this works for you I'll try on a Linux node...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:3,deployability,fail,fails,3,"It fails. ```. root [0] TString name = ""speedo.gif"";. root [1] auto img = TImage::Open(name). (TImage *) 0x5563039ba390. root [2] img->IsValid(). (bool) false. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:3,reliability,fail,fails,3,"It fails. ```. root [0] TString name = ""speedo.gif"";. root [1] auto img = TImage::Open(name). (TImage *) 0x5563039ba390. root [2] img->IsValid(). (bool) false. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:32,deployability,build,build,32,"Even if I remove all icons from build directory - it does not crash for me. Seems to be warning about missing icon is not direct cause of the segfault,. From the backtrace it is not clear at which moment ROOT crashes. Can you try to run in the debugger?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:53,reliability,doe,does,53,"Even if I remove all icons from build directory - it does not crash for me. Seems to be warning about missing icon is not direct cause of the segfault,. From the backtrace it is not clear at which moment ROOT crashes. Can you try to run in the debugger?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:182,usability,clear,clear,182,"Even if I remove all icons from build directory - it does not crash for me. Seems to be warning about missing icon is not direct cause of the segfault,. From the backtrace it is not clear at which moment ROOT crashes. Can you try to run in the debugger?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:44,energy efficiency,CPU,CPUMeter,44,"It does not crash for me, only the tutorial CPUMeter crashes. I just proposed https://github.com/root-project/root/pull/14379 for that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:44,performance,CPU,CPUMeter,44,"It does not crash for me, only the tutorial CPUMeter crashes. I just proposed https://github.com/root-project/root/pull/14379 for that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:3,reliability,doe,does,3,"It does not crash for me, only the tutorial CPUMeter crashes. I just proposed https://github.com/root-project/root/pull/14379 for that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:95,deployability,version,version,95,I thought we already (always) used built in LibAfterimage just because [we have a special ROOT version for this package ](https://github.com/root-project/root/blob/master/graf2d/asimage/README)(many local fixes).... using external does not make real sense seems to me.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:95,integrability,version,version,95,I thought we already (always) used built in LibAfterimage just because [we have a special ROOT version for this package ](https://github.com/root-project/root/blob/master/graf2d/asimage/README)(many local fixes).... using external does not make real sense seems to me.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:95,modifiability,version,version,95,I thought we already (always) used built in LibAfterimage just because [we have a special ROOT version for this package ](https://github.com/root-project/root/blob/master/graf2d/asimage/README)(many local fixes).... using external does not make real sense seems to me.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:112,modifiability,pac,package,112,I thought we already (always) used built in LibAfterimage just because [we have a special ROOT version for this package ](https://github.com/root-project/root/blob/master/graf2d/asimage/README)(many local fixes).... using external does not make real sense seems to me.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:231,reliability,doe,does,231,I thought we already (always) used built in LibAfterimage just because [we have a special ROOT version for this package ](https://github.com/root-project/root/blob/master/graf2d/asimage/README)(many local fixes).... using external does not make real sense seems to me.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:111,deployability,releas,release,111,"@dpiparo I checked and this has been fixed in 6.30.04, by bellenot's #14402! in case you want to add it to the release notes :) Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:19,deployability,automat,automated,19,"thanks, we have an automated script that harvests closed issues: for sure it will be there!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:19,testability,automat,automated,19,"thanks, we have an automated script that harvests closed issues: for sure it will be there!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:50,usability,close,closed,50,"thanks, we have an automated script that harvests closed issues: for sure it will be there!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:40,deployability,patch,patch,40,apparently not. It's always possible to patch the relnotes though if that was the case.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:40,safety,patch,patch,40,apparently not. It's always possible to patch the relnotes though if that was the case.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:40,security,patch,patch,40,apparently not. It's always possible to patch the relnotes though if that was the case.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/pull/14248:71,deployability,pipelin,pipeline,71,"@guitargeek I just ran the git-clang-format in the hopes of fixing the pipeline, please restart at your convenience.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14248
https://github.com/root-project/root/pull/14248:71,integrability,pipelin,pipeline,71,"@guitargeek I just ran the git-clang-format in the hopes of fixing the pipeline, please restart at your convenience.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14248
https://github.com/root-project/root/pull/14248:37,interoperability,format,format,37,"@guitargeek I just ran the git-clang-format in the hopes of fixing the pipeline, please restart at your convenience.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14248
https://github.com/root-project/root/pull/14248:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14248
https://github.com/root-project/root/pull/14249:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14249
https://github.com/root-project/root/issues/14250:17,usability,help,help,17,"@hahnjo, can you help us here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:206,safety,reme,remember,206,"@vgvassilev as far as can tell this is a documentation-only issue, nothing I can do in code to help with. In particular, `builtin_llvm=OFF` still has a `builtin_clang=ON` which miscompiles with nvc++, if I remember Bernhard's results correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:41,usability,document,documentation-only,41,"@vgvassilev as far as can tell this is a documentation-only issue, nothing I can do in code to help with. In particular, `builtin_llvm=OFF` still has a `builtin_clang=ON` which miscompiles with nvc++, if I remember Bernhard's results correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:95,usability,help,help,95,"@vgvassilev as far as can tell this is a documentation-only issue, nothing I can do in code to help with. In particular, `builtin_llvm=OFF` still has a `builtin_clang=ON` which miscompiles with nvc++, if I remember Bernhard's results correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:66,deployability,patch,patched,66,"@hahnjo, I believe the question was how/where from to compile our patched version of llvm and then provide it to ROOT. The latter is via `-Dbuiltin_llvm=Off -Dbuiltin_clang=Off` and passing the `-DLLVM_DIR` and possibly the `-DClang_DIR` pointing to the external LLVM build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:74,deployability,version,version,74,"@hahnjo, I believe the question was how/where from to compile our patched version of llvm and then provide it to ROOT. The latter is via `-Dbuiltin_llvm=Off -Dbuiltin_clang=Off` and passing the `-DLLVM_DIR` and possibly the `-DClang_DIR` pointing to the external LLVM build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:268,deployability,build,build,268,"@hahnjo, I believe the question was how/where from to compile our patched version of llvm and then provide it to ROOT. The latter is via `-Dbuiltin_llvm=Off -Dbuiltin_clang=Off` and passing the `-DLLVM_DIR` and possibly the `-DClang_DIR` pointing to the external LLVM build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:74,integrability,version,version,74,"@hahnjo, I believe the question was how/where from to compile our patched version of llvm and then provide it to ROOT. The latter is via `-Dbuiltin_llvm=Off -Dbuiltin_clang=Off` and passing the `-DLLVM_DIR` and possibly the `-DClang_DIR` pointing to the external LLVM build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:74,modifiability,version,version,74,"@hahnjo, I believe the question was how/where from to compile our patched version of llvm and then provide it to ROOT. The latter is via `-Dbuiltin_llvm=Off -Dbuiltin_clang=Off` and passing the `-DLLVM_DIR` and possibly the `-DClang_DIR` pointing to the external LLVM build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:66,safety,patch,patched,66,"@hahnjo, I believe the question was how/where from to compile our patched version of llvm and then provide it to ROOT. The latter is via `-Dbuiltin_llvm=Off -Dbuiltin_clang=Off` and passing the `-DLLVM_DIR` and possibly the `-DClang_DIR` pointing to the external LLVM build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:66,security,patch,patched,66,"@hahnjo, I believe the question was how/where from to compile our patched version of llvm and then provide it to ROOT. The latter is via `-Dbuiltin_llvm=Off -Dbuiltin_clang=Off` and passing the `-DLLVM_DIR` and possibly the `-DClang_DIR` pointing to the external LLVM build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:87,deployability,build,build,87,@dpiparo - I don't believe this is completed. I'm still lacking instructions on how to build LLVM externally for ROOT.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:35,safety,compl,completed,35,@dpiparo - I don't believe this is completed. I'm still lacking instructions on how to build LLVM externally for ROOT.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:35,security,compl,completed,35,@dpiparo - I don't believe this is completed. I'm still lacking instructions on how to build LLVM externally for ROOT.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:63,deployability,build,build,63,"Trying to wrap up here: I do not think we have instructions to build ROOT on top of an external clang, even if the patch version of clang is built with changes we need. At the moment, we do not have at disposal enough effort to work on such a recipe. Therefore, the reply to this inquiry, unfortunately, is that there is no well tested, blessed recipe to build external llvm for ROOT. And that would be enough to close the item, in my opinion. . Of course, @cgleggett , we would warmly invite you to contribute such a recipe, helping you in the process as best as we can.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:115,deployability,patch,patch,115,"Trying to wrap up here: I do not think we have instructions to build ROOT on top of an external clang, even if the patch version of clang is built with changes we need. At the moment, we do not have at disposal enough effort to work on such a recipe. Therefore, the reply to this inquiry, unfortunately, is that there is no well tested, blessed recipe to build external llvm for ROOT. And that would be enough to close the item, in my opinion. . Of course, @cgleggett , we would warmly invite you to contribute such a recipe, helping you in the process as best as we can.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:121,deployability,version,version,121,"Trying to wrap up here: I do not think we have instructions to build ROOT on top of an external clang, even if the patch version of clang is built with changes we need. At the moment, we do not have at disposal enough effort to work on such a recipe. Therefore, the reply to this inquiry, unfortunately, is that there is no well tested, blessed recipe to build external llvm for ROOT. And that would be enough to close the item, in my opinion. . Of course, @cgleggett , we would warmly invite you to contribute such a recipe, helping you in the process as best as we can.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:355,deployability,build,build,355,"Trying to wrap up here: I do not think we have instructions to build ROOT on top of an external clang, even if the patch version of clang is built with changes we need. At the moment, we do not have at disposal enough effort to work on such a recipe. Therefore, the reply to this inquiry, unfortunately, is that there is no well tested, blessed recipe to build external llvm for ROOT. And that would be enough to close the item, in my opinion. . Of course, @cgleggett , we would warmly invite you to contribute such a recipe, helping you in the process as best as we can.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:10,integrability,wrap,wrap,10,"Trying to wrap up here: I do not think we have instructions to build ROOT on top of an external clang, even if the patch version of clang is built with changes we need. At the moment, we do not have at disposal enough effort to work on such a recipe. Therefore, the reply to this inquiry, unfortunately, is that there is no well tested, blessed recipe to build external llvm for ROOT. And that would be enough to close the item, in my opinion. . Of course, @cgleggett , we would warmly invite you to contribute such a recipe, helping you in the process as best as we can.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:121,integrability,version,version,121,"Trying to wrap up here: I do not think we have instructions to build ROOT on top of an external clang, even if the patch version of clang is built with changes we need. At the moment, we do not have at disposal enough effort to work on such a recipe. Therefore, the reply to this inquiry, unfortunately, is that there is no well tested, blessed recipe to build external llvm for ROOT. And that would be enough to close the item, in my opinion. . Of course, @cgleggett , we would warmly invite you to contribute such a recipe, helping you in the process as best as we can.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:121,modifiability,version,version,121,"Trying to wrap up here: I do not think we have instructions to build ROOT on top of an external clang, even if the patch version of clang is built with changes we need. At the moment, we do not have at disposal enough effort to work on such a recipe. Therefore, the reply to this inquiry, unfortunately, is that there is no well tested, blessed recipe to build external llvm for ROOT. And that would be enough to close the item, in my opinion. . Of course, @cgleggett , we would warmly invite you to contribute such a recipe, helping you in the process as best as we can.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:115,safety,patch,patch,115,"Trying to wrap up here: I do not think we have instructions to build ROOT on top of an external clang, even if the patch version of clang is built with changes we need. At the moment, we do not have at disposal enough effort to work on such a recipe. Therefore, the reply to this inquiry, unfortunately, is that there is no well tested, blessed recipe to build external llvm for ROOT. And that would be enough to close the item, in my opinion. . Of course, @cgleggett , we would warmly invite you to contribute such a recipe, helping you in the process as best as we can.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:329,safety,test,tested,329,"Trying to wrap up here: I do not think we have instructions to build ROOT on top of an external clang, even if the patch version of clang is built with changes we need. At the moment, we do not have at disposal enough effort to work on such a recipe. Therefore, the reply to this inquiry, unfortunately, is that there is no well tested, blessed recipe to build external llvm for ROOT. And that would be enough to close the item, in my opinion. . Of course, @cgleggett , we would warmly invite you to contribute such a recipe, helping you in the process as best as we can.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:115,security,patch,patch,115,"Trying to wrap up here: I do not think we have instructions to build ROOT on top of an external clang, even if the patch version of clang is built with changes we need. At the moment, we do not have at disposal enough effort to work on such a recipe. Therefore, the reply to this inquiry, unfortunately, is that there is no well tested, blessed recipe to build external llvm for ROOT. And that would be enough to close the item, in my opinion. . Of course, @cgleggett , we would warmly invite you to contribute such a recipe, helping you in the process as best as we can.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:329,testability,test,tested,329,"Trying to wrap up here: I do not think we have instructions to build ROOT on top of an external clang, even if the patch version of clang is built with changes we need. At the moment, we do not have at disposal enough effort to work on such a recipe. Therefore, the reply to this inquiry, unfortunately, is that there is no well tested, blessed recipe to build external llvm for ROOT. And that would be enough to close the item, in my opinion. . Of course, @cgleggett , we would warmly invite you to contribute such a recipe, helping you in the process as best as we can.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:413,usability,close,close,413,"Trying to wrap up here: I do not think we have instructions to build ROOT on top of an external clang, even if the patch version of clang is built with changes we need. At the moment, we do not have at disposal enough effort to work on such a recipe. Therefore, the reply to this inquiry, unfortunately, is that there is no well tested, blessed recipe to build external llvm for ROOT. And that would be enough to close the item, in my opinion. . Of course, @cgleggett , we would warmly invite you to contribute such a recipe, helping you in the process as best as we can.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:526,usability,help,helping,526,"Trying to wrap up here: I do not think we have instructions to build ROOT on top of an external clang, even if the patch version of clang is built with changes we need. At the moment, we do not have at disposal enough effort to work on such a recipe. Therefore, the reply to this inquiry, unfortunately, is that there is no well tested, blessed recipe to build external llvm for ROOT. And that would be enough to close the item, in my opinion. . Of course, @cgleggett , we would warmly invite you to contribute such a recipe, helping you in the process as best as we can.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/pull/14251:37,reliability,doe,does,37,"Not an admin, but I tested it and it does fix https://github.com/root-project/root/issues/14085.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:20,safety,test,tested,20,"Not an admin, but I tested it and it does fix https://github.com/root-project/root/issues/14085.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:20,testability,test,tested,20,"Not an admin, but I tested it and it does fix https://github.com/root-project/root/issues/14085.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:157,deployability,patch,patch,157,"Let's see if this doesn't break anything. @wdconinc, @kkauder, if we merge this, do you need a backport to the 6.30 branch so this makes it into the 6.30.02 patch release?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:163,deployability,releas,release,163,"Let's see if this doesn't break anything. @wdconinc, @kkauder, if we merge this, do you need a backport to the 6.30 branch so this makes it into the 6.30.02 patch release?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:18,reliability,doe,doesn,18,"Let's see if this doesn't break anything. @wdconinc, @kkauder, if we merge this, do you need a backport to the 6.30 branch so this makes it into the 6.30.02 patch release?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:157,safety,patch,patch,157,"Let's see if this doesn't break anything. @wdconinc, @kkauder, if we merge this, do you need a backport to the 6.30 branch so this makes it into the 6.30.02 patch release?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:157,security,patch,patch,157,"Let's see if this doesn't break anything. @wdconinc, @kkauder, if we merge this, do you need a backport to the 6.30 branch so this makes it into the 6.30.02 patch release?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:50,deployability,patch,patch,50,I'd leave the backport decision up to you. We can patch this into our user environments without a backport too.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:50,safety,patch,patch,50,I'd leave the backport decision up to you. We can patch this into our user environments without a backport too.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:50,security,patch,patch,50,I'd leave the backport decision up to you. We can patch this into our user environments without a backport too.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:70,usability,user,user,70,I'd leave the backport decision up to you. We can patch this into our user environments without a backport too.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:52,deployability,patch,patch,52,"> I'd leave the backport decision up to you. We can patch this into our user environments without a backport too. Ok, I prefer backports over people patching ROOT :slightly_smiling_face: There is a very low risk of breaking something here, since the PF only affects the case where `exe` contains qemu, which simply didn't work before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:149,deployability,patch,patching,149,"> I'd leave the backport decision up to you. We can patch this into our user environments without a backport too. Ok, I prefer backports over people patching ROOT :slightly_smiling_face: There is a very low risk of breaking something here, since the PF only affects the case where `exe` contains qemu, which simply didn't work before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:287,deployability,contain,contains,287,"> I'd leave the backport decision up to you. We can patch this into our user environments without a backport too. Ok, I prefer backports over people patching ROOT :slightly_smiling_face: There is a very low risk of breaking something here, since the PF only affects the case where `exe` contains qemu, which simply didn't work before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:52,safety,patch,patch,52,"> I'd leave the backport decision up to you. We can patch this into our user environments without a backport too. Ok, I prefer backports over people patching ROOT :slightly_smiling_face: There is a very low risk of breaking something here, since the PF only affects the case where `exe` contains qemu, which simply didn't work before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:149,safety,patch,patching,149,"> I'd leave the backport decision up to you. We can patch this into our user environments without a backport too. Ok, I prefer backports over people patching ROOT :slightly_smiling_face: There is a very low risk of breaking something here, since the PF only affects the case where `exe` contains qemu, which simply didn't work before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:207,safety,risk,risk,207,"> I'd leave the backport decision up to you. We can patch this into our user environments without a backport too. Ok, I prefer backports over people patching ROOT :slightly_smiling_face: There is a very low risk of breaking something here, since the PF only affects the case where `exe` contains qemu, which simply didn't work before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:52,security,patch,patch,52,"> I'd leave the backport decision up to you. We can patch this into our user environments without a backport too. Ok, I prefer backports over people patching ROOT :slightly_smiling_face: There is a very low risk of breaking something here, since the PF only affects the case where `exe` contains qemu, which simply didn't work before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:149,security,patch,patching,149,"> I'd leave the backport decision up to you. We can patch this into our user environments without a backport too. Ok, I prefer backports over people patching ROOT :slightly_smiling_face: There is a very low risk of breaking something here, since the PF only affects the case where `exe` contains qemu, which simply didn't work before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:207,security,risk,risk,207,"> I'd leave the backport decision up to you. We can patch this into our user environments without a backport too. Ok, I prefer backports over people patching ROOT :slightly_smiling_face: There is a very low risk of breaking something here, since the PF only affects the case where `exe` contains qemu, which simply didn't work before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:308,testability,simpl,simply,308,"> I'd leave the backport decision up to you. We can patch this into our user environments without a backport too. Ok, I prefer backports over people patching ROOT :slightly_smiling_face: There is a very low risk of breaking something here, since the PF only affects the case where `exe` contains qemu, which simply didn't work before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:72,usability,user,user,72,"> I'd leave the backport decision up to you. We can patch this into our user environments without a backport too. Ok, I prefer backports over people patching ROOT :slightly_smiling_face: There is a very low risk of breaking something here, since the PF only affects the case where `exe` contains qemu, which simply didn't work before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:120,usability,prefer,prefer,120,"> I'd leave the backport decision up to you. We can patch this into our user environments without a backport too. Ok, I prefer backports over people patching ROOT :slightly_smiling_face: There is a very low risk of breaking something here, since the PF only affects the case where `exe` contains qemu, which simply didn't work before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:308,usability,simpl,simply,308,"> I'd leave the backport decision up to you. We can patch this into our user environments without a backport too. Ok, I prefer backports over people patching ROOT :slightly_smiling_face: There is a very low risk of breaking something here, since the PF only affects the case where `exe` contains qemu, which simply didn't work before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14252:341,interoperability,share,shared,341,"> Not sure if you want to catch in one of your PR also some stuff from the milestones: https://github.com/root-project/root/milestones/ Especially the VDT fix by dpiparo seems essential. Looks like these already got backported now. I just backport my own commits in these PRs, plus some others if I'm aware of them. But in the end, it's our shared responsibility to make sure that these backports are all landing :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14252
https://github.com/root-project/root/pull/14252:348,modifiability,responsibil,responsibility,348,"> Not sure if you want to catch in one of your PR also some stuff from the milestones: https://github.com/root-project/root/milestones/ Especially the VDT fix by dpiparo seems essential. Looks like these already got backported now. I just backport my own commits in these PRs, plus some others if I'm aware of them. But in the end, it's our shared responsibility to make sure that these backports are all landing :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14252
https://github.com/root-project/root/issues/14254:139,deployability,build,build,139,"Hi @bztd, thanks for reaching out! We discussed your inquiry at our Team Meeting. We think this is a great initiative: you can find ROOT's build and install instructions [here](https://root.cern/install/). However, let me note that at the moment we do not have any effort to dedicate to this activity. Should you have any question about ROOT, the community will be happy to discuss on the [ROOT Forum](https://root-forum.cern.ch/). Best,. Danilo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14254
https://github.com/root-project/root/issues/14254:149,deployability,instal,install,149,"Hi @bztd, thanks for reaching out! We discussed your inquiry at our Team Meeting. We think this is a great initiative: you can find ROOT's build and install instructions [here](https://root.cern/install/). However, let me note that at the moment we do not have any effort to dedicate to this activity. Should you have any question about ROOT, the community will be happy to discuss on the [ROOT Forum](https://root-forum.cern.ch/). Best,. Danilo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14254
https://github.com/root-project/root/issues/14254:195,deployability,instal,install,195,"Hi @bztd, thanks for reaching out! We discussed your inquiry at our Team Meeting. We think this is a great initiative: you can find ROOT's build and install instructions [here](https://root.cern/install/). However, let me note that at the moment we do not have any effort to dedicate to this activity. Should you have any question about ROOT, the community will be happy to discuss on the [ROOT Forum](https://root-forum.cern.ch/). Best,. Danilo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14254
https://github.com/root-project/root/issues/14254:68,security,Team,Team,68,"Hi @bztd, thanks for reaching out! We discussed your inquiry at our Team Meeting. We think this is a great initiative: you can find ROOT's build and install instructions [here](https://root.cern/install/). However, let me note that at the moment we do not have any effort to dedicate to this activity. Should you have any question about ROOT, the community will be happy to discuss on the [ROOT Forum](https://root-forum.cern.ch/). Best,. Danilo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14254
https://github.com/root-project/root/issues/14254:248,integrability,translat,translation,248,"@dpiparo . I don't know if this is the right place to put this. The code lacks an appdata or appinfo for the package, I added one but the policy is to use the ones provided by the developer, so I am obliged to suggest that one be added. (this is a translation)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14254
https://github.com/root-project/root/issues/14254:248,interoperability,translat,translation,248,"@dpiparo . I don't know if this is the right place to put this. The code lacks an appdata or appinfo for the package, I added one but the policy is to use the ones provided by the developer, so I am obliged to suggest that one be added. (this is a translation)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14254
https://github.com/root-project/root/issues/14254:109,modifiability,pac,package,109,"@dpiparo . I don't know if this is the right place to put this. The code lacks an appdata or appinfo for the package, I added one but the policy is to use the ones provided by the developer, so I am obliged to suggest that one be added. (this is a translation)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14254
https://github.com/root-project/root/issues/14254:138,security,polic,policy,138,"@dpiparo . I don't know if this is the right place to put this. The code lacks an appdata or appinfo for the package, I added one but the policy is to use the ones provided by the developer, so I am obliged to suggest that one be added. (this is a translation)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14254
https://github.com/root-project/root/issues/14256:80,energy efficiency,draw,draw,80,"Code looks good. Not so sure about the comment. When you create a histogram and draw it, the axes are created with both bits off and the ticks are drawn inside.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14256
https://github.com/root-project/root/issues/14256:147,energy efficiency,draw,drawn,147,"Code looks good. Not so sure about the comment. When you create a histogram and draw it, the axes are created with both bits off and the ticks are drawn inside.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14256
https://github.com/root-project/root/pull/14261:0,deployability,Updat,Update,0,"Update: the latest version of the patch (`constexpr` data member + declaration in source) is in line with the first attempt (out of class definition of the data member). ```. master-2023-12-18-knpos-constexpr-plus-out-of-class-run.log. 307. master-2023-12-18-knpos-out-of-class-run.log. 307. ```. Also, the symbol is present only once throughout the compiled libraries. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:19,deployability,version,version,19,"Update: the latest version of the patch (`constexpr` data member + declaration in source) is in line with the first attempt (out of class definition of the data member). ```. master-2023-12-18-knpos-constexpr-plus-out-of-class-run.log. 307. master-2023-12-18-knpos-out-of-class-run.log. 307. ```. Also, the symbol is present only once throughout the compiled libraries. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:34,deployability,patch,patch,34,"Update: the latest version of the patch (`constexpr` data member + declaration in source) is in line with the first attempt (out of class definition of the data member). ```. master-2023-12-18-knpos-constexpr-plus-out-of-class-run.log. 307. master-2023-12-18-knpos-out-of-class-run.log. 307. ```. Also, the symbol is present only once throughout the compiled libraries. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:231,deployability,log,log,231,"Update: the latest version of the patch (`constexpr` data member + declaration in source) is in line with the first attempt (out of class definition of the data member). ```. master-2023-12-18-knpos-constexpr-plus-out-of-class-run.log. 307. master-2023-12-18-knpos-out-of-class-run.log. 307. ```. Also, the symbol is present only once throughout the compiled libraries. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:282,deployability,log,log,282,"Update: the latest version of the patch (`constexpr` data member + declaration in source) is in line with the first attempt (out of class definition of the data member). ```. master-2023-12-18-knpos-constexpr-plus-out-of-class-run.log. 307. master-2023-12-18-knpos-out-of-class-run.log. 307. ```. Also, the symbol is present only once throughout the compiled libraries. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:19,integrability,version,version,19,"Update: the latest version of the patch (`constexpr` data member + declaration in source) is in line with the first attempt (out of class definition of the data member). ```. master-2023-12-18-knpos-constexpr-plus-out-of-class-run.log. 307. master-2023-12-18-knpos-out-of-class-run.log. 307. ```. Also, the symbol is present only once throughout the compiled libraries. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:19,modifiability,version,version,19,"Update: the latest version of the patch (`constexpr` data member + declaration in source) is in line with the first attempt (out of class definition of the data member). ```. master-2023-12-18-knpos-constexpr-plus-out-of-class-run.log. 307. master-2023-12-18-knpos-out-of-class-run.log. 307. ```. Also, the symbol is present only once throughout the compiled libraries. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:0,safety,Updat,Update,0,"Update: the latest version of the patch (`constexpr` data member + declaration in source) is in line with the first attempt (out of class definition of the data member). ```. master-2023-12-18-knpos-constexpr-plus-out-of-class-run.log. 307. master-2023-12-18-knpos-out-of-class-run.log. 307. ```. Also, the symbol is present only once throughout the compiled libraries. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:34,safety,patch,patch,34,"Update: the latest version of the patch (`constexpr` data member + declaration in source) is in line with the first attempt (out of class definition of the data member). ```. master-2023-12-18-knpos-constexpr-plus-out-of-class-run.log. 307. master-2023-12-18-knpos-out-of-class-run.log. 307. ```. Also, the symbol is present only once throughout the compiled libraries. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:231,safety,log,log,231,"Update: the latest version of the patch (`constexpr` data member + declaration in source) is in line with the first attempt (out of class definition of the data member). ```. master-2023-12-18-knpos-constexpr-plus-out-of-class-run.log. 307. master-2023-12-18-knpos-out-of-class-run.log. 307. ```. Also, the symbol is present only once throughout the compiled libraries. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:282,safety,log,log,282,"Update: the latest version of the patch (`constexpr` data member + declaration in source) is in line with the first attempt (out of class definition of the data member). ```. master-2023-12-18-knpos-constexpr-plus-out-of-class-run.log. 307. master-2023-12-18-knpos-out-of-class-run.log. 307. ```. Also, the symbol is present only once throughout the compiled libraries. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:0,security,Updat,Update,0,"Update: the latest version of the patch (`constexpr` data member + declaration in source) is in line with the first attempt (out of class definition of the data member). ```. master-2023-12-18-knpos-constexpr-plus-out-of-class-run.log. 307. master-2023-12-18-knpos-out-of-class-run.log. 307. ```. Also, the symbol is present only once throughout the compiled libraries. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:34,security,patch,patch,34,"Update: the latest version of the patch (`constexpr` data member + declaration in source) is in line with the first attempt (out of class definition of the data member). ```. master-2023-12-18-knpos-constexpr-plus-out-of-class-run.log. 307. master-2023-12-18-knpos-out-of-class-run.log. 307. ```. Also, the symbol is present only once throughout the compiled libraries. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:231,security,log,log,231,"Update: the latest version of the patch (`constexpr` data member + declaration in source) is in line with the first attempt (out of class definition of the data member). ```. master-2023-12-18-knpos-constexpr-plus-out-of-class-run.log. 307. master-2023-12-18-knpos-out-of-class-run.log. 307. ```. Also, the symbol is present only once throughout the compiled libraries. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:282,security,log,log,282,"Update: the latest version of the patch (`constexpr` data member + declaration in source) is in line with the first attempt (out of class definition of the data member). ```. master-2023-12-18-knpos-constexpr-plus-out-of-class-run.log. 307. master-2023-12-18-knpos-out-of-class-run.log. 307. ```. Also, the symbol is present only once throughout the compiled libraries. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:231,testability,log,log,231,"Update: the latest version of the patch (`constexpr` data member + declaration in source) is in line with the first attempt (out of class definition of the data member). ```. master-2023-12-18-knpos-constexpr-plus-out-of-class-run.log. 307. master-2023-12-18-knpos-out-of-class-run.log. 307. ```. Also, the symbol is present only once throughout the compiled libraries. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:282,testability,log,log,282,"Update: the latest version of the patch (`constexpr` data member + declaration in source) is in line with the first attempt (out of class definition of the data member). ```. master-2023-12-18-knpos-constexpr-plus-out-of-class-run.log. 307. master-2023-12-18-knpos-out-of-class-run.log. 307. ```. Also, the symbol is present only once throughout the compiled libraries. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:145,integrability,sub,subtle,145,That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:112,usability,help,help,112,That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:272,availability,down,down,272,"> That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. For completeness, the current status of the PR, which only changes . ```. --- a/core/base/src/TString.cxx. +++ b/core/base/src/TString.cxx. @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. #include ""TVirtualMutex.h"". #include ""ThreadLocalStorage.h"". . +const Ssiz_t TString::kNPOS;. ```. Shows exactly the same numbers as the first attempt (out of class definition).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:281,deployability,patch,patch,281,"> That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. For completeness, the current status of the PR, which only changes . ```. --- a/core/base/src/TString.cxx. +++ b/core/base/src/TString.cxx. @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. #include ""TVirtualMutex.h"". #include ""ThreadLocalStorage.h"". . +const Ssiz_t TString::kNPOS;. ```. Shows exactly the same numbers as the first attempt (out of class definition).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:478,energy efficiency,current,current,478,"> That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. For completeness, the current status of the PR, which only changes . ```. --- a/core/base/src/TString.cxx. +++ b/core/base/src/TString.cxx. @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. #include ""TVirtualMutex.h"". #include ""ThreadLocalStorage.h"". . +const Ssiz_t TString::kNPOS;. ```. Shows exactly the same numbers as the first attempt (out of class definition).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:536,energy efficiency,core,core,536,"> That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. For completeness, the current status of the PR, which only changes . ```. --- a/core/base/src/TString.cxx. +++ b/core/base/src/TString.cxx. @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. #include ""TVirtualMutex.h"". #include ""ThreadLocalStorage.h"". . +const Ssiz_t TString::kNPOS;. ```. Shows exactly the same numbers as the first attempt (out of class definition).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:569,energy efficiency,core,core,569,"> That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. For completeness, the current status of the PR, which only changes . ```. --- a/core/base/src/TString.cxx. +++ b/core/base/src/TString.cxx. @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. #include ""TVirtualMutex.h"". #include ""ThreadLocalStorage.h"". . +const Ssiz_t TString::kNPOS;. ```. Shows exactly the same numbers as the first attempt (out of class definition).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:147,integrability,sub,subtle,147,"> That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. For completeness, the current status of the PR, which only changes . ```. --- a/core/base/src/TString.cxx. +++ b/core/base/src/TString.cxx. @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. #include ""TVirtualMutex.h"". #include ""ThreadLocalStorage.h"". . +const Ssiz_t TString::kNPOS;. ```. Shows exactly the same numbers as the first attempt (out of class definition).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:371,performance,parallel,parallel,371,"> That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. For completeness, the current status of the PR, which only changes . ```. --- a/core/base/src/TString.cxx. +++ b/core/base/src/TString.cxx. @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. #include ""TVirtualMutex.h"". #include ""ThreadLocalStorage.h"". . +const Ssiz_t TString::kNPOS;. ```. Shows exactly the same numbers as the first attempt (out of class definition).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:281,safety,patch,patch,281,"> That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. For completeness, the current status of the PR, which only changes . ```. --- a/core/base/src/TString.cxx. +++ b/core/base/src/TString.cxx. @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. #include ""TVirtualMutex.h"". #include ""ThreadLocalStorage.h"". . +const Ssiz_t TString::kNPOS;. ```. Shows exactly the same numbers as the first attempt (out of class definition).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:460,safety,compl,completeness,460,"> That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. For completeness, the current status of the PR, which only changes . ```. --- a/core/base/src/TString.cxx. +++ b/core/base/src/TString.cxx. @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. #include ""TVirtualMutex.h"". #include ""ThreadLocalStorage.h"". . +const Ssiz_t TString::kNPOS;. ```. Shows exactly the same numbers as the first attempt (out of class definition).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:281,security,patch,patch,281,"> That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. For completeness, the current status of the PR, which only changes . ```. --- a/core/base/src/TString.cxx. +++ b/core/base/src/TString.cxx. @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. #include ""TVirtualMutex.h"". #include ""ThreadLocalStorage.h"". . +const Ssiz_t TString::kNPOS;. ```. Shows exactly the same numbers as the first attempt (out of class definition).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:460,security,compl,completeness,460,"> That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. For completeness, the current status of the PR, which only changes . ```. --- a/core/base/src/TString.cxx. +++ b/core/base/src/TString.cxx. @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. #include ""TVirtualMutex.h"". #include ""ThreadLocalStorage.h"". . +const Ssiz_t TString::kNPOS;. ```. Shows exactly the same numbers as the first attempt (out of class definition).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:114,usability,help,help,114,"> That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. For completeness, the current status of the PR, which only changes . ```. --- a/core/base/src/TString.cxx. +++ b/core/base/src/TString.cxx. @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. #include ""TVirtualMutex.h"". #include ""ThreadLocalStorage.h"". . +const Ssiz_t TString::kNPOS;. ```. Shows exactly the same numbers as the first attempt (out of class definition).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:208,usability,help,helping,208,"> That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. For completeness, the current status of the PR, which only changes . ```. --- a/core/base/src/TString.cxx. +++ b/core/base/src/TString.cxx. @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. #include ""TVirtualMutex.h"". #include ""ThreadLocalStorage.h"". . +const Ssiz_t TString::kNPOS;. ```. Shows exactly the same numbers as the first attempt (out of class definition).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:486,usability,statu,status,486,"> That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. For completeness, the current status of the PR, which only changes . ```. --- a/core/base/src/TString.cxx. +++ b/core/base/src/TString.cxx. @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. #include ""TVirtualMutex.h"". #include ""ThreadLocalStorage.h"". . +const Ssiz_t TString::kNPOS;. ```. Shows exactly the same numbers as the first attempt (out of class definition).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:280,availability,down,down,280,"> > That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. > . > Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. > . > For completeness, the current status of the PR, which only changes. > . > ```. > --- a/core/base/src/TString.cxx. > +++ b/core/base/src/TString.cxx. > @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. > #include ""TVirtualMutex.h"". > #include ""ThreadLocalStorage.h"". > . > +const Ssiz_t TString::kNPOS;. > ```. > . > Shows exactly the same numbers as the first attempt (out of class definition). That’s nice we had an undefined class static variable which was initialized and never odr-used… Can we check for more wonders like this one in the codebase? Further reading: https://stackoverflow.com/questions/55250168/static-data-member-initialization-in-the-class-definition.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:289,deployability,patch,patch,289,"> > That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. > . > Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. > . > For completeness, the current status of the PR, which only changes. > . > ```. > --- a/core/base/src/TString.cxx. > +++ b/core/base/src/TString.cxx. > @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. > #include ""TVirtualMutex.h"". > #include ""ThreadLocalStorage.h"". > . > +const Ssiz_t TString::kNPOS;. > ```. > . > Shows exactly the same numbers as the first attempt (out of class definition). That’s nice we had an undefined class static variable which was initialized and never odr-used… Can we check for more wonders like this one in the codebase? Further reading: https://stackoverflow.com/questions/55250168/static-data-member-initialization-in-the-class-definition.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1063,deployability,stack,stackoverflow,1063,"> > That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. > . > Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. > . > For completeness, the current status of the PR, which only changes. > . > ```. > --- a/core/base/src/TString.cxx. > +++ b/core/base/src/TString.cxx. > @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. > #include ""TVirtualMutex.h"". > #include ""ThreadLocalStorage.h"". > . > +const Ssiz_t TString::kNPOS;. > ```. > . > Shows exactly the same numbers as the first attempt (out of class definition). That’s nice we had an undefined class static variable which was initialized and never odr-used… Can we check for more wonders like this one in the codebase? Further reading: https://stackoverflow.com/questions/55250168/static-data-member-initialization-in-the-class-definition.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:492,energy efficiency,current,current,492,"> > That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. > . > Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. > . > For completeness, the current status of the PR, which only changes. > . > ```. > --- a/core/base/src/TString.cxx. > +++ b/core/base/src/TString.cxx. > @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. > #include ""TVirtualMutex.h"". > #include ""ThreadLocalStorage.h"". > . > +const Ssiz_t TString::kNPOS;. > ```. > . > Shows exactly the same numbers as the first attempt (out of class definition). That’s nice we had an undefined class static variable which was initialized and never odr-used… Can we check for more wonders like this one in the codebase? Further reading: https://stackoverflow.com/questions/55250168/static-data-member-initialization-in-the-class-definition.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:557,energy efficiency,core,core,557,"> > That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. > . > Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. > . > For completeness, the current status of the PR, which only changes. > . > ```. > --- a/core/base/src/TString.cxx. > +++ b/core/base/src/TString.cxx. > @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. > #include ""TVirtualMutex.h"". > #include ""ThreadLocalStorage.h"". > . > +const Ssiz_t TString::kNPOS;. > ```. > . > Shows exactly the same numbers as the first attempt (out of class definition). That’s nice we had an undefined class static variable which was initialized and never odr-used… Can we check for more wonders like this one in the codebase? Further reading: https://stackoverflow.com/questions/55250168/static-data-member-initialization-in-the-class-definition.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:592,energy efficiency,core,core,592,"> > That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. > . > Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. > . > For completeness, the current status of the PR, which only changes. > . > ```. > --- a/core/base/src/TString.cxx. > +++ b/core/base/src/TString.cxx. > @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. > #include ""TVirtualMutex.h"". > #include ""ThreadLocalStorage.h"". > . > +const Ssiz_t TString::kNPOS;. > ```. > . > Shows exactly the same numbers as the first attempt (out of class definition). That’s nice we had an undefined class static variable which was initialized and never odr-used… Can we check for more wonders like this one in the codebase? Further reading: https://stackoverflow.com/questions/55250168/static-data-member-initialization-in-the-class-definition.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:149,integrability,sub,subtle,149,"> > That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. > . > Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. > . > For completeness, the current status of the PR, which only changes. > . > ```. > --- a/core/base/src/TString.cxx. > +++ b/core/base/src/TString.cxx. > @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. > #include ""TVirtualMutex.h"". > #include ""ThreadLocalStorage.h"". > . > +const Ssiz_t TString::kNPOS;. > ```. > . > Shows exactly the same numbers as the first attempt (out of class definition). That’s nice we had an undefined class static variable which was initialized and never odr-used… Can we check for more wonders like this one in the codebase? Further reading: https://stackoverflow.com/questions/55250168/static-data-member-initialization-in-the-class-definition.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:926,modifiability,variab,variable,926,"> > That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. > . > Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. > . > For completeness, the current status of the PR, which only changes. > . > ```. > --- a/core/base/src/TString.cxx. > +++ b/core/base/src/TString.cxx. > @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. > #include ""TVirtualMutex.h"". > #include ""ThreadLocalStorage.h"". > . > +const Ssiz_t TString::kNPOS;. > ```. > . > Shows exactly the same numbers as the first attempt (out of class definition). That’s nice we had an undefined class static variable which was initialized and never odr-used… Can we check for more wonders like this one in the codebase? Further reading: https://stackoverflow.com/questions/55250168/static-data-member-initialization-in-the-class-definition.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:379,performance,parallel,parallel,379,"> > That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. > . > Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. > . > For completeness, the current status of the PR, which only changes. > . > ```. > --- a/core/base/src/TString.cxx. > +++ b/core/base/src/TString.cxx. > @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. > #include ""TVirtualMutex.h"". > #include ""ThreadLocalStorage.h"". > . > +const Ssiz_t TString::kNPOS;. > ```. > . > Shows exactly the same numbers as the first attempt (out of class definition). That’s nice we had an undefined class static variable which was initialized and never odr-used… Can we check for more wonders like this one in the codebase? Further reading: https://stackoverflow.com/questions/55250168/static-data-member-initialization-in-the-class-definition.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:289,safety,patch,patch,289,"> > That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. > . > Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. > . > For completeness, the current status of the PR, which only changes. > . > ```. > --- a/core/base/src/TString.cxx. > +++ b/core/base/src/TString.cxx. > @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. > #include ""TVirtualMutex.h"". > #include ""ThreadLocalStorage.h"". > . > +const Ssiz_t TString::kNPOS;. > ```. > . > Shows exactly the same numbers as the first attempt (out of class definition). That’s nice we had an undefined class static variable which was initialized and never odr-used… Can we check for more wonders like this one in the codebase? Further reading: https://stackoverflow.com/questions/55250168/static-data-member-initialization-in-the-class-definition.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:474,safety,compl,completeness,474,"> > That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. > . > Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. > . > For completeness, the current status of the PR, which only changes. > . > ```. > --- a/core/base/src/TString.cxx. > +++ b/core/base/src/TString.cxx. > @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. > #include ""TVirtualMutex.h"". > #include ""ThreadLocalStorage.h"". > . > +const Ssiz_t TString::kNPOS;. > ```. > . > Shows exactly the same numbers as the first attempt (out of class definition). That’s nice we had an undefined class static variable which was initialized and never odr-used… Can we check for more wonders like this one in the codebase? Further reading: https://stackoverflow.com/questions/55250168/static-data-member-initialization-in-the-class-definition.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:289,security,patch,patch,289,"> > That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. > . > Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. > . > For completeness, the current status of the PR, which only changes. > . > ```. > --- a/core/base/src/TString.cxx. > +++ b/core/base/src/TString.cxx. > @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. > #include ""TVirtualMutex.h"". > #include ""ThreadLocalStorage.h"". > . > +const Ssiz_t TString::kNPOS;. > ```. > . > Shows exactly the same numbers as the first attempt (out of class definition). That’s nice we had an undefined class static variable which was initialized and never odr-used… Can we check for more wonders like this one in the codebase? Further reading: https://stackoverflow.com/questions/55250168/static-data-member-initialization-in-the-class-definition.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:474,security,compl,completeness,474,"> > That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. > . > Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. > . > For completeness, the current status of the PR, which only changes. > . > ```. > --- a/core/base/src/TString.cxx. > +++ b/core/base/src/TString.cxx. > @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. > #include ""TVirtualMutex.h"". > #include ""ThreadLocalStorage.h"". > . > +const Ssiz_t TString::kNPOS;. > ```. > . > Shows exactly the same numbers as the first attempt (out of class definition). That’s nice we had an undefined class static variable which was initialized and never odr-used… Can we check for more wonders like this one in the codebase? Further reading: https://stackoverflow.com/questions/55250168/static-data-member-initialization-in-the-class-definition.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:116,usability,help,help,116,"> > That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. > . > Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. > . > For completeness, the current status of the PR, which only changes. > . > ```. > --- a/core/base/src/TString.cxx. > +++ b/core/base/src/TString.cxx. > @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. > #include ""TVirtualMutex.h"". > #include ""ThreadLocalStorage.h"". > . > +const Ssiz_t TString::kNPOS;. > ```. > . > Shows exactly the same numbers as the first attempt (out of class definition). That’s nice we had an undefined class static variable which was initialized and never odr-used… Can we check for more wonders like this one in the codebase? Further reading: https://stackoverflow.com/questions/55250168/static-data-member-initialization-in-the-class-definition.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:216,usability,help,helping,216,"> > That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. > . > Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. > . > For completeness, the current status of the PR, which only changes. > . > ```. > --- a/core/base/src/TString.cxx. > +++ b/core/base/src/TString.cxx. > @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. > #include ""TVirtualMutex.h"". > #include ""ThreadLocalStorage.h"". > . > +const Ssiz_t TString::kNPOS;. > ```. > . > Shows exactly the same numbers as the first attempt (out of class definition). That’s nice we had an undefined class static variable which was initialized and never odr-used… Can we check for more wonders like this one in the codebase? Further reading: https://stackoverflow.com/questions/55250168/static-data-member-initialization-in-the-class-definition.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:500,usability,statu,status,500,"> > That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. > . > Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. > . > For completeness, the current status of the PR, which only changes. > . > ```. > --- a/core/base/src/TString.cxx. > +++ b/core/base/src/TString.cxx. > @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:. > #include ""TVirtualMutex.h"". > #include ""ThreadLocalStorage.h"". > . > +const Ssiz_t TString::kNPOS;. > ```. > . > Shows exactly the same numbers as the first attempt (out of class definition). That’s nice we had an undefined class static variable which was initialized and never odr-used… Can we check for more wonders like this one in the codebase? Further reading: https://stackoverflow.com/questions/55250168/static-data-member-initialization-in-the-class-definition.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:86,deployability,automat,automatically,86,"The one thing it doesn't explain is why `constexpr` didn't work: With C++17, they are automatically `inline` and should *not* need the definition out-of-line. Would be interesting to know how `inline const` behaves... Finally, what is ODR-using `kNPOS`? I didn't see anything in the ROOT code base...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:17,reliability,doe,doesn,17,"The one thing it doesn't explain is why `constexpr` didn't work: With C++17, they are automatically `inline` and should *not* need the definition out-of-line. Would be interesting to know how `inline const` behaves... Finally, what is ODR-using `kNPOS`? I didn't see anything in the ROOT code base...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:86,testability,automat,automatically,86,"The one thing it doesn't explain is why `constexpr` didn't work: With C++17, they are automatically `inline` and should *not* need the definition out-of-line. Would be interesting to know how `inline const` behaves... Finally, what is ODR-using `kNPOS`? I didn't see anything in the ROOT code base...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:55,deployability,automat,automatically,55,"Replying to two different comments:. ### 1. > they are automatically inline and should not need the definition out-of-line. My standardese is poor, but reading https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf : . Line starting with `n 9.2.3.2p3, change:`. > An inline static data member can be defined in the class definition and may specify. a brace or equal initializer. If the member is declared with the constexpr specifier, it may be. redeclared in namespace scope with no initializer (this usage is deprecated; see D.X). So it says that the usage is deprecated, but it *may* still be used. I couldn't find any specific document on whether the main compiler vendors actually implement this change, since it is not strictly enforced maybe it's just not there? ### 2. > Would be interesting to know how inline const behaves... So with the patch. ```. diff --git a/core/base/inc/TString.h b/core/base/inc/TString.h. index 58b47530fd..b74fe29e5c 100644. --- a/core/base/inc/TString.h. +++ b/core/base/inc/TString.h. @@ -277,7 +277,7 @@ private:. public:. enum EStripType { kLeading = 0x1, kTrailing = 0x2, kBoth = 0x3 };. enum ECaseCompare { kExact, kIgnoreCase };. - static const Ssiz_t kNPOS = ::kNPOS;. + static inline const Ssiz_t kNPOS = ::kNPOS;. . TString(); // Null string. explicit TString(Ssiz_t ic); // Suggested capacity. ```. Then we get the same situation as initially, i.e. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 0. $: strace -z -f -o run.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel)'. -1. $: grep openat run.log | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l. 2579. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:862,deployability,patch,patch,862,"Replying to two different comments:. ### 1. > they are automatically inline and should not need the definition out-of-line. My standardese is poor, but reading https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf : . Line starting with `n 9.2.3.2p3, change:`. > An inline static data member can be defined in the class definition and may specify. a brace or equal initializer. If the member is declared with the constexpr specifier, it may be. redeclared in namespace scope with no initializer (this usage is deprecated; see D.X). So it says that the usage is deprecated, but it *may* still be used. I couldn't find any specific document on whether the main compiler vendors actually implement this change, since it is not strictly enforced maybe it's just not there? ### 2. > Would be interesting to know how inline const behaves... So with the patch. ```. diff --git a/core/base/inc/TString.h b/core/base/inc/TString.h. index 58b47530fd..b74fe29e5c 100644. --- a/core/base/inc/TString.h. +++ b/core/base/inc/TString.h. @@ -277,7 +277,7 @@ private:. public:. enum EStripType { kLeading = 0x1, kTrailing = 0x2, kBoth = 0x3 };. enum ECaseCompare { kExact, kIgnoreCase };. - static const Ssiz_t kNPOS = ::kNPOS;. + static inline const Ssiz_t kNPOS = ::kNPOS;. . TString(); // Null string. explicit TString(Ssiz_t ic); // Suggested capacity. ```. Then we get the same situation as initially, i.e. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 0. $: strace -z -f -o run.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel)'. -1. $: grep openat run.log | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l. 2579. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1500,deployability,log,log,1500,"Replying to two different comments:. ### 1. > they are automatically inline and should not need the definition out-of-line. My standardese is poor, but reading https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf : . Line starting with `n 9.2.3.2p3, change:`. > An inline static data member can be defined in the class definition and may specify. a brace or equal initializer. If the member is declared with the constexpr specifier, it may be. redeclared in namespace scope with no initializer (this usage is deprecated; see D.X). So it says that the usage is deprecated, but it *may* still be used. I couldn't find any specific document on whether the main compiler vendors actually implement this change, since it is not strictly enforced maybe it's just not there? ### 2. > Would be interesting to know how inline const behaves... So with the patch. ```. diff --git a/core/base/inc/TString.h b/core/base/inc/TString.h. index 58b47530fd..b74fe29e5c 100644. --- a/core/base/inc/TString.h. +++ b/core/base/inc/TString.h. @@ -277,7 +277,7 @@ private:. public:. enum EStripType { kLeading = 0x1, kTrailing = 0x2, kBoth = 0x3 };. enum ECaseCompare { kExact, kIgnoreCase };. - static const Ssiz_t kNPOS = ::kNPOS;. + static inline const Ssiz_t kNPOS = ::kNPOS;. . TString(); // Null string. explicit TString(Ssiz_t ic); // Suggested capacity. ```. Then we get the same situation as initially, i.e. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 0. $: strace -z -f -o run.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel)'. -1. $: grep openat run.log | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l. 2579. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1604,deployability,log,log,1604,"Replying to two different comments:. ### 1. > they are automatically inline and should not need the definition out-of-line. My standardese is poor, but reading https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf : . Line starting with `n 9.2.3.2p3, change:`. > An inline static data member can be defined in the class definition and may specify. a brace or equal initializer. If the member is declared with the constexpr specifier, it may be. redeclared in namespace scope with no initializer (this usage is deprecated; see D.X). So it says that the usage is deprecated, but it *may* still be used. I couldn't find any specific document on whether the main compiler vendors actually implement this change, since it is not strictly enforced maybe it's just not there? ### 2. > Would be interesting to know how inline const behaves... So with the patch. ```. diff --git a/core/base/inc/TString.h b/core/base/inc/TString.h. index 58b47530fd..b74fe29e5c 100644. --- a/core/base/inc/TString.h. +++ b/core/base/inc/TString.h. @@ -277,7 +277,7 @@ private:. public:. enum EStripType { kLeading = 0x1, kTrailing = 0x2, kBoth = 0x3 };. enum ECaseCompare { kExact, kIgnoreCase };. - static const Ssiz_t kNPOS = ::kNPOS;. + static inline const Ssiz_t kNPOS = ::kNPOS;. . TString(); // Null string. explicit TString(Ssiz_t ic); // Suggested capacity. ```. Then we get the same situation as initially, i.e. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 0. $: strace -z -f -o run.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel)'. -1. $: grep openat run.log | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l. 2579. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:887,energy efficiency,core,core,887,"Replying to two different comments:. ### 1. > they are automatically inline and should not need the definition out-of-line. My standardese is poor, but reading https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf : . Line starting with `n 9.2.3.2p3, change:`. > An inline static data member can be defined in the class definition and may specify. a brace or equal initializer. If the member is declared with the constexpr specifier, it may be. redeclared in namespace scope with no initializer (this usage is deprecated; see D.X). So it says that the usage is deprecated, but it *may* still be used. I couldn't find any specific document on whether the main compiler vendors actually implement this change, since it is not strictly enforced maybe it's just not there? ### 2. > Would be interesting to know how inline const behaves... So with the patch. ```. diff --git a/core/base/inc/TString.h b/core/base/inc/TString.h. index 58b47530fd..b74fe29e5c 100644. --- a/core/base/inc/TString.h. +++ b/core/base/inc/TString.h. @@ -277,7 +277,7 @@ private:. public:. enum EStripType { kLeading = 0x1, kTrailing = 0x2, kBoth = 0x3 };. enum ECaseCompare { kExact, kIgnoreCase };. - static const Ssiz_t kNPOS = ::kNPOS;. + static inline const Ssiz_t kNPOS = ::kNPOS;. . TString(); // Null string. explicit TString(Ssiz_t ic); // Suggested capacity. ```. Then we get the same situation as initially, i.e. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 0. $: strace -z -f -o run.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel)'. -1. $: grep openat run.log | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l. 2579. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:913,energy efficiency,core,core,913,"Replying to two different comments:. ### 1. > they are automatically inline and should not need the definition out-of-line. My standardese is poor, but reading https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf : . Line starting with `n 9.2.3.2p3, change:`. > An inline static data member can be defined in the class definition and may specify. a brace or equal initializer. If the member is declared with the constexpr specifier, it may be. redeclared in namespace scope with no initializer (this usage is deprecated; see D.X). So it says that the usage is deprecated, but it *may* still be used. I couldn't find any specific document on whether the main compiler vendors actually implement this change, since it is not strictly enforced maybe it's just not there? ### 2. > Would be interesting to know how inline const behaves... So with the patch. ```. diff --git a/core/base/inc/TString.h b/core/base/inc/TString.h. index 58b47530fd..b74fe29e5c 100644. --- a/core/base/inc/TString.h. +++ b/core/base/inc/TString.h. @@ -277,7 +277,7 @@ private:. public:. enum EStripType { kLeading = 0x1, kTrailing = 0x2, kBoth = 0x3 };. enum ECaseCompare { kExact, kIgnoreCase };. - static const Ssiz_t kNPOS = ::kNPOS;. + static inline const Ssiz_t kNPOS = ::kNPOS;. . TString(); // Null string. explicit TString(Ssiz_t ic); // Suggested capacity. ```. Then we get the same situation as initially, i.e. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 0. $: strace -z -f -o run.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel)'. -1. $: grep openat run.log | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l. 2579. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:981,energy efficiency,core,core,981,"Replying to two different comments:. ### 1. > they are automatically inline and should not need the definition out-of-line. My standardese is poor, but reading https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf : . Line starting with `n 9.2.3.2p3, change:`. > An inline static data member can be defined in the class definition and may specify. a brace or equal initializer. If the member is declared with the constexpr specifier, it may be. redeclared in namespace scope with no initializer (this usage is deprecated; see D.X). So it says that the usage is deprecated, but it *may* still be used. I couldn't find any specific document on whether the main compiler vendors actually implement this change, since it is not strictly enforced maybe it's just not there? ### 2. > Would be interesting to know how inline const behaves... So with the patch. ```. diff --git a/core/base/inc/TString.h b/core/base/inc/TString.h. index 58b47530fd..b74fe29e5c 100644. --- a/core/base/inc/TString.h. +++ b/core/base/inc/TString.h. @@ -277,7 +277,7 @@ private:. public:. enum EStripType { kLeading = 0x1, kTrailing = 0x2, kBoth = 0x3 };. enum ECaseCompare { kExact, kIgnoreCase };. - static const Ssiz_t kNPOS = ::kNPOS;. + static inline const Ssiz_t kNPOS = ::kNPOS;. . TString(); // Null string. explicit TString(Ssiz_t ic); // Suggested capacity. ```. Then we get the same situation as initially, i.e. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 0. $: strace -z -f -o run.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel)'. -1. $: grep openat run.log | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l. 2579. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1012,energy efficiency,core,core,1012,"Replying to two different comments:. ### 1. > they are automatically inline and should not need the definition out-of-line. My standardese is poor, but reading https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf : . Line starting with `n 9.2.3.2p3, change:`. > An inline static data member can be defined in the class definition and may specify. a brace or equal initializer. If the member is declared with the constexpr specifier, it may be. redeclared in namespace scope with no initializer (this usage is deprecated; see D.X). So it says that the usage is deprecated, but it *may* still be used. I couldn't find any specific document on whether the main compiler vendors actually implement this change, since it is not strictly enforced maybe it's just not there? ### 2. > Would be interesting to know how inline const behaves... So with the patch. ```. diff --git a/core/base/inc/TString.h b/core/base/inc/TString.h. index 58b47530fd..b74fe29e5c 100644. --- a/core/base/inc/TString.h. +++ b/core/base/inc/TString.h. @@ -277,7 +277,7 @@ private:. public:. enum EStripType { kLeading = 0x1, kTrailing = 0x2, kBoth = 0x3 };. enum ECaseCompare { kExact, kIgnoreCase };. - static const Ssiz_t kNPOS = ::kNPOS;. + static inline const Ssiz_t kNPOS = ::kNPOS;. . TString(); // Null string. explicit TString(Ssiz_t ic); // Suggested capacity. ```. Then we get the same situation as initially, i.e. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 0. $: strace -z -f -o run.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel)'. -1. $: grep openat run.log | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l. 2579. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1067,integrability,pub,public,1067,"Replying to two different comments:. ### 1. > they are automatically inline and should not need the definition out-of-line. My standardese is poor, but reading https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf : . Line starting with `n 9.2.3.2p3, change:`. > An inline static data member can be defined in the class definition and may specify. a brace or equal initializer. If the member is declared with the constexpr specifier, it may be. redeclared in namespace scope with no initializer (this usage is deprecated; see D.X). So it says that the usage is deprecated, but it *may* still be used. I couldn't find any specific document on whether the main compiler vendors actually implement this change, since it is not strictly enforced maybe it's just not there? ### 2. > Would be interesting to know how inline const behaves... So with the patch. ```. diff --git a/core/base/inc/TString.h b/core/base/inc/TString.h. index 58b47530fd..b74fe29e5c 100644. --- a/core/base/inc/TString.h. +++ b/core/base/inc/TString.h. @@ -277,7 +277,7 @@ private:. public:. enum EStripType { kLeading = 0x1, kTrailing = 0x2, kBoth = 0x3 };. enum ECaseCompare { kExact, kIgnoreCase };. - static const Ssiz_t kNPOS = ::kNPOS;. + static inline const Ssiz_t kNPOS = ::kNPOS;. . TString(); // Null string. explicit TString(Ssiz_t ic); // Suggested capacity. ```. Then we get the same situation as initially, i.e. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 0. $: strace -z -f -o run.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel)'. -1. $: grep openat run.log | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l. 2579. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:127,interoperability,standard,standardese,127,"Replying to two different comments:. ### 1. > they are automatically inline and should not need the definition out-of-line. My standardese is poor, but reading https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf : . Line starting with `n 9.2.3.2p3, change:`. > An inline static data member can be defined in the class definition and may specify. a brace or equal initializer. If the member is declared with the constexpr specifier, it may be. redeclared in namespace scope with no initializer (this usage is deprecated; see D.X). So it says that the usage is deprecated, but it *may* still be used. I couldn't find any specific document on whether the main compiler vendors actually implement this change, since it is not strictly enforced maybe it's just not there? ### 2. > Would be interesting to know how inline const behaves... So with the patch. ```. diff --git a/core/base/inc/TString.h b/core/base/inc/TString.h. index 58b47530fd..b74fe29e5c 100644. --- a/core/base/inc/TString.h. +++ b/core/base/inc/TString.h. @@ -277,7 +277,7 @@ private:. public:. enum EStripType { kLeading = 0x1, kTrailing = 0x2, kBoth = 0x3 };. enum ECaseCompare { kExact, kIgnoreCase };. - static const Ssiz_t kNPOS = ::kNPOS;. + static inline const Ssiz_t kNPOS = ::kNPOS;. . TString(); // Null string. explicit TString(Ssiz_t ic); // Suggested capacity. ```. Then we get the same situation as initially, i.e. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 0. $: strace -z -f -o run.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel)'. -1. $: grep openat run.log | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l. 2579. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:354,interoperability,specif,specify,354,"Replying to two different comments:. ### 1. > they are automatically inline and should not need the definition out-of-line. My standardese is poor, but reading https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf : . Line starting with `n 9.2.3.2p3, change:`. > An inline static data member can be defined in the class definition and may specify. a brace or equal initializer. If the member is declared with the constexpr specifier, it may be. redeclared in namespace scope with no initializer (this usage is deprecated; see D.X). So it says that the usage is deprecated, but it *may* still be used. I couldn't find any specific document on whether the main compiler vendors actually implement this change, since it is not strictly enforced maybe it's just not there? ### 2. > Would be interesting to know how inline const behaves... So with the patch. ```. diff --git a/core/base/inc/TString.h b/core/base/inc/TString.h. index 58b47530fd..b74fe29e5c 100644. --- a/core/base/inc/TString.h. +++ b/core/base/inc/TString.h. @@ -277,7 +277,7 @@ private:. public:. enum EStripType { kLeading = 0x1, kTrailing = 0x2, kBoth = 0x3 };. enum ECaseCompare { kExact, kIgnoreCase };. - static const Ssiz_t kNPOS = ::kNPOS;. + static inline const Ssiz_t kNPOS = ::kNPOS;. . TString(); // Null string. explicit TString(Ssiz_t ic); // Suggested capacity. ```. Then we get the same situation as initially, i.e. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 0. $: strace -z -f -o run.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel)'. -1. $: grep openat run.log | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l. 2579. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:438,interoperability,specif,specifier,438,"Replying to two different comments:. ### 1. > they are automatically inline and should not need the definition out-of-line. My standardese is poor, but reading https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf : . Line starting with `n 9.2.3.2p3, change:`. > An inline static data member can be defined in the class definition and may specify. a brace or equal initializer. If the member is declared with the constexpr specifier, it may be. redeclared in namespace scope with no initializer (this usage is deprecated; see D.X). So it says that the usage is deprecated, but it *may* still be used. I couldn't find any specific document on whether the main compiler vendors actually implement this change, since it is not strictly enforced maybe it's just not there? ### 2. > Would be interesting to know how inline const behaves... So with the patch. ```. diff --git a/core/base/inc/TString.h b/core/base/inc/TString.h. index 58b47530fd..b74fe29e5c 100644. --- a/core/base/inc/TString.h. +++ b/core/base/inc/TString.h. @@ -277,7 +277,7 @@ private:. public:. enum EStripType { kLeading = 0x1, kTrailing = 0x2, kBoth = 0x3 };. enum ECaseCompare { kExact, kIgnoreCase };. - static const Ssiz_t kNPOS = ::kNPOS;. + static inline const Ssiz_t kNPOS = ::kNPOS;. . TString(); // Null string. explicit TString(Ssiz_t ic); // Suggested capacity. ```. Then we get the same situation as initially, i.e. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 0. $: strace -z -f -o run.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel)'. -1. $: grep openat run.log | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l. 2579. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:636,interoperability,specif,specific,636,"Replying to two different comments:. ### 1. > they are automatically inline and should not need the definition out-of-line. My standardese is poor, but reading https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf : . Line starting with `n 9.2.3.2p3, change:`. > An inline static data member can be defined in the class definition and may specify. a brace or equal initializer. If the member is declared with the constexpr specifier, it may be. redeclared in namespace scope with no initializer (this usage is deprecated; see D.X). So it says that the usage is deprecated, but it *may* still be used. I couldn't find any specific document on whether the main compiler vendors actually implement this change, since it is not strictly enforced maybe it's just not there? ### 2. > Would be interesting to know how inline const behaves... So with the patch. ```. diff --git a/core/base/inc/TString.h b/core/base/inc/TString.h. index 58b47530fd..b74fe29e5c 100644. --- a/core/base/inc/TString.h. +++ b/core/base/inc/TString.h. @@ -277,7 +277,7 @@ private:. public:. enum EStripType { kLeading = 0x1, kTrailing = 0x2, kBoth = 0x3 };. enum ECaseCompare { kExact, kIgnoreCase };. - static const Ssiz_t kNPOS = ::kNPOS;. + static inline const Ssiz_t kNPOS = ::kNPOS;. . TString(); // Null string. explicit TString(Ssiz_t ic); // Suggested capacity. ```. Then we get the same situation as initially, i.e. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 0. $: strace -z -f -o run.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel)'. -1. $: grep openat run.log | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l. 2579. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:862,safety,patch,patch,862,"Replying to two different comments:. ### 1. > they are automatically inline and should not need the definition out-of-line. My standardese is poor, but reading https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf : . Line starting with `n 9.2.3.2p3, change:`. > An inline static data member can be defined in the class definition and may specify. a brace or equal initializer. If the member is declared with the constexpr specifier, it may be. redeclared in namespace scope with no initializer (this usage is deprecated; see D.X). So it says that the usage is deprecated, but it *may* still be used. I couldn't find any specific document on whether the main compiler vendors actually implement this change, since it is not strictly enforced maybe it's just not there? ### 2. > Would be interesting to know how inline const behaves... So with the patch. ```. diff --git a/core/base/inc/TString.h b/core/base/inc/TString.h. index 58b47530fd..b74fe29e5c 100644. --- a/core/base/inc/TString.h. +++ b/core/base/inc/TString.h. @@ -277,7 +277,7 @@ private:. public:. enum EStripType { kLeading = 0x1, kTrailing = 0x2, kBoth = 0x3 };. enum ECaseCompare { kExact, kIgnoreCase };. - static const Ssiz_t kNPOS = ::kNPOS;. + static inline const Ssiz_t kNPOS = ::kNPOS;. . TString(); // Null string. explicit TString(Ssiz_t ic); // Suggested capacity. ```. Then we get the same situation as initially, i.e. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 0. $: strace -z -f -o run.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel)'. -1. $: grep openat run.log | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l. 2579. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1500,safety,log,log,1500,"Replying to two different comments:. ### 1. > they are automatically inline and should not need the definition out-of-line. My standardese is poor, but reading https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf : . Line starting with `n 9.2.3.2p3, change:`. > An inline static data member can be defined in the class definition and may specify. a brace or equal initializer. If the member is declared with the constexpr specifier, it may be. redeclared in namespace scope with no initializer (this usage is deprecated; see D.X). So it says that the usage is deprecated, but it *may* still be used. I couldn't find any specific document on whether the main compiler vendors actually implement this change, since it is not strictly enforced maybe it's just not there? ### 2. > Would be interesting to know how inline const behaves... So with the patch. ```. diff --git a/core/base/inc/TString.h b/core/base/inc/TString.h. index 58b47530fd..b74fe29e5c 100644. --- a/core/base/inc/TString.h. +++ b/core/base/inc/TString.h. @@ -277,7 +277,7 @@ private:. public:. enum EStripType { kLeading = 0x1, kTrailing = 0x2, kBoth = 0x3 };. enum ECaseCompare { kExact, kIgnoreCase };. - static const Ssiz_t kNPOS = ::kNPOS;. + static inline const Ssiz_t kNPOS = ::kNPOS;. . TString(); // Null string. explicit TString(Ssiz_t ic); // Suggested capacity. ```. Then we get the same situation as initially, i.e. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 0. $: strace -z -f -o run.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel)'. -1. $: grep openat run.log | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l. 2579. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1604,safety,log,log,1604,"Replying to two different comments:. ### 1. > they are automatically inline and should not need the definition out-of-line. My standardese is poor, but reading https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf : . Line starting with `n 9.2.3.2p3, change:`. > An inline static data member can be defined in the class definition and may specify. a brace or equal initializer. If the member is declared with the constexpr specifier, it may be. redeclared in namespace scope with no initializer (this usage is deprecated; see D.X). So it says that the usage is deprecated, but it *may* still be used. I couldn't find any specific document on whether the main compiler vendors actually implement this change, since it is not strictly enforced maybe it's just not there? ### 2. > Would be interesting to know how inline const behaves... So with the patch. ```. diff --git a/core/base/inc/TString.h b/core/base/inc/TString.h. index 58b47530fd..b74fe29e5c 100644. --- a/core/base/inc/TString.h. +++ b/core/base/inc/TString.h. @@ -277,7 +277,7 @@ private:. public:. enum EStripType { kLeading = 0x1, kTrailing = 0x2, kBoth = 0x3 };. enum ECaseCompare { kExact, kIgnoreCase };. - static const Ssiz_t kNPOS = ::kNPOS;. + static inline const Ssiz_t kNPOS = ::kNPOS;. . TString(); // Null string. explicit TString(Ssiz_t ic); // Suggested capacity. ```. Then we get the same situation as initially, i.e. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 0. $: strace -z -f -o run.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel)'. -1. $: grep openat run.log | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l. 2579. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:862,security,patch,patch,862,"Replying to two different comments:. ### 1. > they are automatically inline and should not need the definition out-of-line. My standardese is poor, but reading https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf : . Line starting with `n 9.2.3.2p3, change:`. > An inline static data member can be defined in the class definition and may specify. a brace or equal initializer. If the member is declared with the constexpr specifier, it may be. redeclared in namespace scope with no initializer (this usage is deprecated; see D.X). So it says that the usage is deprecated, but it *may* still be used. I couldn't find any specific document on whether the main compiler vendors actually implement this change, since it is not strictly enforced maybe it's just not there? ### 2. > Would be interesting to know how inline const behaves... So with the patch. ```. diff --git a/core/base/inc/TString.h b/core/base/inc/TString.h. index 58b47530fd..b74fe29e5c 100644. --- a/core/base/inc/TString.h. +++ b/core/base/inc/TString.h. @@ -277,7 +277,7 @@ private:. public:. enum EStripType { kLeading = 0x1, kTrailing = 0x2, kBoth = 0x3 };. enum ECaseCompare { kExact, kIgnoreCase };. - static const Ssiz_t kNPOS = ::kNPOS;. + static inline const Ssiz_t kNPOS = ::kNPOS;. . TString(); // Null string. explicit TString(Ssiz_t ic); // Suggested capacity. ```. Then we get the same situation as initially, i.e. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 0. $: strace -z -f -o run.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel)'. -1. $: grep openat run.log | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l. 2579. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1500,security,log,log,1500,"Replying to two different comments:. ### 1. > they are automatically inline and should not need the definition out-of-line. My standardese is poor, but reading https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf : . Line starting with `n 9.2.3.2p3, change:`. > An inline static data member can be defined in the class definition and may specify. a brace or equal initializer. If the member is declared with the constexpr specifier, it may be. redeclared in namespace scope with no initializer (this usage is deprecated; see D.X). So it says that the usage is deprecated, but it *may* still be used. I couldn't find any specific document on whether the main compiler vendors actually implement this change, since it is not strictly enforced maybe it's just not there? ### 2. > Would be interesting to know how inline const behaves... So with the patch. ```. diff --git a/core/base/inc/TString.h b/core/base/inc/TString.h. index 58b47530fd..b74fe29e5c 100644. --- a/core/base/inc/TString.h. +++ b/core/base/inc/TString.h. @@ -277,7 +277,7 @@ private:. public:. enum EStripType { kLeading = 0x1, kTrailing = 0x2, kBoth = 0x3 };. enum ECaseCompare { kExact, kIgnoreCase };. - static const Ssiz_t kNPOS = ::kNPOS;. + static inline const Ssiz_t kNPOS = ::kNPOS;. . TString(); // Null string. explicit TString(Ssiz_t ic); // Suggested capacity. ```. Then we get the same situation as initially, i.e. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 0. $: strace -z -f -o run.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel)'. -1. $: grep openat run.log | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l. 2579. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1604,security,log,log,1604,"Replying to two different comments:. ### 1. > they are automatically inline and should not need the definition out-of-line. My standardese is poor, but reading https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf : . Line starting with `n 9.2.3.2p3, change:`. > An inline static data member can be defined in the class definition and may specify. a brace or equal initializer. If the member is declared with the constexpr specifier, it may be. redeclared in namespace scope with no initializer (this usage is deprecated; see D.X). So it says that the usage is deprecated, but it *may* still be used. I couldn't find any specific document on whether the main compiler vendors actually implement this change, since it is not strictly enforced maybe it's just not there? ### 2. > Would be interesting to know how inline const behaves... So with the patch. ```. diff --git a/core/base/inc/TString.h b/core/base/inc/TString.h. index 58b47530fd..b74fe29e5c 100644. --- a/core/base/inc/TString.h. +++ b/core/base/inc/TString.h. @@ -277,7 +277,7 @@ private:. public:. enum EStripType { kLeading = 0x1, kTrailing = 0x2, kBoth = 0x3 };. enum ECaseCompare { kExact, kIgnoreCase };. - static const Ssiz_t kNPOS = ::kNPOS;. + static inline const Ssiz_t kNPOS = ::kNPOS;. . TString(); // Null string. explicit TString(Ssiz_t ic); // Suggested capacity. ```. Then we get the same situation as initially, i.e. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 0. $: strace -z -f -o run.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel)'. -1. $: grep openat run.log | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l. 2579. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:55,testability,automat,automatically,55,"Replying to two different comments:. ### 1. > they are automatically inline and should not need the definition out-of-line. My standardese is poor, but reading https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf : . Line starting with `n 9.2.3.2p3, change:`. > An inline static data member can be defined in the class definition and may specify. a brace or equal initializer. If the member is declared with the constexpr specifier, it may be. redeclared in namespace scope with no initializer (this usage is deprecated; see D.X). So it says that the usage is deprecated, but it *may* still be used. I couldn't find any specific document on whether the main compiler vendors actually implement this change, since it is not strictly enforced maybe it's just not there? ### 2. > Would be interesting to know how inline const behaves... So with the patch. ```. diff --git a/core/base/inc/TString.h b/core/base/inc/TString.h. index 58b47530fd..b74fe29e5c 100644. --- a/core/base/inc/TString.h. +++ b/core/base/inc/TString.h. @@ -277,7 +277,7 @@ private:. public:. enum EStripType { kLeading = 0x1, kTrailing = 0x2, kBoth = 0x3 };. enum ECaseCompare { kExact, kIgnoreCase };. - static const Ssiz_t kNPOS = ::kNPOS;. + static inline const Ssiz_t kNPOS = ::kNPOS;. . TString(); // Null string. explicit TString(Ssiz_t ic); // Suggested capacity. ```. Then we get the same situation as initially, i.e. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 0. $: strace -z -f -o run.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel)'. -1. $: grep openat run.log | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l. 2579. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1500,testability,log,log,1500,"Replying to two different comments:. ### 1. > they are automatically inline and should not need the definition out-of-line. My standardese is poor, but reading https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf : . Line starting with `n 9.2.3.2p3, change:`. > An inline static data member can be defined in the class definition and may specify. a brace or equal initializer. If the member is declared with the constexpr specifier, it may be. redeclared in namespace scope with no initializer (this usage is deprecated; see D.X). So it says that the usage is deprecated, but it *may* still be used. I couldn't find any specific document on whether the main compiler vendors actually implement this change, since it is not strictly enforced maybe it's just not there? ### 2. > Would be interesting to know how inline const behaves... So with the patch. ```. diff --git a/core/base/inc/TString.h b/core/base/inc/TString.h. index 58b47530fd..b74fe29e5c 100644. --- a/core/base/inc/TString.h. +++ b/core/base/inc/TString.h. @@ -277,7 +277,7 @@ private:. public:. enum EStripType { kLeading = 0x1, kTrailing = 0x2, kBoth = 0x3 };. enum ECaseCompare { kExact, kIgnoreCase };. - static const Ssiz_t kNPOS = ::kNPOS;. + static inline const Ssiz_t kNPOS = ::kNPOS;. . TString(); // Null string. explicit TString(Ssiz_t ic); // Suggested capacity. ```. Then we get the same situation as initially, i.e. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 0. $: strace -z -f -o run.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel)'. -1. $: grep openat run.log | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l. 2579. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1507,testability,trace,trace,1507,"Replying to two different comments:. ### 1. > they are automatically inline and should not need the definition out-of-line. My standardese is poor, but reading https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf : . Line starting with `n 9.2.3.2p3, change:`. > An inline static data member can be defined in the class definition and may specify. a brace or equal initializer. If the member is declared with the constexpr specifier, it may be. redeclared in namespace scope with no initializer (this usage is deprecated; see D.X). So it says that the usage is deprecated, but it *may* still be used. I couldn't find any specific document on whether the main compiler vendors actually implement this change, since it is not strictly enforced maybe it's just not there? ### 2. > Would be interesting to know how inline const behaves... So with the patch. ```. diff --git a/core/base/inc/TString.h b/core/base/inc/TString.h. index 58b47530fd..b74fe29e5c 100644. --- a/core/base/inc/TString.h. +++ b/core/base/inc/TString.h. @@ -277,7 +277,7 @@ private:. public:. enum EStripType { kLeading = 0x1, kTrailing = 0x2, kBoth = 0x3 };. enum ECaseCompare { kExact, kIgnoreCase };. - static const Ssiz_t kNPOS = ::kNPOS;. + static inline const Ssiz_t kNPOS = ::kNPOS;. . TString(); // Null string. explicit TString(Ssiz_t ic); // Suggested capacity. ```. Then we get the same situation as initially, i.e. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 0. $: strace -z -f -o run.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel)'. -1. $: grep openat run.log | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l. 2579. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1604,testability,log,log,1604,"Replying to two different comments:. ### 1. > they are automatically inline and should not need the definition out-of-line. My standardese is poor, but reading https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf : . Line starting with `n 9.2.3.2p3, change:`. > An inline static data member can be defined in the class definition and may specify. a brace or equal initializer. If the member is declared with the constexpr specifier, it may be. redeclared in namespace scope with no initializer (this usage is deprecated; see D.X). So it says that the usage is deprecated, but it *may* still be used. I couldn't find any specific document on whether the main compiler vendors actually implement this change, since it is not strictly enforced maybe it's just not there? ### 2. > Would be interesting to know how inline const behaves... So with the patch. ```. diff --git a/core/base/inc/TString.h b/core/base/inc/TString.h. index 58b47530fd..b74fe29e5c 100644. --- a/core/base/inc/TString.h. +++ b/core/base/inc/TString.h. @@ -277,7 +277,7 @@ private:. public:. enum EStripType { kLeading = 0x1, kTrailing = 0x2, kBoth = 0x3 };. enum ECaseCompare { kExact, kIgnoreCase };. - static const Ssiz_t kNPOS = ::kNPOS;. + static inline const Ssiz_t kNPOS = ::kNPOS;. . TString(); // Null string. explicit TString(Ssiz_t ic); // Suggested capacity. ```. Then we get the same situation as initially, i.e. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 0. $: strace -z -f -o run.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel)'. -1. $: grep openat run.log | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l. 2579. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:645,usability,document,document,645,"Replying to two different comments:. ### 1. > they are automatically inline and should not need the definition out-of-line. My standardese is poor, but reading https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf : . Line starting with `n 9.2.3.2p3, change:`. > An inline static data member can be defined in the class definition and may specify. a brace or equal initializer. If the member is declared with the constexpr specifier, it may be. redeclared in namespace scope with no initializer (this usage is deprecated; see D.X). So it says that the usage is deprecated, but it *may* still be used. I couldn't find any specific document on whether the main compiler vendors actually implement this change, since it is not strictly enforced maybe it's just not there? ### 2. > Would be interesting to know how inline const behaves... So with the patch. ```. diff --git a/core/base/inc/TString.h b/core/base/inc/TString.h. index 58b47530fd..b74fe29e5c 100644. --- a/core/base/inc/TString.h. +++ b/core/base/inc/TString.h. @@ -277,7 +277,7 @@ private:. public:. enum EStripType { kLeading = 0x1, kTrailing = 0x2, kBoth = 0x3 };. enum ECaseCompare { kExact, kIgnoreCase };. - static const Ssiz_t kNPOS = ::kNPOS;. + static inline const Ssiz_t kNPOS = ::kNPOS;. . TString(); // Null string. explicit TString(Ssiz_t ic); // Suggested capacity. ```. Then we get the same situation as initially, i.e. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 0. $: strace -z -f -o run.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel)'. -1. $: grep openat run.log | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l. 2579. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:767,availability,error,error,767,"> what is ODR-using kNPOS? https://godbolt.org/z/4EYM6nrnn. > With C++17, they are automatically inline and should not need the definition out-of-line. You can make a variable inline which does not need a definition outside of the class but they do not become inline automatically, iiuc. I expect if you make it inline to pollute all .o files and .so files. However, we do not seem to have an odr-use of this anywhere so the symbol is elided. So when python asks for `TString::kNPOS` we cannot promise that somebody throughout a codebase would have odr-used it - instead, the JIT should be able to force codegen of its symbol and provide it. The problem with the current cppyy is that it would exhaustively enumerate all of the members of a class which triggers that error. It's probably not worth fixing this as it is already fixed by design with the rework of cppyy we are doing... . > nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:83,deployability,automat,automatically,83,"> what is ODR-using kNPOS? https://godbolt.org/z/4EYM6nrnn. > With C++17, they are automatically inline and should not need the definition out-of-line. You can make a variable inline which does not need a definition outside of the class but they do not become inline automatically, iiuc. I expect if you make it inline to pollute all .o files and .so files. However, we do not seem to have an odr-use of this anywhere so the symbol is elided. So when python asks for `TString::kNPOS` we cannot promise that somebody throughout a codebase would have odr-used it - instead, the JIT should be able to force codegen of its symbol and provide it. The problem with the current cppyy is that it would exhaustively enumerate all of the members of a class which triggers that error. It's probably not worth fixing this as it is already fixed by design with the rework of cppyy we are doing... . > nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:267,deployability,automat,automatically,267,"> what is ODR-using kNPOS? https://godbolt.org/z/4EYM6nrnn. > With C++17, they are automatically inline and should not need the definition out-of-line. You can make a variable inline which does not need a definition outside of the class but they do not become inline automatically, iiuc. I expect if you make it inline to pollute all .o files and .so files. However, we do not seem to have an odr-use of this anywhere so the symbol is elided. So when python asks for `TString::kNPOS` we cannot promise that somebody throughout a codebase would have odr-used it - instead, the JIT should be able to force codegen of its symbol and provide it. The problem with the current cppyy is that it would exhaustively enumerate all of the members of a class which triggers that error. It's probably not worth fixing this as it is already fixed by design with the rework of cppyy we are doing... . > nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:663,energy efficiency,current,current,663,"> what is ODR-using kNPOS? https://godbolt.org/z/4EYM6nrnn. > With C++17, they are automatically inline and should not need the definition out-of-line. You can make a variable inline which does not need a definition outside of the class but they do not become inline automatically, iiuc. I expect if you make it inline to pollute all .o files and .so files. However, we do not seem to have an odr-use of this anywhere so the symbol is elided. So when python asks for `TString::kNPOS` we cannot promise that somebody throughout a codebase would have odr-used it - instead, the JIT should be able to force codegen of its symbol and provide it. The problem with the current cppyy is that it would exhaustively enumerate all of the members of a class which triggers that error. It's probably not worth fixing this as it is already fixed by design with the rework of cppyy we are doing... . > nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:167,modifiability,variab,variable,167,"> what is ODR-using kNPOS? https://godbolt.org/z/4EYM6nrnn. > With C++17, they are automatically inline and should not need the definition out-of-line. You can make a variable inline which does not need a definition outside of the class but they do not become inline automatically, iiuc. I expect if you make it inline to pollute all .o files and .so files. However, we do not seem to have an odr-use of this anywhere so the symbol is elided. So when python asks for `TString::kNPOS` we cannot promise that somebody throughout a codebase would have odr-used it - instead, the JIT should be able to force codegen of its symbol and provide it. The problem with the current cppyy is that it would exhaustively enumerate all of the members of a class which triggers that error. It's probably not worth fixing this as it is already fixed by design with the rework of cppyy we are doing... . > nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:767,performance,error,error,767,"> what is ODR-using kNPOS? https://godbolt.org/z/4EYM6nrnn. > With C++17, they are automatically inline and should not need the definition out-of-line. You can make a variable inline which does not need a definition outside of the class but they do not become inline automatically, iiuc. I expect if you make it inline to pollute all .o files and .so files. However, we do not seem to have an odr-use of this anywhere so the symbol is elided. So when python asks for `TString::kNPOS` we cannot promise that somebody throughout a codebase would have odr-used it - instead, the JIT should be able to force codegen of its symbol and provide it. The problem with the current cppyy is that it would exhaustively enumerate all of the members of a class which triggers that error. It's probably not worth fixing this as it is already fixed by design with the rework of cppyy we are doing... . > nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:189,reliability,doe,does,189,"> what is ODR-using kNPOS? https://godbolt.org/z/4EYM6nrnn. > With C++17, they are automatically inline and should not need the definition out-of-line. You can make a variable inline which does not need a definition outside of the class but they do not become inline automatically, iiuc. I expect if you make it inline to pollute all .o files and .so files. However, we do not seem to have an odr-use of this anywhere so the symbol is elided. So when python asks for `TString::kNPOS` we cannot promise that somebody throughout a codebase would have odr-used it - instead, the JIT should be able to force codegen of its symbol and provide it. The problem with the current cppyy is that it would exhaustively enumerate all of the members of a class which triggers that error. It's probably not worth fixing this as it is already fixed by design with the rework of cppyy we are doing... . > nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:767,safety,error,error,767,"> what is ODR-using kNPOS? https://godbolt.org/z/4EYM6nrnn. > With C++17, they are automatically inline and should not need the definition out-of-line. You can make a variable inline which does not need a definition outside of the class but they do not become inline automatically, iiuc. I expect if you make it inline to pollute all .o files and .so files. However, we do not seem to have an odr-use of this anywhere so the symbol is elided. So when python asks for `TString::kNPOS` we cannot promise that somebody throughout a codebase would have odr-used it - instead, the JIT should be able to force codegen of its symbol and provide it. The problem with the current cppyy is that it would exhaustively enumerate all of the members of a class which triggers that error. It's probably not worth fixing this as it is already fixed by design with the rework of cppyy we are doing... . > nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:83,testability,automat,automatically,83,"> what is ODR-using kNPOS? https://godbolt.org/z/4EYM6nrnn. > With C++17, they are automatically inline and should not need the definition out-of-line. You can make a variable inline which does not need a definition outside of the class but they do not become inline automatically, iiuc. I expect if you make it inline to pollute all .o files and .so files. However, we do not seem to have an odr-use of this anywhere so the symbol is elided. So when python asks for `TString::kNPOS` we cannot promise that somebody throughout a codebase would have odr-used it - instead, the JIT should be able to force codegen of its symbol and provide it. The problem with the current cppyy is that it would exhaustively enumerate all of the members of a class which triggers that error. It's probably not worth fixing this as it is already fixed by design with the rework of cppyy we are doing... . > nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:267,testability,automat,automatically,267,"> what is ODR-using kNPOS? https://godbolt.org/z/4EYM6nrnn. > With C++17, they are automatically inline and should not need the definition out-of-line. You can make a variable inline which does not need a definition outside of the class but they do not become inline automatically, iiuc. I expect if you make it inline to pollute all .o files and .so files. However, we do not seem to have an odr-use of this anywhere so the symbol is elided. So when python asks for `TString::kNPOS` we cannot promise that somebody throughout a codebase would have odr-used it - instead, the JIT should be able to force codegen of its symbol and provide it. The problem with the current cppyy is that it would exhaustively enumerate all of the members of a class which triggers that error. It's probably not worth fixing this as it is already fixed by design with the rework of cppyy we are doing... . > nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:767,usability,error,error,767,"> what is ODR-using kNPOS? https://godbolt.org/z/4EYM6nrnn. > With C++17, they are automatically inline and should not need the definition out-of-line. You can make a variable inline which does not need a definition outside of the class but they do not become inline automatically, iiuc. I expect if you make it inline to pollute all .o files and .so files. However, we do not seem to have an odr-use of this anywhere so the symbol is elided. So when python asks for `TString::kNPOS` we cannot promise that somebody throughout a codebase would have odr-used it - instead, the JIT should be able to force codegen of its symbol and provide it. The problem with the current cppyy is that it would exhaustively enumerate all of the members of a class which triggers that error. It's probably not worth fixing this as it is already fixed by design with the rework of cppyy we are doing... . > nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1032,availability,error,error,1032,"> > what is ODR-using kNPOS? > . > https://godbolt.org/z/4EYM6nrnn. Thanks Vassil; as you are well aware, I know what ODR-using means. What I'm asking you is where *in ROOT* the code is taking the pointer of `kNPOS` (see below). > > With C++17, they are automatically inline and should not need the definition out-of-line. > . > You can make a variable inline which does not need a definition outside of the class but they do not become inline automatically, iiuc. In C++17, `constexpr` is *automatically* `inline`, that's what I'm saying. > I expect if you make it inline to pollute all .o files and .so files. However, we do not seem to have an odr-use of this anywhere so the symbol is elided. Correct. > So when python asks for `TString::kNPOS` we cannot promise that somebody throughout a codebase would have odr-used it - instead, the JIT should be able to force codegen of its symbol and provide it. The problem with the current cppyy is that it would exhaustively enumerate all of the members of a class which triggers that error. It's probably not worth fixing this as it is already fixed by design with the rework of cppyy we are doing... So if I understand this correctly, cppyy will actively break `inline` and `constexpr` variables with C++17? Now that would be really, really bad and IMHO must be fixed immediately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:254,deployability,automat,automatically,254,"> > what is ODR-using kNPOS? > . > https://godbolt.org/z/4EYM6nrnn. Thanks Vassil; as you are well aware, I know what ODR-using means. What I'm asking you is where *in ROOT* the code is taking the pointer of `kNPOS` (see below). > > With C++17, they are automatically inline and should not need the definition out-of-line. > . > You can make a variable inline which does not need a definition outside of the class but they do not become inline automatically, iiuc. In C++17, `constexpr` is *automatically* `inline`, that's what I'm saying. > I expect if you make it inline to pollute all .o files and .so files. However, we do not seem to have an odr-use of this anywhere so the symbol is elided. Correct. > So when python asks for `TString::kNPOS` we cannot promise that somebody throughout a codebase would have odr-used it - instead, the JIT should be able to force codegen of its symbol and provide it. The problem with the current cppyy is that it would exhaustively enumerate all of the members of a class which triggers that error. It's probably not worth fixing this as it is already fixed by design with the rework of cppyy we are doing... So if I understand this correctly, cppyy will actively break `inline` and `constexpr` variables with C++17? Now that would be really, really bad and IMHO must be fixed immediately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:444,deployability,automat,automatically,444,"> > what is ODR-using kNPOS? > . > https://godbolt.org/z/4EYM6nrnn. Thanks Vassil; as you are well aware, I know what ODR-using means. What I'm asking you is where *in ROOT* the code is taking the pointer of `kNPOS` (see below). > > With C++17, they are automatically inline and should not need the definition out-of-line. > . > You can make a variable inline which does not need a definition outside of the class but they do not become inline automatically, iiuc. In C++17, `constexpr` is *automatically* `inline`, that's what I'm saying. > I expect if you make it inline to pollute all .o files and .so files. However, we do not seem to have an odr-use of this anywhere so the symbol is elided. Correct. > So when python asks for `TString::kNPOS` we cannot promise that somebody throughout a codebase would have odr-used it - instead, the JIT should be able to force codegen of its symbol and provide it. The problem with the current cppyy is that it would exhaustively enumerate all of the members of a class which triggers that error. It's probably not worth fixing this as it is already fixed by design with the rework of cppyy we are doing... So if I understand this correctly, cppyy will actively break `inline` and `constexpr` variables with C++17? Now that would be really, really bad and IMHO must be fixed immediately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:491,deployability,automat,automatically,491,"> > what is ODR-using kNPOS? > . > https://godbolt.org/z/4EYM6nrnn. Thanks Vassil; as you are well aware, I know what ODR-using means. What I'm asking you is where *in ROOT* the code is taking the pointer of `kNPOS` (see below). > > With C++17, they are automatically inline and should not need the definition out-of-line. > . > You can make a variable inline which does not need a definition outside of the class but they do not become inline automatically, iiuc. In C++17, `constexpr` is *automatically* `inline`, that's what I'm saying. > I expect if you make it inline to pollute all .o files and .so files. However, we do not seem to have an odr-use of this anywhere so the symbol is elided. Correct. > So when python asks for `TString::kNPOS` we cannot promise that somebody throughout a codebase would have odr-used it - instead, the JIT should be able to force codegen of its symbol and provide it. The problem with the current cppyy is that it would exhaustively enumerate all of the members of a class which triggers that error. It's probably not worth fixing this as it is already fixed by design with the rework of cppyy we are doing... So if I understand this correctly, cppyy will actively break `inline` and `constexpr` variables with C++17? Now that would be really, really bad and IMHO must be fixed immediately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:928,energy efficiency,current,current,928,"> > what is ODR-using kNPOS? > . > https://godbolt.org/z/4EYM6nrnn. Thanks Vassil; as you are well aware, I know what ODR-using means. What I'm asking you is where *in ROOT* the code is taking the pointer of `kNPOS` (see below). > > With C++17, they are automatically inline and should not need the definition out-of-line. > . > You can make a variable inline which does not need a definition outside of the class but they do not become inline automatically, iiuc. In C++17, `constexpr` is *automatically* `inline`, that's what I'm saying. > I expect if you make it inline to pollute all .o files and .so files. However, we do not seem to have an odr-use of this anywhere so the symbol is elided. Correct. > So when python asks for `TString::kNPOS` we cannot promise that somebody throughout a codebase would have odr-used it - instead, the JIT should be able to force codegen of its symbol and provide it. The problem with the current cppyy is that it would exhaustively enumerate all of the members of a class which triggers that error. It's probably not worth fixing this as it is already fixed by design with the rework of cppyy we are doing... So if I understand this correctly, cppyy will actively break `inline` and `constexpr` variables with C++17? Now that would be really, really bad and IMHO must be fixed immediately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:344,modifiability,variab,variable,344,"> > what is ODR-using kNPOS? > . > https://godbolt.org/z/4EYM6nrnn. Thanks Vassil; as you are well aware, I know what ODR-using means. What I'm asking you is where *in ROOT* the code is taking the pointer of `kNPOS` (see below). > > With C++17, they are automatically inline and should not need the definition out-of-line. > . > You can make a variable inline which does not need a definition outside of the class but they do not become inline automatically, iiuc. In C++17, `constexpr` is *automatically* `inline`, that's what I'm saying. > I expect if you make it inline to pollute all .o files and .so files. However, we do not seem to have an odr-use of this anywhere so the symbol is elided. Correct. > So when python asks for `TString::kNPOS` we cannot promise that somebody throughout a codebase would have odr-used it - instead, the JIT should be able to force codegen of its symbol and provide it. The problem with the current cppyy is that it would exhaustively enumerate all of the members of a class which triggers that error. It's probably not worth fixing this as it is already fixed by design with the rework of cppyy we are doing... So if I understand this correctly, cppyy will actively break `inline` and `constexpr` variables with C++17? Now that would be really, really bad and IMHO must be fixed immediately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1235,modifiability,variab,variables,1235,"> > what is ODR-using kNPOS? > . > https://godbolt.org/z/4EYM6nrnn. Thanks Vassil; as you are well aware, I know what ODR-using means. What I'm asking you is where *in ROOT* the code is taking the pointer of `kNPOS` (see below). > > With C++17, they are automatically inline and should not need the definition out-of-line. > . > You can make a variable inline which does not need a definition outside of the class but they do not become inline automatically, iiuc. In C++17, `constexpr` is *automatically* `inline`, that's what I'm saying. > I expect if you make it inline to pollute all .o files and .so files. However, we do not seem to have an odr-use of this anywhere so the symbol is elided. Correct. > So when python asks for `TString::kNPOS` we cannot promise that somebody throughout a codebase would have odr-used it - instead, the JIT should be able to force codegen of its symbol and provide it. The problem with the current cppyy is that it would exhaustively enumerate all of the members of a class which triggers that error. It's probably not worth fixing this as it is already fixed by design with the rework of cppyy we are doing... So if I understand this correctly, cppyy will actively break `inline` and `constexpr` variables with C++17? Now that would be really, really bad and IMHO must be fixed immediately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1032,performance,error,error,1032,"> > what is ODR-using kNPOS? > . > https://godbolt.org/z/4EYM6nrnn. Thanks Vassil; as you are well aware, I know what ODR-using means. What I'm asking you is where *in ROOT* the code is taking the pointer of `kNPOS` (see below). > > With C++17, they are automatically inline and should not need the definition out-of-line. > . > You can make a variable inline which does not need a definition outside of the class but they do not become inline automatically, iiuc. In C++17, `constexpr` is *automatically* `inline`, that's what I'm saying. > I expect if you make it inline to pollute all .o files and .so files. However, we do not seem to have an odr-use of this anywhere so the symbol is elided. Correct. > So when python asks for `TString::kNPOS` we cannot promise that somebody throughout a codebase would have odr-used it - instead, the JIT should be able to force codegen of its symbol and provide it. The problem with the current cppyy is that it would exhaustively enumerate all of the members of a class which triggers that error. It's probably not worth fixing this as it is already fixed by design with the rework of cppyy we are doing... So if I understand this correctly, cppyy will actively break `inline` and `constexpr` variables with C++17? Now that would be really, really bad and IMHO must be fixed immediately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:366,reliability,doe,does,366,"> > what is ODR-using kNPOS? > . > https://godbolt.org/z/4EYM6nrnn. Thanks Vassil; as you are well aware, I know what ODR-using means. What I'm asking you is where *in ROOT* the code is taking the pointer of `kNPOS` (see below). > > With C++17, they are automatically inline and should not need the definition out-of-line. > . > You can make a variable inline which does not need a definition outside of the class but they do not become inline automatically, iiuc. In C++17, `constexpr` is *automatically* `inline`, that's what I'm saying. > I expect if you make it inline to pollute all .o files and .so files. However, we do not seem to have an odr-use of this anywhere so the symbol is elided. Correct. > So when python asks for `TString::kNPOS` we cannot promise that somebody throughout a codebase would have odr-used it - instead, the JIT should be able to force codegen of its symbol and provide it. The problem with the current cppyy is that it would exhaustively enumerate all of the members of a class which triggers that error. It's probably not worth fixing this as it is already fixed by design with the rework of cppyy we are doing... So if I understand this correctly, cppyy will actively break `inline` and `constexpr` variables with C++17? Now that would be really, really bad and IMHO must be fixed immediately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1032,safety,error,error,1032,"> > what is ODR-using kNPOS? > . > https://godbolt.org/z/4EYM6nrnn. Thanks Vassil; as you are well aware, I know what ODR-using means. What I'm asking you is where *in ROOT* the code is taking the pointer of `kNPOS` (see below). > > With C++17, they are automatically inline and should not need the definition out-of-line. > . > You can make a variable inline which does not need a definition outside of the class but they do not become inline automatically, iiuc. In C++17, `constexpr` is *automatically* `inline`, that's what I'm saying. > I expect if you make it inline to pollute all .o files and .so files. However, we do not seem to have an odr-use of this anywhere so the symbol is elided. Correct. > So when python asks for `TString::kNPOS` we cannot promise that somebody throughout a codebase would have odr-used it - instead, the JIT should be able to force codegen of its symbol and provide it. The problem with the current cppyy is that it would exhaustively enumerate all of the members of a class which triggers that error. It's probably not worth fixing this as it is already fixed by design with the rework of cppyy we are doing... So if I understand this correctly, cppyy will actively break `inline` and `constexpr` variables with C++17? Now that would be really, really bad and IMHO must be fixed immediately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:254,testability,automat,automatically,254,"> > what is ODR-using kNPOS? > . > https://godbolt.org/z/4EYM6nrnn. Thanks Vassil; as you are well aware, I know what ODR-using means. What I'm asking you is where *in ROOT* the code is taking the pointer of `kNPOS` (see below). > > With C++17, they are automatically inline and should not need the definition out-of-line. > . > You can make a variable inline which does not need a definition outside of the class but they do not become inline automatically, iiuc. In C++17, `constexpr` is *automatically* `inline`, that's what I'm saying. > I expect if you make it inline to pollute all .o files and .so files. However, we do not seem to have an odr-use of this anywhere so the symbol is elided. Correct. > So when python asks for `TString::kNPOS` we cannot promise that somebody throughout a codebase would have odr-used it - instead, the JIT should be able to force codegen of its symbol and provide it. The problem with the current cppyy is that it would exhaustively enumerate all of the members of a class which triggers that error. It's probably not worth fixing this as it is already fixed by design with the rework of cppyy we are doing... So if I understand this correctly, cppyy will actively break `inline` and `constexpr` variables with C++17? Now that would be really, really bad and IMHO must be fixed immediately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:444,testability,automat,automatically,444,"> > what is ODR-using kNPOS? > . > https://godbolt.org/z/4EYM6nrnn. Thanks Vassil; as you are well aware, I know what ODR-using means. What I'm asking you is where *in ROOT* the code is taking the pointer of `kNPOS` (see below). > > With C++17, they are automatically inline and should not need the definition out-of-line. > . > You can make a variable inline which does not need a definition outside of the class but they do not become inline automatically, iiuc. In C++17, `constexpr` is *automatically* `inline`, that's what I'm saying. > I expect if you make it inline to pollute all .o files and .so files. However, we do not seem to have an odr-use of this anywhere so the symbol is elided. Correct. > So when python asks for `TString::kNPOS` we cannot promise that somebody throughout a codebase would have odr-used it - instead, the JIT should be able to force codegen of its symbol and provide it. The problem with the current cppyy is that it would exhaustively enumerate all of the members of a class which triggers that error. It's probably not worth fixing this as it is already fixed by design with the rework of cppyy we are doing... So if I understand this correctly, cppyy will actively break `inline` and `constexpr` variables with C++17? Now that would be really, really bad and IMHO must be fixed immediately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:491,testability,automat,automatically,491,"> > what is ODR-using kNPOS? > . > https://godbolt.org/z/4EYM6nrnn. Thanks Vassil; as you are well aware, I know what ODR-using means. What I'm asking you is where *in ROOT* the code is taking the pointer of `kNPOS` (see below). > > With C++17, they are automatically inline and should not need the definition out-of-line. > . > You can make a variable inline which does not need a definition outside of the class but they do not become inline automatically, iiuc. In C++17, `constexpr` is *automatically* `inline`, that's what I'm saying. > I expect if you make it inline to pollute all .o files and .so files. However, we do not seem to have an odr-use of this anywhere so the symbol is elided. Correct. > So when python asks for `TString::kNPOS` we cannot promise that somebody throughout a codebase would have odr-used it - instead, the JIT should be able to force codegen of its symbol and provide it. The problem with the current cppyy is that it would exhaustively enumerate all of the members of a class which triggers that error. It's probably not worth fixing this as it is already fixed by design with the rework of cppyy we are doing... So if I understand this correctly, cppyy will actively break `inline` and `constexpr` variables with C++17? Now that would be really, really bad and IMHO must be fixed immediately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1157,testability,understand,understand,1157,"> > what is ODR-using kNPOS? > . > https://godbolt.org/z/4EYM6nrnn. Thanks Vassil; as you are well aware, I know what ODR-using means. What I'm asking you is where *in ROOT* the code is taking the pointer of `kNPOS` (see below). > > With C++17, they are automatically inline and should not need the definition out-of-line. > . > You can make a variable inline which does not need a definition outside of the class but they do not become inline automatically, iiuc. In C++17, `constexpr` is *automatically* `inline`, that's what I'm saying. > I expect if you make it inline to pollute all .o files and .so files. However, we do not seem to have an odr-use of this anywhere so the symbol is elided. Correct. > So when python asks for `TString::kNPOS` we cannot promise that somebody throughout a codebase would have odr-used it - instead, the JIT should be able to force codegen of its symbol and provide it. The problem with the current cppyy is that it would exhaustively enumerate all of the members of a class which triggers that error. It's probably not worth fixing this as it is already fixed by design with the rework of cppyy we are doing... So if I understand this correctly, cppyy will actively break `inline` and `constexpr` variables with C++17? Now that would be really, really bad and IMHO must be fixed immediately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1032,usability,error,error,1032,"> > what is ODR-using kNPOS? > . > https://godbolt.org/z/4EYM6nrnn. Thanks Vassil; as you are well aware, I know what ODR-using means. What I'm asking you is where *in ROOT* the code is taking the pointer of `kNPOS` (see below). > > With C++17, they are automatically inline and should not need the definition out-of-line. > . > You can make a variable inline which does not need a definition outside of the class but they do not become inline automatically, iiuc. In C++17, `constexpr` is *automatically* `inline`, that's what I'm saying. > I expect if you make it inline to pollute all .o files and .so files. However, we do not seem to have an odr-use of this anywhere so the symbol is elided. Correct. > So when python asks for `TString::kNPOS` we cannot promise that somebody throughout a codebase would have odr-used it - instead, the JIT should be able to force codegen of its symbol and provide it. The problem with the current cppyy is that it would exhaustively enumerate all of the members of a class which triggers that error. It's probably not worth fixing this as it is already fixed by design with the rework of cppyy we are doing... So if I understand this correctly, cppyy will actively break `inline` and `constexpr` variables with C++17? Now that would be really, really bad and IMHO must be fixed immediately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:94,deployability,patch,patch,94,"> Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`. Sure! ```. # Before patch. $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. 0. # After patch. $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. 1. ```. In particular, that one symbol is found in `libCore.so`. ```. $: nm libCore.so | grep _ZN7TString5kNPOSE. 0000000000591508 R _ZN7TString5kNPOSE. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:173,deployability,patch,patch,173,"> Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`. Sure! ```. # Before patch. $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. 0. # After patch. $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. 1. ```. In particular, that one symbol is found in `libCore.so`. ```. $: nm libCore.so | grep _ZN7TString5kNPOSE. 0000000000591508 R _ZN7TString5kNPOSE. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:94,safety,patch,patch,94,"> Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`. Sure! ```. # Before patch. $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. 0. # After patch. $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. 1. ```. In particular, that one symbol is found in `libCore.so`. ```. $: nm libCore.so | grep _ZN7TString5kNPOSE. 0000000000591508 R _ZN7TString5kNPOSE. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:173,safety,patch,patch,173,"> Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`. Sure! ```. # Before patch. $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. 0. # After patch. $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. 1. ```. In particular, that one symbol is found in `libCore.so`. ```. $: nm libCore.so | grep _ZN7TString5kNPOSE. 0000000000591508 R _ZN7TString5kNPOSE. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:94,security,patch,patch,94,"> Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`. Sure! ```. # Before patch. $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. 0. # After patch. $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. 1. ```. In particular, that one symbol is found in `libCore.so`. ```. $: nm libCore.so | grep _ZN7TString5kNPOSE. 0000000000591508 R _ZN7TString5kNPOSE. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:173,security,patch,patch,173,"> Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`. Sure! ```. # Before patch. $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. 0. # After patch. $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. 1. ```. In particular, that one symbol is found in `libCore.so`. ```. $: nm libCore.so | grep _ZN7TString5kNPOSE. 0000000000591508 R _ZN7TString5kNPOSE. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:88,modifiability,variab,variables,88,"> So if I understand this correctly, cppyy will actively break `inline` and `constexpr` variables with C++17? Now that would be really, really bad and IMHO must be fixed immediately. This is not only cppyy but anything in ROOT using reflection to get a symbol address of these things. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:10,testability,understand,understand,10,"> So if I understand this correctly, cppyy will actively break `inline` and `constexpr` variables with C++17? Now that would be really, really bad and IMHO must be fixed immediately. This is not only cppyy but anything in ROOT using reflection to get a symbol address of these things. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:558,availability,sli,slightly,558,"> > Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`. > . > Sure! > . > ```. > # Before patch. > $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. > 0. > # After patch. > $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. > 1. > ```. > . > In particular, that one symbol is found in `libCore.so`. > . > ```. > $: nm libCore.so | grep _ZN7TString5kNPOSE. > 0000000000591508 R _ZN7TString5kNPOSE. > ```. I meant with the inline patch -- just to make sure that if we mark the variable `inline` it does not mangle in a slightly different way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:110,deployability,patch,patch,110,"> > Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`. > . > Sure! > . > ```. > # Before patch. > $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. > 0. > # After patch. > $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. > 1. > ```. > . > In particular, that one symbol is found in `libCore.so`. > . > ```. > $: nm libCore.so | grep _ZN7TString5kNPOSE. > 0000000000591508 R _ZN7TString5kNPOSE. > ```. I meant with the inline patch -- just to make sure that if we mark the variable `inline` it does not mangle in a slightly different way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:195,deployability,patch,patch,195,"> > Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`. > . > Sure! > . > ```. > # Before patch. > $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. > 0. > # After patch. > $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. > 1. > ```. > . > In particular, that one symbol is found in `libCore.so`. > . > ```. > $: nm libCore.so | grep _ZN7TString5kNPOSE. > 0000000000591508 R _ZN7TString5kNPOSE. > ```. I meant with the inline patch -- just to make sure that if we mark the variable `inline` it does not mangle in a slightly different way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:469,deployability,patch,patch,469,"> > Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`. > . > Sure! > . > ```. > # Before patch. > $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. > 0. > # After patch. > $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. > 1. > ```. > . > In particular, that one symbol is found in `libCore.so`. > . > ```. > $: nm libCore.so | grep _ZN7TString5kNPOSE. > 0000000000591508 R _ZN7TString5kNPOSE. > ```. I meant with the inline patch -- just to make sure that if we mark the variable `inline` it does not mangle in a slightly different way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:516,modifiability,variab,variable,516,"> > Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`. > . > Sure! > . > ```. > # Before patch. > $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. > 0. > # After patch. > $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. > 1. > ```. > . > In particular, that one symbol is found in `libCore.so`. > . > ```. > $: nm libCore.so | grep _ZN7TString5kNPOSE. > 0000000000591508 R _ZN7TString5kNPOSE. > ```. I meant with the inline patch -- just to make sure that if we mark the variable `inline` it does not mangle in a slightly different way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:537,reliability,doe,does,537,"> > Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`. > . > Sure! > . > ```. > # Before patch. > $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. > 0. > # After patch. > $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. > 1. > ```. > . > In particular, that one symbol is found in `libCore.so`. > . > ```. > $: nm libCore.so | grep _ZN7TString5kNPOSE. > 0000000000591508 R _ZN7TString5kNPOSE. > ```. I meant with the inline patch -- just to make sure that if we mark the variable `inline` it does not mangle in a slightly different way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:558,reliability,sli,slightly,558,"> > Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`. > . > Sure! > . > ```. > # Before patch. > $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. > 0. > # After patch. > $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. > 1. > ```. > . > In particular, that one symbol is found in `libCore.so`. > . > ```. > $: nm libCore.so | grep _ZN7TString5kNPOSE. > 0000000000591508 R _ZN7TString5kNPOSE. > ```. I meant with the inline patch -- just to make sure that if we mark the variable `inline` it does not mangle in a slightly different way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:110,safety,patch,patch,110,"> > Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`. > . > Sure! > . > ```. > # Before patch. > $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. > 0. > # After patch. > $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. > 1. > ```. > . > In particular, that one symbol is found in `libCore.so`. > . > ```. > $: nm libCore.so | grep _ZN7TString5kNPOSE. > 0000000000591508 R _ZN7TString5kNPOSE. > ```. I meant with the inline patch -- just to make sure that if we mark the variable `inline` it does not mangle in a slightly different way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:195,safety,patch,patch,195,"> > Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`. > . > Sure! > . > ```. > # Before patch. > $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. > 0. > # After patch. > $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. > 1. > ```. > . > In particular, that one symbol is found in `libCore.so`. > . > ```. > $: nm libCore.so | grep _ZN7TString5kNPOSE. > 0000000000591508 R _ZN7TString5kNPOSE. > ```. I meant with the inline patch -- just to make sure that if we mark the variable `inline` it does not mangle in a slightly different way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:469,safety,patch,patch,469,"> > Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`. > . > Sure! > . > ```. > # Before patch. > $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. > 0. > # After patch. > $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. > 1. > ```. > . > In particular, that one symbol is found in `libCore.so`. > . > ```. > $: nm libCore.so | grep _ZN7TString5kNPOSE. > 0000000000591508 R _ZN7TString5kNPOSE. > ```. I meant with the inline patch -- just to make sure that if we mark the variable `inline` it does not mangle in a slightly different way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:110,security,patch,patch,110,"> > Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`. > . > Sure! > . > ```. > # Before patch. > $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. > 0. > # After patch. > $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. > 1. > ```. > . > In particular, that one symbol is found in `libCore.so`. > . > ```. > $: nm libCore.so | grep _ZN7TString5kNPOSE. > 0000000000591508 R _ZN7TString5kNPOSE. > ```. I meant with the inline patch -- just to make sure that if we mark the variable `inline` it does not mangle in a slightly different way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:195,security,patch,patch,195,"> > Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`. > . > Sure! > . > ```. > # Before patch. > $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. > 0. > # After patch. > $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. > 1. > ```. > . > In particular, that one symbol is found in `libCore.so`. > . > ```. > $: nm libCore.so | grep _ZN7TString5kNPOSE. > 0000000000591508 R _ZN7TString5kNPOSE. > ```. I meant with the inline patch -- just to make sure that if we mark the variable `inline` it does not mangle in a slightly different way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:469,security,patch,patch,469,"> > Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`. > . > Sure! > . > ```. > # Before patch. > $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. > 0. > # After patch. > $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. > 1. > ```. > . > In particular, that one symbol is found in `libCore.so`. > . > ```. > $: nm libCore.so | grep _ZN7TString5kNPOSE. > 0000000000591508 R _ZN7TString5kNPOSE. > ```. I meant with the inline patch -- just to make sure that if we mark the variable `inline` it does not mangle in a slightly different way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:113,availability,sli,slightly,113,"> I meant with the inline patch -- just to make sure that if we mark the variable inline it does not mangle in a slightly different way. Ah yes, sorry for the confusion, this is the output with the `inline const` patch. ```. $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:26,deployability,patch,patch,26,"> I meant with the inline patch -- just to make sure that if we mark the variable inline it does not mangle in a slightly different way. Ah yes, sorry for the confusion, this is the output with the `inline const` patch. ```. $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:213,deployability,patch,patch,213,"> I meant with the inline patch -- just to make sure that if we mark the variable inline it does not mangle in a slightly different way. Ah yes, sorry for the confusion, this is the output with the `inline const` patch. ```. $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:73,modifiability,variab,variable,73,"> I meant with the inline patch -- just to make sure that if we mark the variable inline it does not mangle in a slightly different way. Ah yes, sorry for the confusion, this is the output with the `inline const` patch. ```. $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:92,reliability,doe,does,92,"> I meant with the inline patch -- just to make sure that if we mark the variable inline it does not mangle in a slightly different way. Ah yes, sorry for the confusion, this is the output with the `inline const` patch. ```. $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:113,reliability,sli,slightly,113,"> I meant with the inline patch -- just to make sure that if we mark the variable inline it does not mangle in a slightly different way. Ah yes, sorry for the confusion, this is the output with the `inline const` patch. ```. $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:26,safety,patch,patch,26,"> I meant with the inline patch -- just to make sure that if we mark the variable inline it does not mangle in a slightly different way. Ah yes, sorry for the confusion, this is the output with the `inline const` patch. ```. $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:213,safety,patch,patch,213,"> I meant with the inline patch -- just to make sure that if we mark the variable inline it does not mangle in a slightly different way. Ah yes, sorry for the confusion, this is the output with the `inline const` patch. ```. $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:26,security,patch,patch,26,"> I meant with the inline patch -- just to make sure that if we mark the variable inline it does not mangle in a slightly different way. Ah yes, sorry for the confusion, this is the output with the `inline const` patch. ```. $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:213,security,patch,patch,213,"> I meant with the inline patch -- just to make sure that if we mark the variable inline it does not mangle in a slightly different way. Ah yes, sorry for the confusion, this is the output with the `inline const` patch. ```. $: nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l. 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:113,integrability,messag,message,113,"In the light of discussions and our latest understanding, the PR title has been changed together with the commit message to more properly reflect the purpose of the changes, which is to make `TString::kNPOS` definition standard-compliant. The fact it may also help in the situation highlighted by the CMS issue is a byproduct of a fix which is anyway needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:228,integrability,complian,compliant,228,"In the light of discussions and our latest understanding, the PR title has been changed together with the commit message to more properly reflect the purpose of the changes, which is to make `TString::kNPOS` definition standard-compliant. The fact it may also help in the situation highlighted by the CMS issue is a byproduct of a fix which is anyway needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:113,interoperability,messag,message,113,"In the light of discussions and our latest understanding, the PR title has been changed together with the commit message to more properly reflect the purpose of the changes, which is to make `TString::kNPOS` definition standard-compliant. The fact it may also help in the situation highlighted by the CMS issue is a byproduct of a fix which is anyway needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:219,interoperability,standard,standard-compliant,219,"In the light of discussions and our latest understanding, the PR title has been changed together with the commit message to more properly reflect the purpose of the changes, which is to make `TString::kNPOS` definition standard-compliant. The fact it may also help in the situation highlighted by the CMS issue is a byproduct of a fix which is anyway needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:228,safety,compl,compliant,228,"In the light of discussions and our latest understanding, the PR title has been changed together with the commit message to more properly reflect the purpose of the changes, which is to make `TString::kNPOS` definition standard-compliant. The fact it may also help in the situation highlighted by the CMS issue is a byproduct of a fix which is anyway needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:228,security,compl,compliant,228,"In the light of discussions and our latest understanding, the PR title has been changed together with the commit message to more properly reflect the purpose of the changes, which is to make `TString::kNPOS` definition standard-compliant. The fact it may also help in the situation highlighted by the CMS issue is a byproduct of a fix which is anyway needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:43,testability,understand,understanding,43,"In the light of discussions and our latest understanding, the PR title has been changed together with the commit message to more properly reflect the purpose of the changes, which is to make `TString::kNPOS` definition standard-compliant. The fact it may also help in the situation highlighted by the CMS issue is a byproduct of a fix which is anyway needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:260,usability,help,help,260,"In the light of discussions and our latest understanding, the PR title has been changed together with the commit message to more properly reflect the purpose of the changes, which is to make `TString::kNPOS` definition standard-compliant. The fact it may also help in the situation highlighted by the CMS issue is a byproduct of a fix which is anyway needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:80,energy efficiency,load,loading,80,"@vepadulano , Looks like `python3 -c 'import ROOT;print(ROOT.kError);` is still loading all shared libs. I am testing locally to see which symbol is causing this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:92,interoperability,share,shared,92,"@vepadulano , Looks like `python3 -c 'import ROOT;print(ROOT.kError);` is still loading all shared libs. I am testing locally to see which symbol is causing this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:80,performance,load,loading,80,"@vepadulano , Looks like `python3 -c 'import ROOT;print(ROOT.kError);` is still loading all shared libs. I am testing locally to see which symbol is causing this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:110,safety,test,testing,110,"@vepadulano , Looks like `python3 -c 'import ROOT;print(ROOT.kError);` is still loading all shared libs. I am testing locally to see which symbol is causing this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:110,testability,test,testing,110,"@vepadulano , Looks like `python3 -c 'import ROOT;print(ROOT.kError);` is still loading all shared libs. I am testing locally to see which symbol is causing this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/issues/14263:57,integrability,pub,public,57,"Thanks for reporting! That `Blas.h` should not have been public to begin with. I opened a PR where I move if to `src`, please review if you have time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14263
https://github.com/root-project/root/issues/14263:145,performance,time,time,145,"Thanks for reporting! That `Blas.h` should not have been public to begin with. I opened a PR where I move if to `src`, please review if you have time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14263
https://github.com/root-project/root/issues/14263:126,safety,review,review,126,"Thanks for reporting! That `Blas.h` should not have been public to begin with. I opened a PR where I move if to `src`, please review if you have time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14263
https://github.com/root-project/root/issues/14263:126,testability,review,review,126,"Thanks for reporting! That `Blas.h` should not have been public to begin with. I opened a PR where I move if to `src`, please review if you have time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14263
https://github.com/root-project/root/pull/14267:27,testability,verif,verify,27,- It would also be good to verify if the existing passes in BackendPasses.cpp are still required. But I think that's better done in a different PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:222,deployability,updat,updated,222,"As an initial test, running tests in tutorials/dataframe returns the similar CPU timings:. Current master branch:. ![master](https://github.com/root-project/root/assets/29475282/f38dd84e-218c-4a26-825c-a6f026ce384d). With updated pass manager:. ![newpassmanager](https://github.com/root-project/root/assets/29475282/1ba6421e-1880-4996-9251-b13f66080d77).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:235,deployability,manag,manager,235,"As an initial test, running tests in tutorials/dataframe returns the similar CPU timings:. Current master branch:. ![master](https://github.com/root-project/root/assets/29475282/f38dd84e-218c-4a26-825c-a6f026ce384d). With updated pass manager:. ![newpassmanager](https://github.com/root-project/root/assets/29475282/1ba6421e-1880-4996-9251-b13f66080d77).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:77,energy efficiency,CPU,CPU,77,"As an initial test, running tests in tutorials/dataframe returns the similar CPU timings:. Current master branch:. ![master](https://github.com/root-project/root/assets/29475282/f38dd84e-218c-4a26-825c-a6f026ce384d). With updated pass manager:. ![newpassmanager](https://github.com/root-project/root/assets/29475282/1ba6421e-1880-4996-9251-b13f66080d77).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:91,energy efficiency,Current,Current,91,"As an initial test, running tests in tutorials/dataframe returns the similar CPU timings:. Current master branch:. ![master](https://github.com/root-project/root/assets/29475282/f38dd84e-218c-4a26-825c-a6f026ce384d). With updated pass manager:. ![newpassmanager](https://github.com/root-project/root/assets/29475282/1ba6421e-1880-4996-9251-b13f66080d77).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:235,energy efficiency,manag,manager,235,"As an initial test, running tests in tutorials/dataframe returns the similar CPU timings:. Current master branch:. ![master](https://github.com/root-project/root/assets/29475282/f38dd84e-218c-4a26-825c-a6f026ce384d). With updated pass manager:. ![newpassmanager](https://github.com/root-project/root/assets/29475282/1ba6421e-1880-4996-9251-b13f66080d77).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:77,performance,CPU,CPU,77,"As an initial test, running tests in tutorials/dataframe returns the similar CPU timings:. Current master branch:. ![master](https://github.com/root-project/root/assets/29475282/f38dd84e-218c-4a26-825c-a6f026ce384d). With updated pass manager:. ![newpassmanager](https://github.com/root-project/root/assets/29475282/1ba6421e-1880-4996-9251-b13f66080d77).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:14,safety,test,test,14,"As an initial test, running tests in tutorials/dataframe returns the similar CPU timings:. Current master branch:. ![master](https://github.com/root-project/root/assets/29475282/f38dd84e-218c-4a26-825c-a6f026ce384d). With updated pass manager:. ![newpassmanager](https://github.com/root-project/root/assets/29475282/1ba6421e-1880-4996-9251-b13f66080d77).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:28,safety,test,tests,28,"As an initial test, running tests in tutorials/dataframe returns the similar CPU timings:. Current master branch:. ![master](https://github.com/root-project/root/assets/29475282/f38dd84e-218c-4a26-825c-a6f026ce384d). With updated pass manager:. ![newpassmanager](https://github.com/root-project/root/assets/29475282/1ba6421e-1880-4996-9251-b13f66080d77).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:222,safety,updat,updated,222,"As an initial test, running tests in tutorials/dataframe returns the similar CPU timings:. Current master branch:. ![master](https://github.com/root-project/root/assets/29475282/f38dd84e-218c-4a26-825c-a6f026ce384d). With updated pass manager:. ![newpassmanager](https://github.com/root-project/root/assets/29475282/1ba6421e-1880-4996-9251-b13f66080d77).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:235,safety,manag,manager,235,"As an initial test, running tests in tutorials/dataframe returns the similar CPU timings:. Current master branch:. ![master](https://github.com/root-project/root/assets/29475282/f38dd84e-218c-4a26-825c-a6f026ce384d). With updated pass manager:. ![newpassmanager](https://github.com/root-project/root/assets/29475282/1ba6421e-1880-4996-9251-b13f66080d77).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:222,security,updat,updated,222,"As an initial test, running tests in tutorials/dataframe returns the similar CPU timings:. Current master branch:. ![master](https://github.com/root-project/root/assets/29475282/f38dd84e-218c-4a26-825c-a6f026ce384d). With updated pass manager:. ![newpassmanager](https://github.com/root-project/root/assets/29475282/1ba6421e-1880-4996-9251-b13f66080d77).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:14,testability,test,test,14,"As an initial test, running tests in tutorials/dataframe returns the similar CPU timings:. Current master branch:. ![master](https://github.com/root-project/root/assets/29475282/f38dd84e-218c-4a26-825c-a6f026ce384d). With updated pass manager:. ![newpassmanager](https://github.com/root-project/root/assets/29475282/1ba6421e-1880-4996-9251-b13f66080d77).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:28,testability,test,tests,28,"As an initial test, running tests in tutorials/dataframe returns the similar CPU timings:. Current master branch:. ![master](https://github.com/root-project/root/assets/29475282/f38dd84e-218c-4a26-825c-a6f026ce384d). With updated pass manager:. ![newpassmanager](https://github.com/root-project/root/assets/29475282/1ba6421e-1880-4996-9251-b13f66080d77).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:25,safety,test,tests,25,WIP: Checking and fixing tests!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:25,testability,test,tests,25,WIP: Checking and fixing tests!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:44,deployability,manag,managers,44,"< Use new instance of all the pass/analysis managers every time . If this commit works out, please enhance the commit log with an explanation of why this change is improving things.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:118,deployability,log,log,118,"< Use new instance of all the pass/analysis managers every time . If this commit works out, please enhance the commit log with an explanation of why this change is improving things.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:44,energy efficiency,manag,managers,44,"< Use new instance of all the pass/analysis managers every time . If this commit works out, please enhance the commit log with an explanation of why this change is improving things.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:59,performance,time,time,59,"< Use new instance of all the pass/analysis managers every time . If this commit works out, please enhance the commit log with an explanation of why this change is improving things.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:44,safety,manag,managers,44,"< Use new instance of all the pass/analysis managers every time . If this commit works out, please enhance the commit log with an explanation of why this change is improving things.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:118,safety,log,log,118,"< Use new instance of all the pass/analysis managers every time . If this commit works out, please enhance the commit log with an explanation of why this change is improving things.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:118,security,log,log,118,"< Use new instance of all the pass/analysis managers every time . If this commit works out, please enhance the commit log with an explanation of why this change is improving things.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:118,testability,log,log,118,"< Use new instance of all the pass/analysis managers every time . If this commit works out, please enhance the commit log with an explanation of why this change is improving things.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:54,deployability,manag,managers,54,"As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:84,deployability,modul,module,84,"As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:54,energy efficiency,manag,managers,54,"As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:84,modifiability,modul,module,84,"As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:119,reliability,doe,does,119,"As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:54,safety,manag,managers,54,"As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:84,safety,modul,module,84,"As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:147,safety,input,input,147,"As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:147,usability,input,input,147,"As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:552,availability,fault,faults-running-the-new-llvm-modulepassmanager-with-default-pipeline,552,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:56,deployability,manag,managers,56,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:86,deployability,modul,module,86,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:222,deployability,manag,managers,222,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:248,deployability,modul,module,248,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:345,deployability,manag,managers,345,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:411,deployability,manag,manager,411,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:580,deployability,modul,modulepassmanager-with-default-pipeline,580,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:661,deployability,fail,failing,661,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:56,energy efficiency,manag,managers,56,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:222,energy efficiency,manag,managers,222,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:345,energy efficiency,manag,managers,345,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:411,energy efficiency,manag,manager,411,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:552,energy efficiency,fault,faults-running-the-new-llvm-modulepassmanager-with-default-pipeline,552,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:611,integrability,pipelin,pipeline,611,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:86,modifiability,modul,module,86,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:248,modifiability,modul,module,248,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:580,modifiability,modul,modulepassmanager-with-default-pipeline,580,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:552,performance,fault,faults-running-the-new-llvm-modulepassmanager-with-default-pipeline,552,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:742,performance,time,time,742,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:750,performance,perform,perform,750,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:121,reliability,doe,does,121,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:552,reliability,fault,faults-running-the-new-llvm-modulepassmanager-with-default-pipeline,552,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:661,reliability,fail,failing,661,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:56,safety,manag,managers,56,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:86,safety,modul,module,86,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:149,safety,input,input,149,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:222,safety,manag,managers,222,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:248,safety,modul,module,248,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:345,safety,manag,managers,345,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:411,safety,manag,manager,411,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:471,safety,review,reviews,471,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:552,safety,fault,faults-running-the-new-llvm-modulepassmanager-with-default-pipeline,552,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:669,safety,test,tests,669,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:471,testability,review,reviews,471,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:669,testability,test,tests,669,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:149,usability,input,input,149,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:196,usability,efficien,efficient,196,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:750,usability,perform,perform,750,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:795,usability,clear,cleared,795,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:831,usability,clear,clear,831,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files? I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:62,deployability,Modul,ModulePassManager,62,"Indeed, I had a quick look and not even (Thin)LTO reuses the `ModulePassManager` and its passes. So let's go with the most straight-forward solution of creating new passes on every run, the same what Clang does. If that proves to be a problem, we can still think how to optimize...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:270,energy efficiency,optim,optimize,270,"Indeed, I had a quick look and not even (Thin)LTO reuses the `ModulePassManager` and its passes. So let's go with the most straight-forward solution of creating new passes on every run, the same what Clang does. If that proves to be a problem, we can still think how to optimize...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:50,modifiability,reu,reuses,50,"Indeed, I had a quick look and not even (Thin)LTO reuses the `ModulePassManager` and its passes. So let's go with the most straight-forward solution of creating new passes on every run, the same what Clang does. If that proves to be a problem, we can still think how to optimize...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:62,modifiability,Modul,ModulePassManager,62,"Indeed, I had a quick look and not even (Thin)LTO reuses the `ModulePassManager` and its passes. So let's go with the most straight-forward solution of creating new passes on every run, the same what Clang does. If that proves to be a problem, we can still think how to optimize...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:270,performance,optimiz,optimize,270,"Indeed, I had a quick look and not even (Thin)LTO reuses the `ModulePassManager` and its passes. So let's go with the most straight-forward solution of creating new passes on every run, the same what Clang does. If that proves to be a problem, we can still think how to optimize...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:206,reliability,doe,does,206,"Indeed, I had a quick look and not even (Thin)LTO reuses the `ModulePassManager` and its passes. So let's go with the most straight-forward solution of creating new passes on every run, the same what Clang does. If that proves to be a problem, we can still think how to optimize...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:62,safety,Modul,ModulePassManager,62,"Indeed, I had a quick look and not even (Thin)LTO reuses the `ModulePassManager` and its passes. So let's go with the most straight-forward solution of creating new passes on every run, the same what Clang does. If that proves to be a problem, we can still think how to optimize...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:78,deployability,Modul,Module,78,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:145,deployability,releas,release,145,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:237,deployability,modul,module-inliner,237,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:253,deployability,modul,module-inline,253,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:268,deployability,Modul,Module,268,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:584,deployability,Modul,Module,584,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:669,deployability,Modul,ModuleInlinerWrapperPass,669,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:714,deployability,releas,release,714,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:724,deployability,Modul,ModuleInlinerWrapperPass,724,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:845,deployability,Modul,ModuleInlinerWrapperPass,845,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:916,deployability,modul,module-inliner,916,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:933,deployability,build,buildInlinerPipeline,933,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:955,deployability,modul,module-inline,955,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:971,deployability,Modul,ModuleInlinerPass,971,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:990,deployability,Modul,Module,990,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1537,deployability,Modul,ModuleInlinerWrapperPass,1537,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1617,deployability,build,buildInlinerPipeline,1617,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1639,deployability,Modul,ModuleInlinerPass,1639,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:437,energy efficiency,estimat,estimator,437,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:540,energy efficiency,estimat,estimator,540,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1262,energy efficiency,estimat,estimator,1262,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1450,energy efficiency,estimat,estimator,1450,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:117,integrability,wrap,wrapper,117,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:185,integrability,wrap,wrapper-no-mandatory-first,185,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:659,integrability,wrap,wrapper,659,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:816,integrability,wrap,wrapper-no-mandatory-first,816,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:117,interoperability,wrapper,wrapper,117,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:185,interoperability,wrapper,wrapper-no-mandatory-first,185,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:659,interoperability,wrapper,wrapper,659,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:816,interoperability,wrapper,wrapper-no-mandatory-first,816,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:78,modifiability,Modul,Module,78,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:237,modifiability,modul,module-inliner,237,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:253,modifiability,modul,module-inline,253,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:268,modifiability,Modul,Module,268,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:584,modifiability,Modul,Module,584,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:669,modifiability,Modul,ModuleInlinerWrapperPass,669,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:724,modifiability,Modul,ModuleInlinerWrapperPass,724,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:845,modifiability,Modul,ModuleInlinerWrapperPass,845,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:916,modifiability,modul,module-inliner,916,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:955,modifiability,modul,module-inline,955,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:971,modifiability,Modul,ModuleInlinerPass,971,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:990,modifiability,Modul,Module,990,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1537,modifiability,Modul,ModuleInlinerWrapperPass,1537,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1639,modifiability,Modul,ModuleInlinerPass,1639,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:78,safety,Modul,Module,78,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:237,safety,modul,module-inliner,237,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:253,safety,modul,module-inline,253,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:268,safety,Modul,Module,268,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:584,safety,Modul,Module,584,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:669,safety,Modul,ModuleInlinerWrapperPass,669,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:724,safety,Modul,ModuleInlinerWrapperPass,724,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:845,safety,Modul,ModuleInlinerWrapperPass,845,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:916,safety,modul,module-inliner,916,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:955,safety,modul,module-inline,955,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:971,safety,Modul,ModuleInlinerPass,971,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:990,safety,Modul,Module,990,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1537,safety,Modul,ModuleInlinerWrapperPass,1537,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1639,safety,Modul,ModuleInlinerPass,1639,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:482,testability,instrument,instrument,482,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1348,testability,instrument,instrument,1348,"Result after grepping ""inline"" for all the registered passes (for -O1):. ```. Module passes:. always-inline. inliner-wrapper. inliner-ml-advisor-release. print<inline-advisor>. inliner-wrapper-no-mandatory-first. partial-inliner. scc-oz-module-inliner. module-inline. Module analyses:. inline-advisor. CGSCC passes with params:. inline<only-mandatory>. Function passes:. partially-inline-libcalls. print<inline-cost>. print<inliner-size-estimator>. Function passes with Params:. ee-instrument<post-inline>. Function analyses:. inliner-size-estimator. ```. Corresponding passes:. ```. Module passes:. always-inline - AlwaysInlinerPass // Not disabled. inliner-wrapper - ModuleInlinerWrapperPass. inliner-ml-advisor-release - ModuleInlinerWrapperPass. print<inline-advisor> - InlineAdvisorAnalysisPrinterPass. inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass. partial-inliner - PartialInlinerPass. scc-oz-module-inliner - buildInlinerPipeline. module-inline - ModuleInlinerPass. Module analyses:. inline-advisor - InlineAdvisorAnalysis. CGSCC passes with params:. inline<only-mandatory> - InlinerPass. Function passes:. partially-inline-libcalls - PartiallyInlineLibCallsPass . print<inline-cost> - InlineCostAnnotationPrinterPass. print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass. Function passes with Params:. ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled. Function analyses:. inliner-size-estimator - InlineSizeEstimatorAnalysis. ```. Passes disabled with the callback:. ```. ModuleInlinerWrapperPass. InlineAdvisorAnalysisPrinterPass. PartialInlinerPass. buildInlinerPipeline. ModuleInlinerPass. InlinerPass. InlineAdvisorAnalysis. PartiallyInlineLibCallsPass. InlineCostAnnotationPrinterPass. InlineSizeEstimatorAnalysisPrinterPass. InlineSizeEstimatorAnalysis. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:294,availability,ping,ping,294,"This seems to work now and the changes LGTM in principle. We'll break running with `-O0` until the last commit, but I understand that's to make it easier to revert later on. The message of the first commit should be reflowed to not be one very long line. Otherwise, is this ready @devajithvs ? ping @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:178,integrability,messag,message,178,"This seems to work now and the changes LGTM in principle. We'll break running with `-O0` until the last commit, but I understand that's to make it easier to revert later on. The message of the first commit should be reflowed to not be one very long line. Otherwise, is this ready @devajithvs ? ping @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:178,interoperability,messag,message,178,"This seems to work now and the changes LGTM in principle. We'll break running with `-O0` until the last commit, but I understand that's to make it easier to revert later on. The message of the first commit should be reflowed to not be one very long line. Otherwise, is this ready @devajithvs ? ping @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:118,testability,understand,understand,118,"This seems to work now and the changes LGTM in principle. We'll break running with `-O0` until the last commit, but I understand that's to make it easier to revert later on. The message of the first commit should be reflowed to not be one very long line. Otherwise, is this ready @devajithvs ? ping @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:3257,availability,sli,slightly,3257,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:3286,availability,sli,slightly,3286,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:580,deployability,build,builddir,580,"> Good job @devajithvs . I am in favour of merging this PR but before doing so could you please check that we do not experience performance regressions of any sort, for example:. > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:637,deployability,build,builddir,637,"> Good job @devajithvs . I am in favour of merging this PR but before doing so could you please check that we do not experience performance regressions of any sort, for example:. > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:903,deployability,build,builddir,903,"> Good job @devajithvs . I am in favour of merging this PR but before doing so could you please check that we do not experience performance regressions of any sort, for example:. > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1056,deployability,build,builddir,1056,"ut before doing so could you please check that we do not experience performance regressions of any sort, for example:. > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:512,energy efficiency,Current,Current,512,"> Good job @devajithvs . I am in favour of merging this PR but before doing so could you please check that we do not experience performance regressions of any sort, for example:. > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:733,energy efficiency,CPU,CPU,733,"> Good job @devajithvs . I am in favour of merging this PR but before doing so could you please check that we do not experience performance regressions of any sort, for example:. > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:771,energy efficiency,clock,clock,771,"> Good job @devajithvs . I am in favour of merging this PR but before doing so could you please check that we do not experience performance regressions of any sort, for example:. > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1175,energy efficiency,CPU,CPU,1175,". > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum residen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1213,energy efficiency,clock,clock,1213,"root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1436,energy efficiency,CPU,CPU,1436,"OT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1475,energy efficiency,clock,clock,1475,"taFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (sec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1719,energy efficiency,CPU,CPU,1719,"	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1757,energy efficiency,clock,clock,1757,"psed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:2078,energy efficiency,CPU,CPU,2078,"-e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:2116,energy efficiency,clock,clock,2116,"conds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall cloc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:2533,energy efficiency,CPU,CPU,2533,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:2571,energy efficiency,clock,clock,2571,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:2795,energy efficiency,CPU,CPU,2795,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:2833,energy efficiency,clock,clock,2833,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:3077,energy efficiency,CPU,CPU,3077,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:3115,energy efficiency,clock,clock,3115,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:128,performance,perform,performance,128,"> Good job @devajithvs . I am in favour of merging this PR but before doing so could you please check that we do not experience performance regressions of any sort, for example:. > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:567,performance,time,time,567,"> Good job @devajithvs . I am in favour of merging this PR but before doing so could you please check that we do not experience performance regressions of any sort, for example:. > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:624,performance,time,timed,624,"> Good job @devajithvs . I am in favour of merging this PR but before doing so could you please check that we do not experience performance regressions of any sort, for example:. > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:669,performance,time,time,669,"> Good job @devajithvs . I am in favour of merging this PR but before doing so could you please check that we do not experience performance regressions of any sort, for example:. > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:699,performance,time,time,699,"> Good job @devajithvs . I am in favour of merging this PR but before doing so could you please check that we do not experience performance regressions of any sort, for example:. > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:733,performance,CPU,CPU,733,"> Good job @devajithvs . I am in favour of merging this PR but before doing so could you please check that we do not experience performance regressions of any sort, for example:. > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:778,performance,time,time,778,"> Good job @devajithvs . I am in favour of merging this PR but before doing so could you please check that we do not experience performance regressions of any sort, for example:. > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:890,performance,time,time,890,"> Good job @devajithvs . I am in favour of merging this PR but before doing so could you please check that we do not experience performance regressions of any sort, for example:. > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1043,performance,time,timed,1043,"ging this PR but before doing so could you please check that we do not experience performance regressions of any sort, for example:. > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System ti",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1111,performance,time,time,1111,"not experience performance regressions of any sort, for example:. > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1141,performance,time,time,1141,"ressions of any sort, for example:. > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1175,performance,CPU,CPU,1175,". > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum residen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1220,performance,time,time,1220,"root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1332,performance,time,time,1332," RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An emp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1372,performance,time,time,1372," -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1402,performance,time,time,1402," RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""r",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1436,performance,CPU,CPU,1436,"OT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1482,performance,time,time,1482,"e(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds):",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1595,performance,time,time,1595," -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1655,performance,time,time,1655," -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 2983",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1685,performance,time,time,1685,"08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1719,performance,CPU,CPU,1719,"	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1764,performance,time,time,1764,"wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1900,performance,time,time,1900,"/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set si",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1963,performance,time,timed,1963,"ataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v pytho",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:2014,performance,time,time,2014,"ntries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User tim",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:2044,performance,time,time,2044,"ed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System tim",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:2078,performance,CPU,CPU,2078,"-e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:2123,performance,time,time,2123,": 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) tim",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:2236,performance,time,time,2236,":ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:2395,performance,time,timed,2395,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:2469,performance,time,time,2469,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:2499,performance,time,time,2499,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:2533,performance,CPU,CPU,2533,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:2578,performance,time,time,2578,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:2691,performance,time,time,2691,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:2731,performance,time,time,2731,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:2761,performance,time,time,2761,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:2795,performance,CPU,CPU,2795,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:2840,performance,time,time,2840,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:2953,performance,time,time,2953,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:3013,performance,time,time,3013,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:3043,performance,time,time,3043,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:3077,performance,CPU,CPU,3077,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:3122,performance,time,time,3122,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:3257,reliability,sli,slightly,3257,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:3286,reliability,sli,slightly,3286,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:140,testability,regress,regressions,140,"> Good job @devajithvs . I am in favour of merging this PR but before doing so could you please check that we do not experience performance regressions of any sort, for example:. > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:117,usability,experien,experience,117,"> Good job @devajithvs . I am in favour of merging this PR but before doing so could you please check that we do not experience performance regressions of any sort, for example:. > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:128,usability,perform,performance,128,"> Good job @devajithvs . I am in favour of merging this PR but before doing so could you please check that we do not experience performance regressions of any sort, for example:. > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:267,usability,minim,minimal,267,"> Good job @devajithvs . I am in favour of merging this PR but before doing so could you please check that we do not experience performance regressions of any sort, for example:. > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:426,usability,minim,minimal,426,"> Good job @devajithvs . I am in favour of merging this PR but before doing so could you please check that we do not experience performance regressions of any sort, for example:. > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:610,usability,Command,Command,610,"> Good job @devajithvs . I am in favour of merging this PR but before doing so could you please check that we do not experience performance regressions of any sort, for example:. > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:664,usability,User,User,664,"> Good job @devajithvs . I am in favour of merging this PR but before doing so could you please check that we do not experience performance regressions of any sort, for example:. > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1029,usability,Command,Command,1029,"favour of merging this PR but before doing so could you please check that we do not experience performance regressions of any sort, for example:. > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1106,usability,User,User,1106,"e do not experience performance regressions of any sort, for example:. > . > * max RSS and walltime to boot root `root -b -q`. > . > * max RSS and walltime to minimal root use `root -b -q -e ""ROOT::RDataFrame(8)""`. > . > * max RSS and walltime to boot PyROOT `python -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapse",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1367,usability,User,User,1367,"ython -c ""import ROOT"". > . > * max RSS and walltime for minimal PyROOT use `python -c ""import ROOT; ROOT.RDataFrame(8)"". > . > . > Cheers, D. Current master branch:. ```bash. $ /usr/bin/ti/usr/bin/time -v root/builddir/bin/root -b -q. ... 	Command being timed: ""root/builddir/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 en",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1650,usability,User,User,1650,"ot -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.07. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16. 	... 	Maximum resident set size (kbytes): 205412. ... ```. ```bash. $ /usr/bin/time -v root/builddir/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes):",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:1949,usability,Command,Command,1949,"... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:2009,usability,User,User,2009,"e 8 entries. ... 	Command being timed: ""root/builddir/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.23. 	System time (seconds): 0.13. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.38. 	... 	Maximum resident set size (kbytes): 298432. ... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	Use",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:2381,usability,Command,Command,2381,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:2464,usability,User,User,2464,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:2726,usability,User,User,2726,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:3008,usability,User,User,3008,"n3 -c ""import ROOT"". 	User time (seconds): 0.69. 	System time (seconds): 0.19. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.88. 	... 	Maximum resident set size (kbytes): 493440. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 0.96. 	System time (seconds): 0.21. 	Percent of CPU this job got: 98%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.18. 	... 	Maximum resident set size (kbytes): 553892. 	... ```. With new passmanager:. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q"". 	User time (seconds): 0.08. 	System time (seconds): 0.09. 	Percent of CPU this job got: 94%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18. 	... 	Maximum resident set size (kbytes): 204860. 	... ```. ```bash. $ /usr/bin/time -v root/newpassmanager/bin/root -b -q -e ""ROOT::RDataFrame(8)"". ... (ROOT::RDataFrame) An empty data frame that will create 8 entries. ... 	Command being timed: ""root/newpassmanager/bin/root -b -q -e ROOT::RDataFrame(8)"". 	User time (seconds): 0.21. 	System time (seconds): 0.16. 	Percent of CPU this job got: 92%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.41. 	... 	Maximum resident set size (kbytes): 298312. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT"". 	User time (seconds): 0.77. 	System time (seconds): 0.14. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.92. 	... 	Maximum resident set size (kbytes): 492388. 	... ```. ```bash. $ /usr/bin/time -v python3 -c ""import ROOT; ROOT.RDataFrame(8)"". 	User time (seconds): 1.04. 	System time (seconds): 0.20. 	Percent of CPU this job got: 99%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.25. 	... 	Maximum resident set size (kbytes): 553172. 	... ```. From the above, the new passmanager has a slightly lower max RSS but a slightly higher walltime. There are no drastic differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:118,availability,state,statements,118,Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:118,integrability,state,statements,118,Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:15,performance,perform,performance,15,Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:15,usability,perform,performance,15,Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:120,availability,state,statements,120,"> Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet. Did you see the numbers posted initially and just above last week? I think they cover the most relevant cases, including an instantiation of a a full `ROOT::RDataFrame`. And all examples where Clings is spending most of the time in the passes themselves don't really change, it's just how they are called...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:120,integrability,state,statements,120,"> Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet. Did you see the numbers posted initially and just above last week? I think they cover the most relevant cases, including an instantiation of a a full `ROOT::RDataFrame`. And all examples where Clings is spending most of the time in the passes themselves don't really change, it's just how they are called...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:17,performance,perform,performance,17,"> Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet. Did you see the numbers posted initially and just above last week? I think they cover the most relevant cases, including an instantiation of a a full `ROOT::RDataFrame`. And all examples where Clings is spending most of the time in the passes themselves don't really change, it's just how they are called...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:392,performance,time,time,392,"> Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet. Did you see the numbers posted initially and just above last week? I think they cover the most relevant cases, including an instantiation of a a full `ROOT::RDataFrame`. And all examples where Clings is spending most of the time in the passes themselves don't really change, it's just how they are called...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:17,usability,perform,performance,17,"> Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet. Did you see the numbers posted initially and just above last week? I think they cover the most relevant cases, including an instantiation of a a full `ROOT::RDataFrame`. And all examples where Clings is spending most of the time in the passes themselves don't really change, it's just how they are called...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:122,availability,state,statements,122,"> > Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet. > . > Did you see the numbers posted initially and just above last week? I think they cover the most relevant cases, including an instantiation of a a full `ROOT::RDataFrame`. And all examples where Clings is spending most of the time in the passes themselves don't really change, it's just how they are called... Ok, overlooked that. If we are testing the pass manager re-creation over a every transaction, why we test things that do not have multiple transactions. That is, we need tests that call ProcessLine many many times to be able to measure the eventual overhead...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:532,deployability,manag,manager,532,"> > Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet. > . > Did you see the numbers posted initially and just above last week? I think they cover the most relevant cases, including an instantiation of a a full `ROOT::RDataFrame`. And all examples where Clings is spending most of the time in the passes themselves don't really change, it's just how they are called... Ok, overlooked that. If we are testing the pass manager re-creation over a every transaction, why we test things that do not have multiple transactions. That is, we need tests that call ProcessLine many many times to be able to measure the eventual overhead...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:532,energy efficiency,manag,manager,532,"> > Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet. > . > Did you see the numbers posted initially and just above last week? I think they cover the most relevant cases, including an instantiation of a a full `ROOT::RDataFrame`. And all examples where Clings is spending most of the time in the passes themselves don't really change, it's just how they are called... Ok, overlooked that. If we are testing the pass manager re-creation over a every transaction, why we test things that do not have multiple transactions. That is, we need tests that call ProcessLine many many times to be able to measure the eventual overhead...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:712,energy efficiency,measur,measure,712,"> > Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet. > . > Did you see the numbers posted initially and just above last week? I think they cover the most relevant cases, including an instantiation of a a full `ROOT::RDataFrame`. And all examples where Clings is spending most of the time in the passes themselves don't really change, it's just how they are called... Ok, overlooked that. If we are testing the pass manager re-creation over a every transaction, why we test things that do not have multiple transactions. That is, we need tests that call ProcessLine many many times to be able to measure the eventual overhead...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:122,integrability,state,statements,122,"> > Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet. > . > Did you see the numbers posted initially and just above last week? I think they cover the most relevant cases, including an instantiation of a a full `ROOT::RDataFrame`. And all examples where Clings is spending most of the time in the passes themselves don't really change, it's just how they are called... Ok, overlooked that. If we are testing the pass manager re-creation over a every transaction, why we test things that do not have multiple transactions. That is, we need tests that call ProcessLine many many times to be able to measure the eventual overhead...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:724,integrability,event,eventual,724,"> > Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet. > . > Did you see the numbers posted initially and just above last week? I think they cover the most relevant cases, including an instantiation of a a full `ROOT::RDataFrame`. And all examples where Clings is spending most of the time in the passes themselves don't really change, it's just how they are called... Ok, overlooked that. If we are testing the pass manager re-creation over a every transaction, why we test things that do not have multiple transactions. That is, we need tests that call ProcessLine many many times to be able to measure the eventual overhead...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:19,performance,perform,performance,19,"> > Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet. > . > Did you see the numbers posted initially and just above last week? I think they cover the most relevant cases, including an instantiation of a a full `ROOT::RDataFrame`. And all examples where Clings is spending most of the time in the passes themselves don't really change, it's just how they are called... Ok, overlooked that. If we are testing the pass manager re-creation over a every transaction, why we test things that do not have multiple transactions. That is, we need tests that call ProcessLine many many times to be able to measure the eventual overhead...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:400,performance,time,time,400,"> > Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet. > . > Did you see the numbers posted initially and just above last week? I think they cover the most relevant cases, including an instantiation of a a full `ROOT::RDataFrame`. And all examples where Clings is spending most of the time in the passes themselves don't really change, it's just how they are called... Ok, overlooked that. If we are testing the pass manager re-creation over a every transaction, why we test things that do not have multiple transactions. That is, we need tests that call ProcessLine many many times to be able to measure the eventual overhead...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:692,performance,time,times,692,"> > Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet. > . > Did you see the numbers posted initially and just above last week? I think they cover the most relevant cases, including an instantiation of a a full `ROOT::RDataFrame`. And all examples where Clings is spending most of the time in the passes themselves don't really change, it's just how they are called... Ok, overlooked that. If we are testing the pass manager re-creation over a every transaction, why we test things that do not have multiple transactions. That is, we need tests that call ProcessLine many many times to be able to measure the eventual overhead...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:733,performance,overhead,overhead,733,"> > Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet. > . > Did you see the numbers posted initially and just above last week? I think they cover the most relevant cases, including an instantiation of a a full `ROOT::RDataFrame`. And all examples where Clings is spending most of the time in the passes themselves don't really change, it's just how they are called... Ok, overlooked that. If we are testing the pass manager re-creation over a every transaction, why we test things that do not have multiple transactions. That is, we need tests that call ProcessLine many many times to be able to measure the eventual overhead...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:515,safety,test,testing,515,"> > Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet. > . > Did you see the numbers posted initially and just above last week? I think they cover the most relevant cases, including an instantiation of a a full `ROOT::RDataFrame`. And all examples where Clings is spending most of the time in the passes themselves don't really change, it's just how they are called... Ok, overlooked that. If we are testing the pass manager re-creation over a every transaction, why we test things that do not have multiple transactions. That is, we need tests that call ProcessLine many many times to be able to measure the eventual overhead...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:532,safety,manag,manager,532,"> > Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet. > . > Did you see the numbers posted initially and just above last week? I think they cover the most relevant cases, including an instantiation of a a full `ROOT::RDataFrame`. And all examples where Clings is spending most of the time in the passes themselves don't really change, it's just how they are called... Ok, overlooked that. If we are testing the pass manager re-creation over a every transaction, why we test things that do not have multiple transactions. That is, we need tests that call ProcessLine many many times to be able to measure the eventual overhead...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:585,safety,test,test,585,"> > Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet. > . > Did you see the numbers posted initially and just above last week? I think they cover the most relevant cases, including an instantiation of a a full `ROOT::RDataFrame`. And all examples where Clings is spending most of the time in the passes themselves don't really change, it's just how they are called... Ok, overlooked that. If we are testing the pass manager re-creation over a every transaction, why we test things that do not have multiple transactions. That is, we need tests that call ProcessLine many many times to be able to measure the eventual overhead...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:654,safety,test,tests,654,"> > Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet. > . > Did you see the numbers posted initially and just above last week? I think they cover the most relevant cases, including an instantiation of a a full `ROOT::RDataFrame`. And all examples where Clings is spending most of the time in the passes themselves don't really change, it's just how they are called... Ok, overlooked that. If we are testing the pass manager re-creation over a every transaction, why we test things that do not have multiple transactions. That is, we need tests that call ProcessLine many many times to be able to measure the eventual overhead...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:515,testability,test,testing,515,"> > Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet. > . > Did you see the numbers posted initially and just above last week? I think they cover the most relevant cases, including an instantiation of a a full `ROOT::RDataFrame`. And all examples where Clings is spending most of the time in the passes themselves don't really change, it's just how they are called... Ok, overlooked that. If we are testing the pass manager re-creation over a every transaction, why we test things that do not have multiple transactions. That is, we need tests that call ProcessLine many many times to be able to measure the eventual overhead...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:585,testability,test,test,585,"> > Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet. > . > Did you see the numbers posted initially and just above last week? I think they cover the most relevant cases, including an instantiation of a a full `ROOT::RDataFrame`. And all examples where Clings is spending most of the time in the passes themselves don't really change, it's just how they are called... Ok, overlooked that. If we are testing the pass manager re-creation over a every transaction, why we test things that do not have multiple transactions. That is, we need tests that call ProcessLine many many times to be able to measure the eventual overhead...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:654,testability,test,tests,654,"> > Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet. > . > Did you see the numbers posted initially and just above last week? I think they cover the most relevant cases, including an instantiation of a a full `ROOT::RDataFrame`. And all examples where Clings is spending most of the time in the passes themselves don't really change, it's just how they are called... Ok, overlooked that. If we are testing the pass manager re-creation over a every transaction, why we test things that do not have multiple transactions. That is, we need tests that call ProcessLine many many times to be able to measure the eventual overhead...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:19,usability,perform,performance,19,"> > Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet. > . > Did you see the numbers posted initially and just above last week? I think they cover the most relevant cases, including an instantiation of a a full `ROOT::RDataFrame`. And all examples where Clings is spending most of the time in the passes themselves don't really change, it's just how they are called... Ok, overlooked that. If we are testing the pass manager re-creation over a every transaction, why we test things that do not have multiple transactions. That is, we need tests that call ProcessLine many many times to be able to measure the eventual overhead...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:241,deployability,manag,manager,241,"Correct, but I argue that the current ""real world"" tests don't show any measurable overhead. If we find problems in micro-benchmarks, these can be addressed in followup changes. My rationale is that we *have* to go this step to the new pass manager, better make progress sooner than later...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:30,energy efficiency,current,current,30,"Correct, but I argue that the current ""real world"" tests don't show any measurable overhead. If we find problems in micro-benchmarks, these can be addressed in followup changes. My rationale is that we *have* to go this step to the new pass manager, better make progress sooner than later...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:72,energy efficiency,measur,measurable,72,"Correct, but I argue that the current ""real world"" tests don't show any measurable overhead. If we find problems in micro-benchmarks, these can be addressed in followup changes. My rationale is that we *have* to go this step to the new pass manager, better make progress sooner than later...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
