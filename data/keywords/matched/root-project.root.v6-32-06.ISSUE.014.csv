id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/3435:92,performance,batch,batch,92,Fix v7 line tutorial when running in batch mode; The v7/line.cxx tutorial fails when run in batch mode with an error about that the DISPLAY can not be opened. Since this tutorial is part of the test suite this causes the tests to fail. This problem started due to some recent changes to the test. This PR reverts some of those changes to make the test work again.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3435
https://github.com/root-project/root/pull/3435:111,performance,error,error,111,Fix v7 line tutorial when running in batch mode; The v7/line.cxx tutorial fails when run in batch mode with an error about that the DISPLAY can not be opened. Since this tutorial is part of the test suite this causes the tests to fail. This problem started due to some recent changes to the test. This PR reverts some of those changes to make the test work again.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3435
https://github.com/root-project/root/pull/3435:74,reliability,fail,fails,74,Fix v7 line tutorial when running in batch mode; The v7/line.cxx tutorial fails when run in batch mode with an error about that the DISPLAY can not be opened. Since this tutorial is part of the test suite this causes the tests to fail. This problem started due to some recent changes to the test. This PR reverts some of those changes to make the test work again.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3435
https://github.com/root-project/root/pull/3435:230,reliability,fail,fail,230,Fix v7 line tutorial when running in batch mode; The v7/line.cxx tutorial fails when run in batch mode with an error about that the DISPLAY can not be opened. Since this tutorial is part of the test suite this causes the tests to fail. This problem started due to some recent changes to the test. This PR reverts some of those changes to make the test work again.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3435
https://github.com/root-project/root/pull/3435:111,safety,error,error,111,Fix v7 line tutorial when running in batch mode; The v7/line.cxx tutorial fails when run in batch mode with an error about that the DISPLAY can not be opened. Since this tutorial is part of the test suite this causes the tests to fail. This problem started due to some recent changes to the test. This PR reverts some of those changes to make the test work again.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3435
https://github.com/root-project/root/pull/3435:194,safety,test,test,194,Fix v7 line tutorial when running in batch mode; The v7/line.cxx tutorial fails when run in batch mode with an error about that the DISPLAY can not be opened. Since this tutorial is part of the test suite this causes the tests to fail. This problem started due to some recent changes to the test. This PR reverts some of those changes to make the test work again.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3435
https://github.com/root-project/root/pull/3435:221,safety,test,tests,221,Fix v7 line tutorial when running in batch mode; The v7/line.cxx tutorial fails when run in batch mode with an error about that the DISPLAY can not be opened. Since this tutorial is part of the test suite this causes the tests to fail. This problem started due to some recent changes to the test. This PR reverts some of those changes to make the test work again.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3435
https://github.com/root-project/root/pull/3435:291,safety,test,test,291,Fix v7 line tutorial when running in batch mode; The v7/line.cxx tutorial fails when run in batch mode with an error about that the DISPLAY can not be opened. Since this tutorial is part of the test suite this causes the tests to fail. This problem started due to some recent changes to the test. This PR reverts some of those changes to make the test work again.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3435
https://github.com/root-project/root/pull/3435:347,safety,test,test,347,Fix v7 line tutorial when running in batch mode; The v7/line.cxx tutorial fails when run in batch mode with an error about that the DISPLAY can not be opened. Since this tutorial is part of the test suite this causes the tests to fail. This problem started due to some recent changes to the test. This PR reverts some of those changes to make the test work again.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3435
https://github.com/root-project/root/pull/3435:194,testability,test,test,194,Fix v7 line tutorial when running in batch mode; The v7/line.cxx tutorial fails when run in batch mode with an error about that the DISPLAY can not be opened. Since this tutorial is part of the test suite this causes the tests to fail. This problem started due to some recent changes to the test. This PR reverts some of those changes to make the test work again.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3435
https://github.com/root-project/root/pull/3435:221,testability,test,tests,221,Fix v7 line tutorial when running in batch mode; The v7/line.cxx tutorial fails when run in batch mode with an error about that the DISPLAY can not be opened. Since this tutorial is part of the test suite this causes the tests to fail. This problem started due to some recent changes to the test. This PR reverts some of those changes to make the test work again.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3435
https://github.com/root-project/root/pull/3435:291,testability,test,test,291,Fix v7 line tutorial when running in batch mode; The v7/line.cxx tutorial fails when run in batch mode with an error about that the DISPLAY can not be opened. Since this tutorial is part of the test suite this causes the tests to fail. This problem started due to some recent changes to the test. This PR reverts some of those changes to make the test work again.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3435
https://github.com/root-project/root/pull/3435:347,testability,test,test,347,Fix v7 line tutorial when running in batch mode; The v7/line.cxx tutorial fails when run in batch mode with an error about that the DISPLAY can not be opened. Since this tutorial is part of the test suite this causes the tests to fail. This problem started due to some recent changes to the test. This PR reverts some of those changes to make the test work again.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3435
https://github.com/root-project/root/pull/3435:111,usability,error,error,111,Fix v7 line tutorial when running in batch mode; The v7/line.cxx tutorial fails when run in batch mode with an error about that the DISPLAY can not be opened. Since this tutorial is part of the test suite this causes the tests to fail. This problem started due to some recent changes to the test. This PR reverts some of those changes to make the test work again.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3435
https://github.com/root-project/root/pull/3436:6,deployability,instal,install,6,Don't install eve7 files if eve7 is not built; The eve7 extension is built conditionally when the root7 option is enabled. The files in etc/eve7 used by this extension should only be installed when the extension is built. In addition this PR also removes some obsolete patterns from the install rule that are no longer necessary because the files they refer to are no longer in the source tree.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3436
https://github.com/root-project/root/pull/3436:183,deployability,instal,installed,183,Don't install eve7 files if eve7 is not built; The eve7 extension is built conditionally when the root7 option is enabled. The files in etc/eve7 used by this extension should only be installed when the extension is built. In addition this PR also removes some obsolete patterns from the install rule that are no longer necessary because the files they refer to are no longer in the source tree.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3436
https://github.com/root-project/root/pull/3436:287,deployability,instal,install,287,Don't install eve7 files if eve7 is not built; The eve7 extension is built conditionally when the root7 option is enabled. The files in etc/eve7 used by this extension should only be installed when the extension is built. In addition this PR also removes some obsolete patterns from the install rule that are no longer necessary because the files they refer to are no longer in the source tree.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3436
https://github.com/root-project/root/pull/3436:56,modifiability,extens,extension,56,Don't install eve7 files if eve7 is not built; The eve7 extension is built conditionally when the root7 option is enabled. The files in etc/eve7 used by this extension should only be installed when the extension is built. In addition this PR also removes some obsolete patterns from the install rule that are no longer necessary because the files they refer to are no longer in the source tree.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3436
https://github.com/root-project/root/pull/3436:158,modifiability,extens,extension,158,Don't install eve7 files if eve7 is not built; The eve7 extension is built conditionally when the root7 option is enabled. The files in etc/eve7 used by this extension should only be installed when the extension is built. In addition this PR also removes some obsolete patterns from the install rule that are no longer necessary because the files they refer to are no longer in the source tree.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3436
https://github.com/root-project/root/pull/3436:202,modifiability,extens,extension,202,Don't install eve7 files if eve7 is not built; The eve7 extension is built conditionally when the root7 option is enabled. The files in etc/eve7 used by this extension should only be installed when the extension is built. In addition this PR also removes some obsolete patterns from the install rule that are no longer necessary because the files they refer to are no longer in the source tree.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3436
https://github.com/root-project/root/pull/3437:148,energy efficiency,reduc,reduce,148,[meta] Determine the clang-based file name lazily (ROOT-9963):; HeaderSearch consumes considerable wallclock time and memory for ATLAS; this should reduce it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3437
https://github.com/root-project/root/pull/3437:109,performance,time,time,109,[meta] Determine the clang-based file name lazily (ROOT-9963):; HeaderSearch consumes considerable wallclock time and memory for ATLAS; this should reduce it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3437
https://github.com/root-project/root/pull/3437:118,performance,memor,memory,118,[meta] Determine the clang-based file name lazily (ROOT-9963):; HeaderSearch consumes considerable wallclock time and memory for ATLAS; this should reduce it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3437
https://github.com/root-project/root/pull/3437:118,usability,memor,memory,118,[meta] Determine the clang-based file name lazily (ROOT-9963):; HeaderSearch consumes considerable wallclock time and memory for ATLAS; this should reduce it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3437
https://github.com/root-project/root/pull/3438:176,availability,redund,redundant,176,Removed cuda flag; TMVA GPU features are enabled only when both the cuda and tmva-gpu flags are enabled. These flags are not used anywhere else. It looks like the cuda flag is redundant in this case. . Related forum post - https://root-forum.cern.ch/t/feature-request-enable-cuda-if-detected/32764,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3438
https://github.com/root-project/root/pull/3438:176,deployability,redundan,redundant,176,Removed cuda flag; TMVA GPU features are enabled only when both the cuda and tmva-gpu flags are enabled. These flags are not used anywhere else. It looks like the cuda flag is redundant in this case. . Related forum post - https://root-forum.cern.ch/t/feature-request-enable-cuda-if-detected/32764,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3438
https://github.com/root-project/root/pull/3438:24,energy efficiency,GPU,GPU,24,Removed cuda flag; TMVA GPU features are enabled only when both the cuda and tmva-gpu flags are enabled. These flags are not used anywhere else. It looks like the cuda flag is redundant in this case. . Related forum post - https://root-forum.cern.ch/t/feature-request-enable-cuda-if-detected/32764,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3438
https://github.com/root-project/root/pull/3438:82,energy efficiency,gpu,gpu,82,Removed cuda flag; TMVA GPU features are enabled only when both the cuda and tmva-gpu flags are enabled. These flags are not used anywhere else. It looks like the cuda flag is redundant in this case. . Related forum post - https://root-forum.cern.ch/t/feature-request-enable-cuda-if-detected/32764,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3438
https://github.com/root-project/root/pull/3438:24,performance,GPU,GPU,24,Removed cuda flag; TMVA GPU features are enabled only when both the cuda and tmva-gpu flags are enabled. These flags are not used anywhere else. It looks like the cuda flag is redundant in this case. . Related forum post - https://root-forum.cern.ch/t/feature-request-enable-cuda-if-detected/32764,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3438
https://github.com/root-project/root/pull/3438:82,performance,gpu,gpu,82,Removed cuda flag; TMVA GPU features are enabled only when both the cuda and tmva-gpu flags are enabled. These flags are not used anywhere else. It looks like the cuda flag is redundant in this case. . Related forum post - https://root-forum.cern.ch/t/feature-request-enable-cuda-if-detected/32764,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3438
https://github.com/root-project/root/pull/3438:176,reliability,redundan,redundant,176,Removed cuda flag; TMVA GPU features are enabled only when both the cuda and tmva-gpu flags are enabled. These flags are not used anywhere else. It looks like the cuda flag is redundant in this case. . Related forum post - https://root-forum.cern.ch/t/feature-request-enable-cuda-if-detected/32764,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3438
https://github.com/root-project/root/pull/3438:176,safety,redund,redundant,176,Removed cuda flag; TMVA GPU features are enabled only when both the cuda and tmva-gpu flags are enabled. These flags are not used anywhere else. It looks like the cuda flag is redundant in this case. . Related forum post - https://root-forum.cern.ch/t/feature-request-enable-cuda-if-detected/32764,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3438
https://github.com/root-project/root/pull/3438:283,safety,detect,detected,283,Removed cuda flag; TMVA GPU features are enabled only when both the cuda and tmva-gpu flags are enabled. These flags are not used anywhere else. It looks like the cuda flag is redundant in this case. . Related forum post - https://root-forum.cern.ch/t/feature-request-enable-cuda-if-detected/32764,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3438
https://github.com/root-project/root/pull/3438:283,security,detect,detected,283,Removed cuda flag; TMVA GPU features are enabled only when both the cuda and tmva-gpu flags are enabled. These flags are not used anywhere else. It looks like the cuda flag is redundant in this case. . Related forum post - https://root-forum.cern.ch/t/feature-request-enable-cuda-if-detected/32764,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3438
https://github.com/root-project/root/pull/3439:21,deployability,build,builds,21,[cxxmodules] Fix the builds on OSX.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3439
https://github.com/root-project/root/pull/3440:220,deployability,patch,patch,220,"[cxxmodules] Implement autoloading support for OSX.; The OSX linker stores the symbols in a shared library by adding an. extra ""_"" as prefix to the mangled name. However, the llvm JIT gives. us a unix mangled name. This patch adds a the missing extra prefix if we are on OSX.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3440
https://github.com/root-project/root/pull/3440:92,interoperability,share,shared,92,"[cxxmodules] Implement autoloading support for OSX.; The OSX linker stores the symbols in a shared library by adding an. extra ""_"" as prefix to the mangled name. However, the llvm JIT gives. us a unix mangled name. This patch adds a the missing extra prefix if we are on OSX.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3440
https://github.com/root-project/root/pull/3440:220,safety,patch,patch,220,"[cxxmodules] Implement autoloading support for OSX.; The OSX linker stores the symbols in a shared library by adding an. extra ""_"" as prefix to the mangled name. However, the llvm JIT gives. us a unix mangled name. This patch adds a the missing extra prefix if we are on OSX.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3440
https://github.com/root-project/root/pull/3440:220,security,patch,patch,220,"[cxxmodules] Implement autoloading support for OSX.; The OSX linker stores the symbols in a shared library by adding an. extra ""_"" as prefix to the mangled name. However, the llvm JIT gives. us a unix mangled name. This patch adds a the missing extra prefix if we are on OSX.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3440
https://github.com/root-project/root/pull/3440:35,usability,support,support,35,"[cxxmodules] Implement autoloading support for OSX.; The OSX linker stores the symbols in a shared library by adding an. extra ""_"" as prefix to the mangled name. However, the llvm JIT gives. us a unix mangled name. This patch adds a the missing extra prefix if we are on OSX.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3440
https://github.com/root-project/root/pull/3441:0,deployability,Build,Build,0,Build system fixes/improvements;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3441
https://github.com/root-project/root/pull/3442:507,availability,failur,failures,507,"config: fix platform check for dataframe to match source; There's a bug on 32-bit non-intel such as armv7l where root-config lists `-lROOTDataFrame` because it passes the check this patch adjusts, but libROOTDataFrame is not built on any 32-bit due to https://github.com/root-project/root/blob/v6-16-00-patches/tree/dataframe/CMakeLists.txt#L7 . Old check only hid DataFrame on i686; this patch changes the check to have the exact same conditions as the check for building DataFrame itself to prevent build failures in apps using root-config.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3442
https://github.com/root-project/root/pull/3442:182,deployability,patch,patch,182,"config: fix platform check for dataframe to match source; There's a bug on 32-bit non-intel such as armv7l where root-config lists `-lROOTDataFrame` because it passes the check this patch adjusts, but libROOTDataFrame is not built on any 32-bit due to https://github.com/root-project/root/blob/v6-16-00-patches/tree/dataframe/CMakeLists.txt#L7 . Old check only hid DataFrame on i686; this patch changes the check to have the exact same conditions as the check for building DataFrame itself to prevent build failures in apps using root-config.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3442
https://github.com/root-project/root/pull/3442:303,deployability,patch,patches,303,"config: fix platform check for dataframe to match source; There's a bug on 32-bit non-intel such as armv7l where root-config lists `-lROOTDataFrame` because it passes the check this patch adjusts, but libROOTDataFrame is not built on any 32-bit due to https://github.com/root-project/root/blob/v6-16-00-patches/tree/dataframe/CMakeLists.txt#L7 . Old check only hid DataFrame on i686; this patch changes the check to have the exact same conditions as the check for building DataFrame itself to prevent build failures in apps using root-config.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3442
https://github.com/root-project/root/pull/3442:389,deployability,patch,patch,389,"config: fix platform check for dataframe to match source; There's a bug on 32-bit non-intel such as armv7l where root-config lists `-lROOTDataFrame` because it passes the check this patch adjusts, but libROOTDataFrame is not built on any 32-bit due to https://github.com/root-project/root/blob/v6-16-00-patches/tree/dataframe/CMakeLists.txt#L7 . Old check only hid DataFrame on i686; this patch changes the check to have the exact same conditions as the check for building DataFrame itself to prevent build failures in apps using root-config.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3442
https://github.com/root-project/root/pull/3442:464,deployability,build,building,464,"config: fix platform check for dataframe to match source; There's a bug on 32-bit non-intel such as armv7l where root-config lists `-lROOTDataFrame` because it passes the check this patch adjusts, but libROOTDataFrame is not built on any 32-bit due to https://github.com/root-project/root/blob/v6-16-00-patches/tree/dataframe/CMakeLists.txt#L7 . Old check only hid DataFrame on i686; this patch changes the check to have the exact same conditions as the check for building DataFrame itself to prevent build failures in apps using root-config.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3442
https://github.com/root-project/root/pull/3442:501,deployability,build,build,501,"config: fix platform check for dataframe to match source; There's a bug on 32-bit non-intel such as armv7l where root-config lists `-lROOTDataFrame` because it passes the check this patch adjusts, but libROOTDataFrame is not built on any 32-bit due to https://github.com/root-project/root/blob/v6-16-00-patches/tree/dataframe/CMakeLists.txt#L7 . Old check only hid DataFrame on i686; this patch changes the check to have the exact same conditions as the check for building DataFrame itself to prevent build failures in apps using root-config.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3442
https://github.com/root-project/root/pull/3442:507,deployability,fail,failures,507,"config: fix platform check for dataframe to match source; There's a bug on 32-bit non-intel such as armv7l where root-config lists `-lROOTDataFrame` because it passes the check this patch adjusts, but libROOTDataFrame is not built on any 32-bit due to https://github.com/root-project/root/blob/v6-16-00-patches/tree/dataframe/CMakeLists.txt#L7 . Old check only hid DataFrame on i686; this patch changes the check to have the exact same conditions as the check for building DataFrame itself to prevent build failures in apps using root-config.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3442
https://github.com/root-project/root/pull/3442:12,interoperability,platform,platform,12,"config: fix platform check for dataframe to match source; There's a bug on 32-bit non-intel such as armv7l where root-config lists `-lROOTDataFrame` because it passes the check this patch adjusts, but libROOTDataFrame is not built on any 32-bit due to https://github.com/root-project/root/blob/v6-16-00-patches/tree/dataframe/CMakeLists.txt#L7 . Old check only hid DataFrame on i686; this patch changes the check to have the exact same conditions as the check for building DataFrame itself to prevent build failures in apps using root-config.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3442
https://github.com/root-project/root/pull/3442:507,performance,failur,failures,507,"config: fix platform check for dataframe to match source; There's a bug on 32-bit non-intel such as armv7l where root-config lists `-lROOTDataFrame` because it passes the check this patch adjusts, but libROOTDataFrame is not built on any 32-bit due to https://github.com/root-project/root/blob/v6-16-00-patches/tree/dataframe/CMakeLists.txt#L7 . Old check only hid DataFrame on i686; this patch changes the check to have the exact same conditions as the check for building DataFrame itself to prevent build failures in apps using root-config.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3442
https://github.com/root-project/root/pull/3442:507,reliability,fail,failures,507,"config: fix platform check for dataframe to match source; There's a bug on 32-bit non-intel such as armv7l where root-config lists `-lROOTDataFrame` because it passes the check this patch adjusts, but libROOTDataFrame is not built on any 32-bit due to https://github.com/root-project/root/blob/v6-16-00-patches/tree/dataframe/CMakeLists.txt#L7 . Old check only hid DataFrame on i686; this patch changes the check to have the exact same conditions as the check for building DataFrame itself to prevent build failures in apps using root-config.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3442
https://github.com/root-project/root/pull/3442:182,safety,patch,patch,182,"config: fix platform check for dataframe to match source; There's a bug on 32-bit non-intel such as armv7l where root-config lists `-lROOTDataFrame` because it passes the check this patch adjusts, but libROOTDataFrame is not built on any 32-bit due to https://github.com/root-project/root/blob/v6-16-00-patches/tree/dataframe/CMakeLists.txt#L7 . Old check only hid DataFrame on i686; this patch changes the check to have the exact same conditions as the check for building DataFrame itself to prevent build failures in apps using root-config.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3442
https://github.com/root-project/root/pull/3442:303,safety,patch,patches,303,"config: fix platform check for dataframe to match source; There's a bug on 32-bit non-intel such as armv7l where root-config lists `-lROOTDataFrame` because it passes the check this patch adjusts, but libROOTDataFrame is not built on any 32-bit due to https://github.com/root-project/root/blob/v6-16-00-patches/tree/dataframe/CMakeLists.txt#L7 . Old check only hid DataFrame on i686; this patch changes the check to have the exact same conditions as the check for building DataFrame itself to prevent build failures in apps using root-config.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3442
https://github.com/root-project/root/pull/3442:389,safety,patch,patch,389,"config: fix platform check for dataframe to match source; There's a bug on 32-bit non-intel such as armv7l where root-config lists `-lROOTDataFrame` because it passes the check this patch adjusts, but libROOTDataFrame is not built on any 32-bit due to https://github.com/root-project/root/blob/v6-16-00-patches/tree/dataframe/CMakeLists.txt#L7 . Old check only hid DataFrame on i686; this patch changes the check to have the exact same conditions as the check for building DataFrame itself to prevent build failures in apps using root-config.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3442
https://github.com/root-project/root/pull/3442:493,safety,prevent,prevent,493,"config: fix platform check for dataframe to match source; There's a bug on 32-bit non-intel such as armv7l where root-config lists `-lROOTDataFrame` because it passes the check this patch adjusts, but libROOTDataFrame is not built on any 32-bit due to https://github.com/root-project/root/blob/v6-16-00-patches/tree/dataframe/CMakeLists.txt#L7 . Old check only hid DataFrame on i686; this patch changes the check to have the exact same conditions as the check for building DataFrame itself to prevent build failures in apps using root-config.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3442
https://github.com/root-project/root/pull/3442:182,security,patch,patch,182,"config: fix platform check for dataframe to match source; There's a bug on 32-bit non-intel such as armv7l where root-config lists `-lROOTDataFrame` because it passes the check this patch adjusts, but libROOTDataFrame is not built on any 32-bit due to https://github.com/root-project/root/blob/v6-16-00-patches/tree/dataframe/CMakeLists.txt#L7 . Old check only hid DataFrame on i686; this patch changes the check to have the exact same conditions as the check for building DataFrame itself to prevent build failures in apps using root-config.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3442
https://github.com/root-project/root/pull/3442:303,security,patch,patches,303,"config: fix platform check for dataframe to match source; There's a bug on 32-bit non-intel such as armv7l where root-config lists `-lROOTDataFrame` because it passes the check this patch adjusts, but libROOTDataFrame is not built on any 32-bit due to https://github.com/root-project/root/blob/v6-16-00-patches/tree/dataframe/CMakeLists.txt#L7 . Old check only hid DataFrame on i686; this patch changes the check to have the exact same conditions as the check for building DataFrame itself to prevent build failures in apps using root-config.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3442
https://github.com/root-project/root/pull/3442:389,security,patch,patch,389,"config: fix platform check for dataframe to match source; There's a bug on 32-bit non-intel such as armv7l where root-config lists `-lROOTDataFrame` because it passes the check this patch adjusts, but libROOTDataFrame is not built on any 32-bit due to https://github.com/root-project/root/blob/v6-16-00-patches/tree/dataframe/CMakeLists.txt#L7 . Old check only hid DataFrame on i686; this patch changes the check to have the exact same conditions as the check for building DataFrame itself to prevent build failures in apps using root-config.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3442
https://github.com/root-project/root/pull/3442:493,security,preven,prevent,493,"config: fix platform check for dataframe to match source; There's a bug on 32-bit non-intel such as armv7l where root-config lists `-lROOTDataFrame` because it passes the check this patch adjusts, but libROOTDataFrame is not built on any 32-bit due to https://github.com/root-project/root/blob/v6-16-00-patches/tree/dataframe/CMakeLists.txt#L7 . Old check only hid DataFrame on i686; this patch changes the check to have the exact same conditions as the check for building DataFrame itself to prevent build failures in apps using root-config.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3442
https://github.com/root-project/root/pull/3444:46,deployability,modul,module,46,[cxxmodules] Sink the interface for loading a module in cling.; This patch prepares the infrastructure to be able to work with a. global module index.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3444
https://github.com/root-project/root/pull/3444:69,deployability,patch,patch,69,[cxxmodules] Sink the interface for loading a module in cling.; This patch prepares the infrastructure to be able to work with a. global module index.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3444
https://github.com/root-project/root/pull/3444:88,deployability,infrastructur,infrastructure,88,[cxxmodules] Sink the interface for loading a module in cling.; This patch prepares the infrastructure to be able to work with a. global module index.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3444
https://github.com/root-project/root/pull/3444:137,deployability,modul,module,137,[cxxmodules] Sink the interface for loading a module in cling.; This patch prepares the infrastructure to be able to work with a. global module index.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3444
https://github.com/root-project/root/pull/3444:36,energy efficiency,load,loading,36,[cxxmodules] Sink the interface for loading a module in cling.; This patch prepares the infrastructure to be able to work with a. global module index.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3444
https://github.com/root-project/root/pull/3444:22,integrability,interfac,interface,22,[cxxmodules] Sink the interface for loading a module in cling.; This patch prepares the infrastructure to be able to work with a. global module index.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3444
https://github.com/root-project/root/pull/3444:22,interoperability,interfac,interface,22,[cxxmodules] Sink the interface for loading a module in cling.; This patch prepares the infrastructure to be able to work with a. global module index.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3444
https://github.com/root-project/root/pull/3444:22,modifiability,interfac,interface,22,[cxxmodules] Sink the interface for loading a module in cling.; This patch prepares the infrastructure to be able to work with a. global module index.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3444
https://github.com/root-project/root/pull/3444:46,modifiability,modul,module,46,[cxxmodules] Sink the interface for loading a module in cling.; This patch prepares the infrastructure to be able to work with a. global module index.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3444
https://github.com/root-project/root/pull/3444:137,modifiability,modul,module,137,[cxxmodules] Sink the interface for loading a module in cling.; This patch prepares the infrastructure to be able to work with a. global module index.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3444
https://github.com/root-project/root/pull/3444:36,performance,load,loading,36,[cxxmodules] Sink the interface for loading a module in cling.; This patch prepares the infrastructure to be able to work with a. global module index.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3444
https://github.com/root-project/root/pull/3444:46,safety,modul,module,46,[cxxmodules] Sink the interface for loading a module in cling.; This patch prepares the infrastructure to be able to work with a. global module index.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3444
https://github.com/root-project/root/pull/3444:69,safety,patch,patch,69,[cxxmodules] Sink the interface for loading a module in cling.; This patch prepares the infrastructure to be able to work with a. global module index.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3444
https://github.com/root-project/root/pull/3444:137,safety,modul,module,137,[cxxmodules] Sink the interface for loading a module in cling.; This patch prepares the infrastructure to be able to work with a. global module index.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3444
https://github.com/root-project/root/pull/3444:69,security,patch,patch,69,[cxxmodules] Sink the interface for loading a module in cling.; This patch prepares the infrastructure to be able to work with a. global module index.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3444
https://github.com/root-project/root/pull/3445:237,availability,operat,operators,237,[Exp PyROOT] Pythonisations for TObject; This PR includes two sets of pythonisations for `TObject`:. - Injection of `__contains__` to support 'obj1 in obj2` syntax. https://sft.its.cern.ch/jira/browse/ROOT-9968. - Addition of comparison operators. https://sft.its.cern.ch/jira/browse/ROOT-9969,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3445
https://github.com/root-project/root/pull/3445:103,integrability,Inject,Injection,103,[Exp PyROOT] Pythonisations for TObject; This PR includes two sets of pythonisations for `TObject`:. - Injection of `__contains__` to support 'obj1 in obj2` syntax. https://sft.its.cern.ch/jira/browse/ROOT-9968. - Addition of comparison operators. https://sft.its.cern.ch/jira/browse/ROOT-9969,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3445
https://github.com/root-project/root/pull/3445:103,security,Inject,Injection,103,[Exp PyROOT] Pythonisations for TObject; This PR includes two sets of pythonisations for `TObject`:. - Injection of `__contains__` to support 'obj1 in obj2` syntax. https://sft.its.cern.ch/jira/browse/ROOT-9968. - Addition of comparison operators. https://sft.its.cern.ch/jira/browse/ROOT-9969,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3445
https://github.com/root-project/root/pull/3445:134,usability,support,support,134,[Exp PyROOT] Pythonisations for TObject; This PR includes two sets of pythonisations for `TObject`:. - Injection of `__contains__` to support 'obj1 in obj2` syntax. https://sft.its.cern.ch/jira/browse/ROOT-9968. - Addition of comparison operators. https://sft.its.cern.ch/jira/browse/ROOT-9969,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3445
https://github.com/root-project/root/pull/3446:13,deployability,build,build,13,Improve TMVA build options and build system;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3446
https://github.com/root-project/root/pull/3446:31,deployability,build,build,31,Improve TMVA build options and build system;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3446
https://github.com/root-project/root/pull/3447:386,deployability,updat,updated,386,"Add possibility to set model function (and also data) when using Fitter::FitFCN. ; Add possibility to set model function (and also data) when using Fitter::FitFCN. . This gives possibility to call FitResult::GetConfidenceIntervals for the fits done using Fitter::FitFCN, as in the in case of TBinomialEfficiencyFitter. . This commit fixes ROOT-7790. The tutorial TesBinomial.C has been updated to compute as example the confidence interval of the fitted function. . This PR also contains a commit fixing the missing statistics in th2poly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3447
https://github.com/root-project/root/pull/3447:479,deployability,contain,contains,479,"Add possibility to set model function (and also data) when using Fitter::FitFCN. ; Add possibility to set model function (and also data) when using Fitter::FitFCN. . This gives possibility to call FitResult::GetConfidenceIntervals for the fits done using Fitter::FitFCN, as in the in case of TBinomialEfficiencyFitter. . This commit fixes ROOT-7790. The tutorial TesBinomial.C has been updated to compute as example the confidence interval of the fitted function. . This PR also contains a commit fixing the missing statistics in th2poly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3447
https://github.com/root-project/root/pull/3447:23,energy efficiency,model,model,23,"Add possibility to set model function (and also data) when using Fitter::FitFCN. ; Add possibility to set model function (and also data) when using Fitter::FitFCN. . This gives possibility to call FitResult::GetConfidenceIntervals for the fits done using Fitter::FitFCN, as in the in case of TBinomialEfficiencyFitter. . This commit fixes ROOT-7790. The tutorial TesBinomial.C has been updated to compute as example the confidence interval of the fitted function. . This PR also contains a commit fixing the missing statistics in th2poly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3447
https://github.com/root-project/root/pull/3447:106,energy efficiency,model,model,106,"Add possibility to set model function (and also data) when using Fitter::FitFCN. ; Add possibility to set model function (and also data) when using Fitter::FitFCN. . This gives possibility to call FitResult::GetConfidenceIntervals for the fits done using Fitter::FitFCN, as in the in case of TBinomialEfficiencyFitter. . This commit fixes ROOT-7790. The tutorial TesBinomial.C has been updated to compute as example the confidence interval of the fitted function. . This PR also contains a commit fixing the missing statistics in th2poly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3447
https://github.com/root-project/root/pull/3447:386,safety,updat,updated,386,"Add possibility to set model function (and also data) when using Fitter::FitFCN. ; Add possibility to set model function (and also data) when using Fitter::FitFCN. . This gives possibility to call FitResult::GetConfidenceIntervals for the fits done using Fitter::FitFCN, as in the in case of TBinomialEfficiencyFitter. . This commit fixes ROOT-7790. The tutorial TesBinomial.C has been updated to compute as example the confidence interval of the fitted function. . This PR also contains a commit fixing the missing statistics in th2poly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3447
https://github.com/root-project/root/pull/3447:23,security,model,model,23,"Add possibility to set model function (and also data) when using Fitter::FitFCN. ; Add possibility to set model function (and also data) when using Fitter::FitFCN. . This gives possibility to call FitResult::GetConfidenceIntervals for the fits done using Fitter::FitFCN, as in the in case of TBinomialEfficiencyFitter. . This commit fixes ROOT-7790. The tutorial TesBinomial.C has been updated to compute as example the confidence interval of the fitted function. . This PR also contains a commit fixing the missing statistics in th2poly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3447
https://github.com/root-project/root/pull/3447:106,security,model,model,106,"Add possibility to set model function (and also data) when using Fitter::FitFCN. ; Add possibility to set model function (and also data) when using Fitter::FitFCN. . This gives possibility to call FitResult::GetConfidenceIntervals for the fits done using Fitter::FitFCN, as in the in case of TBinomialEfficiencyFitter. . This commit fixes ROOT-7790. The tutorial TesBinomial.C has been updated to compute as example the confidence interval of the fitted function. . This PR also contains a commit fixing the missing statistics in th2poly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3447
https://github.com/root-project/root/pull/3447:386,security,updat,updated,386,"Add possibility to set model function (and also data) when using Fitter::FitFCN. ; Add possibility to set model function (and also data) when using Fitter::FitFCN. . This gives possibility to call FitResult::GetConfidenceIntervals for the fits done using Fitter::FitFCN, as in the in case of TBinomialEfficiencyFitter. . This commit fixes ROOT-7790. The tutorial TesBinomial.C has been updated to compute as example the confidence interval of the fitted function. . This PR also contains a commit fixing the missing statistics in th2poly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3447
https://github.com/root-project/root/pull/3448:5,performance,Perform,Performance,5,[DF] Performance fixes in presence of a large number of Defines;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3448
https://github.com/root-project/root/pull/3448:5,usability,Perform,Performance,5,[DF] Performance fixes in presence of a large number of Defines;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3448
https://github.com/root-project/root/pull/3449:59,availability,Error,Errors,59,"Class TGraphMultiErrors for Graphs with multidimensional y-Errors (e.g. statistic / systematic errors); Hello,. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiEr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:95,availability,error,errors,95,"Class TGraphMultiErrors for Graphs with multidimensional y-Errors (e.g. statistic / systematic errors); Hello,. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiEr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:270,availability,Error,Errors,270,"Class TGraphMultiErrors for Graphs with multidimensional y-Errors (e.g. statistic / systematic errors); Hello,. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiEr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:796,availability,error,errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors,796,"Class TGraphMultiErrors for Graphs with multidimensional y-Errors (e.g. statistic / systematic errors); Hello,. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiEr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:963,availability,error,errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors,963,"ss TGraphMultiErrors for Graphs with multidimensional y-Errors (e.g. statistic / systematic errors); Hello,. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiError",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1334,availability,Error,Errors,1334,"s strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1449,availability,error,error,1449,"ed. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1526,availability,Error,Error,1526,"herefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is suppo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1627,availability,error,errors,1627,"not upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TG",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1704,availability,error,error,1704," forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class sh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1738,availability,error,error,1738,"h/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGrap",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1784,availability,error,errors,1784,"ymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1929,availability,error,error,1929,"ass-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and shoul",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1948,availability,error,error,1948,"-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:2054,availability,error,errors,2054,"the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:2158,availability,error,errors,2158," most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:2174,availability,error,error,2174,"ities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3221,availability,error,error,3221,"is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. optio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3260,availability,consist,consist,3260,"phMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have on",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3385,availability,error,error,3385,"r become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3438,availability,error,errors,3438,", cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the speci",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3574,availability,error,errors,3574,"he function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3584,availability,error,error,3584,"n TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3793,availability,error,error,3793,"n the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3867,availability,error,error,3867,"rves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dime",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4163,availability,error,errors,4163,"e to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4407,availability,error,error,4407,"or basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsym",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4620,availability,Error,Errors,4620,"block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options l",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4636,availability,error,errors,4636,"d with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my exampl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4712,availability,error,error,4712,"used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4761,availability,error,error,4761,"s are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4790,availability,error,errors,4790,"error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4860,availability,error,error,4860," an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4952,availability,Error,Errors,4952,"tion of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4970,availability,error,error,4970,"g options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:5029,availability,error,error,5029,"nally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate more. If you encounter any problems, please contact me and ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:5088,availability,error,error,5088," y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate more. If you encounter any problems, please contact me and I will try to resolve them. All the best,. Simon Spies. ![e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:5503,availability,error,error,5503,"bination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate more. If you encounter any problems, please contact me and I will try to resolve them. All the best,. Simon Spies. ![example](https://user-images.githubusercontent.com/5320187/53024715-dfa23d80-345f-11e9-9fd4-cae2ef3d11a1.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:5784,deployability,fail,failed,5784,"bination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate more. If you encounter any problems, please contact me and I will try to resolve them. All the best,. Simon Spies. ![example](https://user-images.githubusercontent.com/5320187/53024715-dfa23d80-345f-11e9-9fd4-cae2ef3d11a1.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:5933,deployability,build,build,5933,"bination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate more. If you encounter any problems, please contact me and I will try to resolve them. All the best,. Simon Spies. ![example](https://user-images.githubusercontent.com/5320187/53024715-dfa23d80-345f-11e9-9fd4-cae2ef3d11a1.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:5939,deployability,fail,failed,5939,"bination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate more. If you encounter any problems, please contact me and I will try to resolve them. All the best,. Simon Spies. ![example](https://user-images.githubusercontent.com/5320187/53024715-dfa23d80-345f-11e9-9fd4-cae2ef3d11a1.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:2189,energy efficiency,Draw,Drawing,2189,"oot.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3127,energy efficiency,Draw,Drawing,3127,"t returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3188,energy efficiency,draw,drawing,3188,"wing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is usefu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3890,energy efficiency,draw,drawing,3890," TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Sy",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3967,energy efficiency,draw,drawing,3967,"art of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4102,energy efficiency,Draw,Draw,4102,"TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4458,energy efficiency,draw,draw,4458,"are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attri",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4515,energy efficiency,draw,drawing,4515,"ed for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4591,energy efficiency,draw,drawn,4591,"nsions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the firs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4801,energy efficiency,draw,drawn,4801,"sions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files havi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4908,energy efficiency,draw,drawn,4908,"raphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:5010,energy efficiency,draw,drawn,5010,"symmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate more. If you encounter any problems, ple",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:5567,energy efficiency,Draw,Draw,5567,"bination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate more. If you encounter any problems, please contact me and I will try to resolve them. All the best,. Simon Spies. ![example](https://user-images.githubusercontent.com/5320187/53024715-dfa23d80-345f-11e9-9fd4-cae2ef3d11a1.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:5609,energy efficiency,Draw,Draw,5609,"bination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate more. If you encounter any problems, please contact me and I will try to resolve them. All the best,. Simon Spies. ![example](https://user-images.githubusercontent.com/5320187/53024715-dfa23d80-345f-11e9-9fd4-cae2ef3d11a1.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3770,interoperability,distribut,distributed,3770," is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4046,interoperability,specif,specify,4046," actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4436,interoperability,specif,specific,4436,"rors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:5381,interoperability,compatib,compatibility,5381,"bination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate more. If you encounter any problems, please contact me and I will try to resolve them. All the best,. Simon Spies. ![example](https://user-images.githubusercontent.com/5320187/53024715-dfa23d80-345f-11e9-9fd4-cae2ef3d11a1.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:499,modifiability,inherit,inherits,499,"Class TGraphMultiErrors for Graphs with multidimensional y-Errors (e.g. statistic / systematic errors); Hello,. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiEr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:5231,modifiability,paramet,parameter,5231,"bination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate more. If you encounter any problems, please contact me and I will try to resolve them. All the best,. Simon Spies. ![example](https://user-images.githubusercontent.com/5320187/53024715-dfa23d80-345f-11e9-9fd4-cae2ef3d11a1.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:59,performance,Error,Errors,59,"Class TGraphMultiErrors for Graphs with multidimensional y-Errors (e.g. statistic / systematic errors); Hello,. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiEr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:95,performance,error,errors,95,"Class TGraphMultiErrors for Graphs with multidimensional y-Errors (e.g. statistic / systematic errors); Hello,. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiEr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:270,performance,Error,Errors,270,"Class TGraphMultiErrors for Graphs with multidimensional y-Errors (e.g. statistic / systematic errors); Hello,. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiEr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:796,performance,error,errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors,796,"Class TGraphMultiErrors for Graphs with multidimensional y-Errors (e.g. statistic / systematic errors); Hello,. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiEr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:963,performance,error,errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors,963,"ss TGraphMultiErrors for Graphs with multidimensional y-Errors (e.g. statistic / systematic errors); Hello,. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiError",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1334,performance,Error,Errors,1334,"s strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1449,performance,error,error,1449,"ed. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1526,performance,Error,Error,1526,"herefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is suppo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1627,performance,error,errors,1627,"not upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TG",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1704,performance,error,error,1704," forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class sh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1738,performance,error,error,1738,"h/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGrap",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1784,performance,error,errors,1784,"ymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1929,performance,error,error,1929,"ass-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and shoul",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1948,performance,error,error,1948,"-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:2054,performance,error,errors,2054,"the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:2158,performance,error,errors,2158," most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:2174,performance,error,error,2174,"ities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:2233,performance,perform,performed,2233,".html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3038,performance,perform,performs,3038," sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3221,performance,error,error,3221,"is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. optio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3385,performance,error,error,3385,"r become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3438,performance,error,errors,3438,", cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the speci",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3574,performance,error,errors,3574,"he function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3584,performance,error,error,3584,"n TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3793,performance,error,error,3793,"n the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3867,performance,error,error,3867,"rves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dime",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4163,performance,error,errors,4163,"e to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4407,performance,error,error,4407,"or basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsym",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4620,performance,Error,Errors,4620,"block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options l",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4636,performance,error,errors,4636,"d with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my exampl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4712,performance,error,error,4712,"used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4761,performance,error,error,4761,"s are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4790,performance,error,errors,4790,"error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4860,performance,error,error,4860," an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4952,performance,Error,Errors,4952,"tion of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4970,performance,error,error,4970,"g options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:5029,performance,error,error,5029,"nally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate more. If you encounter any problems, please contact me and ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:5088,performance,error,error,5088," y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate more. If you encounter any problems, please contact me and I will try to resolve them. All the best,. Simon Spies. ![e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:5503,performance,error,error,5503,"bination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate more. If you encounter any problems, please contact me and I will try to resolve them. All the best,. Simon Spies. ![example](https://user-images.githubusercontent.com/5320187/53024715-dfa23d80-345f-11e9-9fd4-cae2ef3d11a1.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:5784,reliability,fail,failed,5784,"bination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate more. If you encounter any problems, please contact me and I will try to resolve them. All the best,. Simon Spies. ![example](https://user-images.githubusercontent.com/5320187/53024715-dfa23d80-345f-11e9-9fd4-cae2ef3d11a1.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:5939,reliability,fail,failed,5939,"bination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate more. If you encounter any problems, please contact me and I will try to resolve them. All the best,. Simon Spies. ![example](https://user-images.githubusercontent.com/5320187/53024715-dfa23d80-345f-11e9-9fd4-cae2ef3d11a1.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:59,safety,Error,Errors,59,"Class TGraphMultiErrors for Graphs with multidimensional y-Errors (e.g. statistic / systematic errors); Hello,. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiEr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:95,safety,error,errors,95,"Class TGraphMultiErrors for Graphs with multidimensional y-Errors (e.g. statistic / systematic errors); Hello,. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiEr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:270,safety,Error,Errors,270,"Class TGraphMultiErrors for Graphs with multidimensional y-Errors (e.g. statistic / systematic errors); Hello,. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiEr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:796,safety,error,errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors,796,"Class TGraphMultiErrors for Graphs with multidimensional y-Errors (e.g. statistic / systematic errors); Hello,. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiEr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:963,safety,error,errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors,963,"ss TGraphMultiErrors for Graphs with multidimensional y-Errors (e.g. statistic / systematic errors); Hello,. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiError",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1334,safety,Error,Errors,1334,"s strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1449,safety,error,error,1449,"ed. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1526,safety,Error,Error,1526,"herefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is suppo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1627,safety,error,errors,1627,"not upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TG",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1704,safety,error,error,1704," forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class sh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1738,safety,error,error,1738,"h/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGrap",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1784,safety,error,errors,1784,"ymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1929,safety,error,error,1929,"ass-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and shoul",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1948,safety,error,error,1948,"-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:2054,safety,error,errors,2054,"the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:2158,safety,error,errors,2158," most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:2174,safety,error,error,2174,"ities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3221,safety,error,error,3221,"is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. optio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3385,safety,error,error,3385,"r become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3438,safety,error,errors,3438,", cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the speci",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3574,safety,error,errors,3574,"he function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3584,safety,error,error,3584,"n TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3793,safety,error,error,3793,"n the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3867,safety,error,error,3867,"rves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dime",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4163,safety,error,errors,4163,"e to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4407,safety,error,error,4407,"or basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsym",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4620,safety,Error,Errors,4620,"block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options l",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4636,safety,error,errors,4636,"d with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my exampl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4712,safety,error,error,4712,"used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4761,safety,error,error,4761,"s are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4790,safety,error,errors,4790,"error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4860,safety,error,error,4860," an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4952,safety,Error,Errors,4952,"tion of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4970,safety,error,error,4970,"g options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:5029,safety,error,error,5029,"nally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate more. If you encounter any problems, please contact me and ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:5088,safety,error,error,5088," y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate more. If you encounter any problems, please contact me and I will try to resolve them. All the best,. Simon Spies. ![e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:5503,safety,error,error,5503,"bination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate more. If you encounter any problems, please contact me and I will try to resolve them. All the best,. Simon Spies. ![example](https://user-images.githubusercontent.com/5320187/53024715-dfa23d80-345f-11e9-9fd4-cae2ef3d11a1.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:5768,safety,test,tests,5768,"bination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate more. If you encounter any problems, please contact me and I will try to resolve them. All the best,. Simon Spies. ![example](https://user-images.githubusercontent.com/5320187/53024715-dfa23d80-345f-11e9-9fd4-cae2ef3d11a1.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:5768,testability,test,tests,5768,"bination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate more. If you encounter any problems, please contact me and I will try to resolve them. All the best,. Simon Spies. ![example](https://user-images.githubusercontent.com/5320187/53024715-dfa23d80-345f-11e9-9fd4-cae2ef3d11a1.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:59,usability,Error,Errors,59,"Class TGraphMultiErrors for Graphs with multidimensional y-Errors (e.g. statistic / systematic errors); Hello,. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiEr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:95,usability,error,errors,95,"Class TGraphMultiErrors for Graphs with multidimensional y-Errors (e.g. statistic / systematic errors); Hello,. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiEr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:270,usability,Error,Errors,270,"Class TGraphMultiErrors for Graphs with multidimensional y-Errors (e.g. statistic / systematic errors); Hello,. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiEr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:796,usability,error,errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors,796,"Class TGraphMultiErrors for Graphs with multidimensional y-Errors (e.g. statistic / systematic errors); Hello,. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiEr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:963,usability,error,errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors,963,"ss TGraphMultiErrors for Graphs with multidimensional y-Errors (e.g. statistic / systematic errors); Hello,. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiError",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1144,usability,document,documentation,1144,"rrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1334,usability,Error,Errors,1334,"s strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1449,usability,error,error,1449,"ed. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1526,usability,Error,Error,1526,"herefore all of it’s functionalities. I attached an example plot as a png picture. Unfortunatly I cannot upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is suppo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1627,usability,error,errors,1627,"not upload the C macro here, but if you are interested you can find it on the forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TG",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1704,usability,error,error,1704," forum: [https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class sh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1738,usability,error,error,1738,"h/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGrap",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1784,usability,error,errors,1784,"ymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784](https://root-forum.cern.ch/t/tgraphmultierrors-class-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1929,usability,error,error,1929,"ass-for-graphs-with-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and shoul",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:1948,usability,error,error,1948,"-asymmetric-errors-and-multiple-different-y-error-types-e-g-statistic-and-systematic-errors/32784). Since the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:2054,usability,error,errors,2054,"the class reimplements all functionalities of TGraphAsymmErrors, you can refer to it’s documentation for most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:2158,usability,error,errors,2158," most functionalities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:2174,usability,error,error,2174,"ities: https://root.cern.ch/doc/master/classTGraphAsymmErrors.html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:2233,usability,perform,performed,2233,".html. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3038,usability,perform,performs,3038," sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3221,usability,error,error,3221,"is being performed by the functions TGraphMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. optio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3260,usability,consist,consist,3260,"phMultiErrors::Paint, TGraphMultiErrors::PaintReverse and TGraphMultiErrors::PaintGraphMultiErrors. If this class should ever become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have on",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3385,usability,error,error,3385,"r become part of ROOT the first two are to be deleted, cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3438,usability,error,errors,3438,", cause there are similar functions in the class TGraphPainter and the last one is supposed to be included in the TGraphPainter class. The function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the speci",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3574,usability,error,errors,3574,"he function TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3584,usability,error,error,3584,"n TGraphMultiErrors::Paint is similar to TGraph::Paint and TGraphPainter::PaintHelper and can be deleted if the class should become part of root and TGraphMultiErrors::PaintGraphMultiErrors is being included in the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3793,usability,error,error,3793,"n the TGraphPainter class. The function TGraphMultiErrors::PaintReverse serves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:3867,usability,error,error,3867,"rves the same purpose as TGraphPainter::PaintReverse and should be deleted too if the class becomes part of ROOT. The function TGraphMultiErrors::PaintGraphMultiErrors performs the actual painting and would have to be included in the TGraphPainter class. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dime",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4163,usability,error,errors,4163,"e to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4407,usability,error,error,4407,"or basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsym",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4620,usability,Error,Errors,4620,"block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options l",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4636,usability,error,errors,4636,"d with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my exampl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4712,usability,error,error,4712,"used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4761,usability,error,error,4761,"s are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4790,usability,error,errors,4790,"error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4844,usability,tip,tip,4844," + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4860,usability,error,error,4860," an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4952,usability,Error,Errors,4952,"tion of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:4970,usability,error,error,4970,"g options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:5029,usability,error,error,5029,"nally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate more. If you encounter any problems, please contact me and ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:5088,usability,error,error,5088," y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate more. If you encounter any problems, please contact me and I will try to resolve them. All the best,. Simon Spies. ![e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:5503,usability,error,error,5503,"bination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate more. If you encounter any problems, please contact me and I will try to resolve them. All the best,. Simon Spies. ![example](https://user-images.githubusercontent.com/5320187/53024715-dfa23d80-345f-11e9-9fd4-cae2ef3d11a1.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3449:6107,usability,user,user-images,6107,"bination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate more. If you encounter any problems, please contact me and I will try to resolve them. All the best,. Simon Spies. ![example](https://user-images.githubusercontent.com/5320187/53024715-dfa23d80-345f-11e9-9fd4-cae2ef3d11a1.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3449
https://github.com/root-project/root/pull/3452:64,availability,Error,Errors,64,"Added class TGraphMultiErrors for graph with multidimensional y-Errors; Hello,. First of all sorry for all the mess I made with these pull requests. This is my first try and I did not really understood how GitHub works therefore my previous pull request was this messy and I decided to withdraw it and clean everything up before I request it again. And here we are, I ran some additional bugfixing and the ROOT tests which succeeded. Furthermore I tested my new class and everything I tried worked so I think now it's time to request the pull again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian prop",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:725,availability,Error,Errors,725,"Added class TGraphMultiErrors for graph with multidimensional y-Errors; Hello,. First of all sorry for all the mess I made with these pull requests. This is my first try and I did not really understood how GitHub works therefore my previous pull request was this messy and I decided to withdraw it and clean everything up before I request it again. And here we are, I ran some additional bugfixing and the ROOT tests which succeeded. Furthermore I tested my new class and everything I tried worked so I think now it's time to request the pull again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian prop",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1246,availability,Error,Errors,1246,"uest was this messy and I decided to withdraw it and clean everything up before I request it again. And here we are, I ran some additional bugfixing and the ROOT tests which succeeded. Furthermore I tested my new class and everything I tried worked so I think now it's time to request the pull again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1361,availability,error,error,1361,", I ran some additional bugfixing and the ROOT tests which succeeded. Furthermore I tested my new class and everything I tried worked so I think now it's time to request the pull again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1438,availability,Error,Error,1438,"more I tested my new class and everything I tried worked so I think now it's time to request the pull again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1539,availability,error,errors,1539," again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1616,availability,error,error,1616,"basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y err",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1650,availability,error,error,1650," the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic pai",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1696,availability,error,errors,1696,"t of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= N",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1841,availability,error,error,1841," functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1860,availability,error,error,1860," the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1966,availability,error,errors,1966,"Graph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic pai",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2070,availability,error,errors,2070,"acro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimens",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2086,availability,error,error,2086,"ced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2452,availability,error,error,2452,"istical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. optio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2491,availability,consist,consist,2491,"atical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have on",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2616,availability,error,error,2616,"or dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2669,availability,error,errors,2669," (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the speci",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2805,availability,error,errors,2805,"OnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2815,availability,error,error,2815,"for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn w",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3024,availability,error,error,3024,"rs::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimensio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3098,availability,error,error,3098,"Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Error",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3394,availability,error,errors,3394,"e to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3638,availability,error,error,3638,"or basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3884,availability,error,error,3884,"e there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3933,availability,error,error,3933," block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3962,availability,error,errors,3962," painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:4013,availability,error,error,4013,"r the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-images.githubusercontent.com/5320187/530",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:4041,availability,error,errors,4041,"case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-images.githubusercontent.com/5320187/53085326-e7ff8480-3502-11e9-894",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:4096,availability,Error,Errors,4096,"rrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-images.githubusercontent.com/5320187/53085326-e7ff8480-3502-11e9-8945-59e025f46cf8.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:4151,availability,error,error,4151,"rrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-images.githubusercontent.com/5320187/53085326-e7ff8480-3502-11e9-8945-59e025f46cf8.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:4566,availability,error,error,4566,"rrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-images.githubusercontent.com/5320187/53085326-e7ff8480-3502-11e9-8945-59e025f46cf8.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2101,energy efficiency,Draw,Drawing,2101,"in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2358,energy efficiency,Draw,Drawing,2358,"rror dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2419,energy efficiency,draw,drawing,2419,"at the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is usefu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3121,energy efficiency,draw,drawing,3121,"e painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3198,energy efficiency,draw,drawing,3198,"lasses. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overlo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3333,energy efficiency,Draw,Draw,3333,"aintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3689,energy efficiency,draw,draw,3689,"are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3746,energy efficiency,draw,drawing,3746,"ed for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find m",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3811,energy efficiency,draw,drawn,3811," error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3973,energy efficiency,draw,drawn,3973,"The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:4052,energy efficiency,draw,drawn,4052,"are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-images.githubusercontent.com/5320187/53085326-e7ff8480-3502-11e9-8945-59e025f46",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:4630,energy efficiency,Draw,Draw,4630,"rrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-images.githubusercontent.com/5320187/53085326-e7ff8480-3502-11e9-8945-59e025f46cf8.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:4672,energy efficiency,Draw,Draw,4672,"rrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-images.githubusercontent.com/5320187/53085326-e7ff8480-3502-11e9-8945-59e025f46cf8.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3001,interoperability,distribut,distributed,3001,") or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3277,interoperability,specif,specify,3277," included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an addition",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3667,interoperability,specif,specific,3667,"rors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:4444,interoperability,compatib,compatibility,4444,"rrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-images.githubusercontent.com/5320187/53085326-e7ff8480-3502-11e9-8945-59e025f46cf8.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:954,modifiability,inherit,inherits,954,"Added class TGraphMultiErrors for graph with multidimensional y-Errors; Hello,. First of all sorry for all the mess I made with these pull requests. This is my first try and I did not really understood how GitHub works therefore my previous pull request was this messy and I decided to withdraw it and clean everything up before I request it again. And here we are, I ran some additional bugfixing and the ROOT tests which succeeded. Furthermore I tested my new class and everything I tried worked so I think now it's time to request the pull again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian prop",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:4294,modifiability,paramet,parameter,4294,"rrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-images.githubusercontent.com/5320187/53085326-e7ff8480-3502-11e9-8945-59e025f46cf8.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:64,performance,Error,Errors,64,"Added class TGraphMultiErrors for graph with multidimensional y-Errors; Hello,. First of all sorry for all the mess I made with these pull requests. This is my first try and I did not really understood how GitHub works therefore my previous pull request was this messy and I decided to withdraw it and clean everything up before I request it again. And here we are, I ran some additional bugfixing and the ROOT tests which succeeded. Furthermore I tested my new class and everything I tried worked so I think now it's time to request the pull again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian prop",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:518,performance,time,time,518,"Added class TGraphMultiErrors for graph with multidimensional y-Errors; Hello,. First of all sorry for all the mess I made with these pull requests. This is my first try and I did not really understood how GitHub works therefore my previous pull request was this messy and I decided to withdraw it and clean everything up before I request it again. And here we are, I ran some additional bugfixing and the ROOT tests which succeeded. Furthermore I tested my new class and everything I tried worked so I think now it's time to request the pull again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian prop",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:725,performance,Error,Errors,725,"Added class TGraphMultiErrors for graph with multidimensional y-Errors; Hello,. First of all sorry for all the mess I made with these pull requests. This is my first try and I did not really understood how GitHub works therefore my previous pull request was this messy and I decided to withdraw it and clean everything up before I request it again. And here we are, I ran some additional bugfixing and the ROOT tests which succeeded. Furthermore I tested my new class and everything I tried worked so I think now it's time to request the pull again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian prop",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1246,performance,Error,Errors,1246,"uest was this messy and I decided to withdraw it and clean everything up before I request it again. And here we are, I ran some additional bugfixing and the ROOT tests which succeeded. Furthermore I tested my new class and everything I tried worked so I think now it's time to request the pull again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1361,performance,error,error,1361,", I ran some additional bugfixing and the ROOT tests which succeeded. Furthermore I tested my new class and everything I tried worked so I think now it's time to request the pull again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1438,performance,Error,Error,1438,"more I tested my new class and everything I tried worked so I think now it's time to request the pull again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1539,performance,error,errors,1539," again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1616,performance,error,error,1616,"basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y err",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1650,performance,error,error,1650," the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic pai",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1696,performance,error,errors,1696,"t of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= N",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1841,performance,error,error,1841," functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1860,performance,error,error,1860," the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1966,performance,error,errors,1966,"Graph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic pai",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2070,performance,error,errors,2070,"acro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimens",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2086,performance,error,error,2086,"ced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2145,performance,perform,performed,2145,"class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsym",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2452,performance,error,error,2452,"istical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. optio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2616,performance,error,error,2616,"or dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2669,performance,error,errors,2669," (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the speci",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2805,performance,error,errors,2805,"OnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2815,performance,error,error,2815,"for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn w",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3024,performance,error,error,3024,"rs::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimensio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3098,performance,error,error,3098,"Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Error",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3394,performance,error,errors,3394,"e to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3638,performance,error,error,3638,"or basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3884,performance,error,error,3884,"e there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3933,performance,error,error,3933," block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3962,performance,error,errors,3962," painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:4013,performance,error,error,4013,"r the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-images.githubusercontent.com/5320187/530",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:4041,performance,error,errors,4041,"case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-images.githubusercontent.com/5320187/53085326-e7ff8480-3502-11e9-894",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:4096,performance,Error,Errors,4096,"rrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-images.githubusercontent.com/5320187/53085326-e7ff8480-3502-11e9-8945-59e025f46cf8.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:4151,performance,error,error,4151,"rrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-images.githubusercontent.com/5320187/53085326-e7ff8480-3502-11e9-8945-59e025f46cf8.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:4566,performance,error,error,4566,"rrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-images.githubusercontent.com/5320187/53085326-e7ff8480-3502-11e9-8945-59e025f46cf8.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:64,safety,Error,Errors,64,"Added class TGraphMultiErrors for graph with multidimensional y-Errors; Hello,. First of all sorry for all the mess I made with these pull requests. This is my first try and I did not really understood how GitHub works therefore my previous pull request was this messy and I decided to withdraw it and clean everything up before I request it again. And here we are, I ran some additional bugfixing and the ROOT tests which succeeded. Furthermore I tested my new class and everything I tried worked so I think now it's time to request the pull again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian prop",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:411,safety,test,tests,411,"Added class TGraphMultiErrors for graph with multidimensional y-Errors; Hello,. First of all sorry for all the mess I made with these pull requests. This is my first try and I did not really understood how GitHub works therefore my previous pull request was this messy and I decided to withdraw it and clean everything up before I request it again. And here we are, I ran some additional bugfixing and the ROOT tests which succeeded. Furthermore I tested my new class and everything I tried worked so I think now it's time to request the pull again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian prop",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:448,safety,test,tested,448,"Added class TGraphMultiErrors for graph with multidimensional y-Errors; Hello,. First of all sorry for all the mess I made with these pull requests. This is my first try and I did not really understood how GitHub works therefore my previous pull request was this messy and I decided to withdraw it and clean everything up before I request it again. And here we are, I ran some additional bugfixing and the ROOT tests which succeeded. Furthermore I tested my new class and everything I tried worked so I think now it's time to request the pull again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian prop",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:725,safety,Error,Errors,725,"Added class TGraphMultiErrors for graph with multidimensional y-Errors; Hello,. First of all sorry for all the mess I made with these pull requests. This is my first try and I did not really understood how GitHub works therefore my previous pull request was this messy and I decided to withdraw it and clean everything up before I request it again. And here we are, I ran some additional bugfixing and the ROOT tests which succeeded. Furthermore I tested my new class and everything I tried worked so I think now it's time to request the pull again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian prop",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1246,safety,Error,Errors,1246,"uest was this messy and I decided to withdraw it and clean everything up before I request it again. And here we are, I ran some additional bugfixing and the ROOT tests which succeeded. Furthermore I tested my new class and everything I tried worked so I think now it's time to request the pull again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1361,safety,error,error,1361,", I ran some additional bugfixing and the ROOT tests which succeeded. Furthermore I tested my new class and everything I tried worked so I think now it's time to request the pull again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1438,safety,Error,Error,1438,"more I tested my new class and everything I tried worked so I think now it's time to request the pull again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1539,safety,error,errors,1539," again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1616,safety,error,error,1616,"basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y err",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1650,safety,error,error,1650," the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic pai",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1696,safety,error,errors,1696,"t of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= N",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1841,safety,error,error,1841," functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1860,safety,error,error,1860," the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1966,safety,error,errors,1966,"Graph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic pai",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2070,safety,error,errors,2070,"acro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimens",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2086,safety,error,error,2086,"ced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2452,safety,error,error,2452,"istical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. optio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2616,safety,error,error,2616,"or dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2669,safety,error,errors,2669," (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the speci",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2805,safety,error,errors,2805,"OnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2815,safety,error,error,2815,"for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn w",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3024,safety,error,error,3024,"rs::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimensio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3098,safety,error,error,3098,"Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Error",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3394,safety,error,errors,3394,"e to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3638,safety,error,error,3638,"or basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3884,safety,error,error,3884,"e there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3933,safety,error,error,3933," block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3962,safety,error,errors,3962," painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:4013,safety,error,error,4013,"r the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-images.githubusercontent.com/5320187/530",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:4041,safety,error,errors,4041,"case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-images.githubusercontent.com/5320187/53085326-e7ff8480-3502-11e9-894",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:4096,safety,Error,Errors,4096,"rrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-images.githubusercontent.com/5320187/53085326-e7ff8480-3502-11e9-8945-59e025f46cf8.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:4151,safety,error,error,4151,"rrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-images.githubusercontent.com/5320187/53085326-e7ff8480-3502-11e9-8945-59e025f46cf8.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:4566,safety,error,error,4566,"rrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-images.githubusercontent.com/5320187/53085326-e7ff8480-3502-11e9-8945-59e025f46cf8.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:411,testability,test,tests,411,"Added class TGraphMultiErrors for graph with multidimensional y-Errors; Hello,. First of all sorry for all the mess I made with these pull requests. This is my first try and I did not really understood how GitHub works therefore my previous pull request was this messy and I decided to withdraw it and clean everything up before I request it again. And here we are, I ran some additional bugfixing and the ROOT tests which succeeded. Furthermore I tested my new class and everything I tried worked so I think now it's time to request the pull again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian prop",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:448,testability,test,tested,448,"Added class TGraphMultiErrors for graph with multidimensional y-Errors; Hello,. First of all sorry for all the mess I made with these pull requests. This is my first try and I did not really understood how GitHub works therefore my previous pull request was this messy and I decided to withdraw it and clean everything up before I request it again. And here we are, I ran some additional bugfixing and the ROOT tests which succeeded. Furthermore I tested my new class and everything I tried worked so I think now it's time to request the pull again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian prop",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:64,usability,Error,Errors,64,"Added class TGraphMultiErrors for graph with multidimensional y-Errors; Hello,. First of all sorry for all the mess I made with these pull requests. This is my first try and I did not really understood how GitHub works therefore my previous pull request was this messy and I decided to withdraw it and clean everything up before I request it again. And here we are, I ran some additional bugfixing and the ROOT tests which succeeded. Furthermore I tested my new class and everything I tried worked so I think now it's time to request the pull again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian prop",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:725,usability,Error,Errors,725,"Added class TGraphMultiErrors for graph with multidimensional y-Errors; Hello,. First of all sorry for all the mess I made with these pull requests. This is my first try and I did not really understood how GitHub works therefore my previous pull request was this messy and I decided to withdraw it and clean everything up before I request it again. And here we are, I ran some additional bugfixing and the ROOT tests which succeeded. Furthermore I tested my new class and everything I tried worked so I think now it's time to request the pull again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian prop",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1246,usability,Error,Errors,1246,"uest was this messy and I decided to withdraw it and clean everything up before I request it again. And here we are, I ran some additional bugfixing and the ROOT tests which succeeded. Furthermore I tested my new class and everything I tried worked so I think now it's time to request the pull again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1361,usability,error,error,1361,", I ran some additional bugfixing and the ROOT tests which succeeded. Furthermore I tested my new class and everything I tried worked so I think now it's time to request the pull again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1438,usability,Error,Error,1438,"more I tested my new class and everything I tried worked so I think now it's time to request the pull again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1539,usability,error,errors,1539," again. **Explanation**. My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1616,usability,error,error,1616,"basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y err",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1650,usability,error,error,1650," the possibility to include an unlimited amount of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic pai",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1696,usability,error,errors,1696,"t of different types of y-Errors. The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= N",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1841,usability,error,error,1841," functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1860,usability,error,error,1860," the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:1966,usability,error,errors,1966,"Graph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic pai",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2070,usability,error,errors,2070,"acro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimens",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2086,usability,error,error,2086,"ced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2145,usability,perform,performed,2145,"class. **Differences to TGraphAsymmErrors**. Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsym",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2452,usability,error,error,2452,"istical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. optio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2491,usability,consist,consist,2491,"atical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have on",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2616,usability,error,error,2616,"or dimension. In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2669,usability,error,errors,2669," (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the speci",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2805,usability,error,errors,2805,"OnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:2815,usability,error,error,2815,"for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn w",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3024,usability,error,error,3024,"rs::kSum for just returning the sum of the errors from all error types. **Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimensio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3098,usability,error,error,3098,"Drawing / Painting**. The painting is being performed by the TGraphPainter class like for any other classes. Therefore I added the function TGraphPainter::PaintGraphMultiErrors and included a corresponding line in the TGraphPainter::PaintHelper function. **Drawing / Painting options**. To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Error",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3394,usability,error,errors,3394,"e to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method separates the options in multiple options for each y error dimension and one for basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3638,usability,error,error,3638,"or basic painting and the x errors. In case there are <= NErrorDimensions blocks given, the first block is used for basic painting and for the first dimension of y errors. Y error dimensions without an individual block are painted with “”. Tn case there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3884,usability,error,error,3884,"e there are NErrorDimensions + 1 given, the first block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3933,usability,error,error,3933," block is used only for basic painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:3962,usability,error,errors,3962," painting. The remaining blocks are distributed over the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:4013,usability,error,error,4013,"r the y error dimensions In case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-images.githubusercontent.com/5320187/530",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:4041,usability,error,errors,4041,"case there are > NErrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-images.githubusercontent.com/5320187/53085326-e7ff8480-3502-11e9-894",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:4096,usability,Error,Errors,4096,"rrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-images.githubusercontent.com/5320187/53085326-e7ff8480-3502-11e9-8945-59e025f46cf8.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:4151,usability,error,error,4151,"rrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-images.githubusercontent.com/5320187/53085326-e7ff8480-3502-11e9-8945-59e025f46cf8.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:4566,usability,error,error,4566,"rrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-images.githubusercontent.com/5320187/53085326-e7ff8480-3502-11e9-8945-59e025f46cf8.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:4858,usability,user,user-images,4858,"rrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-images.githubusercontent.com/5320187/53085326-e7ff8480-3502-11e9-8945-59e025f46cf8.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3452:4971,usability,user,user-images,4971,"rrorDimensions + 1 blocks given an error is returned. All drawing options of TGraphAsymmErrors are implemented. For explanation of the drawing options see TGraphPainter::PaintGraphAsymmErrors. Additionally one can specify x0 or y0 to skip points with x = 0 or y = 0 The Draw option s=%f can be used to multiply the corresponding x errors with %f. This is useful in combination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block. In my example plot the drawing options are “a p s ; ; 5 s=0.5” which means the graph is drawn with Axes, Markers and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with default settings. The second error dimension (systematic errors) is drawn with boxes of half the width of the X-Errors. **Individual Fill and Line Attributes for each error dimension**. This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. All the best,. Simon Spies. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile:. ![example](https://user-images.githubusercontent.com/5320187/53051016-15b0e300-349b-11e9-90d6-af75f21654a0.png). ![example](https://user-images.githubusercontent.com/5320187/53085326-e7ff8480-3502-11e9-8945-59e025f46cf8.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3452
https://github.com/root-project/root/pull/3453:15,deployability,Updat,Update,15,"[DOC][skip ci] Update RDF release notes; Hi, please check I have not forgotten anything :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3453
https://github.com/root-project/root/pull/3453:26,deployability,releas,release,26,"[DOC][skip ci] Update RDF release notes; Hi, please check I have not forgotten anything :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3453
https://github.com/root-project/root/pull/3453:15,safety,Updat,Update,15,"[DOC][skip ci] Update RDF release notes; Hi, please check I have not forgotten anything :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3453
https://github.com/root-project/root/pull/3453:15,security,Updat,Update,15,"[DOC][skip ci] Update RDF release notes; Hi, please check I have not forgotten anything :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3453
https://github.com/root-project/root/pull/3456:20,integrability,interfac,interfaces,20,[cxmodules] Clarify interfaces;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3456
https://github.com/root-project/root/pull/3456:20,interoperability,interfac,interfaces,20,[cxmodules] Clarify interfaces;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3456
https://github.com/root-project/root/pull/3456:20,modifiability,interfac,interfaces,20,[cxmodules] Clarify interfaces;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3456
https://github.com/root-project/root/pull/3457:171,availability,operat,operations,171,"json: differently handle infinite values; JSON standard does not have special coding for infinite values. null is not sufficient, while cannot be used in numeric compare. operations. Therefore use 2e308 and -2e308 as +Infite and -Infinite. values. When parsed in JavaScript such values automatically appears as. Infinite. Partial solution for https://root-forum.cern.ch/t/root-json-and-nan-inf/32754",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3457
https://github.com/root-project/root/pull/3457:286,deployability,automat,automatically,286,"json: differently handle infinite values; JSON standard does not have special coding for infinite values. null is not sufficient, while cannot be used in numeric compare. operations. Therefore use 2e308 and -2e308 as +Infite and -Infinite. values. When parsed in JavaScript such values automatically appears as. Infinite. Partial solution for https://root-forum.cern.ch/t/root-json-and-nan-inf/32754",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3457
https://github.com/root-project/root/pull/3457:47,interoperability,standard,standard,47,"json: differently handle infinite values; JSON standard does not have special coding for infinite values. null is not sufficient, while cannot be used in numeric compare. operations. Therefore use 2e308 and -2e308 as +Infite and -Infinite. values. When parsed in JavaScript such values automatically appears as. Infinite. Partial solution for https://root-forum.cern.ch/t/root-json-and-nan-inf/32754",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3457
https://github.com/root-project/root/pull/3457:56,reliability,doe,does,56,"json: differently handle infinite values; JSON standard does not have special coding for infinite values. null is not sufficient, while cannot be used in numeric compare. operations. Therefore use 2e308 and -2e308 as +Infite and -Infinite. values. When parsed in JavaScript such values automatically appears as. Infinite. Partial solution for https://root-forum.cern.ch/t/root-json-and-nan-inf/32754",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3457
https://github.com/root-project/root/pull/3457:286,testability,automat,automatically,286,"json: differently handle infinite values; JSON standard does not have special coding for infinite values. null is not sufficient, while cannot be used in numeric compare. operations. Therefore use 2e308 and -2e308 as +Infite and -Infinite. values. When parsed in JavaScript such values automatically appears as. Infinite. Partial solution for https://root-forum.cern.ch/t/root-json-and-nan-inf/32754",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3457
https://github.com/root-project/root/pull/3458:178,availability,operat,operations,178,"json: differently handle infinite values [6.16]; JSON standard does not have special coding for infinite values. null is not sufficient, while cannot be used in numeric compare. operations. Therefore use 2e308 and -2e308 as +Infite and -Infinite. values. When parsed in JavaScript such values automatically appears as. Infinite",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3458
https://github.com/root-project/root/pull/3458:293,deployability,automat,automatically,293,"json: differently handle infinite values [6.16]; JSON standard does not have special coding for infinite values. null is not sufficient, while cannot be used in numeric compare. operations. Therefore use 2e308 and -2e308 as +Infite and -Infinite. values. When parsed in JavaScript such values automatically appears as. Infinite",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3458
https://github.com/root-project/root/pull/3458:54,interoperability,standard,standard,54,"json: differently handle infinite values [6.16]; JSON standard does not have special coding for infinite values. null is not sufficient, while cannot be used in numeric compare. operations. Therefore use 2e308 and -2e308 as +Infite and -Infinite. values. When parsed in JavaScript such values automatically appears as. Infinite",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3458
https://github.com/root-project/root/pull/3458:63,reliability,doe,does,63,"json: differently handle infinite values [6.16]; JSON standard does not have special coding for infinite values. null is not sufficient, while cannot be used in numeric compare. operations. Therefore use 2e308 and -2e308 as +Infite and -Infinite. values. When parsed in JavaScript such values automatically appears as. Infinite",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3458
https://github.com/root-project/root/pull/3458:293,testability,automat,automatically,293,"json: differently handle infinite values [6.16]; JSON standard does not have special coding for infinite values. null is not sufficient, while cannot be used in numeric compare. operations. Therefore use 2e308 and -2e308 as +Infite and -Infinite. values. When parsed in JavaScript such values automatically appears as. Infinite",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3458
https://github.com/root-project/root/pull/3460:25,availability,error,errors,25,[Tree/TreeReader] Prompt errors in ill defined cases;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3460
https://github.com/root-project/root/pull/3460:25,performance,error,errors,25,[Tree/TreeReader] Prompt errors in ill defined cases;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3460
https://github.com/root-project/root/pull/3460:25,safety,error,errors,25,[Tree/TreeReader] Prompt errors in ill defined cases;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3460
https://github.com/root-project/root/pull/3460:25,usability,error,errors,25,[Tree/TreeReader] Prompt errors in ill defined cases;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3460
https://github.com/root-project/root/pull/3461:359,availability,operat,operators,359,[Exp PyROOT] Pythonisations for TString and TObjString; This PR makes it possible that `TString` and `TObjString` instances behave more like regular Python strings when used from Python. This is achieved by adding the following properties:. - Getting the length with len(s). - Getting string representations with repr(s) and str(s). - Implementing comparison operators for strings.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3461
https://github.com/root-project/root/pull/3463:881,energy efficiency,reduc,reduced,881,"Added Classes TLeafF16 and TLeafD32 for truncated floating point types; Hello,. I implemented the classes TLeafF16 and TLeafD32 which allow to store floating point values using the truncation methods from TBuffer. As the names imply one is meant for the Float16_t type and the other one for the Double32_t type. The letters to be used in the leaflist are the small letters f and d which sounds reasonable to me since the capital letters F and D are being used for the regular Float_t and Double_t datatypes. Furthermore a range for the datatypes can be specified using the syntax from the TStreamerElement::GetRange() function. To avaid conflicts with the declaration of array branches the range specifier has to be attached to the data type letter instead of the variable name. I tested the implementation locally and it is working very well. The file size is being significantly reduced using the Float16_t or Double32_t implementation instead of the usual ones. I think this is quite useful since even the precision of Float_t sometimes overshoots the requirements and occupies an unnecessarily large amount of memory. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3463
https://github.com/root-project/root/pull/3463:553,interoperability,specif,specified,553,"Added Classes TLeafF16 and TLeafD32 for truncated floating point types; Hello,. I implemented the classes TLeafF16 and TLeafD32 which allow to store floating point values using the truncation methods from TBuffer. As the names imply one is meant for the Float16_t type and the other one for the Double32_t type. The letters to be used in the leaflist are the small letters f and d which sounds reasonable to me since the capital letters F and D are being used for the regular Float_t and Double_t datatypes. Furthermore a range for the datatypes can be specified using the syntax from the TStreamerElement::GetRange() function. To avaid conflicts with the declaration of array branches the range specifier has to be attached to the data type letter instead of the variable name. I tested the implementation locally and it is working very well. The file size is being significantly reduced using the Float16_t or Double32_t implementation instead of the usual ones. I think this is quite useful since even the precision of Float_t sometimes overshoots the requirements and occupies an unnecessarily large amount of memory. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3463
https://github.com/root-project/root/pull/3463:637,interoperability,conflict,conflicts,637,"Added Classes TLeafF16 and TLeafD32 for truncated floating point types; Hello,. I implemented the classes TLeafF16 and TLeafD32 which allow to store floating point values using the truncation methods from TBuffer. As the names imply one is meant for the Float16_t type and the other one for the Double32_t type. The letters to be used in the leaflist are the small letters f and d which sounds reasonable to me since the capital letters F and D are being used for the regular Float_t and Double_t datatypes. Furthermore a range for the datatypes can be specified using the syntax from the TStreamerElement::GetRange() function. To avaid conflicts with the declaration of array branches the range specifier has to be attached to the data type letter instead of the variable name. I tested the implementation locally and it is working very well. The file size is being significantly reduced using the Float16_t or Double32_t implementation instead of the usual ones. I think this is quite useful since even the precision of Float_t sometimes overshoots the requirements and occupies an unnecessarily large amount of memory. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3463
https://github.com/root-project/root/pull/3463:696,interoperability,specif,specifier,696,"Added Classes TLeafF16 and TLeafD32 for truncated floating point types; Hello,. I implemented the classes TLeafF16 and TLeafD32 which allow to store floating point values using the truncation methods from TBuffer. As the names imply one is meant for the Float16_t type and the other one for the Double32_t type. The letters to be used in the leaflist are the small letters f and d which sounds reasonable to me since the capital letters F and D are being used for the regular Float_t and Double_t datatypes. Furthermore a range for the datatypes can be specified using the syntax from the TStreamerElement::GetRange() function. To avaid conflicts with the declaration of array branches the range specifier has to be attached to the data type letter instead of the variable name. I tested the implementation locally and it is working very well. The file size is being significantly reduced using the Float16_t or Double32_t implementation instead of the usual ones. I think this is quite useful since even the precision of Float_t sometimes overshoots the requirements and occupies an unnecessarily large amount of memory. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3463
https://github.com/root-project/root/pull/3463:764,modifiability,variab,variable,764,"Added Classes TLeafF16 and TLeafD32 for truncated floating point types; Hello,. I implemented the classes TLeafF16 and TLeafD32 which allow to store floating point values using the truncation methods from TBuffer. As the names imply one is meant for the Float16_t type and the other one for the Double32_t type. The letters to be used in the leaflist are the small letters f and d which sounds reasonable to me since the capital letters F and D are being used for the regular Float_t and Double_t datatypes. Furthermore a range for the datatypes can be specified using the syntax from the TStreamerElement::GetRange() function. To avaid conflicts with the declaration of array branches the range specifier has to be attached to the data type letter instead of the variable name. I tested the implementation locally and it is working very well. The file size is being significantly reduced using the Float16_t or Double32_t implementation instead of the usual ones. I think this is quite useful since even the precision of Float_t sometimes overshoots the requirements and occupies an unnecessarily large amount of memory. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3463
https://github.com/root-project/root/pull/3463:1114,performance,memor,memory,1114,"Added Classes TLeafF16 and TLeafD32 for truncated floating point types; Hello,. I implemented the classes TLeafF16 and TLeafD32 which allow to store floating point values using the truncation methods from TBuffer. As the names imply one is meant for the Float16_t type and the other one for the Double32_t type. The letters to be used in the leaflist are the small letters f and d which sounds reasonable to me since the capital letters F and D are being used for the regular Float_t and Double_t datatypes. Furthermore a range for the datatypes can be specified using the syntax from the TStreamerElement::GetRange() function. To avaid conflicts with the declaration of array branches the range specifier has to be attached to the data type letter instead of the variable name. I tested the implementation locally and it is working very well. The file size is being significantly reduced using the Float16_t or Double32_t implementation instead of the usual ones. I think this is quite useful since even the precision of Float_t sometimes overshoots the requirements and occupies an unnecessarily large amount of memory. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3463
https://github.com/root-project/root/pull/3463:781,safety,test,tested,781,"Added Classes TLeafF16 and TLeafD32 for truncated floating point types; Hello,. I implemented the classes TLeafF16 and TLeafD32 which allow to store floating point values using the truncation methods from TBuffer. As the names imply one is meant for the Float16_t type and the other one for the Double32_t type. The letters to be used in the leaflist are the small letters f and d which sounds reasonable to me since the capital letters F and D are being used for the regular Float_t and Double_t datatypes. Furthermore a range for the datatypes can be specified using the syntax from the TStreamerElement::GetRange() function. To avaid conflicts with the declaration of array branches the range specifier has to be attached to the data type letter instead of the variable name. I tested the implementation locally and it is working very well. The file size is being significantly reduced using the Float16_t or Double32_t implementation instead of the usual ones. I think this is quite useful since even the precision of Float_t sometimes overshoots the requirements and occupies an unnecessarily large amount of memory. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3463
https://github.com/root-project/root/pull/3463:867,security,sign,significantly,867,"Added Classes TLeafF16 and TLeafD32 for truncated floating point types; Hello,. I implemented the classes TLeafF16 and TLeafD32 which allow to store floating point values using the truncation methods from TBuffer. As the names imply one is meant for the Float16_t type and the other one for the Double32_t type. The letters to be used in the leaflist are the small letters f and d which sounds reasonable to me since the capital letters F and D are being used for the regular Float_t and Double_t datatypes. Furthermore a range for the datatypes can be specified using the syntax from the TStreamerElement::GetRange() function. To avaid conflicts with the declaration of array branches the range specifier has to be attached to the data type letter instead of the variable name. I tested the implementation locally and it is working very well. The file size is being significantly reduced using the Float16_t or Double32_t implementation instead of the usual ones. I think this is quite useful since even the precision of Float_t sometimes overshoots the requirements and occupies an unnecessarily large amount of memory. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3463
https://github.com/root-project/root/pull/3463:781,testability,test,tested,781,"Added Classes TLeafF16 and TLeafD32 for truncated floating point types; Hello,. I implemented the classes TLeafF16 and TLeafD32 which allow to store floating point values using the truncation methods from TBuffer. As the names imply one is meant for the Float16_t type and the other one for the Double32_t type. The letters to be used in the leaflist are the small letters f and d which sounds reasonable to me since the capital letters F and D are being used for the regular Float_t and Double_t datatypes. Furthermore a range for the datatypes can be specified using the syntax from the TStreamerElement::GetRange() function. To avaid conflicts with the declaration of array branches the range specifier has to be attached to the data type letter instead of the variable name. I tested the implementation locally and it is working very well. The file size is being significantly reduced using the Float16_t or Double32_t implementation instead of the usual ones. I think this is quite useful since even the precision of Float_t sometimes overshoots the requirements and occupies an unnecessarily large amount of memory. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3463
https://github.com/root-project/root/pull/3463:1114,usability,memor,memory,1114,"Added Classes TLeafF16 and TLeafD32 for truncated floating point types; Hello,. I implemented the classes TLeafF16 and TLeafD32 which allow to store floating point values using the truncation methods from TBuffer. As the names imply one is meant for the Float16_t type and the other one for the Double32_t type. The letters to be used in the leaflist are the small letters f and d which sounds reasonable to me since the capital letters F and D are being used for the regular Float_t and Double_t datatypes. Furthermore a range for the datatypes can be specified using the syntax from the TStreamerElement::GetRange() function. To avaid conflicts with the declaration of array branches the range specifier has to be attached to the data type letter instead of the variable name. I tested the implementation locally and it is working very well. The file size is being significantly reduced using the Float16_t or Double32_t implementation instead of the usual ones. I think this is quite useful since even the precision of Float_t sometimes overshoots the requirements and occupies an unnecessarily large amount of memory. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3463
https://github.com/root-project/root/pull/3464:68,modifiability,scal,scalars,68,[DF][ROOT-9783] Allow to fill histos with collections weighted with scalars;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3464
https://github.com/root-project/root/pull/3465:38,modifiability,scal,scalar,38,[DF][ROOT-9783]Backport histo columns scalar weight;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3465
https://github.com/root-project/root/pull/3466:74,deployability,infrastructur,infrastructure,74,REve prototype 0.2.; - initial port of physics-data -> EVE representation infrastructure from Fireworks;. - cleanup of TObject inheritance;. - first steps towards multi client synchronized selection support.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3466
https://github.com/root-project/root/pull/3466:127,modifiability,inherit,inheritance,127,REve prototype 0.2.; - initial port of physics-data -> EVE representation infrastructure from Fireworks;. - cleanup of TObject inheritance;. - first steps towards multi client synchronized selection support.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3466
https://github.com/root-project/root/pull/3466:176,performance,synch,synchronized,176,REve prototype 0.2.; - initial port of physics-data -> EVE representation infrastructure from Fireworks;. - cleanup of TObject inheritance;. - first steps towards multi client synchronized selection support.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3466
https://github.com/root-project/root/pull/3466:5,usability,prototyp,prototype,5,REve prototype 0.2.; - initial port of physics-data -> EVE representation infrastructure from Fireworks;. - cleanup of TObject inheritance;. - first steps towards multi client synchronized selection support.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3466
https://github.com/root-project/root/pull/3466:199,usability,support,support,199,REve prototype 0.2.; - initial port of physics-data -> EVE representation infrastructure from Fireworks;. - cleanup of TObject inheritance;. - first steps towards multi client synchronized selection support.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3466
https://github.com/root-project/root/pull/3467:479,deployability,stack,stack,479,"[VecOps] Preallocate some memory for RVec<T> where T is a ""common"" fundamental type; the goal of this commit is to avoid too many allocations/deallocations in two cases:. 1. sophisticated expressions manipulating RVec<T> instances: churn kicks in due to temporaries. 2. RDataFrame runs with Defines returning RVec<T>s which are saved within custom columns via a copy. For every event, the old value is deallocated and the new one allocated. This change implements a thread local stack of buffers in the RAdoptAllocator. If the allocation is smaller than RAdoptAllocator<T>::fgBuffersSize, before allocating. a fresh region of memory through the stl allocator, a pop from the aforementioned stack is tried. At deallocation time, the memory taken from the stak, is put back in the stack. In some sense, this is an optimisation for short (defined by RAdoptAllocator<T>::fgBuffersSize) RVec<T>s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3467
https://github.com/root-project/root/pull/3467:690,deployability,stack,stack,690,"[VecOps] Preallocate some memory for RVec<T> where T is a ""common"" fundamental type; the goal of this commit is to avoid too many allocations/deallocations in two cases:. 1. sophisticated expressions manipulating RVec<T> instances: churn kicks in due to temporaries. 2. RDataFrame runs with Defines returning RVec<T>s which are saved within custom columns via a copy. For every event, the old value is deallocated and the new one allocated. This change implements a thread local stack of buffers in the RAdoptAllocator. If the allocation is smaller than RAdoptAllocator<T>::fgBuffersSize, before allocating. a fresh region of memory through the stl allocator, a pop from the aforementioned stack is tried. At deallocation time, the memory taken from the stak, is put back in the stack. In some sense, this is an optimisation for short (defined by RAdoptAllocator<T>::fgBuffersSize) RVec<T>s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3467
https://github.com/root-project/root/pull/3467:779,deployability,stack,stack,779,"[VecOps] Preallocate some memory for RVec<T> where T is a ""common"" fundamental type; the goal of this commit is to avoid too many allocations/deallocations in two cases:. 1. sophisticated expressions manipulating RVec<T> instances: churn kicks in due to temporaries. 2. RDataFrame runs with Defines returning RVec<T>s which are saved within custom columns via a copy. For every event, the old value is deallocated and the new one allocated. This change implements a thread local stack of buffers in the RAdoptAllocator. If the allocation is smaller than RAdoptAllocator<T>::fgBuffersSize, before allocating. a fresh region of memory through the stl allocator, a pop from the aforementioned stack is tried. At deallocation time, the memory taken from the stak, is put back in the stack. In some sense, this is an optimisation for short (defined by RAdoptAllocator<T>::fgBuffersSize) RVec<T>s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3467
https://github.com/root-project/root/pull/3467:130,energy efficiency,alloc,allocations,130,"[VecOps] Preallocate some memory for RVec<T> where T is a ""common"" fundamental type; the goal of this commit is to avoid too many allocations/deallocations in two cases:. 1. sophisticated expressions manipulating RVec<T> instances: churn kicks in due to temporaries. 2. RDataFrame runs with Defines returning RVec<T>s which are saved within custom columns via a copy. For every event, the old value is deallocated and the new one allocated. This change implements a thread local stack of buffers in the RAdoptAllocator. If the allocation is smaller than RAdoptAllocator<T>::fgBuffersSize, before allocating. a fresh region of memory through the stl allocator, a pop from the aforementioned stack is tried. At deallocation time, the memory taken from the stak, is put back in the stack. In some sense, this is an optimisation for short (defined by RAdoptAllocator<T>::fgBuffersSize) RVec<T>s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3467
https://github.com/root-project/root/pull/3467:430,energy efficiency,alloc,allocated,430,"[VecOps] Preallocate some memory for RVec<T> where T is a ""common"" fundamental type; the goal of this commit is to avoid too many allocations/deallocations in two cases:. 1. sophisticated expressions manipulating RVec<T> instances: churn kicks in due to temporaries. 2. RDataFrame runs with Defines returning RVec<T>s which are saved within custom columns via a copy. For every event, the old value is deallocated and the new one allocated. This change implements a thread local stack of buffers in the RAdoptAllocator. If the allocation is smaller than RAdoptAllocator<T>::fgBuffersSize, before allocating. a fresh region of memory through the stl allocator, a pop from the aforementioned stack is tried. At deallocation time, the memory taken from the stak, is put back in the stack. In some sense, this is an optimisation for short (defined by RAdoptAllocator<T>::fgBuffersSize) RVec<T>s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3467
https://github.com/root-project/root/pull/3467:527,energy efficiency,alloc,allocation,527,"[VecOps] Preallocate some memory for RVec<T> where T is a ""common"" fundamental type; the goal of this commit is to avoid too many allocations/deallocations in two cases:. 1. sophisticated expressions manipulating RVec<T> instances: churn kicks in due to temporaries. 2. RDataFrame runs with Defines returning RVec<T>s which are saved within custom columns via a copy. For every event, the old value is deallocated and the new one allocated. This change implements a thread local stack of buffers in the RAdoptAllocator. If the allocation is smaller than RAdoptAllocator<T>::fgBuffersSize, before allocating. a fresh region of memory through the stl allocator, a pop from the aforementioned stack is tried. At deallocation time, the memory taken from the stak, is put back in the stack. In some sense, this is an optimisation for short (defined by RAdoptAllocator<T>::fgBuffersSize) RVec<T>s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3467
https://github.com/root-project/root/pull/3467:596,energy efficiency,alloc,allocating,596,"[VecOps] Preallocate some memory for RVec<T> where T is a ""common"" fundamental type; the goal of this commit is to avoid too many allocations/deallocations in two cases:. 1. sophisticated expressions manipulating RVec<T> instances: churn kicks in due to temporaries. 2. RDataFrame runs with Defines returning RVec<T>s which are saved within custom columns via a copy. For every event, the old value is deallocated and the new one allocated. This change implements a thread local stack of buffers in the RAdoptAllocator. If the allocation is smaller than RAdoptAllocator<T>::fgBuffersSize, before allocating. a fresh region of memory through the stl allocator, a pop from the aforementioned stack is tried. At deallocation time, the memory taken from the stak, is put back in the stack. In some sense, this is an optimisation for short (defined by RAdoptAllocator<T>::fgBuffersSize) RVec<T>s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3467
https://github.com/root-project/root/pull/3467:649,energy efficiency,alloc,allocator,649,"[VecOps] Preallocate some memory for RVec<T> where T is a ""common"" fundamental type; the goal of this commit is to avoid too many allocations/deallocations in two cases:. 1. sophisticated expressions manipulating RVec<T> instances: churn kicks in due to temporaries. 2. RDataFrame runs with Defines returning RVec<T>s which are saved within custom columns via a copy. For every event, the old value is deallocated and the new one allocated. This change implements a thread local stack of buffers in the RAdoptAllocator. If the allocation is smaller than RAdoptAllocator<T>::fgBuffersSize, before allocating. a fresh region of memory through the stl allocator, a pop from the aforementioned stack is tried. At deallocation time, the memory taken from the stak, is put back in the stack. In some sense, this is an optimisation for short (defined by RAdoptAllocator<T>::fgBuffersSize) RVec<T>s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3467
https://github.com/root-project/root/pull/3467:812,energy efficiency,optim,optimisation,812,"[VecOps] Preallocate some memory for RVec<T> where T is a ""common"" fundamental type; the goal of this commit is to avoid too many allocations/deallocations in two cases:. 1. sophisticated expressions manipulating RVec<T> instances: churn kicks in due to temporaries. 2. RDataFrame runs with Defines returning RVec<T>s which are saved within custom columns via a copy. For every event, the old value is deallocated and the new one allocated. This change implements a thread local stack of buffers in the RAdoptAllocator. If the allocation is smaller than RAdoptAllocator<T>::fgBuffersSize, before allocating. a fresh region of memory through the stl allocator, a pop from the aforementioned stack is tried. At deallocation time, the memory taken from the stak, is put back in the stack. In some sense, this is an optimisation for short (defined by RAdoptAllocator<T>::fgBuffersSize) RVec<T>s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3467
https://github.com/root-project/root/pull/3467:378,integrability,event,event,378,"[VecOps] Preallocate some memory for RVec<T> where T is a ""common"" fundamental type; the goal of this commit is to avoid too many allocations/deallocations in two cases:. 1. sophisticated expressions manipulating RVec<T> instances: churn kicks in due to temporaries. 2. RDataFrame runs with Defines returning RVec<T>s which are saved within custom columns via a copy. For every event, the old value is deallocated and the new one allocated. This change implements a thread local stack of buffers in the RAdoptAllocator. If the allocation is smaller than RAdoptAllocator<T>::fgBuffersSize, before allocating. a fresh region of memory through the stl allocator, a pop from the aforementioned stack is tried. At deallocation time, the memory taken from the stak, is put back in the stack. In some sense, this is an optimisation for short (defined by RAdoptAllocator<T>::fgBuffersSize) RVec<T>s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3467
https://github.com/root-project/root/pull/3467:488,integrability,buffer,buffers,488,"[VecOps] Preallocate some memory for RVec<T> where T is a ""common"" fundamental type; the goal of this commit is to avoid too many allocations/deallocations in two cases:. 1. sophisticated expressions manipulating RVec<T> instances: churn kicks in due to temporaries. 2. RDataFrame runs with Defines returning RVec<T>s which are saved within custom columns via a copy. For every event, the old value is deallocated and the new one allocated. This change implements a thread local stack of buffers in the RAdoptAllocator. If the allocation is smaller than RAdoptAllocator<T>::fgBuffersSize, before allocating. a fresh region of memory through the stl allocator, a pop from the aforementioned stack is tried. At deallocation time, the memory taken from the stak, is put back in the stack. In some sense, this is an optimisation for short (defined by RAdoptAllocator<T>::fgBuffersSize) RVec<T>s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3467
https://github.com/root-project/root/pull/3467:26,performance,memor,memory,26,"[VecOps] Preallocate some memory for RVec<T> where T is a ""common"" fundamental type; the goal of this commit is to avoid too many allocations/deallocations in two cases:. 1. sophisticated expressions manipulating RVec<T> instances: churn kicks in due to temporaries. 2. RDataFrame runs with Defines returning RVec<T>s which are saved within custom columns via a copy. For every event, the old value is deallocated and the new one allocated. This change implements a thread local stack of buffers in the RAdoptAllocator. If the allocation is smaller than RAdoptAllocator<T>::fgBuffersSize, before allocating. a fresh region of memory through the stl allocator, a pop from the aforementioned stack is tried. At deallocation time, the memory taken from the stak, is put back in the stack. In some sense, this is an optimisation for short (defined by RAdoptAllocator<T>::fgBuffersSize) RVec<T>s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3467
https://github.com/root-project/root/pull/3467:626,performance,memor,memory,626,"[VecOps] Preallocate some memory for RVec<T> where T is a ""common"" fundamental type; the goal of this commit is to avoid too many allocations/deallocations in two cases:. 1. sophisticated expressions manipulating RVec<T> instances: churn kicks in due to temporaries. 2. RDataFrame runs with Defines returning RVec<T>s which are saved within custom columns via a copy. For every event, the old value is deallocated and the new one allocated. This change implements a thread local stack of buffers in the RAdoptAllocator. If the allocation is smaller than RAdoptAllocator<T>::fgBuffersSize, before allocating. a fresh region of memory through the stl allocator, a pop from the aforementioned stack is tried. At deallocation time, the memory taken from the stak, is put back in the stack. In some sense, this is an optimisation for short (defined by RAdoptAllocator<T>::fgBuffersSize) RVec<T>s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3467
https://github.com/root-project/root/pull/3467:722,performance,time,time,722,"[VecOps] Preallocate some memory for RVec<T> where T is a ""common"" fundamental type; the goal of this commit is to avoid too many allocations/deallocations in two cases:. 1. sophisticated expressions manipulating RVec<T> instances: churn kicks in due to temporaries. 2. RDataFrame runs with Defines returning RVec<T>s which are saved within custom columns via a copy. For every event, the old value is deallocated and the new one allocated. This change implements a thread local stack of buffers in the RAdoptAllocator. If the allocation is smaller than RAdoptAllocator<T>::fgBuffersSize, before allocating. a fresh region of memory through the stl allocator, a pop from the aforementioned stack is tried. At deallocation time, the memory taken from the stak, is put back in the stack. In some sense, this is an optimisation for short (defined by RAdoptAllocator<T>::fgBuffersSize) RVec<T>s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3467
https://github.com/root-project/root/pull/3467:732,performance,memor,memory,732,"[VecOps] Preallocate some memory for RVec<T> where T is a ""common"" fundamental type; the goal of this commit is to avoid too many allocations/deallocations in two cases:. 1. sophisticated expressions manipulating RVec<T> instances: churn kicks in due to temporaries. 2. RDataFrame runs with Defines returning RVec<T>s which are saved within custom columns via a copy. For every event, the old value is deallocated and the new one allocated. This change implements a thread local stack of buffers in the RAdoptAllocator. If the allocation is smaller than RAdoptAllocator<T>::fgBuffersSize, before allocating. a fresh region of memory through the stl allocator, a pop from the aforementioned stack is tried. At deallocation time, the memory taken from the stak, is put back in the stack. In some sense, this is an optimisation for short (defined by RAdoptAllocator<T>::fgBuffersSize) RVec<T>s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3467
https://github.com/root-project/root/pull/3467:115,safety,avoid,avoid,115,"[VecOps] Preallocate some memory for RVec<T> where T is a ""common"" fundamental type; the goal of this commit is to avoid too many allocations/deallocations in two cases:. 1. sophisticated expressions manipulating RVec<T> instances: churn kicks in due to temporaries. 2. RDataFrame runs with Defines returning RVec<T>s which are saved within custom columns via a copy. For every event, the old value is deallocated and the new one allocated. This change implements a thread local stack of buffers in the RAdoptAllocator. If the allocation is smaller than RAdoptAllocator<T>::fgBuffersSize, before allocating. a fresh region of memory through the stl allocator, a pop from the aforementioned stack is tried. At deallocation time, the memory taken from the stak, is put back in the stack. In some sense, this is an optimisation for short (defined by RAdoptAllocator<T>::fgBuffersSize) RVec<T>s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3467
https://github.com/root-project/root/pull/3467:26,usability,memor,memory,26,"[VecOps] Preallocate some memory for RVec<T> where T is a ""common"" fundamental type; the goal of this commit is to avoid too many allocations/deallocations in two cases:. 1. sophisticated expressions manipulating RVec<T> instances: churn kicks in due to temporaries. 2. RDataFrame runs with Defines returning RVec<T>s which are saved within custom columns via a copy. For every event, the old value is deallocated and the new one allocated. This change implements a thread local stack of buffers in the RAdoptAllocator. If the allocation is smaller than RAdoptAllocator<T>::fgBuffersSize, before allocating. a fresh region of memory through the stl allocator, a pop from the aforementioned stack is tried. At deallocation time, the memory taken from the stak, is put back in the stack. In some sense, this is an optimisation for short (defined by RAdoptAllocator<T>::fgBuffersSize) RVec<T>s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3467
https://github.com/root-project/root/pull/3467:341,usability,custom,custom,341,"[VecOps] Preallocate some memory for RVec<T> where T is a ""common"" fundamental type; the goal of this commit is to avoid too many allocations/deallocations in two cases:. 1. sophisticated expressions manipulating RVec<T> instances: churn kicks in due to temporaries. 2. RDataFrame runs with Defines returning RVec<T>s which are saved within custom columns via a copy. For every event, the old value is deallocated and the new one allocated. This change implements a thread local stack of buffers in the RAdoptAllocator. If the allocation is smaller than RAdoptAllocator<T>::fgBuffersSize, before allocating. a fresh region of memory through the stl allocator, a pop from the aforementioned stack is tried. At deallocation time, the memory taken from the stak, is put back in the stack. In some sense, this is an optimisation for short (defined by RAdoptAllocator<T>::fgBuffersSize) RVec<T>s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3467
https://github.com/root-project/root/pull/3467:626,usability,memor,memory,626,"[VecOps] Preallocate some memory for RVec<T> where T is a ""common"" fundamental type; the goal of this commit is to avoid too many allocations/deallocations in two cases:. 1. sophisticated expressions manipulating RVec<T> instances: churn kicks in due to temporaries. 2. RDataFrame runs with Defines returning RVec<T>s which are saved within custom columns via a copy. For every event, the old value is deallocated and the new one allocated. This change implements a thread local stack of buffers in the RAdoptAllocator. If the allocation is smaller than RAdoptAllocator<T>::fgBuffersSize, before allocating. a fresh region of memory through the stl allocator, a pop from the aforementioned stack is tried. At deallocation time, the memory taken from the stak, is put back in the stack. In some sense, this is an optimisation for short (defined by RAdoptAllocator<T>::fgBuffersSize) RVec<T>s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3467
https://github.com/root-project/root/pull/3467:732,usability,memor,memory,732,"[VecOps] Preallocate some memory for RVec<T> where T is a ""common"" fundamental type; the goal of this commit is to avoid too many allocations/deallocations in two cases:. 1. sophisticated expressions manipulating RVec<T> instances: churn kicks in due to temporaries. 2. RDataFrame runs with Defines returning RVec<T>s which are saved within custom columns via a copy. For every event, the old value is deallocated and the new one allocated. This change implements a thread local stack of buffers in the RAdoptAllocator. If the allocation is smaller than RAdoptAllocator<T>::fgBuffersSize, before allocating. a fresh region of memory through the stl allocator, a pop from the aforementioned stack is tried. At deallocation time, the memory taken from the stak, is put back in the stack. In some sense, this is an optimisation for short (defined by RAdoptAllocator<T>::fgBuffersSize) RVec<T>s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3467
https://github.com/root-project/root/pull/3468:99,deployability,depend,dependency,99,"gpadv7: move RPadPos, RPadExtent, RPadLength into primitives; This is workaround to avoid circular dependency between v7primitives. and v7gpad. Detected by cmake on some platforms",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3468
https://github.com/root-project/root/pull/3468:99,integrability,depend,dependency,99,"gpadv7: move RPadPos, RPadExtent, RPadLength into primitives; This is workaround to avoid circular dependency between v7primitives. and v7gpad. Detected by cmake on some platforms",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3468
https://github.com/root-project/root/pull/3468:170,interoperability,platform,platforms,170,"gpadv7: move RPadPos, RPadExtent, RPadLength into primitives; This is workaround to avoid circular dependency between v7primitives. and v7gpad. Detected by cmake on some platforms",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3468
https://github.com/root-project/root/pull/3468:99,modifiability,depend,dependency,99,"gpadv7: move RPadPos, RPadExtent, RPadLength into primitives; This is workaround to avoid circular dependency between v7primitives. and v7gpad. Detected by cmake on some platforms",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3468
https://github.com/root-project/root/pull/3468:84,safety,avoid,avoid,84,"gpadv7: move RPadPos, RPadExtent, RPadLength into primitives; This is workaround to avoid circular dependency between v7primitives. and v7gpad. Detected by cmake on some platforms",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3468
https://github.com/root-project/root/pull/3468:99,safety,depend,dependency,99,"gpadv7: move RPadPos, RPadExtent, RPadLength into primitives; This is workaround to avoid circular dependency between v7primitives. and v7gpad. Detected by cmake on some platforms",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3468
https://github.com/root-project/root/pull/3468:144,safety,Detect,Detected,144,"gpadv7: move RPadPos, RPadExtent, RPadLength into primitives; This is workaround to avoid circular dependency between v7primitives. and v7gpad. Detected by cmake on some platforms",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3468
https://github.com/root-project/root/pull/3468:144,security,Detect,Detected,144,"gpadv7: move RPadPos, RPadExtent, RPadLength into primitives; This is workaround to avoid circular dependency between v7primitives. and v7gpad. Detected by cmake on some platforms",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3468
https://github.com/root-project/root/pull/3468:99,testability,depend,dependency,99,"gpadv7: move RPadPos, RPadExtent, RPadLength into primitives; This is workaround to avoid circular dependency between v7primitives. and v7gpad. Detected by cmake on some platforms",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3468
https://github.com/root-project/root/pull/3469:17,availability,operat,operator,17,"[Exp PyROOT] Add operator to multiply TH1 by constant; This pythonisation provides a similar functionality as the one of `TH1::Scale`, which multiplies a histogram by a certain constant. However, the syntax proposed here is the one of the `__imul__` operator (`*=`)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3469
https://github.com/root-project/root/pull/3469:250,availability,operat,operator,250,"[Exp PyROOT] Add operator to multiply TH1 by constant; This pythonisation provides a similar functionality as the one of `TH1::Scale`, which multiplies a histogram by a certain constant. However, the syntax proposed here is the one of the `__imul__` operator (`*=`)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3469
https://github.com/root-project/root/pull/3469:127,deployability,Scale,Scale,127,"[Exp PyROOT] Add operator to multiply TH1 by constant; This pythonisation provides a similar functionality as the one of `TH1::Scale`, which multiplies a histogram by a certain constant. However, the syntax proposed here is the one of the `__imul__` operator (`*=`)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3469
https://github.com/root-project/root/pull/3469:127,energy efficiency,Scale,Scale,127,"[Exp PyROOT] Add operator to multiply TH1 by constant; This pythonisation provides a similar functionality as the one of `TH1::Scale`, which multiplies a histogram by a certain constant. However, the syntax proposed here is the one of the `__imul__` operator (`*=`)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3469
https://github.com/root-project/root/pull/3469:127,modifiability,Scal,Scale,127,"[Exp PyROOT] Add operator to multiply TH1 by constant; This pythonisation provides a similar functionality as the one of `TH1::Scale`, which multiplies a histogram by a certain constant. However, the syntax proposed here is the one of the `__imul__` operator (`*=`)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3469
https://github.com/root-project/root/pull/3469:127,performance,Scale,Scale,127,"[Exp PyROOT] Add operator to multiply TH1 by constant; This pythonisation provides a similar functionality as the one of `TH1::Scale`, which multiplies a histogram by a certain constant. However, the syntax proposed here is the one of the `__imul__` operator (`*=`)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3469
https://github.com/root-project/root/pull/3470:76,deployability,depend,dependencies,76,"gpadv7: move several classes from primitives to gpad v7; There are circular dependencies, which are detected on some build platforms",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3470
https://github.com/root-project/root/pull/3470:117,deployability,build,build,117,"gpadv7: move several classes from primitives to gpad v7; There are circular dependencies, which are detected on some build platforms",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3470
https://github.com/root-project/root/pull/3470:76,integrability,depend,dependencies,76,"gpadv7: move several classes from primitives to gpad v7; There are circular dependencies, which are detected on some build platforms",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3470
https://github.com/root-project/root/pull/3470:123,interoperability,platform,platforms,123,"gpadv7: move several classes from primitives to gpad v7; There are circular dependencies, which are detected on some build platforms",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3470
https://github.com/root-project/root/pull/3470:76,modifiability,depend,dependencies,76,"gpadv7: move several classes from primitives to gpad v7; There are circular dependencies, which are detected on some build platforms",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3470
https://github.com/root-project/root/pull/3470:76,safety,depend,dependencies,76,"gpadv7: move several classes from primitives to gpad v7; There are circular dependencies, which are detected on some build platforms",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3470
https://github.com/root-project/root/pull/3470:100,safety,detect,detected,100,"gpadv7: move several classes from primitives to gpad v7; There are circular dependencies, which are detected on some build platforms",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3470
https://github.com/root-project/root/pull/3470:100,security,detect,detected,100,"gpadv7: move several classes from primitives to gpad v7; There are circular dependencies, which are detected on some build platforms",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3470
https://github.com/root-project/root/pull/3470:76,testability,depend,dependencies,76,"gpadv7: move several classes from primitives to gpad v7; There are circular dependencies, which are detected on some build platforms",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3470
https://github.com/root-project/root/pull/3472:45,safety,avoid,avoids,45,Fix for invalid formula expression; This fix avoids a crash when an invalid formula expression is given as input. This ties ROOT-9990,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3472
https://github.com/root-project/root/pull/3472:107,safety,input,input,107,Fix for invalid formula expression; This fix avoids a crash when an invalid formula expression is given as input. This ties ROOT-9990,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3472
https://github.com/root-project/root/pull/3472:107,usability,input,input,107,Fix for invalid formula expression; This fix avoids a crash when an invalid formula expression is given as input. This ties ROOT-9990,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3472
https://github.com/root-project/root/pull/3473:251,deployability,toggl,toggling,251,"eve7: fix compiler warnings, improve geometry viewer; - fix compiler warnings about current eve7 code, remove some ClassDefs. - try to add test directory to eve7. - provide latest jsroot with correspondent changes in GeoPaineter for eve7. - implement toggling of nodes visibility in eve7 geometry viewer",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3473
https://github.com/root-project/root/pull/3473:84,energy efficiency,current,current,84,"eve7: fix compiler warnings, improve geometry viewer; - fix compiler warnings about current eve7 code, remove some ClassDefs. - try to add test directory to eve7. - provide latest jsroot with correspondent changes in GeoPaineter for eve7. - implement toggling of nodes visibility in eve7 geometry viewer",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3473
https://github.com/root-project/root/pull/3473:139,safety,test,test,139,"eve7: fix compiler warnings, improve geometry viewer; - fix compiler warnings about current eve7 code, remove some ClassDefs. - try to add test directory to eve7. - provide latest jsroot with correspondent changes in GeoPaineter for eve7. - implement toggling of nodes visibility in eve7 geometry viewer",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3473
https://github.com/root-project/root/pull/3473:139,testability,test,test,139,"eve7: fix compiler warnings, improve geometry viewer; - fix compiler warnings about current eve7 code, remove some ClassDefs. - try to add test directory to eve7. - provide latest jsroot with correspondent changes in GeoPaineter for eve7. - implement toggling of nodes visibility in eve7 geometry viewer",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3473
https://github.com/root-project/root/pull/3475:138,availability,avail,available,138,[PyROOT exp] Add test for passing Python callables to ROOT.TF; These tests ensure that the functionality of the current PyROOT is as well available in experimental PyROOT. No explicit pythonizations are added since the feature is now provided directly by CPyCppyy.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3475
https://github.com/root-project/root/pull/3475:112,energy efficiency,current,current,112,[PyROOT exp] Add test for passing Python callables to ROOT.TF; These tests ensure that the functionality of the current PyROOT is as well available in experimental PyROOT. No explicit pythonizations are added since the feature is now provided directly by CPyCppyy.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3475
https://github.com/root-project/root/pull/3475:138,reliability,availab,available,138,[PyROOT exp] Add test for passing Python callables to ROOT.TF; These tests ensure that the functionality of the current PyROOT is as well available in experimental PyROOT. No explicit pythonizations are added since the feature is now provided directly by CPyCppyy.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3475
https://github.com/root-project/root/pull/3475:17,safety,test,test,17,[PyROOT exp] Add test for passing Python callables to ROOT.TF; These tests ensure that the functionality of the current PyROOT is as well available in experimental PyROOT. No explicit pythonizations are added since the feature is now provided directly by CPyCppyy.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3475
https://github.com/root-project/root/pull/3475:69,safety,test,tests,69,[PyROOT exp] Add test for passing Python callables to ROOT.TF; These tests ensure that the functionality of the current PyROOT is as well available in experimental PyROOT. No explicit pythonizations are added since the feature is now provided directly by CPyCppyy.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3475
https://github.com/root-project/root/pull/3475:138,safety,avail,available,138,[PyROOT exp] Add test for passing Python callables to ROOT.TF; These tests ensure that the functionality of the current PyROOT is as well available in experimental PyROOT. No explicit pythonizations are added since the feature is now provided directly by CPyCppyy.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3475
https://github.com/root-project/root/pull/3475:138,security,availab,available,138,[PyROOT exp] Add test for passing Python callables to ROOT.TF; These tests ensure that the functionality of the current PyROOT is as well available in experimental PyROOT. No explicit pythonizations are added since the feature is now provided directly by CPyCppyy.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3475
https://github.com/root-project/root/pull/3475:17,testability,test,test,17,[PyROOT exp] Add test for passing Python callables to ROOT.TF; These tests ensure that the functionality of the current PyROOT is as well available in experimental PyROOT. No explicit pythonizations are added since the feature is now provided directly by CPyCppyy.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3475
https://github.com/root-project/root/pull/3475:69,testability,test,tests,69,[PyROOT exp] Add test for passing Python callables to ROOT.TF; These tests ensure that the functionality of the current PyROOT is as well available in experimental PyROOT. No explicit pythonizations are added since the feature is now provided directly by CPyCppyy.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3475
https://github.com/root-project/root/pull/3476:15,deployability,manag,manager,15,Fix web window manager;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3476
https://github.com/root-project/root/pull/3476:15,energy efficiency,manag,manager,15,Fix web window manager;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3476
https://github.com/root-project/root/pull/3476:15,safety,manag,manager,15,Fix web window manager;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3476
https://github.com/root-project/root/pull/3477:164,deployability,contain,containers,164,"Eve7: refactor source code; - remove ClassDef for non-TObject files. - use `override` directive when virtual method is overriden. - use c++11 loops to iterate over containers. - avoid as much as possible usage of `iterator` class, remove them from LinkDef.h. - use `auto` as typename when iterator has to be used. - use `nullptr` instead of 0. - use more class members initializers, shrink default constructors. - more use of `std::string` instead `const char*`. - update copyright and authors blocks, adjust comments decoration",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3477
https://github.com/root-project/root/pull/3477:465,deployability,updat,update,465,"Eve7: refactor source code; - remove ClassDef for non-TObject files. - use `override` directive when virtual method is overriden. - use c++11 loops to iterate over containers. - avoid as much as possible usage of `iterator` class, remove them from LinkDef.h. - use `auto` as typename when iterator has to be used. - use `nullptr` instead of 0. - use more class members initializers, shrink default constructors. - more use of `std::string` instead `const char*`. - update copyright and authors blocks, adjust comments decoration",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3477
https://github.com/root-project/root/pull/3477:6,modifiability,refact,refactor,6,"Eve7: refactor source code; - remove ClassDef for non-TObject files. - use `override` directive when virtual method is overriden. - use c++11 loops to iterate over containers. - avoid as much as possible usage of `iterator` class, remove them from LinkDef.h. - use `auto` as typename when iterator has to be used. - use `nullptr` instead of 0. - use more class members initializers, shrink default constructors. - more use of `std::string` instead `const char*`. - update copyright and authors blocks, adjust comments decoration",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3477
https://github.com/root-project/root/pull/3477:518,modifiability,deco,decoration,518,"Eve7: refactor source code; - remove ClassDef for non-TObject files. - use `override` directive when virtual method is overriden. - use c++11 loops to iterate over containers. - avoid as much as possible usage of `iterator` class, remove them from LinkDef.h. - use `auto` as typename when iterator has to be used. - use `nullptr` instead of 0. - use more class members initializers, shrink default constructors. - more use of `std::string` instead `const char*`. - update copyright and authors blocks, adjust comments decoration",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3477
https://github.com/root-project/root/pull/3477:6,performance,refactor,refactor,6,"Eve7: refactor source code; - remove ClassDef for non-TObject files. - use `override` directive when virtual method is overriden. - use c++11 loops to iterate over containers. - avoid as much as possible usage of `iterator` class, remove them from LinkDef.h. - use `auto` as typename when iterator has to be used. - use `nullptr` instead of 0. - use more class members initializers, shrink default constructors. - more use of `std::string` instead `const char*`. - update copyright and authors blocks, adjust comments decoration",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3477
https://github.com/root-project/root/pull/3477:178,safety,avoid,avoid,178,"Eve7: refactor source code; - remove ClassDef for non-TObject files. - use `override` directive when virtual method is overriden. - use c++11 loops to iterate over containers. - avoid as much as possible usage of `iterator` class, remove them from LinkDef.h. - use `auto` as typename when iterator has to be used. - use `nullptr` instead of 0. - use more class members initializers, shrink default constructors. - more use of `std::string` instead `const char*`. - update copyright and authors blocks, adjust comments decoration",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3477
https://github.com/root-project/root/pull/3477:465,safety,updat,update,465,"Eve7: refactor source code; - remove ClassDef for non-TObject files. - use `override` directive when virtual method is overriden. - use c++11 loops to iterate over containers. - avoid as much as possible usage of `iterator` class, remove them from LinkDef.h. - use `auto` as typename when iterator has to be used. - use `nullptr` instead of 0. - use more class members initializers, shrink default constructors. - more use of `std::string` instead `const char*`. - update copyright and authors blocks, adjust comments decoration",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3477
https://github.com/root-project/root/pull/3477:465,security,updat,update,465,"Eve7: refactor source code; - remove ClassDef for non-TObject files. - use `override` directive when virtual method is overriden. - use c++11 loops to iterate over containers. - avoid as much as possible usage of `iterator` class, remove them from LinkDef.h. - use `auto` as typename when iterator has to be used. - use `nullptr` instead of 0. - use more class members initializers, shrink default constructors. - more use of `std::string` instead `const char*`. - update copyright and authors blocks, adjust comments decoration",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3477
https://github.com/root-project/root/pull/3477:486,security,auth,authors,486,"Eve7: refactor source code; - remove ClassDef for non-TObject files. - use `override` directive when virtual method is overriden. - use c++11 loops to iterate over containers. - avoid as much as possible usage of `iterator` class, remove them from LinkDef.h. - use `auto` as typename when iterator has to be used. - use `nullptr` instead of 0. - use more class members initializers, shrink default constructors. - more use of `std::string` instead `const char*`. - update copyright and authors blocks, adjust comments decoration",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3477
https://github.com/root-project/root/pull/3478:21,deployability,version,version,21,"[RF] Increment class version of RooStats::ModelConfig.; As an aftermath of the fix for ROOT-9777, the class version of ModelConfig. needed to be incremented to silence a warning when reading old versions of. the class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3478
https://github.com/root-project/root/pull/3478:108,deployability,version,version,108,"[RF] Increment class version of RooStats::ModelConfig.; As an aftermath of the fix for ROOT-9777, the class version of ModelConfig. needed to be incremented to silence a warning when reading old versions of. the class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3478
https://github.com/root-project/root/pull/3478:195,deployability,version,versions,195,"[RF] Increment class version of RooStats::ModelConfig.; As an aftermath of the fix for ROOT-9777, the class version of ModelConfig. needed to be incremented to silence a warning when reading old versions of. the class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3478
https://github.com/root-project/root/pull/3478:42,energy efficiency,Model,ModelConfig,42,"[RF] Increment class version of RooStats::ModelConfig.; As an aftermath of the fix for ROOT-9777, the class version of ModelConfig. needed to be incremented to silence a warning when reading old versions of. the class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3478
https://github.com/root-project/root/pull/3478:119,energy efficiency,Model,ModelConfig,119,"[RF] Increment class version of RooStats::ModelConfig.; As an aftermath of the fix for ROOT-9777, the class version of ModelConfig. needed to be incremented to silence a warning when reading old versions of. the class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3478
https://github.com/root-project/root/pull/3478:21,integrability,version,version,21,"[RF] Increment class version of RooStats::ModelConfig.; As an aftermath of the fix for ROOT-9777, the class version of ModelConfig. needed to be incremented to silence a warning when reading old versions of. the class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3478
https://github.com/root-project/root/pull/3478:108,integrability,version,version,108,"[RF] Increment class version of RooStats::ModelConfig.; As an aftermath of the fix for ROOT-9777, the class version of ModelConfig. needed to be incremented to silence a warning when reading old versions of. the class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3478
https://github.com/root-project/root/pull/3478:195,integrability,version,versions,195,"[RF] Increment class version of RooStats::ModelConfig.; As an aftermath of the fix for ROOT-9777, the class version of ModelConfig. needed to be incremented to silence a warning when reading old versions of. the class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3478
https://github.com/root-project/root/pull/3478:21,modifiability,version,version,21,"[RF] Increment class version of RooStats::ModelConfig.; As an aftermath of the fix for ROOT-9777, the class version of ModelConfig. needed to be incremented to silence a warning when reading old versions of. the class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3478
https://github.com/root-project/root/pull/3478:108,modifiability,version,version,108,"[RF] Increment class version of RooStats::ModelConfig.; As an aftermath of the fix for ROOT-9777, the class version of ModelConfig. needed to be incremented to silence a warning when reading old versions of. the class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3478
https://github.com/root-project/root/pull/3478:195,modifiability,version,versions,195,"[RF] Increment class version of RooStats::ModelConfig.; As an aftermath of the fix for ROOT-9777, the class version of ModelConfig. needed to be incremented to silence a warning when reading old versions of. the class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3478
https://github.com/root-project/root/pull/3478:42,security,Model,ModelConfig,42,"[RF] Increment class version of RooStats::ModelConfig.; As an aftermath of the fix for ROOT-9777, the class version of ModelConfig. needed to be incremented to silence a warning when reading old versions of. the class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3478
https://github.com/root-project/root/pull/3478:119,security,Model,ModelConfig,119,"[RF] Increment class version of RooStats::ModelConfig.; As an aftermath of the fix for ROOT-9777, the class version of ModelConfig. needed to be incremented to silence a warning when reading old versions of. the class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3478
https://github.com/root-project/root/pull/3481:32,energy efficiency,optim,optimisation,32,"[RVec][ROOT-10008] Small vector optimisation, **Not fully working**; missing support of copies and moves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3481
https://github.com/root-project/root/pull/3481:77,usability,support,support,77,"[RVec][ROOT-10008] Small vector optimisation, **Not fully working**; missing support of copies and moves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3481
https://github.com/root-project/root/pull/3483:11,interoperability,format,formatting,11,"eve7: code formatting, c++11 loops;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3483
https://github.com/root-project/root/pull/3484:66,integrability,filter,filtering,66,Add possibility to set collection in the table views; …collection filtering and event loops.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3484
https://github.com/root-project/root/pull/3484:80,integrability,event,event,80,Add possibility to set collection in the table views; …collection filtering and event loops.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3484
https://github.com/root-project/root/pull/3485:52,performance,I/O,I/O,52,Set offset of the used-for-write element in case of I/O rule on 'curr…; …ent' StreamerInfo. This fixes ROOT-10016,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3485
https://github.com/root-project/root/pull/3486:14,modifiability,variab,variables,14,Remove unused variables from RootNewMacros.cmake;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3486
https://github.com/root-project/root/pull/3487:12,interoperability,format,formatting,12,Fix pointer formatting by using `std::stringstream`;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3487
https://github.com/root-project/root/pull/3488:149,deployability,version,version,149,"[No CI][PyROOT exp] Add feature to invoke Python callables from C++; Alright, I've put in the comments from @etejedor (thanks!). Now we've a refined version regarding the user interface:. ```python. @ROOT.DeclareCppCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.CppCallable.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << CppCallable::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""CppCallable::f(x)""). ```. You can set an optional name. ```python. @ROOT.DeclareCppCallable([""float""], ""float"", name=""g""). def f(x). return 2.0 * x. ROOT.CppCallable.g(21.0) # Returns 42. ```. By default, we try numba first and then fall back to the generic implementation. You can force only numba using `numba_only=True` as optional argument. ```python. @ROOT.DeclareCppCallable([""float""], ""float"", numba_only=True). def f(x). return 2.0 * x. ```. In addition, you can set a `verbose` flag to let PyROOT tell you if the decorator falls back to the generic implementation. ```python. @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). def f(x). return ROOT.std.string(str(x)). ROOT.CppCallable.f(x). # 1) Throws Python warning:. # /home/stefan/foo.py:5: RuntimeWarning: Failed to compile Python callable using numba. Fall back to generic implementation. # @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). # 2) Falls back to generic impl and prints ""42"" (as string). ```. **DEPRECATED:**. I've cleaned up and improved the feature. Here's the basic workflow now:. ```python. @ROOT.DeclareCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementati",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:1294,deployability,Fail,Failed,1294,"CppCallable.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << CppCallable::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""CppCallable::f(x)""). ```. You can set an optional name. ```python. @ROOT.DeclareCppCallable([""float""], ""float"", name=""g""). def f(x). return 2.0 * x. ROOT.CppCallable.g(21.0) # Returns 42. ```. By default, we try numba first and then fall back to the generic implementation. You can force only numba using `numba_only=True` as optional argument. ```python. @ROOT.DeclareCppCallable([""float""], ""float"", numba_only=True). def f(x). return 2.0 * x. ```. In addition, you can set a `verbose` flag to let PyROOT tell you if the decorator falls back to the generic implementation. ```python. @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). def f(x). return ROOT.std.string(str(x)). ROOT.CppCallable.f(x). # 1) Throws Python warning:. # /home/stefan/foo.py:5: RuntimeWarning: Failed to compile Python callable using numba. Fall back to generic implementation. # @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). # 2) Falls back to generic impl and prints ""42"" (as string). ```. **DEPRECATED:**. I've cleaned up and improved the feature. Here's the basic workflow now:. ```python. @ROOT.DeclareCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementation. It tries to compile the thingy with numba (falls through silently) and otherwise tries the generic implementation (fails noisily). However, you can force using the generic implementation or numba by using the decorators `DeclareGenericCallable` and `DeclareNumbaCallable`. The interface is exa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:2119,deployability,fail,fails,2119,"([""float""], ""string"", verbose=True). def f(x). return ROOT.std.string(str(x)). ROOT.CppCallable.f(x). # 1) Throws Python warning:. # /home/stefan/foo.py:5: RuntimeWarning: Failed to compile Python callable using numba. Fall back to generic implementation. # @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). # 2) Falls back to generic impl and prints ""42"" (as string). ```. **DEPRECATED:**. I've cleaned up and improved the feature. Here's the basic workflow now:. ```python. @ROOT.DeclareCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementation. It tries to compile the thingy with numba (falls through silently) and otherwise tries the generic implementation (fails noisily). However, you can force using the generic implementation or numba by using the decorators `DeclareGenericCallable` and `DeclareNumbaCallable`. The interface is exactly the same than for the general `DeclareCallable` decorator. In addition, you can now give the wrapped function a custom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:2642,deployability,build,builds,2642,"oat""). def f(x). return 2.0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementation. It tries to compile the thingy with numba (falls through silently) and otherwise tries the generic implementation (fails noisily). However, you can force using the generic implementation or numba by using the decorators `DeclareGenericCallable` and `DeclareNumbaCallable`. The interface is exactly the same than for the general `DeclareCallable` decorator. In addition, you can now give the wrapped function a custom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""). def func(x):. return numpy.power(x, 2). df = ROOT.RDataFrame(4).Define(""x"", ""rdfentry_"").Define(""y"", ""PyROOT::func(x)""). npy = df.AsNumpy(). print(npy[""x""]) # Prints [0, 1, 2, 3]. print(npy[""y""]) # Prints [0.0, 1.0, 4.0, 9.0]. ```. Finally, the approach is fully compatible with any custom C++ types you may have. ```python. import ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:3336,energy efficiency,power,power,3336,"eCallable` decorator. In addition, you can now give the wrapped function a custom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""). def func(x):. return numpy.power(x, 2). df = ROOT.RDataFrame(4).Define(""x"", ""rdfentry_"").Define(""y"", ""PyROOT::func(x)""). npy = df.AsNumpy(). print(npy[""x""]) # Prints [0, 1, 2, 3]. print(npy[""y""]) # Prints [0.0, 1.0, 4.0, 9.0]. ```. Finally, the approach is fully compatible with any custom C++ types you may have. ```python. import ROOT. ROOT.gInterpreter.Declare("""""". struct Foo {. static const int foo = 42;. };. """"""). @ROOT.DeclareCppCallable([""Foo""], """"). def func(x):. print(x.foo). ROOT.gInterpreter.ProcessLine(""Foo x; PyROOT::func(x);"") # Prints 42. ```. There are still some things to check before merging:. - [ ] Double check reference counting. - [ ] C++ wrapper takes (lvalue) references, what happens with rvalues? What is the universal thingy? - [ ] We put the C++ callable in the `PyROOT::` namespace. This is fine? It can be everything, even the global namespace. What is a sane solution here? - [ ] How many copies we are doing finally? What is the performance? - [ ] What happens in MT scenarios? Put in a test c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:149,integrability,version,version,149,"[No CI][PyROOT exp] Add feature to invoke Python callables from C++; Alright, I've put in the comments from @etejedor (thanks!). Now we've a refined version regarding the user interface:. ```python. @ROOT.DeclareCppCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.CppCallable.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << CppCallable::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""CppCallable::f(x)""). ```. You can set an optional name. ```python. @ROOT.DeclareCppCallable([""float""], ""float"", name=""g""). def f(x). return 2.0 * x. ROOT.CppCallable.g(21.0) # Returns 42. ```. By default, we try numba first and then fall back to the generic implementation. You can force only numba using `numba_only=True` as optional argument. ```python. @ROOT.DeclareCppCallable([""float""], ""float"", numba_only=True). def f(x). return 2.0 * x. ```. In addition, you can set a `verbose` flag to let PyROOT tell you if the decorator falls back to the generic implementation. ```python. @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). def f(x). return ROOT.std.string(str(x)). ROOT.CppCallable.f(x). # 1) Throws Python warning:. # /home/stefan/foo.py:5: RuntimeWarning: Failed to compile Python callable using numba. Fall back to generic implementation. # @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). # 2) Falls back to generic impl and prints ""42"" (as string). ```. **DEPRECATED:**. I've cleaned up and improved the feature. Here's the basic workflow now:. ```python. @ROOT.DeclareCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementati",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:176,integrability,interfac,interface,176,"[No CI][PyROOT exp] Add feature to invoke Python callables from C++; Alright, I've put in the comments from @etejedor (thanks!). Now we've a refined version regarding the user interface:. ```python. @ROOT.DeclareCppCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.CppCallable.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << CppCallable::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""CppCallable::f(x)""). ```. You can set an optional name. ```python. @ROOT.DeclareCppCallable([""float""], ""float"", name=""g""). def f(x). return 2.0 * x. ROOT.CppCallable.g(21.0) # Returns 42. ```. By default, we try numba first and then fall back to the generic implementation. You can force only numba using `numba_only=True` as optional argument. ```python. @ROOT.DeclareCppCallable([""float""], ""float"", numba_only=True). def f(x). return 2.0 * x. ```. In addition, you can set a `verbose` flag to let PyROOT tell you if the decorator falls back to the generic implementation. ```python. @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). def f(x). return ROOT.std.string(str(x)). ROOT.CppCallable.f(x). # 1) Throws Python warning:. # /home/stefan/foo.py:5: RuntimeWarning: Failed to compile Python callable using numba. Fall back to generic implementation. # @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). # 2) Falls back to generic impl and prints ""42"" (as string). ```. **DEPRECATED:**. I've cleaned up and improved the feature. Here's the basic workflow now:. ```python. @ROOT.DeclareCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementati",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:417,integrability,Inject,Inject,417,"[No CI][PyROOT exp] Add feature to invoke Python callables from C++; Alright, I've put in the comments from @etejedor (thanks!). Now we've a refined version regarding the user interface:. ```python. @ROOT.DeclareCppCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.CppCallable.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << CppCallable::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""CppCallable::f(x)""). ```. You can set an optional name. ```python. @ROOT.DeclareCppCallable([""float""], ""float"", name=""g""). def f(x). return 2.0 * x. ROOT.CppCallable.g(21.0) # Returns 42. ```. By default, we try numba first and then fall back to the generic implementation. You can force only numba using `numba_only=True` as optional argument. ```python. @ROOT.DeclareCppCallable([""float""], ""float"", numba_only=True). def f(x). return 2.0 * x. ```. In addition, you can set a `verbose` flag to let PyROOT tell you if the decorator falls back to the generic implementation. ```python. @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). def f(x). return ROOT.std.string(str(x)). ROOT.CppCallable.f(x). # 1) Throws Python warning:. # /home/stefan/foo.py:5: RuntimeWarning: Failed to compile Python callable using numba. Fall back to generic implementation. # @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). # 2) Falls back to generic impl and prints ""42"" (as string). ```. **DEPRECATED:**. I've cleaned up and improved the feature. Here's the basic workflow now:. ```python. @ROOT.DeclareCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementati",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:1810,integrability,Inject,Inject,1810,"sing `numba_only=True` as optional argument. ```python. @ROOT.DeclareCppCallable([""float""], ""float"", numba_only=True). def f(x). return 2.0 * x. ```. In addition, you can set a `verbose` flag to let PyROOT tell you if the decorator falls back to the generic implementation. ```python. @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). def f(x). return ROOT.std.string(str(x)). ROOT.CppCallable.f(x). # 1) Throws Python warning:. # /home/stefan/foo.py:5: RuntimeWarning: Failed to compile Python callable using numba. Fall back to generic implementation. # @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). # 2) Falls back to generic impl and prints ""42"" (as string). ```. **DEPRECATED:**. I've cleaned up and improved the feature. Here's the basic workflow now:. ```python. @ROOT.DeclareCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementation. It tries to compile the thingy with numba (falls through silently) and otherwise tries the generic implementation (fails noisily). However, you can force using the generic implementation or numba by using the decorators `DeclareGenericCallable` and `DeclareNumbaCallable`. The interface is exactly the same than for the general `DeclareCallable` decorator. In addition, you can now give the wrapped function a custom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Becau",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:2281,integrability,interfac,interface,2281,"arning: Failed to compile Python callable using numba. Fall back to generic implementation. # @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). # 2) Falls back to generic impl and prints ""42"" (as string). ```. **DEPRECATED:**. I've cleaned up and improved the feature. Here's the basic workflow now:. ```python. @ROOT.DeclareCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementation. It tries to compile the thingy with numba (falls through silently) and otherwise tries the generic implementation (fails noisily). However, you can force using the generic implementation or numba by using the decorators `DeclareGenericCallable` and `DeclareNumbaCallable`. The interface is exactly the same than for the general `DeclareCallable` decorator. In addition, you can now give the wrapped function a custom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""uns",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:2395,integrability,wrap,wrapped,2395,"lable([""float""], ""string"", verbose=True). # 2) Falls back to generic impl and prints ""42"" (as string). ```. **DEPRECATED:**. I've cleaned up and improved the feature. Here's the basic workflow now:. ```python. @ROOT.DeclareCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementation. It tries to compile the thingy with numba (falls through silently) and otherwise tries the generic implementation (fails noisily). However, you can force using the generic implementation or numba by using the decorators `DeclareGenericCallable` and `DeclareNumbaCallable`. The interface is exactly the same than for the general `DeclareCallable` decorator. In addition, you can now give the wrapped function a custom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""). def func(x):. return numpy.power(x, 2). df = ROOT.RDataFrame(4).Define(""x"", ""rdfentry_"").D",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:2666,integrability,wrap,wrapper,2666,".0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementation. It tries to compile the thingy with numba (falls through silently) and otherwise tries the generic implementation (fails noisily). However, you can force using the generic implementation or numba by using the decorators `DeclareGenericCallable` and `DeclareNumbaCallable`. The interface is exactly the same than for the general `DeclareCallable` decorator. In addition, you can now give the wrapped function a custom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""). def func(x):. return numpy.power(x, 2). df = ROOT.RDataFrame(4).Define(""x"", ""rdfentry_"").Define(""y"", ""PyROOT::func(x)""). npy = df.AsNumpy(). print(npy[""x""]) # Prints [0, 1, 2, 3]. print(npy[""y""]) # Prints [0.0, 1.0, 4.0, 9.0]. ```. Finally, the approach is fully compatible with any custom C++ types you may have. ```python. import ROOT. ROOT.gInterpreter.Decla",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:2708,integrability,pub,publishs,2708,"1) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementation. It tries to compile the thingy with numba (falls through silently) and otherwise tries the generic implementation (fails noisily). However, you can force using the generic implementation or numba by using the decorators `DeclareGenericCallable` and `DeclareNumbaCallable`. The interface is exactly the same than for the general `DeclareCallable` decorator. In addition, you can now give the wrapped function a custom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""). def func(x):. return numpy.power(x, 2). df = ROOT.RDataFrame(4).Define(""x"", ""rdfentry_"").Define(""y"", ""PyROOT::func(x)""). npy = df.AsNumpy(). print(npy[""x""]) # Prints [0, 1, 2, 3]. print(npy[""y""]) # Prints [0.0, 1.0, 4.0, 9.0]. ```. Finally, the approach is fully compatible with any custom C++ types you may have. ```python. import ROOT. ROOT.gInterpreter.Declare("""""". struct Foo {. static const int foo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:3172,integrability,wrap,wrapped,3172,"implementation or numba by using the decorators `DeclareGenericCallable` and `DeclareNumbaCallable`. The interface is exactly the same than for the general `DeclareCallable` decorator. In addition, you can now give the wrapped function a custom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""). def func(x):. return numpy.power(x, 2). df = ROOT.RDataFrame(4).Define(""x"", ""rdfentry_"").Define(""y"", ""PyROOT::func(x)""). npy = df.AsNumpy(). print(npy[""x""]) # Prints [0, 1, 2, 3]. print(npy[""y""]) # Prints [0.0, 1.0, 4.0, 9.0]. ```. Finally, the approach is fully compatible with any custom C++ types you may have. ```python. import ROOT. ROOT.gInterpreter.Declare("""""". struct Foo {. static const int foo = 42;. };. """"""). @ROOT.DeclareCppCallable([""Foo""], """"). def func(x):. print(x.foo). ROOT.gInterpreter.ProcessLine(""Foo x; PyROOT::func(x);"") # Prints 42. ```. There are still some things to check before merging:. - [ ] Double check reference counting. - [ ] C++ wrapper takes (lvalue) references, what happens with rvalues? What is the universal thingy? - [ ] We put the C++ callable in the `PyROOT::` namespace. This is fine? It can be everything, even the globa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:3975,integrability,wrap,wrapper,3975,"ustom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""). def func(x):. return numpy.power(x, 2). df = ROOT.RDataFrame(4).Define(""x"", ""rdfentry_"").Define(""y"", ""PyROOT::func(x)""). npy = df.AsNumpy(). print(npy[""x""]) # Prints [0, 1, 2, 3]. print(npy[""y""]) # Prints [0.0, 1.0, 4.0, 9.0]. ```. Finally, the approach is fully compatible with any custom C++ types you may have. ```python. import ROOT. ROOT.gInterpreter.Declare("""""". struct Foo {. static const int foo = 42;. };. """"""). @ROOT.DeclareCppCallable([""Foo""], """"). def func(x):. print(x.foo). ROOT.gInterpreter.ProcessLine(""Foo x; PyROOT::func(x);"") # Prints 42. ```. There are still some things to check before merging:. - [ ] Double check reference counting. - [ ] C++ wrapper takes (lvalue) references, what happens with rvalues? What is the universal thingy? - [ ] We put the C++ callable in the `PyROOT::` namespace. This is fine? It can be everything, even the global namespace. What is a sane solution here? - [ ] How many copies we are doing finally? What is the performance? - [ ] What happens in MT scenarios? Put in a test case! - [ ] We have to ship the public cppyy interface with the ROOT headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:4370,integrability,pub,public,4370,"ustom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""). def func(x):. return numpy.power(x, 2). df = ROOT.RDataFrame(4).Define(""x"", ""rdfentry_"").Define(""y"", ""PyROOT::func(x)""). npy = df.AsNumpy(). print(npy[""x""]) # Prints [0, 1, 2, 3]. print(npy[""y""]) # Prints [0.0, 1.0, 4.0, 9.0]. ```. Finally, the approach is fully compatible with any custom C++ types you may have. ```python. import ROOT. ROOT.gInterpreter.Declare("""""". struct Foo {. static const int foo = 42;. };. """"""). @ROOT.DeclareCppCallable([""Foo""], """"). def func(x):. print(x.foo). ROOT.gInterpreter.ProcessLine(""Foo x; PyROOT::func(x);"") # Prints 42. ```. There are still some things to check before merging:. - [ ] Double check reference counting. - [ ] C++ wrapper takes (lvalue) references, what happens with rvalues? What is the universal thingy? - [ ] We put the C++ callable in the `PyROOT::` namespace. This is fine? It can be everything, even the global namespace. What is a sane solution here? - [ ] How many copies we are doing finally? What is the performance? - [ ] What happens in MT scenarios? Put in a test case! - [ ] We have to ship the public cppyy interface with the ROOT headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:4383,integrability,interfac,interface,4383,"ustom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""). def func(x):. return numpy.power(x, 2). df = ROOT.RDataFrame(4).Define(""x"", ""rdfentry_"").Define(""y"", ""PyROOT::func(x)""). npy = df.AsNumpy(). print(npy[""x""]) # Prints [0, 1, 2, 3]. print(npy[""y""]) # Prints [0.0, 1.0, 4.0, 9.0]. ```. Finally, the approach is fully compatible with any custom C++ types you may have. ```python. import ROOT. ROOT.gInterpreter.Declare("""""". struct Foo {. static const int foo = 42;. };. """"""). @ROOT.DeclareCppCallable([""Foo""], """"). def func(x):. print(x.foo). ROOT.gInterpreter.ProcessLine(""Foo x; PyROOT::func(x);"") # Prints 42. ```. There are still some things to check before merging:. - [ ] Double check reference counting. - [ ] C++ wrapper takes (lvalue) references, what happens with rvalues? What is the universal thingy? - [ ] We put the C++ callable in the `PyROOT::` namespace. This is fine? It can be everything, even the global namespace. What is a sane solution here? - [ ] How many copies we are doing finally? What is the performance? - [ ] What happens in MT scenarios? Put in a test case! - [ ] We have to ship the public cppyy interface with the ROOT headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:176,interoperability,interfac,interface,176,"[No CI][PyROOT exp] Add feature to invoke Python callables from C++; Alright, I've put in the comments from @etejedor (thanks!). Now we've a refined version regarding the user interface:. ```python. @ROOT.DeclareCppCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.CppCallable.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << CppCallable::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""CppCallable::f(x)""). ```. You can set an optional name. ```python. @ROOT.DeclareCppCallable([""float""], ""float"", name=""g""). def f(x). return 2.0 * x. ROOT.CppCallable.g(21.0) # Returns 42. ```. By default, we try numba first and then fall back to the generic implementation. You can force only numba using `numba_only=True` as optional argument. ```python. @ROOT.DeclareCppCallable([""float""], ""float"", numba_only=True). def f(x). return 2.0 * x. ```. In addition, you can set a `verbose` flag to let PyROOT tell you if the decorator falls back to the generic implementation. ```python. @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). def f(x). return ROOT.std.string(str(x)). ROOT.CppCallable.f(x). # 1) Throws Python warning:. # /home/stefan/foo.py:5: RuntimeWarning: Failed to compile Python callable using numba. Fall back to generic implementation. # @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). # 2) Falls back to generic impl and prints ""42"" (as string). ```. **DEPRECATED:**. I've cleaned up and improved the feature. Here's the basic workflow now:. ```python. @ROOT.DeclareCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementati",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:2281,interoperability,interfac,interface,2281,"arning: Failed to compile Python callable using numba. Fall back to generic implementation. # @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). # 2) Falls back to generic impl and prints ""42"" (as string). ```. **DEPRECATED:**. I've cleaned up and improved the feature. Here's the basic workflow now:. ```python. @ROOT.DeclareCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementation. It tries to compile the thingy with numba (falls through silently) and otherwise tries the generic implementation (fails noisily). However, you can force using the generic implementation or numba by using the decorators `DeclareGenericCallable` and `DeclareNumbaCallable`. The interface is exactly the same than for the general `DeclareCallable` decorator. In addition, you can now give the wrapped function a custom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""uns",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:2666,interoperability,wrapper,wrapper,2666,".0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementation. It tries to compile the thingy with numba (falls through silently) and otherwise tries the generic implementation (fails noisily). However, you can force using the generic implementation or numba by using the decorators `DeclareGenericCallable` and `DeclareNumbaCallable`. The interface is exactly the same than for the general `DeclareCallable` decorator. In addition, you can now give the wrapped function a custom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""). def func(x):. return numpy.power(x, 2). df = ROOT.RDataFrame(4).Define(""x"", ""rdfentry_"").Define(""y"", ""PyROOT::func(x)""). npy = df.AsNumpy(). print(npy[""x""]) # Prints [0, 1, 2, 3]. print(npy[""y""]) # Prints [0.0, 1.0, 4.0, 9.0]. ```. Finally, the approach is fully compatible with any custom C++ types you may have. ```python. import ROOT. ROOT.gInterpreter.Decla",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:3572,interoperability,compatib,compatible,3572,"ustom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""). def func(x):. return numpy.power(x, 2). df = ROOT.RDataFrame(4).Define(""x"", ""rdfentry_"").Define(""y"", ""PyROOT::func(x)""). npy = df.AsNumpy(). print(npy[""x""]) # Prints [0, 1, 2, 3]. print(npy[""y""]) # Prints [0.0, 1.0, 4.0, 9.0]. ```. Finally, the approach is fully compatible with any custom C++ types you may have. ```python. import ROOT. ROOT.gInterpreter.Declare("""""". struct Foo {. static const int foo = 42;. };. """"""). @ROOT.DeclareCppCallable([""Foo""], """"). def func(x):. print(x.foo). ROOT.gInterpreter.ProcessLine(""Foo x; PyROOT::func(x);"") # Prints 42. ```. There are still some things to check before merging:. - [ ] Double check reference counting. - [ ] C++ wrapper takes (lvalue) references, what happens with rvalues? What is the universal thingy? - [ ] We put the C++ callable in the `PyROOT::` namespace. This is fine? It can be everything, even the global namespace. What is a sane solution here? - [ ] How many copies we are doing finally? What is the performance? - [ ] What happens in MT scenarios? Put in a test case! - [ ] We have to ship the public cppyy interface with the ROOT headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:3975,interoperability,wrapper,wrapper,3975,"ustom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""). def func(x):. return numpy.power(x, 2). df = ROOT.RDataFrame(4).Define(""x"", ""rdfentry_"").Define(""y"", ""PyROOT::func(x)""). npy = df.AsNumpy(). print(npy[""x""]) # Prints [0, 1, 2, 3]. print(npy[""y""]) # Prints [0.0, 1.0, 4.0, 9.0]. ```. Finally, the approach is fully compatible with any custom C++ types you may have. ```python. import ROOT. ROOT.gInterpreter.Declare("""""". struct Foo {. static const int foo = 42;. };. """"""). @ROOT.DeclareCppCallable([""Foo""], """"). def func(x):. print(x.foo). ROOT.gInterpreter.ProcessLine(""Foo x; PyROOT::func(x);"") # Prints 42. ```. There are still some things to check before merging:. - [ ] Double check reference counting. - [ ] C++ wrapper takes (lvalue) references, what happens with rvalues? What is the universal thingy? - [ ] We put the C++ callable in the `PyROOT::` namespace. This is fine? It can be everything, even the global namespace. What is a sane solution here? - [ ] How many copies we are doing finally? What is the performance? - [ ] What happens in MT scenarios? Put in a test case! - [ ] We have to ship the public cppyy interface with the ROOT headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:4383,interoperability,interfac,interface,4383,"ustom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""). def func(x):. return numpy.power(x, 2). df = ROOT.RDataFrame(4).Define(""x"", ""rdfentry_"").Define(""y"", ""PyROOT::func(x)""). npy = df.AsNumpy(). print(npy[""x""]) # Prints [0, 1, 2, 3]. print(npy[""y""]) # Prints [0.0, 1.0, 4.0, 9.0]. ```. Finally, the approach is fully compatible with any custom C++ types you may have. ```python. import ROOT. ROOT.gInterpreter.Declare("""""". struct Foo {. static const int foo = 42;. };. """"""). @ROOT.DeclareCppCallable([""Foo""], """"). def func(x):. print(x.foo). ROOT.gInterpreter.ProcessLine(""Foo x; PyROOT::func(x);"") # Prints 42. ```. There are still some things to check before merging:. - [ ] Double check reference counting. - [ ] C++ wrapper takes (lvalue) references, what happens with rvalues? What is the universal thingy? - [ ] We put the C++ callable in the `PyROOT::` namespace. This is fine? It can be everything, even the global namespace. What is a sane solution here? - [ ] How many copies we are doing finally? What is the performance? - [ ] What happens in MT scenarios? Put in a test case! - [ ] We have to ship the public cppyy interface with the ROOT headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:149,modifiability,version,version,149,"[No CI][PyROOT exp] Add feature to invoke Python callables from C++; Alright, I've put in the comments from @etejedor (thanks!). Now we've a refined version regarding the user interface:. ```python. @ROOT.DeclareCppCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.CppCallable.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << CppCallable::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""CppCallable::f(x)""). ```. You can set an optional name. ```python. @ROOT.DeclareCppCallable([""float""], ""float"", name=""g""). def f(x). return 2.0 * x. ROOT.CppCallable.g(21.0) # Returns 42. ```. By default, we try numba first and then fall back to the generic implementation. You can force only numba using `numba_only=True` as optional argument. ```python. @ROOT.DeclareCppCallable([""float""], ""float"", numba_only=True). def f(x). return 2.0 * x. ```. In addition, you can set a `verbose` flag to let PyROOT tell you if the decorator falls back to the generic implementation. ```python. @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). def f(x). return ROOT.std.string(str(x)). ROOT.CppCallable.f(x). # 1) Throws Python warning:. # /home/stefan/foo.py:5: RuntimeWarning: Failed to compile Python callable using numba. Fall back to generic implementation. # @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). # 2) Falls back to generic impl and prints ""42"" (as string). ```. **DEPRECATED:**. I've cleaned up and improved the feature. Here's the basic workflow now:. ```python. @ROOT.DeclareCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementati",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:176,modifiability,interfac,interface,176,"[No CI][PyROOT exp] Add feature to invoke Python callables from C++; Alright, I've put in the comments from @etejedor (thanks!). Now we've a refined version regarding the user interface:. ```python. @ROOT.DeclareCppCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.CppCallable.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << CppCallable::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""CppCallable::f(x)""). ```. You can set an optional name. ```python. @ROOT.DeclareCppCallable([""float""], ""float"", name=""g""). def f(x). return 2.0 * x. ROOT.CppCallable.g(21.0) # Returns 42. ```. By default, we try numba first and then fall back to the generic implementation. You can force only numba using `numba_only=True` as optional argument. ```python. @ROOT.DeclareCppCallable([""float""], ""float"", numba_only=True). def f(x). return 2.0 * x. ```. In addition, you can set a `verbose` flag to let PyROOT tell you if the decorator falls back to the generic implementation. ```python. @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). def f(x). return ROOT.std.string(str(x)). ROOT.CppCallable.f(x). # 1) Throws Python warning:. # /home/stefan/foo.py:5: RuntimeWarning: Failed to compile Python callable using numba. Fall back to generic implementation. # @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). # 2) Falls back to generic impl and prints ""42"" (as string). ```. **DEPRECATED:**. I've cleaned up and improved the feature. Here's the basic workflow now:. ```python. @ROOT.DeclareCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementati",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:1035,modifiability,deco,decorator,1035,"e Python callables from C++; Alright, I've put in the comments from @etejedor (thanks!). Now we've a refined version regarding the user interface:. ```python. @ROOT.DeclareCppCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.CppCallable.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << CppCallable::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""CppCallable::f(x)""). ```. You can set an optional name. ```python. @ROOT.DeclareCppCallable([""float""], ""float"", name=""g""). def f(x). return 2.0 * x. ROOT.CppCallable.g(21.0) # Returns 42. ```. By default, we try numba first and then fall back to the generic implementation. You can force only numba using `numba_only=True` as optional argument. ```python. @ROOT.DeclareCppCallable([""float""], ""float"", numba_only=True). def f(x). return 2.0 * x. ```. In addition, you can set a `verbose` flag to let PyROOT tell you if the decorator falls back to the generic implementation. ```python. @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). def f(x). return ROOT.std.string(str(x)). ROOT.CppCallable.f(x). # 1) Throws Python warning:. # /home/stefan/foo.py:5: RuntimeWarning: Failed to compile Python callable using numba. Fall back to generic implementation. # @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). # 2) Falls back to generic impl and prints ""42"" (as string). ```. **DEPRECATED:**. I've cleaned up and improved the feature. Here's the basic workflow now:. ```python. @ROOT.DeclareCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementation. It tries to compile the thingy with ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:2213,modifiability,deco,decorators,2213,"f(x). # 1) Throws Python warning:. # /home/stefan/foo.py:5: RuntimeWarning: Failed to compile Python callable using numba. Fall back to generic implementation. # @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). # 2) Falls back to generic impl and prints ""42"" (as string). ```. **DEPRECATED:**. I've cleaned up and improved the feature. Here's the basic workflow now:. ```python. @ROOT.DeclareCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementation. It tries to compile the thingy with numba (falls through silently) and otherwise tries the generic implementation (fails noisily). However, you can force using the generic implementation or numba by using the decorators `DeclareGenericCallable` and `DeclareNumbaCallable`. The interface is exactly the same than for the general `DeclareCallable` decorator. In addition, you can now give the wrapped function a custom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:2281,modifiability,interfac,interface,2281,"arning: Failed to compile Python callable using numba. Fall back to generic implementation. # @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). # 2) Falls back to generic impl and prints ""42"" (as string). ```. **DEPRECATED:**. I've cleaned up and improved the feature. Here's the basic workflow now:. ```python. @ROOT.DeclareCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementation. It tries to compile the thingy with numba (falls through silently) and otherwise tries the generic implementation (fails noisily). However, you can force using the generic implementation or numba by using the decorators `DeclareGenericCallable` and `DeclareNumbaCallable`. The interface is exactly the same than for the general `DeclareCallable` decorator. In addition, you can now give the wrapped function a custom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""uns",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:2350,modifiability,deco,decorator,2350,"eneric implementation. # @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). # 2) Falls back to generic impl and prints ""42"" (as string). ```. **DEPRECATED:**. I've cleaned up and improved the feature. Here's the basic workflow now:. ```python. @ROOT.DeclareCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementation. It tries to compile the thingy with numba (falls through silently) and otherwise tries the generic implementation (fails noisily). However, you can force using the generic implementation or numba by using the decorators `DeclareGenericCallable` and `DeclareNumbaCallable`. The interface is exactly the same than for the general `DeclareCallable` decorator. In addition, you can now give the wrapped function a custom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""). def func(x):. return numpy.power(x, 2). df = R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:4313,modifiability,scenario,scenarios,4313,"ustom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""). def func(x):. return numpy.power(x, 2). df = ROOT.RDataFrame(4).Define(""x"", ""rdfentry_"").Define(""y"", ""PyROOT::func(x)""). npy = df.AsNumpy(). print(npy[""x""]) # Prints [0, 1, 2, 3]. print(npy[""y""]) # Prints [0.0, 1.0, 4.0, 9.0]. ```. Finally, the approach is fully compatible with any custom C++ types you may have. ```python. import ROOT. ROOT.gInterpreter.Declare("""""". struct Foo {. static const int foo = 42;. };. """"""). @ROOT.DeclareCppCallable([""Foo""], """"). def func(x):. print(x.foo). ROOT.gInterpreter.ProcessLine(""Foo x; PyROOT::func(x);"") # Prints 42. ```. There are still some things to check before merging:. - [ ] Double check reference counting. - [ ] C++ wrapper takes (lvalue) references, what happens with rvalues? What is the universal thingy? - [ ] We put the C++ callable in the `PyROOT::` namespace. This is fine? It can be everything, even the global namespace. What is a sane solution here? - [ ] How many copies we are doing finally? What is the performance? - [ ] What happens in MT scenarios? Put in a test case! - [ ] We have to ship the public cppyy interface with the ROOT headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:4383,modifiability,interfac,interface,4383,"ustom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""). def func(x):. return numpy.power(x, 2). df = ROOT.RDataFrame(4).Define(""x"", ""rdfentry_"").Define(""y"", ""PyROOT::func(x)""). npy = df.AsNumpy(). print(npy[""x""]) # Prints [0, 1, 2, 3]. print(npy[""y""]) # Prints [0.0, 1.0, 4.0, 9.0]. ```. Finally, the approach is fully compatible with any custom C++ types you may have. ```python. import ROOT. ROOT.gInterpreter.Declare("""""". struct Foo {. static const int foo = 42;. };. """"""). @ROOT.DeclareCppCallable([""Foo""], """"). def func(x):. print(x.foo). ROOT.gInterpreter.ProcessLine(""Foo x; PyROOT::func(x);"") # Prints 42. ```. There are still some things to check before merging:. - [ ] Double check reference counting. - [ ] C++ wrapper takes (lvalue) references, what happens with rvalues? What is the universal thingy? - [ ] We put the C++ callable in the `PyROOT::` namespace. This is fine? It can be everything, even the global namespace. What is a sane solution here? - [ ] How many copies we are doing finally? What is the performance? - [ ] What happens in MT scenarios? Put in a test case! - [ ] We have to ship the public cppyy interface with the ROOT headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:4275,performance,perform,performance,4275,"ustom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""). def func(x):. return numpy.power(x, 2). df = ROOT.RDataFrame(4).Define(""x"", ""rdfentry_"").Define(""y"", ""PyROOT::func(x)""). npy = df.AsNumpy(). print(npy[""x""]) # Prints [0, 1, 2, 3]. print(npy[""y""]) # Prints [0.0, 1.0, 4.0, 9.0]. ```. Finally, the approach is fully compatible with any custom C++ types you may have. ```python. import ROOT. ROOT.gInterpreter.Declare("""""". struct Foo {. static const int foo = 42;. };. """"""). @ROOT.DeclareCppCallable([""Foo""], """"). def func(x):. print(x.foo). ROOT.gInterpreter.ProcessLine(""Foo x; PyROOT::func(x);"") # Prints 42. ```. There are still some things to check before merging:. - [ ] Double check reference counting. - [ ] C++ wrapper takes (lvalue) references, what happens with rvalues? What is the universal thingy? - [ ] We put the C++ callable in the `PyROOT::` namespace. This is fine? It can be everything, even the global namespace. What is a sane solution here? - [ ] How many copies we are doing finally? What is the performance? - [ ] What happens in MT scenarios? Put in a test case! - [ ] We have to ship the public cppyy interface with the ROOT headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:1294,reliability,Fail,Failed,1294,"CppCallable.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << CppCallable::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""CppCallable::f(x)""). ```. You can set an optional name. ```python. @ROOT.DeclareCppCallable([""float""], ""float"", name=""g""). def f(x). return 2.0 * x. ROOT.CppCallable.g(21.0) # Returns 42. ```. By default, we try numba first and then fall back to the generic implementation. You can force only numba using `numba_only=True` as optional argument. ```python. @ROOT.DeclareCppCallable([""float""], ""float"", numba_only=True). def f(x). return 2.0 * x. ```. In addition, you can set a `verbose` flag to let PyROOT tell you if the decorator falls back to the generic implementation. ```python. @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). def f(x). return ROOT.std.string(str(x)). ROOT.CppCallable.f(x). # 1) Throws Python warning:. # /home/stefan/foo.py:5: RuntimeWarning: Failed to compile Python callable using numba. Fall back to generic implementation. # @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). # 2) Falls back to generic impl and prints ""42"" (as string). ```. **DEPRECATED:**. I've cleaned up and improved the feature. Here's the basic workflow now:. ```python. @ROOT.DeclareCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementation. It tries to compile the thingy with numba (falls through silently) and otherwise tries the generic implementation (fails noisily). However, you can force using the generic implementation or numba by using the decorators `DeclareGenericCallable` and `DeclareNumbaCallable`. The interface is exa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:2119,reliability,fail,fails,2119,"([""float""], ""string"", verbose=True). def f(x). return ROOT.std.string(str(x)). ROOT.CppCallable.f(x). # 1) Throws Python warning:. # /home/stefan/foo.py:5: RuntimeWarning: Failed to compile Python callable using numba. Fall back to generic implementation. # @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). # 2) Falls back to generic impl and prints ""42"" (as string). ```. **DEPRECATED:**. I've cleaned up and improved the feature. Here's the basic workflow now:. ```python. @ROOT.DeclareCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementation. It tries to compile the thingy with numba (falls through silently) and otherwise tries the generic implementation (fails noisily). However, you can force using the generic implementation or numba by using the decorators `DeclareGenericCallable` and `DeclareNumbaCallable`. The interface is exactly the same than for the general `DeclareCallable` decorator. In addition, you can now give the wrapped function a custom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:2875,safety,input,inputs,2875,"(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementation. It tries to compile the thingy with numba (falls through silently) and otherwise tries the generic implementation (fails noisily). However, you can force using the generic implementation or numba by using the decorators `DeclareGenericCallable` and `DeclareNumbaCallable`. The interface is exactly the same than for the general `DeclareCallable` decorator. In addition, you can now give the wrapped function a custom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""). def func(x):. return numpy.power(x, 2). df = ROOT.RDataFrame(4).Define(""x"", ""rdfentry_"").Define(""y"", ""PyROOT::func(x)""). npy = df.AsNumpy(). print(npy[""x""]) # Prints [0, 1, 2, 3]. print(npy[""y""]) # Prints [0.0, 1.0, 4.0, 9.0]. ```. Finally, the approach is fully compatible with any custom C++ types you may have. ```python. import ROOT. ROOT.gInterpreter.Declare("""""". struct Foo {. static const int foo = 42;. };. """"""). @ROOT.DeclareCppCallable([""Foo""], """"). def func(x):. print(x.foo). ROOT.gInterpreter.ProcessLine(""Foo x; PyROOT::func(x);"") # Prints 42. ```. There ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:4333,safety,test,test,4333,"ustom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""). def func(x):. return numpy.power(x, 2). df = ROOT.RDataFrame(4).Define(""x"", ""rdfentry_"").Define(""y"", ""PyROOT::func(x)""). npy = df.AsNumpy(). print(npy[""x""]) # Prints [0, 1, 2, 3]. print(npy[""y""]) # Prints [0.0, 1.0, 4.0, 9.0]. ```. Finally, the approach is fully compatible with any custom C++ types you may have. ```python. import ROOT. ROOT.gInterpreter.Declare("""""". struct Foo {. static const int foo = 42;. };. """"""). @ROOT.DeclareCppCallable([""Foo""], """"). def func(x):. print(x.foo). ROOT.gInterpreter.ProcessLine(""Foo x; PyROOT::func(x);"") # Prints 42. ```. There are still some things to check before merging:. - [ ] Double check reference counting. - [ ] C++ wrapper takes (lvalue) references, what happens with rvalues? What is the universal thingy? - [ ] We put the C++ callable in the `PyROOT::` namespace. This is fine? It can be everything, even the global namespace. What is a sane solution here? - [ ] How many copies we are doing finally? What is the performance? - [ ] What happens in MT scenarios? Put in a test case! - [ ] We have to ship the public cppyy interface with the ROOT headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:417,security,Inject,Inject,417,"[No CI][PyROOT exp] Add feature to invoke Python callables from C++; Alright, I've put in the comments from @etejedor (thanks!). Now we've a refined version regarding the user interface:. ```python. @ROOT.DeclareCppCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.CppCallable.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << CppCallable::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""CppCallable::f(x)""). ```. You can set an optional name. ```python. @ROOT.DeclareCppCallable([""float""], ""float"", name=""g""). def f(x). return 2.0 * x. ROOT.CppCallable.g(21.0) # Returns 42. ```. By default, we try numba first and then fall back to the generic implementation. You can force only numba using `numba_only=True` as optional argument. ```python. @ROOT.DeclareCppCallable([""float""], ""float"", numba_only=True). def f(x). return 2.0 * x. ```. In addition, you can set a `verbose` flag to let PyROOT tell you if the decorator falls back to the generic implementation. ```python. @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). def f(x). return ROOT.std.string(str(x)). ROOT.CppCallable.f(x). # 1) Throws Python warning:. # /home/stefan/foo.py:5: RuntimeWarning: Failed to compile Python callable using numba. Fall back to generic implementation. # @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). # 2) Falls back to generic impl and prints ""42"" (as string). ```. **DEPRECATED:**. I've cleaned up and improved the feature. Here's the basic workflow now:. ```python. @ROOT.DeclareCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementati",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:1810,security,Inject,Inject,1810,"sing `numba_only=True` as optional argument. ```python. @ROOT.DeclareCppCallable([""float""], ""float"", numba_only=True). def f(x). return 2.0 * x. ```. In addition, you can set a `verbose` flag to let PyROOT tell you if the decorator falls back to the generic implementation. ```python. @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). def f(x). return ROOT.std.string(str(x)). ROOT.CppCallable.f(x). # 1) Throws Python warning:. # /home/stefan/foo.py:5: RuntimeWarning: Failed to compile Python callable using numba. Fall back to generic implementation. # @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). # 2) Falls back to generic impl and prints ""42"" (as string). ```. **DEPRECATED:**. I've cleaned up and improved the feature. Here's the basic workflow now:. ```python. @ROOT.DeclareCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementation. It tries to compile the thingy with numba (falls through silently) and otherwise tries the generic implementation (fails noisily). However, you can force using the generic implementation or numba by using the decorators `DeclareGenericCallable` and `DeclareNumbaCallable`. The interface is exactly the same than for the general `DeclareCallable` decorator. In addition, you can now give the wrapped function a custom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Becau",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:4333,testability,test,test,4333,"ustom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""). def func(x):. return numpy.power(x, 2). df = ROOT.RDataFrame(4).Define(""x"", ""rdfentry_"").Define(""y"", ""PyROOT::func(x)""). npy = df.AsNumpy(). print(npy[""x""]) # Prints [0, 1, 2, 3]. print(npy[""y""]) # Prints [0.0, 1.0, 4.0, 9.0]. ```. Finally, the approach is fully compatible with any custom C++ types you may have. ```python. import ROOT. ROOT.gInterpreter.Declare("""""". struct Foo {. static const int foo = 42;. };. """"""). @ROOT.DeclareCppCallable([""Foo""], """"). def func(x):. print(x.foo). ROOT.gInterpreter.ProcessLine(""Foo x; PyROOT::func(x);"") # Prints 42. ```. There are still some things to check before merging:. - [ ] Double check reference counting. - [ ] C++ wrapper takes (lvalue) references, what happens with rvalues? What is the universal thingy? - [ ] We put the C++ callable in the `PyROOT::` namespace. This is fine? It can be everything, even the global namespace. What is a sane solution here? - [ ] How many copies we are doing finally? What is the performance? - [ ] What happens in MT scenarios? Put in a test case! - [ ] We have to ship the public cppyy interface with the ROOT headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:171,usability,user,user,171,"[No CI][PyROOT exp] Add feature to invoke Python callables from C++; Alright, I've put in the comments from @etejedor (thanks!). Now we've a refined version regarding the user interface:. ```python. @ROOT.DeclareCppCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.CppCallable.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << CppCallable::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""CppCallable::f(x)""). ```. You can set an optional name. ```python. @ROOT.DeclareCppCallable([""float""], ""float"", name=""g""). def f(x). return 2.0 * x. ROOT.CppCallable.g(21.0) # Returns 42. ```. By default, we try numba first and then fall back to the generic implementation. You can force only numba using `numba_only=True` as optional argument. ```python. @ROOT.DeclareCppCallable([""float""], ""float"", numba_only=True). def f(x). return 2.0 * x. ```. In addition, you can set a `verbose` flag to let PyROOT tell you if the decorator falls back to the generic implementation. ```python. @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). def f(x). return ROOT.std.string(str(x)). ROOT.CppCallable.f(x). # 1) Throws Python warning:. # /home/stefan/foo.py:5: RuntimeWarning: Failed to compile Python callable using numba. Fall back to generic implementation. # @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). # 2) Falls back to generic impl and prints ""42"" (as string). ```. **DEPRECATED:**. I've cleaned up and improved the feature. Here's the basic workflow now:. ```python. @ROOT.DeclareCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementati",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:1583,usability,workflow,workflow,1583,"eclareCppCallable([""float""], ""float"", name=""g""). def f(x). return 2.0 * x. ROOT.CppCallable.g(21.0) # Returns 42. ```. By default, we try numba first and then fall back to the generic implementation. You can force only numba using `numba_only=True` as optional argument. ```python. @ROOT.DeclareCppCallable([""float""], ""float"", numba_only=True). def f(x). return 2.0 * x. ```. In addition, you can set a `verbose` flag to let PyROOT tell you if the decorator falls back to the generic implementation. ```python. @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). def f(x). return ROOT.std.string(str(x)). ROOT.CppCallable.f(x). # 1) Throws Python warning:. # /home/stefan/foo.py:5: RuntimeWarning: Failed to compile Python callable using numba. Fall back to generic implementation. # @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True). # 2) Falls back to generic impl and prints ""42"" (as string). ```. **DEPRECATED:**. I've cleaned up and improved the feature. Here's the basic workflow now:. ```python. @ROOT.DeclareCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementation. It tries to compile the thingy with numba (falls through silently) and otherwise tries the generic implementation (fails noisily). However, you can force using the generic implementation or numba by using the decorators `DeclareGenericCallable` and `DeclareNumbaCallable`. The interface is exactly the same than for the general `DeclareCallable` decorator. In addition, you can now give the wrapped function a custom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workf",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:2414,usability,custom,custom,2414,"string"", verbose=True). # 2) Falls back to generic impl and prints ""42"" (as string). ```. **DEPRECATED:**. I've cleaned up and improved the feature. Here's the basic workflow now:. ```python. @ROOT.DeclareCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementation. It tries to compile the thingy with numba (falls through silently) and otherwise tries the generic implementation (fails noisily). However, you can force using the generic implementation or numba by using the decorators `DeclareGenericCallable` and `DeclareNumbaCallable`. The interface is exactly the same than for the general `DeclareCallable` decorator. In addition, you can now give the wrapped function a custom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""). def func(x):. return numpy.power(x, 2). df = ROOT.RDataFrame(4).Define(""x"", ""rdfentry_"").Define(""y"", ""PyROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:2582,usability,workflow,workflow,2582,"kflow now:. ```python. @ROOT.DeclareCallable([""float""], ""float""). def f(x). return 2.0 * x. # General use-cases. ROOT.ROOT.f(21) # Returns 42. ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementation. It tries to compile the thingy with numba (falls through silently) and otherwise tries the generic implementation (fails noisily). However, you can force using the generic implementation or numba by using the decorators `DeclareGenericCallable` and `DeclareNumbaCallable`. The interface is exactly the same than for the general `DeclareCallable` decorator. In addition, you can now give the wrapped function a custom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""). def func(x):. return numpy.power(x, 2). df = ROOT.RDataFrame(4).Define(""x"", ""rdfentry_"").Define(""y"", ""PyROOT::func(x)""). npy = df.AsNumpy(). print(npy[""x""]) # Prints [0, 1, 2, 3]. print(npy[""y""]) # Prints [0.0, 1.0, 4.0, 9.0]. ```. Finally, the approach is fully compatible wit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:2729,usability,user,user,2729,"OT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe. df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementation. It tries to compile the thingy with numba (falls through silently) and otherwise tries the generic implementation (fails noisily). However, you can force using the generic implementation or numba by using the decorators `DeclareGenericCallable` and `DeclareNumbaCallable`. The interface is exactly the same than for the general `DeclareCallable` decorator. In addition, you can now give the wrapped function a custom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""). def func(x):. return numpy.power(x, 2). df = ROOT.RDataFrame(4).Define(""x"", ""rdfentry_"").Define(""y"", ""PyROOT::func(x)""). npy = df.AsNumpy(). print(npy[""x""]) # Prints [0, 1, 2, 3]. print(npy[""y""]) # Prints [0.0, 1.0, 4.0, 9.0]. ```. Finally, the approach is fully compatible with any custom C++ types you may have. ```python. import ROOT. ROOT.gInterpreter.Declare("""""". struct Foo {. static const int foo = 42;. };. """"""). @",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:2875,usability,input,inputs,2875,"(""x"", ""rdfentry__"").Define(""ROOT::f(x)""). ```. The `DeclareCallable` dispatches between numba and the generic implementation. It tries to compile the thingy with numba (falls through silently) and otherwise tries the generic implementation (fails noisily). However, you can force using the generic implementation or numba by using the decorators `DeclareGenericCallable` and `DeclareNumbaCallable`. The interface is exactly the same than for the general `DeclareCallable` decorator. In addition, you can now give the wrapped function a custom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""). def func(x):. return numpy.power(x, 2). df = ROOT.RDataFrame(4).Define(""x"", ""rdfentry_"").Define(""y"", ""PyROOT::func(x)""). npy = df.AsNumpy(). print(npy[""x""]) # Prints [0, 1, 2, 3]. print(npy[""y""]) # Prints [0.0, 1.0, 4.0, 9.0]. ```. Finally, the approach is fully compatible with any custom C++ types you may have. ```python. import ROOT. ROOT.gInterpreter.Declare("""""". struct Foo {. static const int foo = 42;. };. """"""). @ROOT.DeclareCppCallable([""Foo""], """"). def func(x):. print(x.foo). ROOT.gInterpreter.ProcessLine(""Foo x; PyROOT::func(x);"") # Prints 42. ```. There ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:3184,usability,workflow,workflow,3184,"on or numba by using the decorators `DeclareGenericCallable` and `DeclareNumbaCallable`. The interface is exactly the same than for the general `DeclareCallable` decorator. In addition, you can now give the wrapped function a custom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""). def func(x):. return numpy.power(x, 2). df = ROOT.RDataFrame(4).Define(""x"", ""rdfentry_"").Define(""y"", ""PyROOT::func(x)""). npy = df.AsNumpy(). print(npy[""x""]) # Prints [0, 1, 2, 3]. print(npy[""y""]) # Prints [0.0, 1.0, 4.0, 9.0]. ```. Finally, the approach is fully compatible with any custom C++ types you may have. ```python. import ROOT. ROOT.gInterpreter.Declare("""""". struct Foo {. static const int foo = 42;. };. """"""). @ROOT.DeclareCppCallable([""Foo""], """"). def func(x):. print(x.foo). ROOT.gInterpreter.ProcessLine(""Foo x; PyROOT::func(x);"") # Prints 42. ```. There are still some things to check before merging:. - [ ] Double check reference counting. - [ ] C++ wrapper takes (lvalue) references, what happens with rvalues? What is the universal thingy? - [ ] We put the C++ callable in the `PyROOT::` namespace. This is fine? It can be everything, even the global namespace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:3592,usability,custom,custom,3592,"ustom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""). def func(x):. return numpy.power(x, 2). df = ROOT.RDataFrame(4).Define(""x"", ""rdfentry_"").Define(""y"", ""PyROOT::func(x)""). npy = df.AsNumpy(). print(npy[""x""]) # Prints [0, 1, 2, 3]. print(npy[""y""]) # Prints [0.0, 1.0, 4.0, 9.0]. ```. Finally, the approach is fully compatible with any custom C++ types you may have. ```python. import ROOT. ROOT.gInterpreter.Declare("""""". struct Foo {. static const int foo = 42;. };. """"""). @ROOT.DeclareCppCallable([""Foo""], """"). def func(x):. print(x.foo). ROOT.gInterpreter.ProcessLine(""Foo x; PyROOT::func(x);"") # Prints 42. ```. There are still some things to check before merging:. - [ ] Double check reference counting. - [ ] C++ wrapper takes (lvalue) references, what happens with rvalues? What is the universal thingy? - [ ] We put the C++ callable in the `PyROOT::` namespace. This is fine? It can be everything, even the global namespace. What is a sane solution here? - [ ] How many copies we are doing finally? What is the performance? - [ ] What happens in MT scenarios? Put in a test case! - [ ] We have to ship the public cppyy interface with the ROOT headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3488:4275,usability,perform,performance,4275,"ustom name:. ```python. @ROOT.DeclareCallable([""float""], ""float"", ""my_name""). def f(x):. return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42. ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python. import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output. @ROOT.DeclareCppCallable([""float""], ""float""). def func(x):. return 2.0 * x. print(func(1.0)) # Prints 2.0. print(ROOT.PyROOT.func(1.0)) # Prints 2.0. ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0. ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python. import ROOT. import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""). def func(x):. return numpy.power(x, 2). df = ROOT.RDataFrame(4).Define(""x"", ""rdfentry_"").Define(""y"", ""PyROOT::func(x)""). npy = df.AsNumpy(). print(npy[""x""]) # Prints [0, 1, 2, 3]. print(npy[""y""]) # Prints [0.0, 1.0, 4.0, 9.0]. ```. Finally, the approach is fully compatible with any custom C++ types you may have. ```python. import ROOT. ROOT.gInterpreter.Declare("""""". struct Foo {. static const int foo = 42;. };. """"""). @ROOT.DeclareCppCallable([""Foo""], """"). def func(x):. print(x.foo). ROOT.gInterpreter.ProcessLine(""Foo x; PyROOT::func(x);"") # Prints 42. ```. There are still some things to check before merging:. - [ ] Double check reference counting. - [ ] C++ wrapper takes (lvalue) references, what happens with rvalues? What is the universal thingy? - [ ] We put the C++ callable in the `PyROOT::` namespace. This is fine? It can be everything, even the global namespace. What is a sane solution here? - [ ] How many copies we are doing finally? What is the performance? - [ ] What happens in MT scenarios? Put in a test case! - [ ] We have to ship the public cppyy interface with the ROOT headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3488
https://github.com/root-project/root/pull/3489:4,availability,error,errors,4,Fix errors in THttpServer tutorials;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3489
https://github.com/root-project/root/pull/3489:4,performance,error,errors,4,Fix errors in THttpServer tutorials;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3489
https://github.com/root-project/root/pull/3489:4,safety,error,errors,4,Fix errors in THttpServer tutorials;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3489
https://github.com/root-project/root/pull/3489:4,usability,error,errors,4,Fix errors in THttpServer tutorials;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3489
https://github.com/root-project/root/pull/3490:16,interoperability,distribut,distribution,16,Fix VavilovFast distribution for kappa > 0.29; apply fix in VavilovFast distribution as suggested by L. Grzanks looking at the similar Fortran code from the Cernlib. . This fixes ROOT-9899,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3490
https://github.com/root-project/root/pull/3490:72,interoperability,distribut,distribution,72,Fix VavilovFast distribution for kappa > 0.29; apply fix in VavilovFast distribution as suggested by L. Grzanks looking at the similar Fortran code from the Cernlib. . This fixes ROOT-9899,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3490
https://github.com/root-project/root/pull/3491:154,availability,state,statement,154,"[Exp PyROOT] Add plotOn overloads of RooAbsData to RooDataHist; Cppyy does not automatically add to a class the method overloads that come from a `using` statement. For this reason, a pythonisation is needed for `RooDataHist` to see (in Python) the `plotOn` overloads it is using from `RooAbsData`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3491
https://github.com/root-project/root/pull/3491:79,deployability,automat,automatically,79,"[Exp PyROOT] Add plotOn overloads of RooAbsData to RooDataHist; Cppyy does not automatically add to a class the method overloads that come from a `using` statement. For this reason, a pythonisation is needed for `RooDataHist` to see (in Python) the `plotOn` overloads it is using from `RooAbsData`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3491
https://github.com/root-project/root/pull/3491:154,integrability,state,statement,154,"[Exp PyROOT] Add plotOn overloads of RooAbsData to RooDataHist; Cppyy does not automatically add to a class the method overloads that come from a `using` statement. For this reason, a pythonisation is needed for `RooDataHist` to see (in Python) the `plotOn` overloads it is using from `RooAbsData`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3491
https://github.com/root-project/root/pull/3491:70,reliability,doe,does,70,"[Exp PyROOT] Add plotOn overloads of RooAbsData to RooDataHist; Cppyy does not automatically add to a class the method overloads that come from a `using` statement. For this reason, a pythonisation is needed for `RooDataHist` to see (in Python) the `plotOn` overloads it is using from `RooAbsData`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3491
https://github.com/root-project/root/pull/3491:79,testability,automat,automatically,79,"[Exp PyROOT] Add plotOn overloads of RooAbsData to RooDataHist; Cppyy does not automatically add to a class the method overloads that come from a `using` statement. For this reason, a pythonisation is needed for `RooDataHist` to see (in Python) the `plotOn` overloads it is using from `RooAbsData`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3491
https://github.com/root-project/root/pull/3492:17,energy efficiency,optim,optimisation,17,New small vector optimisation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3492
https://github.com/root-project/root/pull/3493:242,availability,sli,slightly,242,"[TMVA] Optimizer choice simplification (Update of #3414); See old [PR#3414](https://github.com/root-project/root/pull/3414) for initial discussion. This PR cleans of the code a bit and adds tests. @josephmckenna Creating the testing code was slightly involved, hence the new PR and not asking you to submit a fix. I think the idea is a nice and natural improvement on the functionality that was already implemented. Motivation from original submitter:. > To explore the performance of a range of settings for BDTs, we often find a 0.1% background level most interesting for our physics applications for us in the ALPHA collaboration. Instead of adding one additional use case, I have added a general form such that users could set:. > // factory->OptimizeAllMethods(""SigEffAtBkgEff0001"",""Scan"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3493
https://github.com/root-project/root/pull/3493:40,deployability,Updat,Update,40,"[TMVA] Optimizer choice simplification (Update of #3414); See old [PR#3414](https://github.com/root-project/root/pull/3414) for initial discussion. This PR cleans of the code a bit and adds tests. @josephmckenna Creating the testing code was slightly involved, hence the new PR and not asking you to submit a fix. I think the idea is a nice and natural improvement on the functionality that was already implemented. Motivation from original submitter:. > To explore the performance of a range of settings for BDTs, we often find a 0.1% background level most interesting for our physics applications for us in the ALPHA collaboration. Instead of adding one additional use case, I have added a general form such that users could set:. > // factory->OptimizeAllMethods(""SigEffAtBkgEff0001"",""Scan"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3493
https://github.com/root-project/root/pull/3493:7,energy efficiency,Optim,Optimizer,7,"[TMVA] Optimizer choice simplification (Update of #3414); See old [PR#3414](https://github.com/root-project/root/pull/3414) for initial discussion. This PR cleans of the code a bit and adds tests. @josephmckenna Creating the testing code was slightly involved, hence the new PR and not asking you to submit a fix. I think the idea is a nice and natural improvement on the functionality that was already implemented. Motivation from original submitter:. > To explore the performance of a range of settings for BDTs, we often find a 0.1% background level most interesting for our physics applications for us in the ALPHA collaboration. Instead of adding one additional use case, I have added a general form such that users could set:. > // factory->OptimizeAllMethods(""SigEffAtBkgEff0001"",""Scan"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3493
https://github.com/root-project/root/pull/3493:747,energy efficiency,Optim,OptimizeAllMethods,747,"[TMVA] Optimizer choice simplification (Update of #3414); See old [PR#3414](https://github.com/root-project/root/pull/3414) for initial discussion. This PR cleans of the code a bit and adds tests. @josephmckenna Creating the testing code was slightly involved, hence the new PR and not asking you to submit a fix. I think the idea is a nice and natural improvement on the functionality that was already implemented. Motivation from original submitter:. > To explore the performance of a range of settings for BDTs, we often find a 0.1% background level most interesting for our physics applications for us in the ALPHA collaboration. Instead of adding one additional use case, I have added a general form such that users could set:. > // factory->OptimizeAllMethods(""SigEffAtBkgEff0001"",""Scan"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3493
https://github.com/root-project/root/pull/3493:300,integrability,sub,submit,300,"[TMVA] Optimizer choice simplification (Update of #3414); See old [PR#3414](https://github.com/root-project/root/pull/3414) for initial discussion. This PR cleans of the code a bit and adds tests. @josephmckenna Creating the testing code was slightly involved, hence the new PR and not asking you to submit a fix. I think the idea is a nice and natural improvement on the functionality that was already implemented. Motivation from original submitter:. > To explore the performance of a range of settings for BDTs, we often find a 0.1% background level most interesting for our physics applications for us in the ALPHA collaboration. Instead of adding one additional use case, I have added a general form such that users could set:. > // factory->OptimizeAllMethods(""SigEffAtBkgEff0001"",""Scan"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3493
https://github.com/root-project/root/pull/3493:441,integrability,sub,submitter,441,"[TMVA] Optimizer choice simplification (Update of #3414); See old [PR#3414](https://github.com/root-project/root/pull/3414) for initial discussion. This PR cleans of the code a bit and adds tests. @josephmckenna Creating the testing code was slightly involved, hence the new PR and not asking you to submit a fix. I think the idea is a nice and natural improvement on the functionality that was already implemented. Motivation from original submitter:. > To explore the performance of a range of settings for BDTs, we often find a 0.1% background level most interesting for our physics applications for us in the ALPHA collaboration. Instead of adding one additional use case, I have added a general form such that users could set:. > // factory->OptimizeAllMethods(""SigEffAtBkgEff0001"",""Scan"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3493
https://github.com/root-project/root/pull/3493:7,performance,Optimiz,Optimizer,7,"[TMVA] Optimizer choice simplification (Update of #3414); See old [PR#3414](https://github.com/root-project/root/pull/3414) for initial discussion. This PR cleans of the code a bit and adds tests. @josephmckenna Creating the testing code was slightly involved, hence the new PR and not asking you to submit a fix. I think the idea is a nice and natural improvement on the functionality that was already implemented. Motivation from original submitter:. > To explore the performance of a range of settings for BDTs, we often find a 0.1% background level most interesting for our physics applications for us in the ALPHA collaboration. Instead of adding one additional use case, I have added a general form such that users could set:. > // factory->OptimizeAllMethods(""SigEffAtBkgEff0001"",""Scan"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3493
https://github.com/root-project/root/pull/3493:470,performance,perform,performance,470,"[TMVA] Optimizer choice simplification (Update of #3414); See old [PR#3414](https://github.com/root-project/root/pull/3414) for initial discussion. This PR cleans of the code a bit and adds tests. @josephmckenna Creating the testing code was slightly involved, hence the new PR and not asking you to submit a fix. I think the idea is a nice and natural improvement on the functionality that was already implemented. Motivation from original submitter:. > To explore the performance of a range of settings for BDTs, we often find a 0.1% background level most interesting for our physics applications for us in the ALPHA collaboration. Instead of adding one additional use case, I have added a general form such that users could set:. > // factory->OptimizeAllMethods(""SigEffAtBkgEff0001"",""Scan"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3493
https://github.com/root-project/root/pull/3493:747,performance,Optimiz,OptimizeAllMethods,747,"[TMVA] Optimizer choice simplification (Update of #3414); See old [PR#3414](https://github.com/root-project/root/pull/3414) for initial discussion. This PR cleans of the code a bit and adds tests. @josephmckenna Creating the testing code was slightly involved, hence the new PR and not asking you to submit a fix. I think the idea is a nice and natural improvement on the functionality that was already implemented. Motivation from original submitter:. > To explore the performance of a range of settings for BDTs, we often find a 0.1% background level most interesting for our physics applications for us in the ALPHA collaboration. Instead of adding one additional use case, I have added a general form such that users could set:. > // factory->OptimizeAllMethods(""SigEffAtBkgEff0001"",""Scan"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3493
https://github.com/root-project/root/pull/3493:242,reliability,sli,slightly,242,"[TMVA] Optimizer choice simplification (Update of #3414); See old [PR#3414](https://github.com/root-project/root/pull/3414) for initial discussion. This PR cleans of the code a bit and adds tests. @josephmckenna Creating the testing code was slightly involved, hence the new PR and not asking you to submit a fix. I think the idea is a nice and natural improvement on the functionality that was already implemented. Motivation from original submitter:. > To explore the performance of a range of settings for BDTs, we often find a 0.1% background level most interesting for our physics applications for us in the ALPHA collaboration. Instead of adding one additional use case, I have added a general form such that users could set:. > // factory->OptimizeAllMethods(""SigEffAtBkgEff0001"",""Scan"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3493
https://github.com/root-project/root/pull/3493:40,safety,Updat,Update,40,"[TMVA] Optimizer choice simplification (Update of #3414); See old [PR#3414](https://github.com/root-project/root/pull/3414) for initial discussion. This PR cleans of the code a bit and adds tests. @josephmckenna Creating the testing code was slightly involved, hence the new PR and not asking you to submit a fix. I think the idea is a nice and natural improvement on the functionality that was already implemented. Motivation from original submitter:. > To explore the performance of a range of settings for BDTs, we often find a 0.1% background level most interesting for our physics applications for us in the ALPHA collaboration. Instead of adding one additional use case, I have added a general form such that users could set:. > // factory->OptimizeAllMethods(""SigEffAtBkgEff0001"",""Scan"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3493
https://github.com/root-project/root/pull/3493:190,safety,test,tests,190,"[TMVA] Optimizer choice simplification (Update of #3414); See old [PR#3414](https://github.com/root-project/root/pull/3414) for initial discussion. This PR cleans of the code a bit and adds tests. @josephmckenna Creating the testing code was slightly involved, hence the new PR and not asking you to submit a fix. I think the idea is a nice and natural improvement on the functionality that was already implemented. Motivation from original submitter:. > To explore the performance of a range of settings for BDTs, we often find a 0.1% background level most interesting for our physics applications for us in the ALPHA collaboration. Instead of adding one additional use case, I have added a general form such that users could set:. > // factory->OptimizeAllMethods(""SigEffAtBkgEff0001"",""Scan"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3493
https://github.com/root-project/root/pull/3493:225,safety,test,testing,225,"[TMVA] Optimizer choice simplification (Update of #3414); See old [PR#3414](https://github.com/root-project/root/pull/3414) for initial discussion. This PR cleans of the code a bit and adds tests. @josephmckenna Creating the testing code was slightly involved, hence the new PR and not asking you to submit a fix. I think the idea is a nice and natural improvement on the functionality that was already implemented. Motivation from original submitter:. > To explore the performance of a range of settings for BDTs, we often find a 0.1% background level most interesting for our physics applications for us in the ALPHA collaboration. Instead of adding one additional use case, I have added a general form such that users could set:. > // factory->OptimizeAllMethods(""SigEffAtBkgEff0001"",""Scan"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3493
https://github.com/root-project/root/pull/3493:40,security,Updat,Update,40,"[TMVA] Optimizer choice simplification (Update of #3414); See old [PR#3414](https://github.com/root-project/root/pull/3414) for initial discussion. This PR cleans of the code a bit and adds tests. @josephmckenna Creating the testing code was slightly involved, hence the new PR and not asking you to submit a fix. I think the idea is a nice and natural improvement on the functionality that was already implemented. Motivation from original submitter:. > To explore the performance of a range of settings for BDTs, we often find a 0.1% background level most interesting for our physics applications for us in the ALPHA collaboration. Instead of adding one additional use case, I have added a general form such that users could set:. > // factory->OptimizeAllMethods(""SigEffAtBkgEff0001"",""Scan"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3493
https://github.com/root-project/root/pull/3493:24,testability,simpl,simplification,24,"[TMVA] Optimizer choice simplification (Update of #3414); See old [PR#3414](https://github.com/root-project/root/pull/3414) for initial discussion. This PR cleans of the code a bit and adds tests. @josephmckenna Creating the testing code was slightly involved, hence the new PR and not asking you to submit a fix. I think the idea is a nice and natural improvement on the functionality that was already implemented. Motivation from original submitter:. > To explore the performance of a range of settings for BDTs, we often find a 0.1% background level most interesting for our physics applications for us in the ALPHA collaboration. Instead of adding one additional use case, I have added a general form such that users could set:. > // factory->OptimizeAllMethods(""SigEffAtBkgEff0001"",""Scan"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3493
https://github.com/root-project/root/pull/3493:190,testability,test,tests,190,"[TMVA] Optimizer choice simplification (Update of #3414); See old [PR#3414](https://github.com/root-project/root/pull/3414) for initial discussion. This PR cleans of the code a bit and adds tests. @josephmckenna Creating the testing code was slightly involved, hence the new PR and not asking you to submit a fix. I think the idea is a nice and natural improvement on the functionality that was already implemented. Motivation from original submitter:. > To explore the performance of a range of settings for BDTs, we often find a 0.1% background level most interesting for our physics applications for us in the ALPHA collaboration. Instead of adding one additional use case, I have added a general form such that users could set:. > // factory->OptimizeAllMethods(""SigEffAtBkgEff0001"",""Scan"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3493
https://github.com/root-project/root/pull/3493:225,testability,test,testing,225,"[TMVA] Optimizer choice simplification (Update of #3414); See old [PR#3414](https://github.com/root-project/root/pull/3414) for initial discussion. This PR cleans of the code a bit and adds tests. @josephmckenna Creating the testing code was slightly involved, hence the new PR and not asking you to submit a fix. I think the idea is a nice and natural improvement on the functionality that was already implemented. Motivation from original submitter:. > To explore the performance of a range of settings for BDTs, we often find a 0.1% background level most interesting for our physics applications for us in the ALPHA collaboration. Instead of adding one additional use case, I have added a general form such that users could set:. > // factory->OptimizeAllMethods(""SigEffAtBkgEff0001"",""Scan"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3493
https://github.com/root-project/root/pull/3493:24,usability,simpl,simplification,24,"[TMVA] Optimizer choice simplification (Update of #3414); See old [PR#3414](https://github.com/root-project/root/pull/3414) for initial discussion. This PR cleans of the code a bit and adds tests. @josephmckenna Creating the testing code was slightly involved, hence the new PR and not asking you to submit a fix. I think the idea is a nice and natural improvement on the functionality that was already implemented. Motivation from original submitter:. > To explore the performance of a range of settings for BDTs, we often find a 0.1% background level most interesting for our physics applications for us in the ALPHA collaboration. Instead of adding one additional use case, I have added a general form such that users could set:. > // factory->OptimizeAllMethods(""SigEffAtBkgEff0001"",""Scan"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3493
https://github.com/root-project/root/pull/3493:470,usability,perform,performance,470,"[TMVA] Optimizer choice simplification (Update of #3414); See old [PR#3414](https://github.com/root-project/root/pull/3414) for initial discussion. This PR cleans of the code a bit and adds tests. @josephmckenna Creating the testing code was slightly involved, hence the new PR and not asking you to submit a fix. I think the idea is a nice and natural improvement on the functionality that was already implemented. Motivation from original submitter:. > To explore the performance of a range of settings for BDTs, we often find a 0.1% background level most interesting for our physics applications for us in the ALPHA collaboration. Instead of adding one additional use case, I have added a general form such that users could set:. > // factory->OptimizeAllMethods(""SigEffAtBkgEff0001"",""Scan"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3493
https://github.com/root-project/root/pull/3493:715,usability,user,users,715,"[TMVA] Optimizer choice simplification (Update of #3414); See old [PR#3414](https://github.com/root-project/root/pull/3414) for initial discussion. This PR cleans of the code a bit and adds tests. @josephmckenna Creating the testing code was slightly involved, hence the new PR and not asking you to submit a fix. I think the idea is a nice and natural improvement on the functionality that was already implemented. Motivation from original submitter:. > To explore the performance of a range of settings for BDTs, we often find a 0.1% background level most interesting for our physics applications for us in the ALPHA collaboration. Instead of adding one additional use case, I have added a general form such that users could set:. > // factory->OptimizeAllMethods(""SigEffAtBkgEff0001"",""Scan"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3493
https://github.com/root-project/root/pull/3494:52,performance,I/O,I/O,52,Set offset of the used-for-write element in case of I/O rule on 'curr…; …ent' StreamerInfo. This fixes ROOT-10016,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3494
https://github.com/root-project/root/pull/3495:52,performance,I/O,I/O,52,Set offset of the used-for-write element in case of I/O rule on 'curr…;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3495
https://github.com/root-project/root/pull/3496:52,performance,I/O,I/O,52,Set offset of the used-for-write element in case of I/O rule on 'curr…; …ent' StreamerInfo. This fixes ROOT-10016,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3496
https://github.com/root-project/root/pull/3497:21,deployability,build,builders,21,Simplify table proxy builders;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3497
https://github.com/root-project/root/pull/3497:15,interoperability,prox,proxy,15,Simplify table proxy builders;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3497
https://github.com/root-project/root/pull/3497:0,testability,Simpl,Simplify,0,Simplify table proxy builders;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3497
https://github.com/root-project/root/pull/3497:0,usability,Simpl,Simplify,0,Simplify table proxy builders;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3497
https://github.com/root-project/root/pull/3498:222,deployability,build,build,222,"WebGui: reorganize openui5 and JSROOT code; 1. Create `ui5` folder with all related openui5 code, move code from `etc\eve7`. 2. Create `js` folder with JavaScript ROOT code, move code from `etc/http`. 3. Introduce `webui` build config parameter, enabled when root7 or c++14 are enabled. 4. Folder `js` copied into build directory when `http` is enabled. 5. Folder `ui5` copies into build directory when `webui` is enabled. 6. When ROOT installed, `js` and `ui5` directories copied into `<prefix>` directory (platform-specific), identified as `TROOT::GetDataDir()`. 7. Try to use Component.js and manifest.json in openui5 projects, organize code with ui5-typical subfolders names.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3498
https://github.com/root-project/root/pull/3498:314,deployability,build,build,314,"WebGui: reorganize openui5 and JSROOT code; 1. Create `ui5` folder with all related openui5 code, move code from `etc\eve7`. 2. Create `js` folder with JavaScript ROOT code, move code from `etc/http`. 3. Introduce `webui` build config parameter, enabled when root7 or c++14 are enabled. 4. Folder `js` copied into build directory when `http` is enabled. 5. Folder `ui5` copies into build directory when `webui` is enabled. 6. When ROOT installed, `js` and `ui5` directories copied into `<prefix>` directory (platform-specific), identified as `TROOT::GetDataDir()`. 7. Try to use Component.js and manifest.json in openui5 projects, organize code with ui5-typical subfolders names.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3498
https://github.com/root-project/root/pull/3498:382,deployability,build,build,382,"WebGui: reorganize openui5 and JSROOT code; 1. Create `ui5` folder with all related openui5 code, move code from `etc\eve7`. 2. Create `js` folder with JavaScript ROOT code, move code from `etc/http`. 3. Introduce `webui` build config parameter, enabled when root7 or c++14 are enabled. 4. Folder `js` copied into build directory when `http` is enabled. 5. Folder `ui5` copies into build directory when `webui` is enabled. 6. When ROOT installed, `js` and `ui5` directories copied into `<prefix>` directory (platform-specific), identified as `TROOT::GetDataDir()`. 7. Try to use Component.js and manifest.json in openui5 projects, organize code with ui5-typical subfolders names.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3498
https://github.com/root-project/root/pull/3498:436,deployability,instal,installed,436,"WebGui: reorganize openui5 and JSROOT code; 1. Create `ui5` folder with all related openui5 code, move code from `etc\eve7`. 2. Create `js` folder with JavaScript ROOT code, move code from `etc/http`. 3. Introduce `webui` build config parameter, enabled when root7 or c++14 are enabled. 4. Folder `js` copied into build directory when `http` is enabled. 5. Folder `ui5` copies into build directory when `webui` is enabled. 6. When ROOT installed, `js` and `ui5` directories copied into `<prefix>` directory (platform-specific), identified as `TROOT::GetDataDir()`. 7. Try to use Component.js and manifest.json in openui5 projects, organize code with ui5-typical subfolders names.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3498
https://github.com/root-project/root/pull/3498:579,integrability,Compon,Component,579,"WebGui: reorganize openui5 and JSROOT code; 1. Create `ui5` folder with all related openui5 code, move code from `etc\eve7`. 2. Create `js` folder with JavaScript ROOT code, move code from `etc/http`. 3. Introduce `webui` build config parameter, enabled when root7 or c++14 are enabled. 4. Folder `js` copied into build directory when `http` is enabled. 5. Folder `ui5` copies into build directory when `webui` is enabled. 6. When ROOT installed, `js` and `ui5` directories copied into `<prefix>` directory (platform-specific), identified as `TROOT::GetDataDir()`. 7. Try to use Component.js and manifest.json in openui5 projects, organize code with ui5-typical subfolders names.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3498
https://github.com/root-project/root/pull/3498:662,integrability,sub,subfolders,662,"WebGui: reorganize openui5 and JSROOT code; 1. Create `ui5` folder with all related openui5 code, move code from `etc\eve7`. 2. Create `js` folder with JavaScript ROOT code, move code from `etc/http`. 3. Introduce `webui` build config parameter, enabled when root7 or c++14 are enabled. 4. Folder `js` copied into build directory when `http` is enabled. 5. Folder `ui5` copies into build directory when `webui` is enabled. 6. When ROOT installed, `js` and `ui5` directories copied into `<prefix>` directory (platform-specific), identified as `TROOT::GetDataDir()`. 7. Try to use Component.js and manifest.json in openui5 projects, organize code with ui5-typical subfolders names.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3498
https://github.com/root-project/root/pull/3498:508,interoperability,platform,platform-specific,508,"WebGui: reorganize openui5 and JSROOT code; 1. Create `ui5` folder with all related openui5 code, move code from `etc\eve7`. 2. Create `js` folder with JavaScript ROOT code, move code from `etc/http`. 3. Introduce `webui` build config parameter, enabled when root7 or c++14 are enabled. 4. Folder `js` copied into build directory when `http` is enabled. 5. Folder `ui5` copies into build directory when `webui` is enabled. 6. When ROOT installed, `js` and `ui5` directories copied into `<prefix>` directory (platform-specific), identified as `TROOT::GetDataDir()`. 7. Try to use Component.js and manifest.json in openui5 projects, organize code with ui5-typical subfolders names.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3498
https://github.com/root-project/root/pull/3498:579,interoperability,Compon,Component,579,"WebGui: reorganize openui5 and JSROOT code; 1. Create `ui5` folder with all related openui5 code, move code from `etc\eve7`. 2. Create `js` folder with JavaScript ROOT code, move code from `etc/http`. 3. Introduce `webui` build config parameter, enabled when root7 or c++14 are enabled. 4. Folder `js` copied into build directory when `http` is enabled. 5. Folder `ui5` copies into build directory when `webui` is enabled. 6. When ROOT installed, `js` and `ui5` directories copied into `<prefix>` directory (platform-specific), identified as `TROOT::GetDataDir()`. 7. Try to use Component.js and manifest.json in openui5 projects, organize code with ui5-typical subfolders names.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3498
https://github.com/root-project/root/pull/3498:235,modifiability,paramet,parameter,235,"WebGui: reorganize openui5 and JSROOT code; 1. Create `ui5` folder with all related openui5 code, move code from `etc\eve7`. 2. Create `js` folder with JavaScript ROOT code, move code from `etc/http`. 3. Introduce `webui` build config parameter, enabled when root7 or c++14 are enabled. 4. Folder `js` copied into build directory when `http` is enabled. 5. Folder `ui5` copies into build directory when `webui` is enabled. 6. When ROOT installed, `js` and `ui5` directories copied into `<prefix>` directory (platform-specific), identified as `TROOT::GetDataDir()`. 7. Try to use Component.js and manifest.json in openui5 projects, organize code with ui5-typical subfolders names.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3498
https://github.com/root-project/root/pull/3498:579,modifiability,Compon,Component,579,"WebGui: reorganize openui5 and JSROOT code; 1. Create `ui5` folder with all related openui5 code, move code from `etc\eve7`. 2. Create `js` folder with JavaScript ROOT code, move code from `etc/http`. 3. Introduce `webui` build config parameter, enabled when root7 or c++14 are enabled. 4. Folder `js` copied into build directory when `http` is enabled. 5. Folder `ui5` copies into build directory when `webui` is enabled. 6. When ROOT installed, `js` and `ui5` directories copied into `<prefix>` directory (platform-specific), identified as `TROOT::GetDataDir()`. 7. Try to use Component.js and manifest.json in openui5 projects, organize code with ui5-typical subfolders names.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3498
https://github.com/root-project/root/pull/3498:528,security,ident,identified,528,"WebGui: reorganize openui5 and JSROOT code; 1. Create `ui5` folder with all related openui5 code, move code from `etc\eve7`. 2. Create `js` folder with JavaScript ROOT code, move code from `etc/http`. 3. Introduce `webui` build config parameter, enabled when root7 or c++14 are enabled. 4. Folder `js` copied into build directory when `http` is enabled. 5. Folder `ui5` copies into build directory when `webui` is enabled. 6. When ROOT installed, `js` and `ui5` directories copied into `<prefix>` directory (platform-specific), identified as `TROOT::GetDataDir()`. 7. Try to use Component.js and manifest.json in openui5 projects, organize code with ui5-typical subfolders names.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3498
https://github.com/root-project/root/pull/3501:737,energy efficiency,current,currently,737,"Add templated TDirectoryFile::Get; Quality-of-life improvement for getting typed objects from a TDirectoryFile. Essentially `GetObject` but with return value. Allows. ```. root -l tutorials/tmva/data/toy_sigbkg_categ_offset.root. root [0] _file0->Get(""TreeS""). (TObject *) 0x7f86f7d078f0. root [1] _file0->Get<TTree>(""TreeS""). (TTree *) 0x7f86f7d078f0. root [2] _file0->Get<TBranch>(""TreeS""). (TBranch *) nullptr. root [3] _file0->Get<TObject>(""TreeS""). (TObject *) 0x7f86f7d078f0. ```. Question for tests, how should these be added? I found no examples for testing GetObject. For the documentation maybe the suggested usage should be changed to `MyClass * obj = file->Get<MyClass>(""key"");` to be explicit that a pointer is returned. It currently is `auto obj = file->Get<MyClass>(""key"");`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3501
https://github.com/root-project/root/pull/3501:500,safety,test,tests,500,"Add templated TDirectoryFile::Get; Quality-of-life improvement for getting typed objects from a TDirectoryFile. Essentially `GetObject` but with return value. Allows. ```. root -l tutorials/tmva/data/toy_sigbkg_categ_offset.root. root [0] _file0->Get(""TreeS""). (TObject *) 0x7f86f7d078f0. root [1] _file0->Get<TTree>(""TreeS""). (TTree *) 0x7f86f7d078f0. root [2] _file0->Get<TBranch>(""TreeS""). (TBranch *) nullptr. root [3] _file0->Get<TObject>(""TreeS""). (TObject *) 0x7f86f7d078f0. ```. Question for tests, how should these be added? I found no examples for testing GetObject. For the documentation maybe the suggested usage should be changed to `MyClass * obj = file->Get<MyClass>(""key"");` to be explicit that a pointer is returned. It currently is `auto obj = file->Get<MyClass>(""key"");`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3501
https://github.com/root-project/root/pull/3501:558,safety,test,testing,558,"Add templated TDirectoryFile::Get; Quality-of-life improvement for getting typed objects from a TDirectoryFile. Essentially `GetObject` but with return value. Allows. ```. root -l tutorials/tmva/data/toy_sigbkg_categ_offset.root. root [0] _file0->Get(""TreeS""). (TObject *) 0x7f86f7d078f0. root [1] _file0->Get<TTree>(""TreeS""). (TTree *) 0x7f86f7d078f0. root [2] _file0->Get<TBranch>(""TreeS""). (TBranch *) nullptr. root [3] _file0->Get<TObject>(""TreeS""). (TObject *) 0x7f86f7d078f0. ```. Question for tests, how should these be added? I found no examples for testing GetObject. For the documentation maybe the suggested usage should be changed to `MyClass * obj = file->Get<MyClass>(""key"");` to be explicit that a pointer is returned. It currently is `auto obj = file->Get<MyClass>(""key"");`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3501
https://github.com/root-project/root/pull/3501:500,testability,test,tests,500,"Add templated TDirectoryFile::Get; Quality-of-life improvement for getting typed objects from a TDirectoryFile. Essentially `GetObject` but with return value. Allows. ```. root -l tutorials/tmva/data/toy_sigbkg_categ_offset.root. root [0] _file0->Get(""TreeS""). (TObject *) 0x7f86f7d078f0. root [1] _file0->Get<TTree>(""TreeS""). (TTree *) 0x7f86f7d078f0. root [2] _file0->Get<TBranch>(""TreeS""). (TBranch *) nullptr. root [3] _file0->Get<TObject>(""TreeS""). (TObject *) 0x7f86f7d078f0. ```. Question for tests, how should these be added? I found no examples for testing GetObject. For the documentation maybe the suggested usage should be changed to `MyClass * obj = file->Get<MyClass>(""key"");` to be explicit that a pointer is returned. It currently is `auto obj = file->Get<MyClass>(""key"");`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3501
https://github.com/root-project/root/pull/3501:558,testability,test,testing,558,"Add templated TDirectoryFile::Get; Quality-of-life improvement for getting typed objects from a TDirectoryFile. Essentially `GetObject` but with return value. Allows. ```. root -l tutorials/tmva/data/toy_sigbkg_categ_offset.root. root [0] _file0->Get(""TreeS""). (TObject *) 0x7f86f7d078f0. root [1] _file0->Get<TTree>(""TreeS""). (TTree *) 0x7f86f7d078f0. root [2] _file0->Get<TBranch>(""TreeS""). (TBranch *) nullptr. root [3] _file0->Get<TObject>(""TreeS""). (TObject *) 0x7f86f7d078f0. ```. Question for tests, how should these be added? I found no examples for testing GetObject. For the documentation maybe the suggested usage should be changed to `MyClass * obj = file->Get<MyClass>(""key"");` to be explicit that a pointer is returned. It currently is `auto obj = file->Get<MyClass>(""key"");`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3501
https://github.com/root-project/root/pull/3501:585,usability,document,documentation,585,"Add templated TDirectoryFile::Get; Quality-of-life improvement for getting typed objects from a TDirectoryFile. Essentially `GetObject` but with return value. Allows. ```. root -l tutorials/tmva/data/toy_sigbkg_categ_offset.root. root [0] _file0->Get(""TreeS""). (TObject *) 0x7f86f7d078f0. root [1] _file0->Get<TTree>(""TreeS""). (TTree *) 0x7f86f7d078f0. root [2] _file0->Get<TBranch>(""TreeS""). (TBranch *) nullptr. root [3] _file0->Get<TObject>(""TreeS""). (TObject *) 0x7f86f7d078f0. ```. Question for tests, how should these be added? I found no examples for testing GetObject. For the documentation maybe the suggested usage should be changed to `MyClass * obj = file->Get<MyClass>(""key"");` to be explicit that a pointer is returned. It currently is `auto obj = file->Get<MyClass>(""key"");`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3501
https://github.com/root-project/root/pull/3503:22,performance,memor,memory,22,[RF] RooProdPdf leaks memory; [ROOT-5236] The RooProdPdf was leaking memory when caching values.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3503
https://github.com/root-project/root/pull/3503:69,performance,memor,memory,69,[RF] RooProdPdf leaks memory; [ROOT-5236] The RooProdPdf was leaking memory when caching values.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3503
https://github.com/root-project/root/pull/3503:81,performance,cach,caching,81,[RF] RooProdPdf leaks memory; [ROOT-5236] The RooProdPdf was leaking memory when caching values.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3503
https://github.com/root-project/root/pull/3503:22,usability,memor,memory,22,[RF] RooProdPdf leaks memory; [ROOT-5236] The RooProdPdf was leaking memory when caching values.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3503
https://github.com/root-project/root/pull/3503:69,usability,memor,memory,69,[RF] RooProdPdf leaks memory; [ROOT-5236] The RooProdPdf was leaking memory when caching values.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3503
https://github.com/root-project/root/pull/3505:37,availability,operat,operations,37,[VecOps][ROOT-10012] Add max and min operations;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3505
https://github.com/root-project/root/pull/3506:162,reliability,doe,does,162,"[DF][ROOT-10022]Add support for TBranchObject ; This should fix the RDF-related part of ROOT-10022. TBranchObjects are still not supported though, as TTreeReader does not support them (see https://sft.its.cern.ch/jira/browse/ROOT-10023).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3506
https://github.com/root-project/root/pull/3506:20,usability,support,support,20,"[DF][ROOT-10022]Add support for TBranchObject ; This should fix the RDF-related part of ROOT-10022. TBranchObjects are still not supported though, as TTreeReader does not support them (see https://sft.its.cern.ch/jira/browse/ROOT-10023).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3506
https://github.com/root-project/root/pull/3506:129,usability,support,supported,129,"[DF][ROOT-10022]Add support for TBranchObject ; This should fix the RDF-related part of ROOT-10022. TBranchObjects are still not supported though, as TTreeReader does not support them (see https://sft.its.cern.ch/jira/browse/ROOT-10023).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3506
https://github.com/root-project/root/pull/3506:171,usability,support,support,171,"[DF][ROOT-10022]Add support for TBranchObject ; This should fix the RDF-related part of ROOT-10022. TBranchObjects are still not supported though, as TTreeReader does not support them (see https://sft.its.cern.ch/jira/browse/ROOT-10023).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3506
https://github.com/root-project/root/pull/3507:40,availability,operat,operations,40,"[VecOps][ROOT-10009] Add ArgMax, ArgMin operations;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3507
https://github.com/root-project/root/pull/3508:9,performance,memor,memory,9,[RF] Fix memory leaks in RooFit/Stats.; [ROOT-5236]. The RooProdPdf was leaking memory when caching values. HistoToWorkspaceFactoryFast was keeping RooArgSets alive (hence never freeing memory arenas). AsymptoticCalculator was leaking datasets.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3508
https://github.com/root-project/root/pull/3508:80,performance,memor,memory,80,[RF] Fix memory leaks in RooFit/Stats.; [ROOT-5236]. The RooProdPdf was leaking memory when caching values. HistoToWorkspaceFactoryFast was keeping RooArgSets alive (hence never freeing memory arenas). AsymptoticCalculator was leaking datasets.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3508
https://github.com/root-project/root/pull/3508:92,performance,cach,caching,92,[RF] Fix memory leaks in RooFit/Stats.; [ROOT-5236]. The RooProdPdf was leaking memory when caching values. HistoToWorkspaceFactoryFast was keeping RooArgSets alive (hence never freeing memory arenas). AsymptoticCalculator was leaking datasets.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3508
https://github.com/root-project/root/pull/3508:186,performance,memor,memory,186,[RF] Fix memory leaks in RooFit/Stats.; [ROOT-5236]. The RooProdPdf was leaking memory when caching values. HistoToWorkspaceFactoryFast was keeping RooArgSets alive (hence never freeing memory arenas). AsymptoticCalculator was leaking datasets.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3508
https://github.com/root-project/root/pull/3508:9,usability,memor,memory,9,[RF] Fix memory leaks in RooFit/Stats.; [ROOT-5236]. The RooProdPdf was leaking memory when caching values. HistoToWorkspaceFactoryFast was keeping RooArgSets alive (hence never freeing memory arenas). AsymptoticCalculator was leaking datasets.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3508
https://github.com/root-project/root/pull/3508:80,usability,memor,memory,80,[RF] Fix memory leaks in RooFit/Stats.; [ROOT-5236]. The RooProdPdf was leaking memory when caching values. HistoToWorkspaceFactoryFast was keeping RooArgSets alive (hence never freeing memory arenas). AsymptoticCalculator was leaking datasets.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3508
https://github.com/root-project/root/pull/3508:186,usability,memor,memory,186,[RF] Fix memory leaks in RooFit/Stats.; [ROOT-5236]. The RooProdPdf was leaking memory when caching values. HistoToWorkspaceFactoryFast was keeping RooArgSets alive (hence never freeing memory arenas). AsymptoticCalculator was leaking datasets.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3508
https://github.com/root-project/root/pull/3509:9,performance,memor,memory,9,[RF] Fix memory leaks in RooFit/Stats.; [ROOT-5236]. The RooProdPdf was leaking memory when caching values. HistoToWorkspaceFactoryFast was keeping RooArgSets alive (hence never freeing memory arenas). AsymptoticCalculator was leaking datasets. (cherry picked from commit 88369955a919f6457a89b28f440599da63bd2f91),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3509
https://github.com/root-project/root/pull/3509:80,performance,memor,memory,80,[RF] Fix memory leaks in RooFit/Stats.; [ROOT-5236]. The RooProdPdf was leaking memory when caching values. HistoToWorkspaceFactoryFast was keeping RooArgSets alive (hence never freeing memory arenas). AsymptoticCalculator was leaking datasets. (cherry picked from commit 88369955a919f6457a89b28f440599da63bd2f91),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3509
https://github.com/root-project/root/pull/3509:92,performance,cach,caching,92,[RF] Fix memory leaks in RooFit/Stats.; [ROOT-5236]. The RooProdPdf was leaking memory when caching values. HistoToWorkspaceFactoryFast was keeping RooArgSets alive (hence never freeing memory arenas). AsymptoticCalculator was leaking datasets. (cherry picked from commit 88369955a919f6457a89b28f440599da63bd2f91),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3509
https://github.com/root-project/root/pull/3509:186,performance,memor,memory,186,[RF] Fix memory leaks in RooFit/Stats.; [ROOT-5236]. The RooProdPdf was leaking memory when caching values. HistoToWorkspaceFactoryFast was keeping RooArgSets alive (hence never freeing memory arenas). AsymptoticCalculator was leaking datasets. (cherry picked from commit 88369955a919f6457a89b28f440599da63bd2f91),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3509
https://github.com/root-project/root/pull/3509:9,usability,memor,memory,9,[RF] Fix memory leaks in RooFit/Stats.; [ROOT-5236]. The RooProdPdf was leaking memory when caching values. HistoToWorkspaceFactoryFast was keeping RooArgSets alive (hence never freeing memory arenas). AsymptoticCalculator was leaking datasets. (cherry picked from commit 88369955a919f6457a89b28f440599da63bd2f91),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3509
https://github.com/root-project/root/pull/3509:80,usability,memor,memory,80,[RF] Fix memory leaks in RooFit/Stats.; [ROOT-5236]. The RooProdPdf was leaking memory when caching values. HistoToWorkspaceFactoryFast was keeping RooArgSets alive (hence never freeing memory arenas). AsymptoticCalculator was leaking datasets. (cherry picked from commit 88369955a919f6457a89b28f440599da63bd2f91),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3509
https://github.com/root-project/root/pull/3509:186,usability,memor,memory,186,[RF] Fix memory leaks in RooFit/Stats.; [ROOT-5236]. The RooProdPdf was leaking memory when caching values. HistoToWorkspaceFactoryFast was keeping RooArgSets alive (hence never freeing memory arenas). AsymptoticCalculator was leaking datasets. (cherry picked from commit 88369955a919f6457a89b28f440599da63bd2f91),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3509
https://github.com/root-project/root/pull/3510:72,deployability,updat,updates,72,[RF] Improve RooFit documentation.; Collection of various documentation updates/fixes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3510
https://github.com/root-project/root/pull/3510:72,safety,updat,updates,72,[RF] Improve RooFit documentation.; Collection of various documentation updates/fixes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3510
https://github.com/root-project/root/pull/3510:72,security,updat,updates,72,[RF] Improve RooFit documentation.; Collection of various documentation updates/fixes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3510
https://github.com/root-project/root/pull/3510:20,usability,document,documentation,20,[RF] Improve RooFit documentation.; Collection of various documentation updates/fixes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3510
https://github.com/root-project/root/pull/3510:58,usability,document,documentation,58,[RF] Improve RooFit documentation.; Collection of various documentation updates/fixes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3510
https://github.com/root-project/root/pull/3511:5,energy efficiency,Reduc,Reduce,5,"[RF] Reduce visibility of public function in RooAddPdf.; As all PDFs, RooAddPdf inherits the protected evaluate(). It is, however, mistakenly listed as public. Calling it will yield a useless value, because it bypasses the usual normalisation steps applied. for other PDFs. Reducing the visibility will prevent this, and also remove it from doxygen.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3511
https://github.com/root-project/root/pull/3511:274,energy efficiency,Reduc,Reducing,274,"[RF] Reduce visibility of public function in RooAddPdf.; As all PDFs, RooAddPdf inherits the protected evaluate(). It is, however, mistakenly listed as public. Calling it will yield a useless value, because it bypasses the usual normalisation steps applied. for other PDFs. Reducing the visibility will prevent this, and also remove it from doxygen.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3511
https://github.com/root-project/root/pull/3511:26,integrability,pub,public,26,"[RF] Reduce visibility of public function in RooAddPdf.; As all PDFs, RooAddPdf inherits the protected evaluate(). It is, however, mistakenly listed as public. Calling it will yield a useless value, because it bypasses the usual normalisation steps applied. for other PDFs. Reducing the visibility will prevent this, and also remove it from doxygen.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3511
https://github.com/root-project/root/pull/3511:152,integrability,pub,public,152,"[RF] Reduce visibility of public function in RooAddPdf.; As all PDFs, RooAddPdf inherits the protected evaluate(). It is, however, mistakenly listed as public. Calling it will yield a useless value, because it bypasses the usual normalisation steps applied. for other PDFs. Reducing the visibility will prevent this, and also remove it from doxygen.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3511
https://github.com/root-project/root/pull/3511:80,modifiability,inherit,inherits,80,"[RF] Reduce visibility of public function in RooAddPdf.; As all PDFs, RooAddPdf inherits the protected evaluate(). It is, however, mistakenly listed as public. Calling it will yield a useless value, because it bypasses the usual normalisation steps applied. for other PDFs. Reducing the visibility will prevent this, and also remove it from doxygen.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3511
https://github.com/root-project/root/pull/3511:303,safety,prevent,prevent,303,"[RF] Reduce visibility of public function in RooAddPdf.; As all PDFs, RooAddPdf inherits the protected evaluate(). It is, however, mistakenly listed as public. Calling it will yield a useless value, because it bypasses the usual normalisation steps applied. for other PDFs. Reducing the visibility will prevent this, and also remove it from doxygen.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3511
https://github.com/root-project/root/pull/3511:303,security,preven,prevent,303,"[RF] Reduce visibility of public function in RooAddPdf.; As all PDFs, RooAddPdf inherits the protected evaluate(). It is, however, mistakenly listed as public. Calling it will yield a useless value, because it bypasses the usual normalisation steps applied. for other PDFs. Reducing the visibility will prevent this, and also remove it from doxygen.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3511
https://github.com/root-project/root/pull/3512:10,interoperability,format,formatting,10,[NFC] Fix formatting of code snippet;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3512
https://github.com/root-project/root/pull/3513:1061,availability,state,state,1061,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:396,deployability,version,version,396,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:447,deployability,version,version,447,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:1435,deployability,manag,management,1435,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:1435,energy efficiency,manag,management,1435,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:396,integrability,version,version,396,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:447,integrability,version,version,447,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:1061,integrability,state,state,1061,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:234,interoperability,specif,specified,234,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:331,interoperability,compatib,compatibility,331,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:518,interoperability,share,shared,518,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:1666,interoperability,format,format,1666,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:50,modifiability,extens,extension,50,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:77,modifiability,pac,package,77,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:281,modifiability,extens,extensions,281,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:302,modifiability,extens,extension,302,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:396,modifiability,version,version,396,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:438,modifiability,exten,extended,438,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:447,modifiability,version,version,447,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:1511,modifiability,concern,concerning,1511,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:143,performance,time,time,143,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:1070,performance,cach,cached,1070,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:460,safety,test,tested,460,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:1435,safety,manag,management,1435,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:1680,security,modif,modified,1680,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:94,testability,simul,simulation,94,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:199,testability,simul,simulation,199,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:460,testability,test,tested,460,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:525,testability,simul,simulation,525,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:1511,testability,concern,concerning,1511,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:252,usability,user,user,252,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:364,usability,user,user,364,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:602,usability,navigat,navigation,602,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:801,usability,user,user,801,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:1153,usability,navigat,navigator,1153,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3513:1559,usability,user,user,1559,"Use multiple different engines in VMC; This is an extension allowing the VMC package to run a simulation. with multiple different engines at a time. Tracks can be transferred. among engines during a simulation run based on conditions specified by. the user. Important notes on the extensions:. 1) This extension preserves backward-compatibility in the sense that. user code relying on the former version of VMC is still running. with the extended version. Was tested with GEANT3_VMC@v2-6 and. GEANT4_VMC@v3-6-p1. 2) A shared simulation is only possible when TGeo is used for geometry. construction and navigation. 3) A TMCManager singleton object is responsible for handling multiple. engines and can be obtained on request calling. TVirtualMCApplication::RequestManager() during construction of the. user application class. 4) The introduced TMCParticleStatus objects hold additional. information to keep track of properties when a track is transferred. between engines. 5) When a track is interrupted in one engine to be transferred to. another, the geometry state is cached in the form of a. TGeoBranchArray object. It will be used to initialize the navigator. when this track is picked up for further transport in the next. engine. This is especially useful/required when a track is. transferred at a volume boundary in order to be picked up in the. entered volume and not in the one just left. This is a main reason. why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and. implementation in the user code can be found in the. montecarlo/vmc/README.md. Further note:. This commit also applies the clang format to the modified and new. files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3513
https://github.com/root-project/root/pull/3515:272,deployability,integr,integration,272,[PyROOT exp] Improve resolving typename with short circuit for common…; … case. Thanks @Axel-Naumann ! This fixes the performance issues for millions of request to the type system from cppyy if the type is for example a `std::vector<int>`. Waiting for response of Wim for integration in the official cppyy-clingwrapper repo.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3515
https://github.com/root-project/root/pull/3515:272,integrability,integr,integration,272,[PyROOT exp] Improve resolving typename with short circuit for common…; … case. Thanks @Axel-Naumann ! This fixes the performance issues for millions of request to the type system from cppyy if the type is for example a `std::vector<int>`. Waiting for response of Wim for integration in the official cppyy-clingwrapper repo.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3515
https://github.com/root-project/root/pull/3515:272,interoperability,integr,integration,272,[PyROOT exp] Improve resolving typename with short circuit for common…; … case. Thanks @Axel-Naumann ! This fixes the performance issues for millions of request to the type system from cppyy if the type is for example a `std::vector<int>`. Waiting for response of Wim for integration in the official cppyy-clingwrapper repo.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3515
https://github.com/root-project/root/pull/3515:272,modifiability,integr,integration,272,[PyROOT exp] Improve resolving typename with short circuit for common…; … case. Thanks @Axel-Naumann ! This fixes the performance issues for millions of request to the type system from cppyy if the type is for example a `std::vector<int>`. Waiting for response of Wim for integration in the official cppyy-clingwrapper repo.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3515
https://github.com/root-project/root/pull/3515:118,performance,performance issu,performance issues,118,[PyROOT exp] Improve resolving typename with short circuit for common…; … case. Thanks @Axel-Naumann ! This fixes the performance issues for millions of request to the type system from cppyy if the type is for example a `std::vector<int>`. Waiting for response of Wim for integration in the official cppyy-clingwrapper repo.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3515
https://github.com/root-project/root/pull/3515:272,reliability,integr,integration,272,[PyROOT exp] Improve resolving typename with short circuit for common…; … case. Thanks @Axel-Naumann ! This fixes the performance issues for millions of request to the type system from cppyy if the type is for example a `std::vector<int>`. Waiting for response of Wim for integration in the official cppyy-clingwrapper repo.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3515
https://github.com/root-project/root/pull/3515:272,security,integr,integration,272,[PyROOT exp] Improve resolving typename with short circuit for common…; … case. Thanks @Axel-Naumann ! This fixes the performance issues for millions of request to the type system from cppyy if the type is for example a `std::vector<int>`. Waiting for response of Wim for integration in the official cppyy-clingwrapper repo.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3515
https://github.com/root-project/root/pull/3515:272,testability,integr,integration,272,[PyROOT exp] Improve resolving typename with short circuit for common…; … case. Thanks @Axel-Naumann ! This fixes the performance issues for millions of request to the type system from cppyy if the type is for example a `std::vector<int>`. Waiting for response of Wim for integration in the official cppyy-clingwrapper repo.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3515
https://github.com/root-project/root/pull/3515:118,usability,perform,performance,118,[PyROOT exp] Improve resolving typename with short circuit for common…; … case. Thanks @Axel-Naumann ! This fixes the performance issues for millions of request to the type system from cppyy if the type is for example a `std::vector<int>`. Waiting for response of Wim for integration in the official cppyy-clingwrapper repo.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3515
https://github.com/root-project/root/pull/3516:378,deployability,scale,scale,378,"Fix Dropout for Dense layers in MethodDL; As reported by @behrenhoff MethodDL did not have so far an implementation for the dropout. . (see https://root-forum.cern.ch/t/method-kdl-in-tmva/32863). This PR fixes the dropout for dense layers, implementing what has been done for the previous MethodDNN. . The implementation removes (by setting to zero) randomly input nodes and re-scale the surviving ones by a factor 1/(1.- dropout_probability). In this way no changes are needed for testing and evaluating a trained network with dropout. . The PR applies also some other small improvements such as print out of optimizer names and some fixes in the cross-evaluation function to avoid NaN outputs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3516
https://github.com/root-project/root/pull/3516:378,energy efficiency,scale,scale,378,"Fix Dropout for Dense layers in MethodDL; As reported by @behrenhoff MethodDL did not have so far an implementation for the dropout. . (see https://root-forum.cern.ch/t/method-kdl-in-tmva/32863). This PR fixes the dropout for dense layers, implementing what has been done for the previous MethodDNN. . The implementation removes (by setting to zero) randomly input nodes and re-scale the surviving ones by a factor 1/(1.- dropout_probability). In this way no changes are needed for testing and evaluating a trained network with dropout. . The PR applies also some other small improvements such as print out of optimizer names and some fixes in the cross-evaluation function to avoid NaN outputs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3516
https://github.com/root-project/root/pull/3516:610,energy efficiency,optim,optimizer,610,"Fix Dropout for Dense layers in MethodDL; As reported by @behrenhoff MethodDL did not have so far an implementation for the dropout. . (see https://root-forum.cern.ch/t/method-kdl-in-tmva/32863). This PR fixes the dropout for dense layers, implementing what has been done for the previous MethodDNN. . The implementation removes (by setting to zero) randomly input nodes and re-scale the surviving ones by a factor 1/(1.- dropout_probability). In this way no changes are needed for testing and evaluating a trained network with dropout. . The PR applies also some other small improvements such as print out of optimizer names and some fixes in the cross-evaluation function to avoid NaN outputs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3516
https://github.com/root-project/root/pull/3516:22,modifiability,layer,layers,22,"Fix Dropout for Dense layers in MethodDL; As reported by @behrenhoff MethodDL did not have so far an implementation for the dropout. . (see https://root-forum.cern.ch/t/method-kdl-in-tmva/32863). This PR fixes the dropout for dense layers, implementing what has been done for the previous MethodDNN. . The implementation removes (by setting to zero) randomly input nodes and re-scale the surviving ones by a factor 1/(1.- dropout_probability). In this way no changes are needed for testing and evaluating a trained network with dropout. . The PR applies also some other small improvements such as print out of optimizer names and some fixes in the cross-evaluation function to avoid NaN outputs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3516
https://github.com/root-project/root/pull/3516:232,modifiability,layer,layers,232,"Fix Dropout for Dense layers in MethodDL; As reported by @behrenhoff MethodDL did not have so far an implementation for the dropout. . (see https://root-forum.cern.ch/t/method-kdl-in-tmva/32863). This PR fixes the dropout for dense layers, implementing what has been done for the previous MethodDNN. . The implementation removes (by setting to zero) randomly input nodes and re-scale the surviving ones by a factor 1/(1.- dropout_probability). In this way no changes are needed for testing and evaluating a trained network with dropout. . The PR applies also some other small improvements such as print out of optimizer names and some fixes in the cross-evaluation function to avoid NaN outputs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3516
https://github.com/root-project/root/pull/3516:378,modifiability,scal,scale,378,"Fix Dropout for Dense layers in MethodDL; As reported by @behrenhoff MethodDL did not have so far an implementation for the dropout. . (see https://root-forum.cern.ch/t/method-kdl-in-tmva/32863). This PR fixes the dropout for dense layers, implementing what has been done for the previous MethodDNN. . The implementation removes (by setting to zero) randomly input nodes and re-scale the surviving ones by a factor 1/(1.- dropout_probability). In this way no changes are needed for testing and evaluating a trained network with dropout. . The PR applies also some other small improvements such as print out of optimizer names and some fixes in the cross-evaluation function to avoid NaN outputs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3516
https://github.com/root-project/root/pull/3516:378,performance,scale,scale,378,"Fix Dropout for Dense layers in MethodDL; As reported by @behrenhoff MethodDL did not have so far an implementation for the dropout. . (see https://root-forum.cern.ch/t/method-kdl-in-tmva/32863). This PR fixes the dropout for dense layers, implementing what has been done for the previous MethodDNN. . The implementation removes (by setting to zero) randomly input nodes and re-scale the surviving ones by a factor 1/(1.- dropout_probability). In this way no changes are needed for testing and evaluating a trained network with dropout. . The PR applies also some other small improvements such as print out of optimizer names and some fixes in the cross-evaluation function to avoid NaN outputs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3516
https://github.com/root-project/root/pull/3516:515,performance,network,network,515,"Fix Dropout for Dense layers in MethodDL; As reported by @behrenhoff MethodDL did not have so far an implementation for the dropout. . (see https://root-forum.cern.ch/t/method-kdl-in-tmva/32863). This PR fixes the dropout for dense layers, implementing what has been done for the previous MethodDNN. . The implementation removes (by setting to zero) randomly input nodes and re-scale the surviving ones by a factor 1/(1.- dropout_probability). In this way no changes are needed for testing and evaluating a trained network with dropout. . The PR applies also some other small improvements such as print out of optimizer names and some fixes in the cross-evaluation function to avoid NaN outputs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3516
https://github.com/root-project/root/pull/3516:610,performance,optimiz,optimizer,610,"Fix Dropout for Dense layers in MethodDL; As reported by @behrenhoff MethodDL did not have so far an implementation for the dropout. . (see https://root-forum.cern.ch/t/method-kdl-in-tmva/32863). This PR fixes the dropout for dense layers, implementing what has been done for the previous MethodDNN. . The implementation removes (by setting to zero) randomly input nodes and re-scale the surviving ones by a factor 1/(1.- dropout_probability). In this way no changes are needed for testing and evaluating a trained network with dropout. . The PR applies also some other small improvements such as print out of optimizer names and some fixes in the cross-evaluation function to avoid NaN outputs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3516
https://github.com/root-project/root/pull/3516:359,safety,input,input,359,"Fix Dropout for Dense layers in MethodDL; As reported by @behrenhoff MethodDL did not have so far an implementation for the dropout. . (see https://root-forum.cern.ch/t/method-kdl-in-tmva/32863). This PR fixes the dropout for dense layers, implementing what has been done for the previous MethodDNN. . The implementation removes (by setting to zero) randomly input nodes and re-scale the surviving ones by a factor 1/(1.- dropout_probability). In this way no changes are needed for testing and evaluating a trained network with dropout. . The PR applies also some other small improvements such as print out of optimizer names and some fixes in the cross-evaluation function to avoid NaN outputs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3516
https://github.com/root-project/root/pull/3516:482,safety,test,testing,482,"Fix Dropout for Dense layers in MethodDL; As reported by @behrenhoff MethodDL did not have so far an implementation for the dropout. . (see https://root-forum.cern.ch/t/method-kdl-in-tmva/32863). This PR fixes the dropout for dense layers, implementing what has been done for the previous MethodDNN. . The implementation removes (by setting to zero) randomly input nodes and re-scale the surviving ones by a factor 1/(1.- dropout_probability). In this way no changes are needed for testing and evaluating a trained network with dropout. . The PR applies also some other small improvements such as print out of optimizer names and some fixes in the cross-evaluation function to avoid NaN outputs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3516
https://github.com/root-project/root/pull/3516:677,safety,avoid,avoid,677,"Fix Dropout for Dense layers in MethodDL; As reported by @behrenhoff MethodDL did not have so far an implementation for the dropout. . (see https://root-forum.cern.ch/t/method-kdl-in-tmva/32863). This PR fixes the dropout for dense layers, implementing what has been done for the previous MethodDNN. . The implementation removes (by setting to zero) randomly input nodes and re-scale the surviving ones by a factor 1/(1.- dropout_probability). In this way no changes are needed for testing and evaluating a trained network with dropout. . The PR applies also some other small improvements such as print out of optimizer names and some fixes in the cross-evaluation function to avoid NaN outputs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3516
https://github.com/root-project/root/pull/3516:515,security,network,network,515,"Fix Dropout for Dense layers in MethodDL; As reported by @behrenhoff MethodDL did not have so far an implementation for the dropout. . (see https://root-forum.cern.ch/t/method-kdl-in-tmva/32863). This PR fixes the dropout for dense layers, implementing what has been done for the previous MethodDNN. . The implementation removes (by setting to zero) randomly input nodes and re-scale the surviving ones by a factor 1/(1.- dropout_probability). In this way no changes are needed for testing and evaluating a trained network with dropout. . The PR applies also some other small improvements such as print out of optimizer names and some fixes in the cross-evaluation function to avoid NaN outputs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3516
https://github.com/root-project/root/pull/3516:482,testability,test,testing,482,"Fix Dropout for Dense layers in MethodDL; As reported by @behrenhoff MethodDL did not have so far an implementation for the dropout. . (see https://root-forum.cern.ch/t/method-kdl-in-tmva/32863). This PR fixes the dropout for dense layers, implementing what has been done for the previous MethodDNN. . The implementation removes (by setting to zero) randomly input nodes and re-scale the surviving ones by a factor 1/(1.- dropout_probability). In this way no changes are needed for testing and evaluating a trained network with dropout. . The PR applies also some other small improvements such as print out of optimizer names and some fixes in the cross-evaluation function to avoid NaN outputs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3516
https://github.com/root-project/root/pull/3516:359,usability,input,input,359,"Fix Dropout for Dense layers in MethodDL; As reported by @behrenhoff MethodDL did not have so far an implementation for the dropout. . (see https://root-forum.cern.ch/t/method-kdl-in-tmva/32863). This PR fixes the dropout for dense layers, implementing what has been done for the previous MethodDNN. . The implementation removes (by setting to zero) randomly input nodes and re-scale the surviving ones by a factor 1/(1.- dropout_probability). In this way no changes are needed for testing and evaluating a trained network with dropout. . The PR applies also some other small improvements such as print out of optimizer names and some fixes in the cross-evaluation function to avoid NaN outputs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3516
https://github.com/root-project/root/pull/3517:21,availability,error,error,21,"[Exp PyROOT] Prevent error at teardown of RooPlot; Fix test error:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/62/LABEL=mac1014,SPEC=default/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_roodatahist_ploton/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3517
https://github.com/root-project/root/pull/3517:60,availability,error,error,60,"[Exp PyROOT] Prevent error at teardown of RooPlot; Fix test error:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/62/LABEL=mac1014,SPEC=default/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_roodatahist_ploton/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3517
https://github.com/root-project/root/pull/3517:177,interoperability,bind,bindings,177,"[Exp PyROOT] Prevent error at teardown of RooPlot; Fix test error:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/62/LABEL=mac1014,SPEC=default/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_roodatahist_ploton/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3517
https://github.com/root-project/root/pull/3517:177,modifiability,bind,bindings,177,"[Exp PyROOT] Prevent error at teardown of RooPlot; Fix test error:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/62/LABEL=mac1014,SPEC=default/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_roodatahist_ploton/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3517
https://github.com/root-project/root/pull/3517:21,performance,error,error,21,"[Exp PyROOT] Prevent error at teardown of RooPlot; Fix test error:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/62/LABEL=mac1014,SPEC=default/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_roodatahist_ploton/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3517
https://github.com/root-project/root/pull/3517:60,performance,error,error,60,"[Exp PyROOT] Prevent error at teardown of RooPlot; Fix test error:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/62/LABEL=mac1014,SPEC=default/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_roodatahist_ploton/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3517
https://github.com/root-project/root/pull/3517:13,safety,Prevent,Prevent,13,"[Exp PyROOT] Prevent error at teardown of RooPlot; Fix test error:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/62/LABEL=mac1014,SPEC=default/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_roodatahist_ploton/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3517
https://github.com/root-project/root/pull/3517:21,safety,error,error,21,"[Exp PyROOT] Prevent error at teardown of RooPlot; Fix test error:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/62/LABEL=mac1014,SPEC=default/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_roodatahist_ploton/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3517
https://github.com/root-project/root/pull/3517:55,safety,test,test,55,"[Exp PyROOT] Prevent error at teardown of RooPlot; Fix test error:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/62/LABEL=mac1014,SPEC=default/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_roodatahist_ploton/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3517
https://github.com/root-project/root/pull/3517:60,safety,error,error,60,"[Exp PyROOT] Prevent error at teardown of RooPlot; Fix test error:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/62/LABEL=mac1014,SPEC=default/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_roodatahist_ploton/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3517
https://github.com/root-project/root/pull/3517:148,safety,test,testReport,148,"[Exp PyROOT] Prevent error at teardown of RooPlot; Fix test error:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/62/LABEL=mac1014,SPEC=default/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_roodatahist_ploton/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3517
https://github.com/root-project/root/pull/3517:213,safety,test,test,213,"[Exp PyROOT] Prevent error at teardown of RooPlot; Fix test error:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/62/LABEL=mac1014,SPEC=default/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_roodatahist_ploton/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3517
https://github.com/root-project/root/pull/3517:13,security,Preven,Prevent,13,"[Exp PyROOT] Prevent error at teardown of RooPlot; Fix test error:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/62/LABEL=mac1014,SPEC=default/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_roodatahist_ploton/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3517
https://github.com/root-project/root/pull/3517:55,testability,test,test,55,"[Exp PyROOT] Prevent error at teardown of RooPlot; Fix test error:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/62/LABEL=mac1014,SPEC=default/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_roodatahist_ploton/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3517
https://github.com/root-project/root/pull/3517:148,testability,test,testReport,148,"[Exp PyROOT] Prevent error at teardown of RooPlot; Fix test error:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/62/LABEL=mac1014,SPEC=default/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_roodatahist_ploton/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3517
https://github.com/root-project/root/pull/3517:213,testability,test,test,213,"[Exp PyROOT] Prevent error at teardown of RooPlot; Fix test error:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/62/LABEL=mac1014,SPEC=default/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_roodatahist_ploton/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3517
https://github.com/root-project/root/pull/3517:21,usability,error,error,21,"[Exp PyROOT] Prevent error at teardown of RooPlot; Fix test error:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/62/LABEL=mac1014,SPEC=default/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_roodatahist_ploton/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3517
https://github.com/root-project/root/pull/3517:60,usability,error,error,60,"[Exp PyROOT] Prevent error at teardown of RooPlot; Fix test error:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/62/LABEL=mac1014,SPEC=default/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_roodatahist_ploton/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3517
https://github.com/root-project/root/pull/3518:202,integrability,filter,filter,202,"[IO] Do not loop over base classes of pair since it is an stl template; Can we get this commit on 6-12 please, it's related to this request:. https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-9995?filter=allopenissues. Cheers,. M.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3518
https://github.com/root-project/root/pull/3519:27,safety,test,tests,27,[Exp PyROOT] Re-enable RDF tests and tutorials; `string_view` support in Cppyy for < cxx14 fixed these tests:. https://github.com/root-project/root/pull/3455,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3519
https://github.com/root-project/root/pull/3519:103,safety,test,tests,103,[Exp PyROOT] Re-enable RDF tests and tutorials; `string_view` support in Cppyy for < cxx14 fixed these tests:. https://github.com/root-project/root/pull/3455,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3519
https://github.com/root-project/root/pull/3519:27,testability,test,tests,27,[Exp PyROOT] Re-enable RDF tests and tutorials; `string_view` support in Cppyy for < cxx14 fixed these tests:. https://github.com/root-project/root/pull/3455,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3519
https://github.com/root-project/root/pull/3519:103,testability,test,tests,103,[Exp PyROOT] Re-enable RDF tests and tutorials; `string_view` support in Cppyy for < cxx14 fixed these tests:. https://github.com/root-project/root/pull/3455,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3519
https://github.com/root-project/root/pull/3519:62,usability,support,support,62,[Exp PyROOT] Re-enable RDF tests and tutorials; `string_view` support in Cppyy for < cxx14 fixed these tests:. https://github.com/root-project/root/pull/3455,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3519
https://github.com/root-project/root/pull/3520:29,deployability,instal,install,29,"No globbing in html/, do not install tests, fix FindOracle.cmake to not change bindir;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3520
https://github.com/root-project/root/pull/3520:79,interoperability,bind,bindir,79,"No globbing in html/, do not install tests, fix FindOracle.cmake to not change bindir;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3520
https://github.com/root-project/root/pull/3520:79,modifiability,bind,bindir,79,"No globbing in html/, do not install tests, fix FindOracle.cmake to not change bindir;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3520
https://github.com/root-project/root/pull/3520:37,safety,test,tests,37,"No globbing in html/, do not install tests, fix FindOracle.cmake to not change bindir;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3520
https://github.com/root-project/root/pull/3520:37,testability,test,tests,37,"No globbing in html/, do not install tests, fix FindOracle.cmake to not change bindir;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3520
https://github.com/root-project/root/pull/3521:163,deployability,build,buildid,163,"[Exp PyROOT] Fix cast-function-type warnings; In the PyROOT experimental nightlies there are a number of warnings:. http://cdash.cern.ch/viewBuildError.php?type=1&buildid=633548. Most of them are related to casting function pointers and come from Cppyy code. As Wim pointed out in this ticket:. https://sft.its.cern.ch/jira/browse/ROOT-9612. those casts are not incorrect and do not produce any malfunctioning. They correspond to casts to `PyCFunction`, used to implement Python callables in C, whose signature is `PyObject* (*)(PyObject*, PyObject*)`, the first argument being a pointer to `self` and the second a pointer to a tuple with the arguments received from Python. Sometimes, a function that only receives one `PyObject*` is cast to `PyCFunction`, since there is an extra `METH_XYZ` flag that determines how the function will be called:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/cppyy/CPyCppyy/src/Pythonize.cxx#L1028. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/cppyy/CPyCppyy/src/Pythonize.cxx#L807. This PR disables the `cast-function-type` warning when building Cppyy and fixes a couple of equivalent warnings in PyROOT experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3521
https://github.com/root-project/root/pull/3521:1138,deployability,build,building,1138,"[Exp PyROOT] Fix cast-function-type warnings; In the PyROOT experimental nightlies there are a number of warnings:. http://cdash.cern.ch/viewBuildError.php?type=1&buildid=633548. Most of them are related to casting function pointers and come from Cppyy code. As Wim pointed out in this ticket:. https://sft.its.cern.ch/jira/browse/ROOT-9612. those casts are not incorrect and do not produce any malfunctioning. They correspond to casts to `PyCFunction`, used to implement Python callables in C, whose signature is `PyObject* (*)(PyObject*, PyObject*)`, the first argument being a pointer to `self` and the second a pointer to a tuple with the arguments received from Python. Sometimes, a function that only receives one `PyObject*` is cast to `PyCFunction`, since there is an extra `METH_XYZ` flag that determines how the function will be called:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/cppyy/CPyCppyy/src/Pythonize.cxx#L1028. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/cppyy/CPyCppyy/src/Pythonize.cxx#L807. This PR disables the `cast-function-type` warning when building Cppyy and fixes a couple of equivalent warnings in PyROOT experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3521
https://github.com/root-project/root/pull/3521:1165,integrability,coupl,couple,1165,"[Exp PyROOT] Fix cast-function-type warnings; In the PyROOT experimental nightlies there are a number of warnings:. http://cdash.cern.ch/viewBuildError.php?type=1&buildid=633548. Most of them are related to casting function pointers and come from Cppyy code. As Wim pointed out in this ticket:. https://sft.its.cern.ch/jira/browse/ROOT-9612. those casts are not incorrect and do not produce any malfunctioning. They correspond to casts to `PyCFunction`, used to implement Python callables in C, whose signature is `PyObject* (*)(PyObject*, PyObject*)`, the first argument being a pointer to `self` and the second a pointer to a tuple with the arguments received from Python. Sometimes, a function that only receives one `PyObject*` is cast to `PyCFunction`, since there is an extra `METH_XYZ` flag that determines how the function will be called:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/cppyy/CPyCppyy/src/Pythonize.cxx#L1028. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/cppyy/CPyCppyy/src/Pythonize.cxx#L807. This PR disables the `cast-function-type` warning when building Cppyy and fixes a couple of equivalent warnings in PyROOT experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3521
https://github.com/root-project/root/pull/3521:897,interoperability,bind,bindings,897,"[Exp PyROOT] Fix cast-function-type warnings; In the PyROOT experimental nightlies there are a number of warnings:. http://cdash.cern.ch/viewBuildError.php?type=1&buildid=633548. Most of them are related to casting function pointers and come from Cppyy code. As Wim pointed out in this ticket:. https://sft.its.cern.ch/jira/browse/ROOT-9612. those casts are not incorrect and do not produce any malfunctioning. They correspond to casts to `PyCFunction`, used to implement Python callables in C, whose signature is `PyObject* (*)(PyObject*, PyObject*)`, the first argument being a pointer to `self` and the second a pointer to a tuple with the arguments received from Python. Sometimes, a function that only receives one `PyObject*` is cast to `PyCFunction`, since there is an extra `METH_XYZ` flag that determines how the function will be called:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/cppyy/CPyCppyy/src/Pythonize.cxx#L1028. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/cppyy/CPyCppyy/src/Pythonize.cxx#L807. This PR disables the `cast-function-type` warning when building Cppyy and fixes a couple of equivalent warnings in PyROOT experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3521
https://github.com/root-project/root/pull/3521:1015,interoperability,bind,bindings,1015,"[Exp PyROOT] Fix cast-function-type warnings; In the PyROOT experimental nightlies there are a number of warnings:. http://cdash.cern.ch/viewBuildError.php?type=1&buildid=633548. Most of them are related to casting function pointers and come from Cppyy code. As Wim pointed out in this ticket:. https://sft.its.cern.ch/jira/browse/ROOT-9612. those casts are not incorrect and do not produce any malfunctioning. They correspond to casts to `PyCFunction`, used to implement Python callables in C, whose signature is `PyObject* (*)(PyObject*, PyObject*)`, the first argument being a pointer to `self` and the second a pointer to a tuple with the arguments received from Python. Sometimes, a function that only receives one `PyObject*` is cast to `PyCFunction`, since there is an extra `METH_XYZ` flag that determines how the function will be called:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/cppyy/CPyCppyy/src/Pythonize.cxx#L1028. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/cppyy/CPyCppyy/src/Pythonize.cxx#L807. This PR disables the `cast-function-type` warning when building Cppyy and fixes a couple of equivalent warnings in PyROOT experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3521
https://github.com/root-project/root/pull/3521:897,modifiability,bind,bindings,897,"[Exp PyROOT] Fix cast-function-type warnings; In the PyROOT experimental nightlies there are a number of warnings:. http://cdash.cern.ch/viewBuildError.php?type=1&buildid=633548. Most of them are related to casting function pointers and come from Cppyy code. As Wim pointed out in this ticket:. https://sft.its.cern.ch/jira/browse/ROOT-9612. those casts are not incorrect and do not produce any malfunctioning. They correspond to casts to `PyCFunction`, used to implement Python callables in C, whose signature is `PyObject* (*)(PyObject*, PyObject*)`, the first argument being a pointer to `self` and the second a pointer to a tuple with the arguments received from Python. Sometimes, a function that only receives one `PyObject*` is cast to `PyCFunction`, since there is an extra `METH_XYZ` flag that determines how the function will be called:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/cppyy/CPyCppyy/src/Pythonize.cxx#L1028. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/cppyy/CPyCppyy/src/Pythonize.cxx#L807. This PR disables the `cast-function-type` warning when building Cppyy and fixes a couple of equivalent warnings in PyROOT experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3521
https://github.com/root-project/root/pull/3521:1015,modifiability,bind,bindings,1015,"[Exp PyROOT] Fix cast-function-type warnings; In the PyROOT experimental nightlies there are a number of warnings:. http://cdash.cern.ch/viewBuildError.php?type=1&buildid=633548. Most of them are related to casting function pointers and come from Cppyy code. As Wim pointed out in this ticket:. https://sft.its.cern.ch/jira/browse/ROOT-9612. those casts are not incorrect and do not produce any malfunctioning. They correspond to casts to `PyCFunction`, used to implement Python callables in C, whose signature is `PyObject* (*)(PyObject*, PyObject*)`, the first argument being a pointer to `self` and the second a pointer to a tuple with the arguments received from Python. Sometimes, a function that only receives one `PyObject*` is cast to `PyCFunction`, since there is an extra `METH_XYZ` flag that determines how the function will be called:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/cppyy/CPyCppyy/src/Pythonize.cxx#L1028. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/cppyy/CPyCppyy/src/Pythonize.cxx#L807. This PR disables the `cast-function-type` warning when building Cppyy and fixes a couple of equivalent warnings in PyROOT experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3521
https://github.com/root-project/root/pull/3521:1165,modifiability,coupl,couple,1165,"[Exp PyROOT] Fix cast-function-type warnings; In the PyROOT experimental nightlies there are a number of warnings:. http://cdash.cern.ch/viewBuildError.php?type=1&buildid=633548. Most of them are related to casting function pointers and come from Cppyy code. As Wim pointed out in this ticket:. https://sft.its.cern.ch/jira/browse/ROOT-9612. those casts are not incorrect and do not produce any malfunctioning. They correspond to casts to `PyCFunction`, used to implement Python callables in C, whose signature is `PyObject* (*)(PyObject*, PyObject*)`, the first argument being a pointer to `self` and the second a pointer to a tuple with the arguments received from Python. Sometimes, a function that only receives one `PyObject*` is cast to `PyCFunction`, since there is an extra `METH_XYZ` flag that determines how the function will be called:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/cppyy/CPyCppyy/src/Pythonize.cxx#L1028. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/cppyy/CPyCppyy/src/Pythonize.cxx#L807. This PR disables the `cast-function-type` warning when building Cppyy and fixes a couple of equivalent warnings in PyROOT experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3521
https://github.com/root-project/root/pull/3521:501,security,sign,signature,501,"[Exp PyROOT] Fix cast-function-type warnings; In the PyROOT experimental nightlies there are a number of warnings:. http://cdash.cern.ch/viewBuildError.php?type=1&buildid=633548. Most of them are related to casting function pointers and come from Cppyy code. As Wim pointed out in this ticket:. https://sft.its.cern.ch/jira/browse/ROOT-9612. those casts are not incorrect and do not produce any malfunctioning. They correspond to casts to `PyCFunction`, used to implement Python callables in C, whose signature is `PyObject* (*)(PyObject*, PyObject*)`, the first argument being a pointer to `self` and the second a pointer to a tuple with the arguments received from Python. Sometimes, a function that only receives one `PyObject*` is cast to `PyCFunction`, since there is an extra `METH_XYZ` flag that determines how the function will be called:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/cppyy/CPyCppyy/src/Pythonize.cxx#L1028. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/cppyy/CPyCppyy/src/Pythonize.cxx#L807. This PR disables the `cast-function-type` warning when building Cppyy and fixes a couple of equivalent warnings in PyROOT experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3521
https://github.com/root-project/root/pull/3521:1165,testability,coupl,couple,1165,"[Exp PyROOT] Fix cast-function-type warnings; In the PyROOT experimental nightlies there are a number of warnings:. http://cdash.cern.ch/viewBuildError.php?type=1&buildid=633548. Most of them are related to casting function pointers and come from Cppyy code. As Wim pointed out in this ticket:. https://sft.its.cern.ch/jira/browse/ROOT-9612. those casts are not incorrect and do not produce any malfunctioning. They correspond to casts to `PyCFunction`, used to implement Python callables in C, whose signature is `PyObject* (*)(PyObject*, PyObject*)`, the first argument being a pointer to `self` and the second a pointer to a tuple with the arguments received from Python. Sometimes, a function that only receives one `PyObject*` is cast to `PyCFunction`, since there is an extra `METH_XYZ` flag that determines how the function will be called:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/cppyy/CPyCppyy/src/Pythonize.cxx#L1028. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/cppyy/CPyCppyy/src/Pythonize.cxx#L807. This PR disables the `cast-function-type` warning when building Cppyy and fixes a couple of equivalent warnings in PyROOT experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3521
https://github.com/root-project/root/pull/3523:279,safety,avoid,avoid,279,"Fix ROOT-7487, make TObject::Clone always proceed.; If gDirectory is a nullptr use gROOT. TObject::Clone uses. TDirectory[File]::CloneObject and the TDirectoryFile object. actually change the behavior (set gFile to nullptr) in a way. that probably require significant surgery to avoid using the. virtual function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3523
https://github.com/root-project/root/pull/3523:256,security,sign,significant,256,"Fix ROOT-7487, make TObject::Clone always proceed.; If gDirectory is a nullptr use gROOT. TObject::Clone uses. TDirectory[File]::CloneObject and the TDirectoryFile object. actually change the behavior (set gFile to nullptr) in a way. that probably require significant surgery to avoid using the. virtual function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3523
https://github.com/root-project/root/pull/3523:192,usability,behavi,behavior,192,"Fix ROOT-7487, make TObject::Clone always proceed.; If gDirectory is a nullptr use gROOT. TObject::Clone uses. TDirectory[File]::CloneObject and the TDirectoryFile object. actually change the behavior (set gFile to nullptr) in a way. that probably require significant surgery to avoid using the. virtual function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3523
https://github.com/root-project/root/pull/3524:104,reliability,pra,practice,104,Actually fix ROOT-7487.; Previous fix was cloning the gROOT object rather than the user object (and. in practice was leading to an infinite recursion). This corrects 3317c2027c976c4f5d2b4eece00bc6c4aae9773b.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3524
https://github.com/root-project/root/pull/3524:83,usability,user,user,83,Actually fix ROOT-7487.; Previous fix was cloning the gROOT object rather than the user object (and. in practice was leading to an infinite recursion). This corrects 3317c2027c976c4f5d2b4eece00bc6c4aae9773b.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3524
https://github.com/root-project/root/pull/3525:104,reliability,pra,practice,104,Actually fix ROOT-7487.; Previous fix was cloning the gROOT object rather than the user object (and. in practice was leading to an infinite recursion). This corrects 3317c2027c976c4f5d2b4eece00bc6c4aae9773b.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3525
https://github.com/root-project/root/pull/3525:83,usability,user,user,83,Actually fix ROOT-7487.; Previous fix was cloning the gROOT object rather than the user object (and. in practice was leading to an infinite recursion). This corrects 3317c2027c976c4f5d2b4eece00bc6c4aae9773b.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3525
https://github.com/root-project/root/pull/3526:104,reliability,pra,practice,104,Actually fix ROOT-7487.; Previous fix was cloning the gROOT object rather than the user object (and. in practice was leading to an infinite recursion). This corrects 3317c2027c976c4f5d2b4eece00bc6c4aae9773b.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3526
https://github.com/root-project/root/pull/3526:83,usability,user,user,83,Actually fix ROOT-7487.; Previous fix was cloning the gROOT object rather than the user object (and. in practice was leading to an infinite recursion). This corrects 3317c2027c976c4f5d2b4eece00bc6c4aae9773b.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3526
https://github.com/root-project/root/pull/3528:47,energy efficiency,Current,Currently,47,"[PyROOT] Fix for AsNumpy when column is empty; Currently the `RDataFrame.AsNumpy` function can not handle empty columns. This minimal example produces an `ValueError: setting an array element with a sequence.`. ```. def fill_tree(treeName, fileName):. ROOT.gRandom.SetSeed(1). tdf = ROOT.ROOT.RDataFrame(100). tdf.Define(""b1"", ""2.""). treeName = 'tree'. fileName = treeName+"".root"". fill_tree(treeName, treeName+"".root""). base = ROOT.ROOT.RDataFrame(treeName, fileName). base.Filter(""b1>3"").AsNumpy(columns=[""b1""]) . ```. ```. ---------------------------------------. File ""ROOT.py"", line 441, in _RDataFrameAsNumpy. tmp = numpy.array(cpp_reference) # This adopts the memory of the C++ object. ValueError: setting an array element with a sequence. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3528
https://github.com/root-project/root/pull/3528:475,integrability,Filter,Filter,475,"[PyROOT] Fix for AsNumpy when column is empty; Currently the `RDataFrame.AsNumpy` function can not handle empty columns. This minimal example produces an `ValueError: setting an array element with a sequence.`. ```. def fill_tree(treeName, fileName):. ROOT.gRandom.SetSeed(1). tdf = ROOT.ROOT.RDataFrame(100). tdf.Define(""b1"", ""2.""). treeName = 'tree'. fileName = treeName+"".root"". fill_tree(treeName, treeName+"".root""). base = ROOT.ROOT.RDataFrame(treeName, fileName). base.Filter(""b1>3"").AsNumpy(columns=[""b1""]) . ```. ```. ---------------------------------------. File ""ROOT.py"", line 441, in _RDataFrameAsNumpy. tmp = numpy.array(cpp_reference) # This adopts the memory of the C++ object. ValueError: setting an array element with a sequence. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3528
https://github.com/root-project/root/pull/3528:667,performance,memor,memory,667,"[PyROOT] Fix for AsNumpy when column is empty; Currently the `RDataFrame.AsNumpy` function can not handle empty columns. This minimal example produces an `ValueError: setting an array element with a sequence.`. ```. def fill_tree(treeName, fileName):. ROOT.gRandom.SetSeed(1). tdf = ROOT.ROOT.RDataFrame(100). tdf.Define(""b1"", ""2.""). treeName = 'tree'. fileName = treeName+"".root"". fill_tree(treeName, treeName+"".root""). base = ROOT.ROOT.RDataFrame(treeName, fileName). base.Filter(""b1>3"").AsNumpy(columns=[""b1""]) . ```. ```. ---------------------------------------. File ""ROOT.py"", line 441, in _RDataFrameAsNumpy. tmp = numpy.array(cpp_reference) # This adopts the memory of the C++ object. ValueError: setting an array element with a sequence. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3528
https://github.com/root-project/root/pull/3528:126,usability,minim,minimal,126,"[PyROOT] Fix for AsNumpy when column is empty; Currently the `RDataFrame.AsNumpy` function can not handle empty columns. This minimal example produces an `ValueError: setting an array element with a sequence.`. ```. def fill_tree(treeName, fileName):. ROOT.gRandom.SetSeed(1). tdf = ROOT.ROOT.RDataFrame(100). tdf.Define(""b1"", ""2.""). treeName = 'tree'. fileName = treeName+"".root"". fill_tree(treeName, treeName+"".root""). base = ROOT.ROOT.RDataFrame(treeName, fileName). base.Filter(""b1>3"").AsNumpy(columns=[""b1""]) . ```. ```. ---------------------------------------. File ""ROOT.py"", line 441, in _RDataFrameAsNumpy. tmp = numpy.array(cpp_reference) # This adopts the memory of the C++ object. ValueError: setting an array element with a sequence. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3528
https://github.com/root-project/root/pull/3528:667,usability,memor,memory,667,"[PyROOT] Fix for AsNumpy when column is empty; Currently the `RDataFrame.AsNumpy` function can not handle empty columns. This minimal example produces an `ValueError: setting an array element with a sequence.`. ```. def fill_tree(treeName, fileName):. ROOT.gRandom.SetSeed(1). tdf = ROOT.ROOT.RDataFrame(100). tdf.Define(""b1"", ""2.""). treeName = 'tree'. fileName = treeName+"".root"". fill_tree(treeName, treeName+"".root""). base = ROOT.ROOT.RDataFrame(treeName, fileName). base.Filter(""b1>3"").AsNumpy(columns=[""b1""]) . ```. ```. ---------------------------------------. File ""ROOT.py"", line 441, in _RDataFrameAsNumpy. tmp = numpy.array(cpp_reference) # This adopts the memory of the C++ object. ValueError: setting an array element with a sequence. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3528
https://github.com/root-project/root/pull/3530:207,integrability,messag,message,207,"Do not set DISPLAY (unless really needed); Following a ""suggestion"" by @daritter ;-). Rationale: these days, not having `DISPLAY` set is likely intentional (unlike in say good old AIX days). So printing the message ""just because"" is unlikely to be helpful. If OTOH the GUI *is* requested, printing a helpful ""you probably want `ssh -Y`"" is nice - so let's do that (in non-batch), but in `TUnixSystem::SetDisplay()`, which is invoked by the graphics initialization hook. This gets rid of all the utmp code in `rootx.cxx`, near-duplicating the code of `TUnixSystem.cxx`. Yay.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3530
https://github.com/root-project/root/pull/3530:372,integrability,batch,batch,372,"Do not set DISPLAY (unless really needed); Following a ""suggestion"" by @daritter ;-). Rationale: these days, not having `DISPLAY` set is likely intentional (unlike in say good old AIX days). So printing the message ""just because"" is unlikely to be helpful. If OTOH the GUI *is* requested, printing a helpful ""you probably want `ssh -Y`"" is nice - so let's do that (in non-batch), but in `TUnixSystem::SetDisplay()`, which is invoked by the graphics initialization hook. This gets rid of all the utmp code in `rootx.cxx`, near-duplicating the code of `TUnixSystem.cxx`. Yay.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3530
https://github.com/root-project/root/pull/3530:207,interoperability,messag,message,207,"Do not set DISPLAY (unless really needed); Following a ""suggestion"" by @daritter ;-). Rationale: these days, not having `DISPLAY` set is likely intentional (unlike in say good old AIX days). So printing the message ""just because"" is unlikely to be helpful. If OTOH the GUI *is* requested, printing a helpful ""you probably want `ssh -Y`"" is nice - so let's do that (in non-batch), but in `TUnixSystem::SetDisplay()`, which is invoked by the graphics initialization hook. This gets rid of all the utmp code in `rootx.cxx`, near-duplicating the code of `TUnixSystem.cxx`. Yay.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3530
https://github.com/root-project/root/pull/3530:372,performance,batch,batch,372,"Do not set DISPLAY (unless really needed); Following a ""suggestion"" by @daritter ;-). Rationale: these days, not having `DISPLAY` set is likely intentional (unlike in say good old AIX days). So printing the message ""just because"" is unlikely to be helpful. If OTOH the GUI *is* requested, printing a helpful ""you probably want `ssh -Y`"" is nice - so let's do that (in non-batch), but in `TUnixSystem::SetDisplay()`, which is invoked by the graphics initialization hook. This gets rid of all the utmp code in `rootx.cxx`, near-duplicating the code of `TUnixSystem.cxx`. Yay.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3530
https://github.com/root-project/root/pull/3530:328,security,ssh,ssh,328,"Do not set DISPLAY (unless really needed); Following a ""suggestion"" by @daritter ;-). Rationale: these days, not having `DISPLAY` set is likely intentional (unlike in say good old AIX days). So printing the message ""just because"" is unlikely to be helpful. If OTOH the GUI *is* requested, printing a helpful ""you probably want `ssh -Y`"" is nice - so let's do that (in non-batch), but in `TUnixSystem::SetDisplay()`, which is invoked by the graphics initialization hook. This gets rid of all the utmp code in `rootx.cxx`, near-duplicating the code of `TUnixSystem.cxx`. Yay.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3530
https://github.com/root-project/root/pull/3530:464,testability,hook,hook,464,"Do not set DISPLAY (unless really needed); Following a ""suggestion"" by @daritter ;-). Rationale: these days, not having `DISPLAY` set is likely intentional (unlike in say good old AIX days). So printing the message ""just because"" is unlikely to be helpful. If OTOH the GUI *is* requested, printing a helpful ""you probably want `ssh -Y`"" is nice - so let's do that (in non-batch), but in `TUnixSystem::SetDisplay()`, which is invoked by the graphics initialization hook. This gets rid of all the utmp code in `rootx.cxx`, near-duplicating the code of `TUnixSystem.cxx`. Yay.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3530
https://github.com/root-project/root/pull/3530:248,usability,help,helpful,248,"Do not set DISPLAY (unless really needed); Following a ""suggestion"" by @daritter ;-). Rationale: these days, not having `DISPLAY` set is likely intentional (unlike in say good old AIX days). So printing the message ""just because"" is unlikely to be helpful. If OTOH the GUI *is* requested, printing a helpful ""you probably want `ssh -Y`"" is nice - so let's do that (in non-batch), but in `TUnixSystem::SetDisplay()`, which is invoked by the graphics initialization hook. This gets rid of all the utmp code in `rootx.cxx`, near-duplicating the code of `TUnixSystem.cxx`. Yay.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3530
https://github.com/root-project/root/pull/3530:300,usability,help,helpful,300,"Do not set DISPLAY (unless really needed); Following a ""suggestion"" by @daritter ;-). Rationale: these days, not having `DISPLAY` set is likely intentional (unlike in say good old AIX days). So printing the message ""just because"" is unlikely to be helpful. If OTOH the GUI *is* requested, printing a helpful ""you probably want `ssh -Y`"" is nice - so let's do that (in non-batch), but in `TUnixSystem::SetDisplay()`, which is invoked by the graphics initialization hook. This gets rid of all the utmp code in `rootx.cxx`, near-duplicating the code of `TUnixSystem.cxx`. Yay.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3530
https://github.com/root-project/root/pull/3531:30,deployability,modul,modulemap,30,Added some STL headers to stl.modulemap; Added some stl headers to stl.modulemap,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3531
https://github.com/root-project/root/pull/3531:71,deployability,modul,modulemap,71,Added some STL headers to stl.modulemap; Added some stl headers to stl.modulemap,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3531
https://github.com/root-project/root/pull/3531:30,modifiability,modul,modulemap,30,Added some STL headers to stl.modulemap; Added some stl headers to stl.modulemap,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3531
https://github.com/root-project/root/pull/3531:71,modifiability,modul,modulemap,71,Added some STL headers to stl.modulemap; Added some stl headers to stl.modulemap,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3531
https://github.com/root-project/root/pull/3531:30,safety,modul,modulemap,30,Added some STL headers to stl.modulemap; Added some stl headers to stl.modulemap,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3531
https://github.com/root-project/root/pull/3531:71,safety,modul,modulemap,71,Added some STL headers to stl.modulemap; Added some stl headers to stl.modulemap,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3531
https://github.com/root-project/root/pull/3532:5,deployability,updat,updating,5,"When updating names in UpdateAssociativeToVector, do not use trailing…; … scope multiple times. Without this patch for Name<Content>::Inner, MakeProject was using Name<Content,::Inner>::Inner.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3532
https://github.com/root-project/root/pull/3532:23,deployability,Updat,UpdateAssociativeToVector,23,"When updating names in UpdateAssociativeToVector, do not use trailing…; … scope multiple times. Without this patch for Name<Content>::Inner, MakeProject was using Name<Content,::Inner>::Inner.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3532
https://github.com/root-project/root/pull/3532:109,deployability,patch,patch,109,"When updating names in UpdateAssociativeToVector, do not use trailing…; … scope multiple times. Without this patch for Name<Content>::Inner, MakeProject was using Name<Content,::Inner>::Inner.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3532
https://github.com/root-project/root/pull/3532:89,performance,time,times,89,"When updating names in UpdateAssociativeToVector, do not use trailing…; … scope multiple times. Without this patch for Name<Content>::Inner, MakeProject was using Name<Content,::Inner>::Inner.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3532
https://github.com/root-project/root/pull/3532:124,performance,Content,Content,124,"When updating names in UpdateAssociativeToVector, do not use trailing…; … scope multiple times. Without this patch for Name<Content>::Inner, MakeProject was using Name<Content,::Inner>::Inner.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3532
https://github.com/root-project/root/pull/3532:168,performance,Content,Content,168,"When updating names in UpdateAssociativeToVector, do not use trailing…; … scope multiple times. Without this patch for Name<Content>::Inner, MakeProject was using Name<Content,::Inner>::Inner.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3532
https://github.com/root-project/root/pull/3532:5,safety,updat,updating,5,"When updating names in UpdateAssociativeToVector, do not use trailing…; … scope multiple times. Without this patch for Name<Content>::Inner, MakeProject was using Name<Content,::Inner>::Inner.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3532
https://github.com/root-project/root/pull/3532:23,safety,Updat,UpdateAssociativeToVector,23,"When updating names in UpdateAssociativeToVector, do not use trailing…; … scope multiple times. Without this patch for Name<Content>::Inner, MakeProject was using Name<Content,::Inner>::Inner.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3532
https://github.com/root-project/root/pull/3532:109,safety,patch,patch,109,"When updating names in UpdateAssociativeToVector, do not use trailing…; … scope multiple times. Without this patch for Name<Content>::Inner, MakeProject was using Name<Content,::Inner>::Inner.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3532
https://github.com/root-project/root/pull/3532:5,security,updat,updating,5,"When updating names in UpdateAssociativeToVector, do not use trailing…; … scope multiple times. Without this patch for Name<Content>::Inner, MakeProject was using Name<Content,::Inner>::Inner.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3532
https://github.com/root-project/root/pull/3532:23,security,Updat,UpdateAssociativeToVector,23,"When updating names in UpdateAssociativeToVector, do not use trailing…; … scope multiple times. Without this patch for Name<Content>::Inner, MakeProject was using Name<Content,::Inner>::Inner.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3532
https://github.com/root-project/root/pull/3532:109,security,patch,patch,109,"When updating names in UpdateAssociativeToVector, do not use trailing…; … scope multiple times. Without this patch for Name<Content>::Inner, MakeProject was using Name<Content,::Inner>::Inner.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3532
https://github.com/root-project/root/pull/3533:145,deployability,patch,patch,145,[cling] Force flush cout after execution; The user might use utilities which print on cout and expects the output. to be shown immediately. This patch automatically flushes std::cout after each execution of a wrapper.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3533
https://github.com/root-project/root/pull/3533:151,deployability,automat,automatically,151,[cling] Force flush cout after execution; The user might use utilities which print on cout and expects the output. to be shown immediately. This patch automatically flushes std::cout after each execution of a wrapper.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3533
https://github.com/root-project/root/pull/3533:209,integrability,wrap,wrapper,209,[cling] Force flush cout after execution; The user might use utilities which print on cout and expects the output. to be shown immediately. This patch automatically flushes std::cout after each execution of a wrapper.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3533
https://github.com/root-project/root/pull/3533:209,interoperability,wrapper,wrapper,209,[cling] Force flush cout after execution; The user might use utilities which print on cout and expects the output. to be shown immediately. This patch automatically flushes std::cout after each execution of a wrapper.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3533
https://github.com/root-project/root/pull/3533:145,safety,patch,patch,145,[cling] Force flush cout after execution; The user might use utilities which print on cout and expects the output. to be shown immediately. This patch automatically flushes std::cout after each execution of a wrapper.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3533
https://github.com/root-project/root/pull/3533:145,security,patch,patch,145,[cling] Force flush cout after execution; The user might use utilities which print on cout and expects the output. to be shown immediately. This patch automatically flushes std::cout after each execution of a wrapper.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3533
https://github.com/root-project/root/pull/3533:151,testability,automat,automatically,151,[cling] Force flush cout after execution; The user might use utilities which print on cout and expects the output. to be shown immediately. This patch automatically flushes std::cout after each execution of a wrapper.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3533
https://github.com/root-project/root/pull/3533:46,usability,user,user,46,[cling] Force flush cout after execution; The user might use utilities which print on cout and expects the output. to be shown immediately. This patch automatically flushes std::cout after each execution of a wrapper.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3533
https://github.com/root-project/root/pull/3534:137,deployability,API,API,137,"[Exp PyROOT] Add a converter for TString to Cppyy; Cppyy allows to add custom pythonisations for classes, but it does not yet provide an API for adding custom type converters. Until that API exists, we need to patch Cppyy with a converter Python string -> `TString`, so that we do not have to create a `TString` in Python when calling a C++ method that expects it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3534
https://github.com/root-project/root/pull/3534:187,deployability,API,API,187,"[Exp PyROOT] Add a converter for TString to Cppyy; Cppyy allows to add custom pythonisations for classes, but it does not yet provide an API for adding custom type converters. Until that API exists, we need to patch Cppyy with a converter Python string -> `TString`, so that we do not have to create a `TString` in Python when calling a C++ method that expects it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3534
https://github.com/root-project/root/pull/3534:210,deployability,patch,patch,210,"[Exp PyROOT] Add a converter for TString to Cppyy; Cppyy allows to add custom pythonisations for classes, but it does not yet provide an API for adding custom type converters. Until that API exists, we need to patch Cppyy with a converter Python string -> `TString`, so that we do not have to create a `TString` in Python when calling a C++ method that expects it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3534
https://github.com/root-project/root/pull/3534:137,integrability,API,API,137,"[Exp PyROOT] Add a converter for TString to Cppyy; Cppyy allows to add custom pythonisations for classes, but it does not yet provide an API for adding custom type converters. Until that API exists, we need to patch Cppyy with a converter Python string -> `TString`, so that we do not have to create a `TString` in Python when calling a C++ method that expects it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3534
https://github.com/root-project/root/pull/3534:187,integrability,API,API,187,"[Exp PyROOT] Add a converter for TString to Cppyy; Cppyy allows to add custom pythonisations for classes, but it does not yet provide an API for adding custom type converters. Until that API exists, we need to patch Cppyy with a converter Python string -> `TString`, so that we do not have to create a `TString` in Python when calling a C++ method that expects it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3534
https://github.com/root-project/root/pull/3534:137,interoperability,API,API,137,"[Exp PyROOT] Add a converter for TString to Cppyy; Cppyy allows to add custom pythonisations for classes, but it does not yet provide an API for adding custom type converters. Until that API exists, we need to patch Cppyy with a converter Python string -> `TString`, so that we do not have to create a `TString` in Python when calling a C++ method that expects it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3534
https://github.com/root-project/root/pull/3534:187,interoperability,API,API,187,"[Exp PyROOT] Add a converter for TString to Cppyy; Cppyy allows to add custom pythonisations for classes, but it does not yet provide an API for adding custom type converters. Until that API exists, we need to patch Cppyy with a converter Python string -> `TString`, so that we do not have to create a `TString` in Python when calling a C++ method that expects it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3534
https://github.com/root-project/root/pull/3534:113,reliability,doe,does,113,"[Exp PyROOT] Add a converter for TString to Cppyy; Cppyy allows to add custom pythonisations for classes, but it does not yet provide an API for adding custom type converters. Until that API exists, we need to patch Cppyy with a converter Python string -> `TString`, so that we do not have to create a `TString` in Python when calling a C++ method that expects it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3534
https://github.com/root-project/root/pull/3534:210,safety,patch,patch,210,"[Exp PyROOT] Add a converter for TString to Cppyy; Cppyy allows to add custom pythonisations for classes, but it does not yet provide an API for adding custom type converters. Until that API exists, we need to patch Cppyy with a converter Python string -> `TString`, so that we do not have to create a `TString` in Python when calling a C++ method that expects it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3534
https://github.com/root-project/root/pull/3534:210,security,patch,patch,210,"[Exp PyROOT] Add a converter for TString to Cppyy; Cppyy allows to add custom pythonisations for classes, but it does not yet provide an API for adding custom type converters. Until that API exists, we need to patch Cppyy with a converter Python string -> `TString`, so that we do not have to create a `TString` in Python when calling a C++ method that expects it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3534
https://github.com/root-project/root/pull/3534:71,usability,custom,custom,71,"[Exp PyROOT] Add a converter for TString to Cppyy; Cppyy allows to add custom pythonisations for classes, but it does not yet provide an API for adding custom type converters. Until that API exists, we need to patch Cppyy with a converter Python string -> `TString`, so that we do not have to create a `TString` in Python when calling a C++ method that expects it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3534
https://github.com/root-project/root/pull/3534:152,usability,custom,custom,152,"[Exp PyROOT] Add a converter for TString to Cppyy; Cppyy allows to add custom pythonisations for classes, but it does not yet provide an API for adding custom type converters. Until that API exists, we need to patch Cppyy with a converter Python string -> `TString`, so that we do not have to create a `TString` in Python when calling a C++ method that expects it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3534
https://github.com/root-project/root/pull/3535:121,energy efficiency,reduc,reduced,121,"[PyROOT] Fix array interface for empty arrays; Thanks to @cwiel for pointing out the issue. I've refactored the code and reduced code duplication massively. The bug is fixed by writing a pointer unequal zero in the array interface since numpy does not take this as exception. Actually, it does not matter at all what is written in the `""data""` field of the array interface since it is never accessed. Edit: Added a backport for experimental pyroot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3535
https://github.com/root-project/root/pull/3535:19,integrability,interfac,interface,19,"[PyROOT] Fix array interface for empty arrays; Thanks to @cwiel for pointing out the issue. I've refactored the code and reduced code duplication massively. The bug is fixed by writing a pointer unequal zero in the array interface since numpy does not take this as exception. Actually, it does not matter at all what is written in the `""data""` field of the array interface since it is never accessed. Edit: Added a backport for experimental pyroot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3535
https://github.com/root-project/root/pull/3535:221,integrability,interfac,interface,221,"[PyROOT] Fix array interface for empty arrays; Thanks to @cwiel for pointing out the issue. I've refactored the code and reduced code duplication massively. The bug is fixed by writing a pointer unequal zero in the array interface since numpy does not take this as exception. Actually, it does not matter at all what is written in the `""data""` field of the array interface since it is never accessed. Edit: Added a backport for experimental pyroot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3535
https://github.com/root-project/root/pull/3535:363,integrability,interfac,interface,363,"[PyROOT] Fix array interface for empty arrays; Thanks to @cwiel for pointing out the issue. I've refactored the code and reduced code duplication massively. The bug is fixed by writing a pointer unequal zero in the array interface since numpy does not take this as exception. Actually, it does not matter at all what is written in the `""data""` field of the array interface since it is never accessed. Edit: Added a backport for experimental pyroot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3535
https://github.com/root-project/root/pull/3535:19,interoperability,interfac,interface,19,"[PyROOT] Fix array interface for empty arrays; Thanks to @cwiel for pointing out the issue. I've refactored the code and reduced code duplication massively. The bug is fixed by writing a pointer unequal zero in the array interface since numpy does not take this as exception. Actually, it does not matter at all what is written in the `""data""` field of the array interface since it is never accessed. Edit: Added a backport for experimental pyroot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3535
https://github.com/root-project/root/pull/3535:221,interoperability,interfac,interface,221,"[PyROOT] Fix array interface for empty arrays; Thanks to @cwiel for pointing out the issue. I've refactored the code and reduced code duplication massively. The bug is fixed by writing a pointer unequal zero in the array interface since numpy does not take this as exception. Actually, it does not matter at all what is written in the `""data""` field of the array interface since it is never accessed. Edit: Added a backport for experimental pyroot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3535
https://github.com/root-project/root/pull/3535:363,interoperability,interfac,interface,363,"[PyROOT] Fix array interface for empty arrays; Thanks to @cwiel for pointing out the issue. I've refactored the code and reduced code duplication massively. The bug is fixed by writing a pointer unequal zero in the array interface since numpy does not take this as exception. Actually, it does not matter at all what is written in the `""data""` field of the array interface since it is never accessed. Edit: Added a backport for experimental pyroot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3535
https://github.com/root-project/root/pull/3535:19,modifiability,interfac,interface,19,"[PyROOT] Fix array interface for empty arrays; Thanks to @cwiel for pointing out the issue. I've refactored the code and reduced code duplication massively. The bug is fixed by writing a pointer unequal zero in the array interface since numpy does not take this as exception. Actually, it does not matter at all what is written in the `""data""` field of the array interface since it is never accessed. Edit: Added a backport for experimental pyroot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3535
https://github.com/root-project/root/pull/3535:97,modifiability,refact,refactored,97,"[PyROOT] Fix array interface for empty arrays; Thanks to @cwiel for pointing out the issue. I've refactored the code and reduced code duplication massively. The bug is fixed by writing a pointer unequal zero in the array interface since numpy does not take this as exception. Actually, it does not matter at all what is written in the `""data""` field of the array interface since it is never accessed. Edit: Added a backport for experimental pyroot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3535
https://github.com/root-project/root/pull/3535:221,modifiability,interfac,interface,221,"[PyROOT] Fix array interface for empty arrays; Thanks to @cwiel for pointing out the issue. I've refactored the code and reduced code duplication massively. The bug is fixed by writing a pointer unequal zero in the array interface since numpy does not take this as exception. Actually, it does not matter at all what is written in the `""data""` field of the array interface since it is never accessed. Edit: Added a backport for experimental pyroot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3535
https://github.com/root-project/root/pull/3535:363,modifiability,interfac,interface,363,"[PyROOT] Fix array interface for empty arrays; Thanks to @cwiel for pointing out the issue. I've refactored the code and reduced code duplication massively. The bug is fixed by writing a pointer unequal zero in the array interface since numpy does not take this as exception. Actually, it does not matter at all what is written in the `""data""` field of the array interface since it is never accessed. Edit: Added a backport for experimental pyroot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3535
https://github.com/root-project/root/pull/3535:97,performance,refactor,refactored,97,"[PyROOT] Fix array interface for empty arrays; Thanks to @cwiel for pointing out the issue. I've refactored the code and reduced code duplication massively. The bug is fixed by writing a pointer unequal zero in the array interface since numpy does not take this as exception. Actually, it does not matter at all what is written in the `""data""` field of the array interface since it is never accessed. Edit: Added a backport for experimental pyroot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3535
https://github.com/root-project/root/pull/3535:243,reliability,doe,does,243,"[PyROOT] Fix array interface for empty arrays; Thanks to @cwiel for pointing out the issue. I've refactored the code and reduced code duplication massively. The bug is fixed by writing a pointer unequal zero in the array interface since numpy does not take this as exception. Actually, it does not matter at all what is written in the `""data""` field of the array interface since it is never accessed. Edit: Added a backport for experimental pyroot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3535
https://github.com/root-project/root/pull/3535:289,reliability,doe,does,289,"[PyROOT] Fix array interface for empty arrays; Thanks to @cwiel for pointing out the issue. I've refactored the code and reduced code duplication massively. The bug is fixed by writing a pointer unequal zero in the array interface since numpy does not take this as exception. Actually, it does not matter at all what is written in the `""data""` field of the array interface since it is never accessed. Edit: Added a backport for experimental pyroot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3535
https://github.com/root-project/root/pull/3535:265,safety,except,exception,265,"[PyROOT] Fix array interface for empty arrays; Thanks to @cwiel for pointing out the issue. I've refactored the code and reduced code duplication massively. The bug is fixed by writing a pointer unequal zero in the array interface since numpy does not take this as exception. Actually, it does not matter at all what is written in the `""data""` field of the array interface since it is never accessed. Edit: Added a backport for experimental pyroot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3535
https://github.com/root-project/root/pull/3535:391,security,access,accessed,391,"[PyROOT] Fix array interface for empty arrays; Thanks to @cwiel for pointing out the issue. I've refactored the code and reduced code duplication massively. The bug is fixed by writing a pointer unequal zero in the array interface since numpy does not take this as exception. Actually, it does not matter at all what is written in the `""data""` field of the array interface since it is never accessed. Edit: Added a backport for experimental pyroot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3535
https://github.com/root-project/root/pull/3538:0,deployability,Releas,Release,0,Release Notes for changes in TNetXNGFile; Done like requested in [PR 2751](https://github.com/root-project/root/pull/2751#issuecomment-472801594),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3538
https://github.com/root-project/root/pull/3539:333,availability,error,errors,333,"[DF] Avoid forward declarations of Define'd types; Either the interpreter knows them, or we alias them to `void`. Just as before, the end result is that if users return a type. that is unknown to the interpreter from a Define, and then try. to read that Define'd column from jitted RDF nodes, the interpreter. (and consequently RDF) errors out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3539
https://github.com/root-project/root/pull/3539:333,performance,error,errors,333,"[DF] Avoid forward declarations of Define'd types; Either the interpreter knows them, or we alias them to `void`. Just as before, the end result is that if users return a type. that is unknown to the interpreter from a Define, and then try. to read that Define'd column from jitted RDF nodes, the interpreter. (and consequently RDF) errors out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3539
https://github.com/root-project/root/pull/3539:5,safety,Avoid,Avoid,5,"[DF] Avoid forward declarations of Define'd types; Either the interpreter knows them, or we alias them to `void`. Just as before, the end result is that if users return a type. that is unknown to the interpreter from a Define, and then try. to read that Define'd column from jitted RDF nodes, the interpreter. (and consequently RDF) errors out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3539
https://github.com/root-project/root/pull/3539:333,safety,error,errors,333,"[DF] Avoid forward declarations of Define'd types; Either the interpreter knows them, or we alias them to `void`. Just as before, the end result is that if users return a type. that is unknown to the interpreter from a Define, and then try. to read that Define'd column from jitted RDF nodes, the interpreter. (and consequently RDF) errors out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3539
https://github.com/root-project/root/pull/3539:156,usability,user,users,156,"[DF] Avoid forward declarations of Define'd types; Either the interpreter knows them, or we alias them to `void`. Just as before, the end result is that if users return a type. that is unknown to the interpreter from a Define, and then try. to read that Define'd column from jitted RDF nodes, the interpreter. (and consequently RDF) errors out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3539
https://github.com/root-project/root/pull/3539:333,usability,error,errors,333,"[DF] Avoid forward declarations of Define'd types; Either the interpreter knows them, or we alias them to `void`. Just as before, the end result is that if users return a type. that is unknown to the interpreter from a Define, and then try. to read that Define'd column from jitted RDF nodes, the interpreter. (and consequently RDF) errors out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3539
https://github.com/root-project/root/pull/3540:168,availability,error,error,168,"[Exp PyROOT] Add pythonisations for getter methods of TGraph family; This feature is implemented via a composite pythonizor that matches `TGraph`, `TGraph2D` and their error subclasses, and pythonises their getter methods of the X,Y,Z coordinate and error arrays, which in C++ return a pointer to double. The pythonisation consists in setting the size of the array buffer that the getter method returns, so that it is known in Python and the buffer is fully usable (its length can be obtained, it is iterable).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3540
https://github.com/root-project/root/pull/3540:250,availability,error,error,250,"[Exp PyROOT] Add pythonisations for getter methods of TGraph family; This feature is implemented via a composite pythonizor that matches `TGraph`, `TGraph2D` and their error subclasses, and pythonises their getter methods of the X,Y,Z coordinate and error arrays, which in C++ return a pointer to double. The pythonisation consists in setting the size of the array buffer that the getter method returns, so that it is known in Python and the buffer is fully usable (its length can be obtained, it is iterable).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3540
https://github.com/root-project/root/pull/3540:323,availability,consist,consists,323,"[Exp PyROOT] Add pythonisations for getter methods of TGraph family; This feature is implemented via a composite pythonizor that matches `TGraph`, `TGraph2D` and their error subclasses, and pythonises their getter methods of the X,Y,Z coordinate and error arrays, which in C++ return a pointer to double. The pythonisation consists in setting the size of the array buffer that the getter method returns, so that it is known in Python and the buffer is fully usable (its length can be obtained, it is iterable).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3540
https://github.com/root-project/root/pull/3540:103,deployability,compos,composite,103,"[Exp PyROOT] Add pythonisations for getter methods of TGraph family; This feature is implemented via a composite pythonizor that matches `TGraph`, `TGraph2D` and their error subclasses, and pythonises their getter methods of the X,Y,Z coordinate and error arrays, which in C++ return a pointer to double. The pythonisation consists in setting the size of the array buffer that the getter method returns, so that it is known in Python and the buffer is fully usable (its length can be obtained, it is iterable).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3540
https://github.com/root-project/root/pull/3540:174,integrability,sub,subclasses,174,"[Exp PyROOT] Add pythonisations for getter methods of TGraph family; This feature is implemented via a composite pythonizor that matches `TGraph`, `TGraph2D` and their error subclasses, and pythonises their getter methods of the X,Y,Z coordinate and error arrays, which in C++ return a pointer to double. The pythonisation consists in setting the size of the array buffer that the getter method returns, so that it is known in Python and the buffer is fully usable (its length can be obtained, it is iterable).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3540
https://github.com/root-project/root/pull/3540:365,integrability,buffer,buffer,365,"[Exp PyROOT] Add pythonisations for getter methods of TGraph family; This feature is implemented via a composite pythonizor that matches `TGraph`, `TGraph2D` and their error subclasses, and pythonises their getter methods of the X,Y,Z coordinate and error arrays, which in C++ return a pointer to double. The pythonisation consists in setting the size of the array buffer that the getter method returns, so that it is known in Python and the buffer is fully usable (its length can be obtained, it is iterable).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3540
https://github.com/root-project/root/pull/3540:442,integrability,buffer,buffer,442,"[Exp PyROOT] Add pythonisations for getter methods of TGraph family; This feature is implemented via a composite pythonizor that matches `TGraph`, `TGraph2D` and their error subclasses, and pythonises their getter methods of the X,Y,Z coordinate and error arrays, which in C++ return a pointer to double. The pythonisation consists in setting the size of the array buffer that the getter method returns, so that it is known in Python and the buffer is fully usable (its length can be obtained, it is iterable).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3540
https://github.com/root-project/root/pull/3540:235,interoperability,coordinat,coordinate,235,"[Exp PyROOT] Add pythonisations for getter methods of TGraph family; This feature is implemented via a composite pythonizor that matches `TGraph`, `TGraph2D` and their error subclasses, and pythonises their getter methods of the X,Y,Z coordinate and error arrays, which in C++ return a pointer to double. The pythonisation consists in setting the size of the array buffer that the getter method returns, so that it is known in Python and the buffer is fully usable (its length can be obtained, it is iterable).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3540
https://github.com/root-project/root/pull/3540:103,modifiability,compos,composite,103,"[Exp PyROOT] Add pythonisations for getter methods of TGraph family; This feature is implemented via a composite pythonizor that matches `TGraph`, `TGraph2D` and their error subclasses, and pythonises their getter methods of the X,Y,Z coordinate and error arrays, which in C++ return a pointer to double. The pythonisation consists in setting the size of the array buffer that the getter method returns, so that it is known in Python and the buffer is fully usable (its length can be obtained, it is iterable).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3540
https://github.com/root-project/root/pull/3540:168,performance,error,error,168,"[Exp PyROOT] Add pythonisations for getter methods of TGraph family; This feature is implemented via a composite pythonizor that matches `TGraph`, `TGraph2D` and their error subclasses, and pythonises their getter methods of the X,Y,Z coordinate and error arrays, which in C++ return a pointer to double. The pythonisation consists in setting the size of the array buffer that the getter method returns, so that it is known in Python and the buffer is fully usable (its length can be obtained, it is iterable).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3540
https://github.com/root-project/root/pull/3540:250,performance,error,error,250,"[Exp PyROOT] Add pythonisations for getter methods of TGraph family; This feature is implemented via a composite pythonizor that matches `TGraph`, `TGraph2D` and their error subclasses, and pythonises their getter methods of the X,Y,Z coordinate and error arrays, which in C++ return a pointer to double. The pythonisation consists in setting the size of the array buffer that the getter method returns, so that it is known in Python and the buffer is fully usable (its length can be obtained, it is iterable).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3540
https://github.com/root-project/root/pull/3540:168,safety,error,error,168,"[Exp PyROOT] Add pythonisations for getter methods of TGraph family; This feature is implemented via a composite pythonizor that matches `TGraph`, `TGraph2D` and their error subclasses, and pythonises their getter methods of the X,Y,Z coordinate and error arrays, which in C++ return a pointer to double. The pythonisation consists in setting the size of the array buffer that the getter method returns, so that it is known in Python and the buffer is fully usable (its length can be obtained, it is iterable).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3540
https://github.com/root-project/root/pull/3540:250,safety,error,error,250,"[Exp PyROOT] Add pythonisations for getter methods of TGraph family; This feature is implemented via a composite pythonizor that matches `TGraph`, `TGraph2D` and their error subclasses, and pythonises their getter methods of the X,Y,Z coordinate and error arrays, which in C++ return a pointer to double. The pythonisation consists in setting the size of the array buffer that the getter method returns, so that it is known in Python and the buffer is fully usable (its length can be obtained, it is iterable).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3540
https://github.com/root-project/root/pull/3540:168,usability,error,error,168,"[Exp PyROOT] Add pythonisations for getter methods of TGraph family; This feature is implemented via a composite pythonizor that matches `TGraph`, `TGraph2D` and their error subclasses, and pythonises their getter methods of the X,Y,Z coordinate and error arrays, which in C++ return a pointer to double. The pythonisation consists in setting the size of the array buffer that the getter method returns, so that it is known in Python and the buffer is fully usable (its length can be obtained, it is iterable).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3540
https://github.com/root-project/root/pull/3540:250,usability,error,error,250,"[Exp PyROOT] Add pythonisations for getter methods of TGraph family; This feature is implemented via a composite pythonizor that matches `TGraph`, `TGraph2D` and their error subclasses, and pythonises their getter methods of the X,Y,Z coordinate and error arrays, which in C++ return a pointer to double. The pythonisation consists in setting the size of the array buffer that the getter method returns, so that it is known in Python and the buffer is fully usable (its length can be obtained, it is iterable).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3540
https://github.com/root-project/root/pull/3540:323,usability,consist,consists,323,"[Exp PyROOT] Add pythonisations for getter methods of TGraph family; This feature is implemented via a composite pythonizor that matches `TGraph`, `TGraph2D` and their error subclasses, and pythonises their getter methods of the X,Y,Z coordinate and error arrays, which in C++ return a pointer to double. The pythonisation consists in setting the size of the array buffer that the getter method returns, so that it is known in Python and the buffer is fully usable (its length can be obtained, it is iterable).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3540
https://github.com/root-project/root/pull/3540:458,usability,usab,usable,458,"[Exp PyROOT] Add pythonisations for getter methods of TGraph family; This feature is implemented via a composite pythonizor that matches `TGraph`, `TGraph2D` and their error subclasses, and pythonises their getter methods of the X,Y,Z coordinate and error arrays, which in C++ return a pointer to double. The pythonisation consists in setting the size of the array buffer that the getter method returns, so that it is known in Python and the buffer is fully usable (its length can be obtained, it is iterable).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3540
https://github.com/root-project/root/pull/3541:22,interoperability,format,formatting,22,"fitting_histograms.md formatting; Fixes a typo with code tags which resulted in prose being formatted as code. Also, standardise the presentation of **`TH1`** and **`TF1`** in the page. There were multiple different presentations: some where **`TH1`**, some were `TH1` and some were TH1. Instances of `TH1`, `TF1` which are alone are changed to **`TH1`**, **`TF1`**. Some instances of `TH1::Fit` were set as **`TH1`**`::Fit`. Functions like this are set to `TH1::Fit`. Apologies if I have misunderstood a convention which was in place.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3541
https://github.com/root-project/root/pull/3541:92,interoperability,format,formatted,92,"fitting_histograms.md formatting; Fixes a typo with code tags which resulted in prose being formatted as code. Also, standardise the presentation of **`TH1`** and **`TF1`** in the page. There were multiple different presentations: some where **`TH1`**, some were `TH1` and some were TH1. Instances of `TH1`, `TF1` which are alone are changed to **`TH1`**, **`TF1`**. Some instances of `TH1::Fit` were set as **`TH1`**`::Fit`. Functions like this are set to `TH1::Fit`. Apologies if I have misunderstood a convention which was in place.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3541
https://github.com/root-project/root/pull/3541:117,interoperability,standard,standardise,117,"fitting_histograms.md formatting; Fixes a typo with code tags which resulted in prose being formatted as code. Also, standardise the presentation of **`TH1`** and **`TF1`** in the page. There were multiple different presentations: some where **`TH1`**, some were `TH1` and some were TH1. Instances of `TH1`, `TF1` which are alone are changed to **`TH1`**, **`TF1`**. Some instances of `TH1::Fit` were set as **`TH1`**`::Fit`. Functions like this are set to `TH1::Fit`. Apologies if I have misunderstood a convention which was in place.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3541
https://github.com/root-project/root/pull/3542:333,availability,error,errors,333,"[DF] Avoid forward declarations of Define'd types; Either the interpreter knows them, or we alias them to `void`. Just as before, the end result is that if users return a type. that is unknown to the interpreter from a Define, and then try. to read that Define'd column from jitted RDF nodes, the interpreter. (and consequently RDF) errors out. This is missing a test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3542
https://github.com/root-project/root/pull/3542:333,performance,error,errors,333,"[DF] Avoid forward declarations of Define'd types; Either the interpreter knows them, or we alias them to `void`. Just as before, the end result is that if users return a type. that is unknown to the interpreter from a Define, and then try. to read that Define'd column from jitted RDF nodes, the interpreter. (and consequently RDF) errors out. This is missing a test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3542
https://github.com/root-project/root/pull/3542:5,safety,Avoid,Avoid,5,"[DF] Avoid forward declarations of Define'd types; Either the interpreter knows them, or we alias them to `void`. Just as before, the end result is that if users return a type. that is unknown to the interpreter from a Define, and then try. to read that Define'd column from jitted RDF nodes, the interpreter. (and consequently RDF) errors out. This is missing a test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3542
https://github.com/root-project/root/pull/3542:333,safety,error,errors,333,"[DF] Avoid forward declarations of Define'd types; Either the interpreter knows them, or we alias them to `void`. Just as before, the end result is that if users return a type. that is unknown to the interpreter from a Define, and then try. to read that Define'd column from jitted RDF nodes, the interpreter. (and consequently RDF) errors out. This is missing a test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3542
https://github.com/root-project/root/pull/3542:363,safety,test,test,363,"[DF] Avoid forward declarations of Define'd types; Either the interpreter knows them, or we alias them to `void`. Just as before, the end result is that if users return a type. that is unknown to the interpreter from a Define, and then try. to read that Define'd column from jitted RDF nodes, the interpreter. (and consequently RDF) errors out. This is missing a test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3542
https://github.com/root-project/root/pull/3542:363,testability,test,test,363,"[DF] Avoid forward declarations of Define'd types; Either the interpreter knows them, or we alias them to `void`. Just as before, the end result is that if users return a type. that is unknown to the interpreter from a Define, and then try. to read that Define'd column from jitted RDF nodes, the interpreter. (and consequently RDF) errors out. This is missing a test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3542
https://github.com/root-project/root/pull/3542:156,usability,user,users,156,"[DF] Avoid forward declarations of Define'd types; Either the interpreter knows them, or we alias them to `void`. Just as before, the end result is that if users return a type. that is unknown to the interpreter from a Define, and then try. to read that Define'd column from jitted RDF nodes, the interpreter. (and consequently RDF) errors out. This is missing a test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3542
https://github.com/root-project/root/pull/3542:333,usability,error,errors,333,"[DF] Avoid forward declarations of Define'd types; Either the interpreter knows them, or we alias them to `void`. Just as before, the end result is that if users return a type. that is unknown to the interpreter from a Define, and then try. to read that Define'd column from jitted RDF nodes, the interpreter. (and consequently RDF) errors out. This is missing a test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3542
https://github.com/root-project/root/pull/3543:255,safety,compl,completely,255,"Removing mail address; Hi,. Hope everyone is doing well. I noticed my mail address_es_, nicknames and full names in this file and I want it removed since. I noticed it on Google after I looked up my mail address there. Idk if this PR will make it go away completely from GitHub but I guess it proves the point I am trying to make. . Thanks! PS: How is GDPR going?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3543
https://github.com/root-project/root/pull/3543:255,security,compl,completely,255,"Removing mail address; Hi,. Hope everyone is doing well. I noticed my mail address_es_, nicknames and full names in this file and I want it removed since. I noticed it on Google after I looked up my mail address there. Idk if this PR will make it go away completely from GitHub but I guess it proves the point I am trying to make. . Thanks! PS: How is GDPR going?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3543
https://github.com/root-project/root/pull/3543:352,security,GDPR,GDPR,352,"Removing mail address; Hi,. Hope everyone is doing well. I noticed my mail address_es_, nicknames and full names in this file and I want it removed since. I noticed it on Google after I looked up my mail address there. Idk if this PR will make it go away completely from GitHub but I guess it proves the point I am trying to make. . Thanks! PS: How is GDPR going?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3543
https://github.com/root-project/root/pull/3546:13,deployability,Instal,Install,13,"[Exp PyROOT] Install public headers of Cppyy; Some headers of Cppyy (e.g. `TPython.h`) need to be public, so make sure they are placed both in the `${build_dir}/include` and `${install_dir}/include`. This PR also re-enables a roofit tutorial that got fixed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3546
https://github.com/root-project/root/pull/3546:21,integrability,pub,public,21,"[Exp PyROOT] Install public headers of Cppyy; Some headers of Cppyy (e.g. `TPython.h`) need to be public, so make sure they are placed both in the `${build_dir}/include` and `${install_dir}/include`. This PR also re-enables a roofit tutorial that got fixed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3546
https://github.com/root-project/root/pull/3546:98,integrability,pub,public,98,"[Exp PyROOT] Install public headers of Cppyy; Some headers of Cppyy (e.g. `TPython.h`) need to be public, so make sure they are placed both in the `${build_dir}/include` and `${install_dir}/include`. This PR also re-enables a roofit tutorial that got fixed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3546
https://github.com/root-project/root/pull/3548:180,modifiability,variab,variables,180,WebUI: adjust CEF and Qt5WebEngine code; 1. Make CEF display working with latest CEF code. 2. Copy all necessary CEF files into ROOT binary directory - no need to have extra shell variables when ROOT is running. 3. Adjust Qt5WebEngine code - latest Qt 5.12 more strict with custom scheme definitions. 4. Let use CEF and Qt5 displays for any http address - not only RWebWindow.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3548
https://github.com/root-project/root/pull/3548:274,usability,custom,custom,274,WebUI: adjust CEF and Qt5WebEngine code; 1. Make CEF display working with latest CEF code. 2. Copy all necessary CEF files into ROOT binary directory - no need to have extra shell variables when ROOT is running. 3. Adjust Qt5WebEngine code - latest Qt 5.12 more strict with custom scheme definitions. 4. Let use CEF and Qt5 displays for any http address - not only RWebWindow.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3548
https://github.com/root-project/root/pull/3549:363,energy efficiency,draw,drawn,363,"Fixed bug which made Canvas remain in Batch Mode after it was appended to an open file; Hi,. I noticed a strange behaviour:. When a TCanvas is being appended to an already open file via TPad::Print, it can happen that afterwards the Canvas is in Batch Mode which it was not before. Looking to the implementation of TPad::Print gives the reason:. When a Canvas is drawn which is not in Batch Mode, but the Canvas ID is -1, it is set to Batch Mode for Drawing. This Batch Mode Flag is afterwards being reset in the implementation of printing to a new file, but it is missing in the implementation of printing to an already open file. I'm very sure that this is a bug and the Canvas is not intended to stay in Batch Mode, so I added a corresponding line which resets the Batch Mode. If this behaviour should be intended, please correct me, but that would really surprise me. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3549
https://github.com/root-project/root/pull/3549:450,energy efficiency,Draw,Drawing,450,"Fixed bug which made Canvas remain in Batch Mode after it was appended to an open file; Hi,. I noticed a strange behaviour:. When a TCanvas is being appended to an already open file via TPad::Print, it can happen that afterwards the Canvas is in Batch Mode which it was not before. Looking to the implementation of TPad::Print gives the reason:. When a Canvas is drawn which is not in Batch Mode, but the Canvas ID is -1, it is set to Batch Mode for Drawing. This Batch Mode Flag is afterwards being reset in the implementation of printing to a new file, but it is missing in the implementation of printing to an already open file. I'm very sure that this is a bug and the Canvas is not intended to stay in Batch Mode, so I added a corresponding line which resets the Batch Mode. If this behaviour should be intended, please correct me, but that would really surprise me. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3549
https://github.com/root-project/root/pull/3549:38,integrability,Batch,Batch,38,"Fixed bug which made Canvas remain in Batch Mode after it was appended to an open file; Hi,. I noticed a strange behaviour:. When a TCanvas is being appended to an already open file via TPad::Print, it can happen that afterwards the Canvas is in Batch Mode which it was not before. Looking to the implementation of TPad::Print gives the reason:. When a Canvas is drawn which is not in Batch Mode, but the Canvas ID is -1, it is set to Batch Mode for Drawing. This Batch Mode Flag is afterwards being reset in the implementation of printing to a new file, but it is missing in the implementation of printing to an already open file. I'm very sure that this is a bug and the Canvas is not intended to stay in Batch Mode, so I added a corresponding line which resets the Batch Mode. If this behaviour should be intended, please correct me, but that would really surprise me. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3549
https://github.com/root-project/root/pull/3549:246,integrability,Batch,Batch,246,"Fixed bug which made Canvas remain in Batch Mode after it was appended to an open file; Hi,. I noticed a strange behaviour:. When a TCanvas is being appended to an already open file via TPad::Print, it can happen that afterwards the Canvas is in Batch Mode which it was not before. Looking to the implementation of TPad::Print gives the reason:. When a Canvas is drawn which is not in Batch Mode, but the Canvas ID is -1, it is set to Batch Mode for Drawing. This Batch Mode Flag is afterwards being reset in the implementation of printing to a new file, but it is missing in the implementation of printing to an already open file. I'm very sure that this is a bug and the Canvas is not intended to stay in Batch Mode, so I added a corresponding line which resets the Batch Mode. If this behaviour should be intended, please correct me, but that would really surprise me. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3549
https://github.com/root-project/root/pull/3549:385,integrability,Batch,Batch,385,"Fixed bug which made Canvas remain in Batch Mode after it was appended to an open file; Hi,. I noticed a strange behaviour:. When a TCanvas is being appended to an already open file via TPad::Print, it can happen that afterwards the Canvas is in Batch Mode which it was not before. Looking to the implementation of TPad::Print gives the reason:. When a Canvas is drawn which is not in Batch Mode, but the Canvas ID is -1, it is set to Batch Mode for Drawing. This Batch Mode Flag is afterwards being reset in the implementation of printing to a new file, but it is missing in the implementation of printing to an already open file. I'm very sure that this is a bug and the Canvas is not intended to stay in Batch Mode, so I added a corresponding line which resets the Batch Mode. If this behaviour should be intended, please correct me, but that would really surprise me. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3549
https://github.com/root-project/root/pull/3549:435,integrability,Batch,Batch,435,"Fixed bug which made Canvas remain in Batch Mode after it was appended to an open file; Hi,. I noticed a strange behaviour:. When a TCanvas is being appended to an already open file via TPad::Print, it can happen that afterwards the Canvas is in Batch Mode which it was not before. Looking to the implementation of TPad::Print gives the reason:. When a Canvas is drawn which is not in Batch Mode, but the Canvas ID is -1, it is set to Batch Mode for Drawing. This Batch Mode Flag is afterwards being reset in the implementation of printing to a new file, but it is missing in the implementation of printing to an already open file. I'm very sure that this is a bug and the Canvas is not intended to stay in Batch Mode, so I added a corresponding line which resets the Batch Mode. If this behaviour should be intended, please correct me, but that would really surprise me. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3549
https://github.com/root-project/root/pull/3549:464,integrability,Batch,Batch,464,"Fixed bug which made Canvas remain in Batch Mode after it was appended to an open file; Hi,. I noticed a strange behaviour:. When a TCanvas is being appended to an already open file via TPad::Print, it can happen that afterwards the Canvas is in Batch Mode which it was not before. Looking to the implementation of TPad::Print gives the reason:. When a Canvas is drawn which is not in Batch Mode, but the Canvas ID is -1, it is set to Batch Mode for Drawing. This Batch Mode Flag is afterwards being reset in the implementation of printing to a new file, but it is missing in the implementation of printing to an already open file. I'm very sure that this is a bug and the Canvas is not intended to stay in Batch Mode, so I added a corresponding line which resets the Batch Mode. If this behaviour should be intended, please correct me, but that would really surprise me. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3549
https://github.com/root-project/root/pull/3549:707,integrability,Batch,Batch,707,"Fixed bug which made Canvas remain in Batch Mode after it was appended to an open file; Hi,. I noticed a strange behaviour:. When a TCanvas is being appended to an already open file via TPad::Print, it can happen that afterwards the Canvas is in Batch Mode which it was not before. Looking to the implementation of TPad::Print gives the reason:. When a Canvas is drawn which is not in Batch Mode, but the Canvas ID is -1, it is set to Batch Mode for Drawing. This Batch Mode Flag is afterwards being reset in the implementation of printing to a new file, but it is missing in the implementation of printing to an already open file. I'm very sure that this is a bug and the Canvas is not intended to stay in Batch Mode, so I added a corresponding line which resets the Batch Mode. If this behaviour should be intended, please correct me, but that would really surprise me. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3549
https://github.com/root-project/root/pull/3549:768,integrability,Batch,Batch,768,"Fixed bug which made Canvas remain in Batch Mode after it was appended to an open file; Hi,. I noticed a strange behaviour:. When a TCanvas is being appended to an already open file via TPad::Print, it can happen that afterwards the Canvas is in Batch Mode which it was not before. Looking to the implementation of TPad::Print gives the reason:. When a Canvas is drawn which is not in Batch Mode, but the Canvas ID is -1, it is set to Batch Mode for Drawing. This Batch Mode Flag is afterwards being reset in the implementation of printing to a new file, but it is missing in the implementation of printing to an already open file. I'm very sure that this is a bug and the Canvas is not intended to stay in Batch Mode, so I added a corresponding line which resets the Batch Mode. If this behaviour should be intended, please correct me, but that would really surprise me. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3549
https://github.com/root-project/root/pull/3549:38,performance,Batch,Batch,38,"Fixed bug which made Canvas remain in Batch Mode after it was appended to an open file; Hi,. I noticed a strange behaviour:. When a TCanvas is being appended to an already open file via TPad::Print, it can happen that afterwards the Canvas is in Batch Mode which it was not before. Looking to the implementation of TPad::Print gives the reason:. When a Canvas is drawn which is not in Batch Mode, but the Canvas ID is -1, it is set to Batch Mode for Drawing. This Batch Mode Flag is afterwards being reset in the implementation of printing to a new file, but it is missing in the implementation of printing to an already open file. I'm very sure that this is a bug and the Canvas is not intended to stay in Batch Mode, so I added a corresponding line which resets the Batch Mode. If this behaviour should be intended, please correct me, but that would really surprise me. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3549
https://github.com/root-project/root/pull/3549:246,performance,Batch,Batch,246,"Fixed bug which made Canvas remain in Batch Mode after it was appended to an open file; Hi,. I noticed a strange behaviour:. When a TCanvas is being appended to an already open file via TPad::Print, it can happen that afterwards the Canvas is in Batch Mode which it was not before. Looking to the implementation of TPad::Print gives the reason:. When a Canvas is drawn which is not in Batch Mode, but the Canvas ID is -1, it is set to Batch Mode for Drawing. This Batch Mode Flag is afterwards being reset in the implementation of printing to a new file, but it is missing in the implementation of printing to an already open file. I'm very sure that this is a bug and the Canvas is not intended to stay in Batch Mode, so I added a corresponding line which resets the Batch Mode. If this behaviour should be intended, please correct me, but that would really surprise me. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3549
https://github.com/root-project/root/pull/3549:385,performance,Batch,Batch,385,"Fixed bug which made Canvas remain in Batch Mode after it was appended to an open file; Hi,. I noticed a strange behaviour:. When a TCanvas is being appended to an already open file via TPad::Print, it can happen that afterwards the Canvas is in Batch Mode which it was not before. Looking to the implementation of TPad::Print gives the reason:. When a Canvas is drawn which is not in Batch Mode, but the Canvas ID is -1, it is set to Batch Mode for Drawing. This Batch Mode Flag is afterwards being reset in the implementation of printing to a new file, but it is missing in the implementation of printing to an already open file. I'm very sure that this is a bug and the Canvas is not intended to stay in Batch Mode, so I added a corresponding line which resets the Batch Mode. If this behaviour should be intended, please correct me, but that would really surprise me. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3549
https://github.com/root-project/root/pull/3549:435,performance,Batch,Batch,435,"Fixed bug which made Canvas remain in Batch Mode after it was appended to an open file; Hi,. I noticed a strange behaviour:. When a TCanvas is being appended to an already open file via TPad::Print, it can happen that afterwards the Canvas is in Batch Mode which it was not before. Looking to the implementation of TPad::Print gives the reason:. When a Canvas is drawn which is not in Batch Mode, but the Canvas ID is -1, it is set to Batch Mode for Drawing. This Batch Mode Flag is afterwards being reset in the implementation of printing to a new file, but it is missing in the implementation of printing to an already open file. I'm very sure that this is a bug and the Canvas is not intended to stay in Batch Mode, so I added a corresponding line which resets the Batch Mode. If this behaviour should be intended, please correct me, but that would really surprise me. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3549
https://github.com/root-project/root/pull/3549:464,performance,Batch,Batch,464,"Fixed bug which made Canvas remain in Batch Mode after it was appended to an open file; Hi,. I noticed a strange behaviour:. When a TCanvas is being appended to an already open file via TPad::Print, it can happen that afterwards the Canvas is in Batch Mode which it was not before. Looking to the implementation of TPad::Print gives the reason:. When a Canvas is drawn which is not in Batch Mode, but the Canvas ID is -1, it is set to Batch Mode for Drawing. This Batch Mode Flag is afterwards being reset in the implementation of printing to a new file, but it is missing in the implementation of printing to an already open file. I'm very sure that this is a bug and the Canvas is not intended to stay in Batch Mode, so I added a corresponding line which resets the Batch Mode. If this behaviour should be intended, please correct me, but that would really surprise me. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3549
https://github.com/root-project/root/pull/3549:707,performance,Batch,Batch,707,"Fixed bug which made Canvas remain in Batch Mode after it was appended to an open file; Hi,. I noticed a strange behaviour:. When a TCanvas is being appended to an already open file via TPad::Print, it can happen that afterwards the Canvas is in Batch Mode which it was not before. Looking to the implementation of TPad::Print gives the reason:. When a Canvas is drawn which is not in Batch Mode, but the Canvas ID is -1, it is set to Batch Mode for Drawing. This Batch Mode Flag is afterwards being reset in the implementation of printing to a new file, but it is missing in the implementation of printing to an already open file. I'm very sure that this is a bug and the Canvas is not intended to stay in Batch Mode, so I added a corresponding line which resets the Batch Mode. If this behaviour should be intended, please correct me, but that would really surprise me. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3549
https://github.com/root-project/root/pull/3549:768,performance,Batch,Batch,768,"Fixed bug which made Canvas remain in Batch Mode after it was appended to an open file; Hi,. I noticed a strange behaviour:. When a TCanvas is being appended to an already open file via TPad::Print, it can happen that afterwards the Canvas is in Batch Mode which it was not before. Looking to the implementation of TPad::Print gives the reason:. When a Canvas is drawn which is not in Batch Mode, but the Canvas ID is -1, it is set to Batch Mode for Drawing. This Batch Mode Flag is afterwards being reset in the implementation of printing to a new file, but it is missing in the implementation of printing to an already open file. I'm very sure that this is a bug and the Canvas is not intended to stay in Batch Mode, so I added a corresponding line which resets the Batch Mode. If this behaviour should be intended, please correct me, but that would really surprise me. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3549
https://github.com/root-project/root/pull/3549:113,usability,behavi,behaviour,113,"Fixed bug which made Canvas remain in Batch Mode after it was appended to an open file; Hi,. I noticed a strange behaviour:. When a TCanvas is being appended to an already open file via TPad::Print, it can happen that afterwards the Canvas is in Batch Mode which it was not before. Looking to the implementation of TPad::Print gives the reason:. When a Canvas is drawn which is not in Batch Mode, but the Canvas ID is -1, it is set to Batch Mode for Drawing. This Batch Mode Flag is afterwards being reset in the implementation of printing to a new file, but it is missing in the implementation of printing to an already open file. I'm very sure that this is a bug and the Canvas is not intended to stay in Batch Mode, so I added a corresponding line which resets the Batch Mode. If this behaviour should be intended, please correct me, but that would really surprise me. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3549
https://github.com/root-project/root/pull/3549:788,usability,behavi,behaviour,788,"Fixed bug which made Canvas remain in Batch Mode after it was appended to an open file; Hi,. I noticed a strange behaviour:. When a TCanvas is being appended to an already open file via TPad::Print, it can happen that afterwards the Canvas is in Batch Mode which it was not before. Looking to the implementation of TPad::Print gives the reason:. When a Canvas is drawn which is not in Batch Mode, but the Canvas ID is -1, it is set to Batch Mode for Drawing. This Batch Mode Flag is afterwards being reset in the implementation of printing to a new file, but it is missing in the implementation of printing to an already open file. I'm very sure that this is a bug and the Canvas is not intended to stay in Batch Mode, so I added a corresponding line which resets the Batch Mode. If this behaviour should be intended, please correct me, but that would really surprise me. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3549
https://github.com/root-project/root/pull/3550:10,safety,test,test,10,Fix cling test;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3550
https://github.com/root-project/root/pull/3550:10,testability,test,test,10,Fix cling test;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3550
https://github.com/root-project/root/pull/3551:553,availability,error,error,553,"Add missing #include TError.h; It fixes broken builds on Ubuntu 16:. `[ 92%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooProdPdf.cxx.o. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx: In member function ‘void TWebCanvas::ShowCmd(const char*, Bool_t)’:. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx:516:77: error: ‘Warning’ was not declared in this scope. Warning(""ShowCmd"", ""Send operation not empty when try show %s"", arg). ^. `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3551
https://github.com/root-project/root/pull/3551:627,availability,operat,operation,627,"Add missing #include TError.h; It fixes broken builds on Ubuntu 16:. `[ 92%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooProdPdf.cxx.o. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx: In member function ‘void TWebCanvas::ShowCmd(const char*, Bool_t)’:. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx:516:77: error: ‘Warning’ was not declared in this scope. Warning(""ShowCmd"", ""Send operation not empty when try show %s"", arg). ^. `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3551
https://github.com/root-project/root/pull/3551:47,deployability,build,builds,47,"Add missing #include TError.h; It fixes broken builds on Ubuntu 16:. `[ 92%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooProdPdf.cxx.o. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx: In member function ‘void TWebCanvas::ShowCmd(const char*, Bool_t)’:. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx:516:77: error: ‘Warning’ was not declared in this scope. Warning(""ShowCmd"", ""Send operation not empty when try show %s"", arg). ^. `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3551
https://github.com/root-project/root/pull/3551:77,deployability,Build,Building,77,"Add missing #include TError.h; It fixes broken builds on Ubuntu 16:. `[ 92%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooProdPdf.cxx.o. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx: In member function ‘void TWebCanvas::ShowCmd(const char*, Bool_t)’:. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx:516:77: error: ‘Warning’ was not declared in this scope. Warning(""ShowCmd"", ""Send operation not empty when try show %s"", arg). ^. `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3551
https://github.com/root-project/root/pull/3551:168,deployability,build,build,168,"Add missing #include TError.h; It fixes broken builds on Ubuntu 16:. `[ 92%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooProdPdf.cxx.o. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx: In member function ‘void TWebCanvas::ShowCmd(const char*, Bool_t)’:. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx:516:77: error: ‘Warning’ was not declared in this scope. Warning(""ShowCmd"", ""Send operation not empty when try show %s"", arg). ^. `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3551
https://github.com/root-project/root/pull/3551:200,deployability,BUILD,BUILDTYPE,200,"Add missing #include TError.h; It fixes broken builds on Ubuntu 16:. `[ 92%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooProdPdf.cxx.o. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx: In member function ‘void TWebCanvas::ShowCmd(const char*, Bool_t)’:. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx:516:77: error: ‘Warning’ was not declared in this scope. Warning(""ShowCmd"", ""Send operation not empty when try show %s"", arg). ^. `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3551
https://github.com/root-project/root/pull/3551:210,deployability,Releas,Release,210,"Add missing #include TError.h; It fixes broken builds on Ubuntu 16:. `[ 92%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooProdPdf.cxx.o. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx: In member function ‘void TWebCanvas::ShowCmd(const char*, Bool_t)’:. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx:516:77: error: ‘Warning’ was not declared in this scope. Warning(""ShowCmd"", ""Send operation not empty when try show %s"", arg). ^. `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3551
https://github.com/root-project/root/pull/3551:249,deployability,build,build,249,"Add missing #include TError.h; It fixes broken builds on Ubuntu 16:. `[ 92%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooProdPdf.cxx.o. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx: In member function ‘void TWebCanvas::ShowCmd(const char*, Bool_t)’:. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx:516:77: error: ‘Warning’ was not declared in this scope. Warning(""ShowCmd"", ""Send operation not empty when try show %s"", arg). ^. `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3551
https://github.com/root-project/root/pull/3551:394,deployability,build,build,394,"Add missing #include TError.h; It fixes broken builds on Ubuntu 16:. `[ 92%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooProdPdf.cxx.o. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx: In member function ‘void TWebCanvas::ShowCmd(const char*, Bool_t)’:. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx:516:77: error: ‘Warning’ was not declared in this scope. Warning(""ShowCmd"", ""Send operation not empty when try show %s"", arg). ^. `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3551
https://github.com/root-project/root/pull/3551:426,deployability,BUILD,BUILDTYPE,426,"Add missing #include TError.h; It fixes broken builds on Ubuntu 16:. `[ 92%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooProdPdf.cxx.o. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx: In member function ‘void TWebCanvas::ShowCmd(const char*, Bool_t)’:. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx:516:77: error: ‘Warning’ was not declared in this scope. Warning(""ShowCmd"", ""Send operation not empty when try show %s"", arg). ^. `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3551
https://github.com/root-project/root/pull/3551:436,deployability,Releas,Release,436,"Add missing #include TError.h; It fixes broken builds on Ubuntu 16:. `[ 92%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooProdPdf.cxx.o. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx: In member function ‘void TWebCanvas::ShowCmd(const char*, Bool_t)’:. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx:516:77: error: ‘Warning’ was not declared in this scope. Warning(""ShowCmd"", ""Send operation not empty when try show %s"", arg). ^. `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3551
https://github.com/root-project/root/pull/3551:475,deployability,build,build,475,"Add missing #include TError.h; It fixes broken builds on Ubuntu 16:. `[ 92%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooProdPdf.cxx.o. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx: In member function ‘void TWebCanvas::ShowCmd(const char*, Bool_t)’:. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx:516:77: error: ‘Warning’ was not declared in this scope. Warning(""ShowCmd"", ""Send operation not empty when try show %s"", arg). ^. `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3551
https://github.com/root-project/root/pull/3551:553,performance,error,error,553,"Add missing #include TError.h; It fixes broken builds on Ubuntu 16:. `[ 92%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooProdPdf.cxx.o. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx: In member function ‘void TWebCanvas::ShowCmd(const char*, Bool_t)’:. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx:516:77: error: ‘Warning’ was not declared in this scope. Warning(""ShowCmd"", ""Send operation not empty when try show %s"", arg). ^. `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3551
https://github.com/root-project/root/pull/3551:553,safety,error,error,553,"Add missing #include TError.h; It fixes broken builds on Ubuntu 16:. `[ 92%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooProdPdf.cxx.o. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx: In member function ‘void TWebCanvas::ShowCmd(const char*, Bool_t)’:. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx:516:77: error: ‘Warning’ was not declared in this scope. Warning(""ShowCmd"", ""Send operation not empty when try show %s"", arg). ^. `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3551
https://github.com/root-project/root/pull/3551:553,usability,error,error,553,"Add missing #include TError.h; It fixes broken builds on Ubuntu 16:. `[ 92%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooProdPdf.cxx.o. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx: In member function ‘void TWebCanvas::ShowCmd(const char*, Bool_t)’:. /mnt/build/workspace/lcg_ext_rootcov/BUILDTYPE/Release/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-HEAD/src/ROOT/HEAD/gui/webgui6/src/TWebCanvas.cxx:516:77: error: ‘Warning’ was not declared in this scope. Warning(""ShowCmd"", ""Send operation not empty when try show %s"", arg). ^. `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3551
https://github.com/root-project/root/pull/3552:68,usability,indicat,indicated,68,Implement option CJUST (color justified labels) to TPaletteAxis; As indicated in the root forum I implemented the alignment of labels and ticks in TPaletteAxis. at colour boundaries = contourlevels instead of the algorithm provided by TGAxis . Please check carefully since I am a novice as git producer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3552
https://github.com/root-project/root/pull/3553:181,modifiability,variab,variable,181,"Correctly create dictionary for v7 classes in libCore; Main problem that cmake `list(APPEND BASE_HEADERS ...)` command was not exported to parent scope - as original `BASE_HEADERS` variable. Once done, several other dictionary options should be adjusted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3553
https://github.com/root-project/root/pull/3553:111,usability,command,command,111,"Correctly create dictionary for v7 classes in libCore; Main problem that cmake `list(APPEND BASE_HEADERS ...)` command was not exported to parent scope - as original `BASE_HEADERS` variable. Once done, several other dictionary options should be adjusted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3553
https://github.com/root-project/root/pull/3555:327,deployability,updat,update,327,"[Exp PyROOT] Prevent cppyy from checking the PCH; Before importing cppyy from PyROOT, instead of specifying the location of the PCH, we can just use the magic word 'none' to tell cppyy not to check the PCH. In both cases, the objective is to avoid a warning from cppyy when importing it. This needs to be merged after the next update of `cppyy-backend`, when a new release is out. The related discussion with Wim is here:. https://bitbucket.org/wlav/cppyy/issues/62/new-check-in-loaderpy-uses-wrong-include",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3555
https://github.com/root-project/root/pull/3555:365,deployability,releas,release,365,"[Exp PyROOT] Prevent cppyy from checking the PCH; Before importing cppyy from PyROOT, instead of specifying the location of the PCH, we can just use the magic word 'none' to tell cppyy not to check the PCH. In both cases, the objective is to avoid a warning from cppyy when importing it. This needs to be merged after the next update of `cppyy-backend`, when a new release is out. The related discussion with Wim is here:. https://bitbucket.org/wlav/cppyy/issues/62/new-check-in-loaderpy-uses-wrong-include",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3555
https://github.com/root-project/root/pull/3555:479,deployability,loader,loaderpy-uses-wrong-include,479,"[Exp PyROOT] Prevent cppyy from checking the PCH; Before importing cppyy from PyROOT, instead of specifying the location of the PCH, we can just use the magic word 'none' to tell cppyy not to check the PCH. In both cases, the objective is to avoid a warning from cppyy when importing it. This needs to be merged after the next update of `cppyy-backend`, when a new release is out. The related discussion with Wim is here:. https://bitbucket.org/wlav/cppyy/issues/62/new-check-in-loaderpy-uses-wrong-include",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3555
https://github.com/root-project/root/pull/3555:479,energy efficiency,load,loaderpy-uses-wrong-include,479,"[Exp PyROOT] Prevent cppyy from checking the PCH; Before importing cppyy from PyROOT, instead of specifying the location of the PCH, we can just use the magic word 'none' to tell cppyy not to check the PCH. In both cases, the objective is to avoid a warning from cppyy when importing it. This needs to be merged after the next update of `cppyy-backend`, when a new release is out. The related discussion with Wim is here:. https://bitbucket.org/wlav/cppyy/issues/62/new-check-in-loaderpy-uses-wrong-include",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3555
https://github.com/root-project/root/pull/3555:97,interoperability,specif,specifying,97,"[Exp PyROOT] Prevent cppyy from checking the PCH; Before importing cppyy from PyROOT, instead of specifying the location of the PCH, we can just use the magic word 'none' to tell cppyy not to check the PCH. In both cases, the objective is to avoid a warning from cppyy when importing it. This needs to be merged after the next update of `cppyy-backend`, when a new release is out. The related discussion with Wim is here:. https://bitbucket.org/wlav/cppyy/issues/62/new-check-in-loaderpy-uses-wrong-include",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3555
https://github.com/root-project/root/pull/3555:479,performance,load,loaderpy-uses-wrong-include,479,"[Exp PyROOT] Prevent cppyy from checking the PCH; Before importing cppyy from PyROOT, instead of specifying the location of the PCH, we can just use the magic word 'none' to tell cppyy not to check the PCH. In both cases, the objective is to avoid a warning from cppyy when importing it. This needs to be merged after the next update of `cppyy-backend`, when a new release is out. The related discussion with Wim is here:. https://bitbucket.org/wlav/cppyy/issues/62/new-check-in-loaderpy-uses-wrong-include",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3555
https://github.com/root-project/root/pull/3555:13,safety,Prevent,Prevent,13,"[Exp PyROOT] Prevent cppyy from checking the PCH; Before importing cppyy from PyROOT, instead of specifying the location of the PCH, we can just use the magic word 'none' to tell cppyy not to check the PCH. In both cases, the objective is to avoid a warning from cppyy when importing it. This needs to be merged after the next update of `cppyy-backend`, when a new release is out. The related discussion with Wim is here:. https://bitbucket.org/wlav/cppyy/issues/62/new-check-in-loaderpy-uses-wrong-include",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3555
https://github.com/root-project/root/pull/3555:242,safety,avoid,avoid,242,"[Exp PyROOT] Prevent cppyy from checking the PCH; Before importing cppyy from PyROOT, instead of specifying the location of the PCH, we can just use the magic word 'none' to tell cppyy not to check the PCH. In both cases, the objective is to avoid a warning from cppyy when importing it. This needs to be merged after the next update of `cppyy-backend`, when a new release is out. The related discussion with Wim is here:. https://bitbucket.org/wlav/cppyy/issues/62/new-check-in-loaderpy-uses-wrong-include",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3555
https://github.com/root-project/root/pull/3555:327,safety,updat,update,327,"[Exp PyROOT] Prevent cppyy from checking the PCH; Before importing cppyy from PyROOT, instead of specifying the location of the PCH, we can just use the magic word 'none' to tell cppyy not to check the PCH. In both cases, the objective is to avoid a warning from cppyy when importing it. This needs to be merged after the next update of `cppyy-backend`, when a new release is out. The related discussion with Wim is here:. https://bitbucket.org/wlav/cppyy/issues/62/new-check-in-loaderpy-uses-wrong-include",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3555
https://github.com/root-project/root/pull/3555:13,security,Preven,Prevent,13,"[Exp PyROOT] Prevent cppyy from checking the PCH; Before importing cppyy from PyROOT, instead of specifying the location of the PCH, we can just use the magic word 'none' to tell cppyy not to check the PCH. In both cases, the objective is to avoid a warning from cppyy when importing it. This needs to be merged after the next update of `cppyy-backend`, when a new release is out. The related discussion with Wim is here:. https://bitbucket.org/wlav/cppyy/issues/62/new-check-in-loaderpy-uses-wrong-include",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3555
https://github.com/root-project/root/pull/3555:327,security,updat,update,327,"[Exp PyROOT] Prevent cppyy from checking the PCH; Before importing cppyy from PyROOT, instead of specifying the location of the PCH, we can just use the magic word 'none' to tell cppyy not to check the PCH. In both cases, the objective is to avoid a warning from cppyy when importing it. This needs to be merged after the next update of `cppyy-backend`, when a new release is out. The related discussion with Wim is here:. https://bitbucket.org/wlav/cppyy/issues/62/new-check-in-loaderpy-uses-wrong-include",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3555
https://github.com/root-project/root/pull/3556:82,performance,memor,memory,82,"[PyROOT] PyROOT backports; Backports of `RDataFrame.AsNumpy` and bugfixes for the memory adoption mechanism. Do not merge yet, I'm gonna have a second look for fixes I could have forgotten.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3556
https://github.com/root-project/root/pull/3556:82,usability,memor,memory,82,"[PyROOT] PyROOT backports; Backports of `RDataFrame.AsNumpy` and bugfixes for the memory adoption mechanism. Do not merge yet, I'm gonna have a second look for fixes I could have forgotten.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3556
https://github.com/root-project/root/pull/3558:20,usability,support,support,20,Fix move-only types support in TExecutor::Map;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3558
https://github.com/root-project/root/pull/3559:24,deployability,depend,depending,24,[DF] Fix custom actions depending on RDF+RDataSource; This fixes ROOT-10045.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3559
https://github.com/root-project/root/pull/3559:24,integrability,depend,depending,24,[DF] Fix custom actions depending on RDF+RDataSource; This fixes ROOT-10045.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3559
https://github.com/root-project/root/pull/3559:24,modifiability,depend,depending,24,[DF] Fix custom actions depending on RDF+RDataSource; This fixes ROOT-10045.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3559
https://github.com/root-project/root/pull/3559:24,safety,depend,depending,24,[DF] Fix custom actions depending on RDF+RDataSource; This fixes ROOT-10045.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3559
https://github.com/root-project/root/pull/3559:24,testability,depend,depending,24,[DF] Fix custom actions depending on RDF+RDataSource; This fixes ROOT-10045.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3559
https://github.com/root-project/root/pull/3559:9,usability,custom,custom,9,[DF] Fix custom actions depending on RDF+RDataSource; This fixes ROOT-10045.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3559
https://github.com/root-project/root/pull/3560:12,availability,error,error,12,webgui: fix error in CanvasPainter - search for proper connection;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3560
https://github.com/root-project/root/pull/3560:12,performance,error,error,12,webgui: fix error in CanvasPainter - search for proper connection;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3560
https://github.com/root-project/root/pull/3560:12,safety,error,error,12,webgui: fix error in CanvasPainter - search for proper connection;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3560
https://github.com/root-project/root/pull/3560:12,usability,error,error,12,webgui: fix error in CanvasPainter - search for proper connection;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3560
https://github.com/root-project/root/pull/3561:489,availability,error,error,489,webui: improve CEF and QT5 handling; 1. Do not expose special parameters to URL string - now in default HTML file special attributes can be inserted together with `JSROOT.ConnectWebWindow` call. 2. Correctly handle `#` in WebWindow URL. Such symbol used for routing inside webpage and will be often used with openui5. 3. Unify handling of URL options with RWebDisplayArgs. For now only `key` and `batch_mode` parameters are exposed to web window URL. 4. Update/extend doxygen docu. 5. Fix error in v7 CanvasPainter - v616 already fixed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3561
https://github.com/root-project/root/pull/3561:454,deployability,Updat,Update,454,webui: improve CEF and QT5 handling; 1. Do not expose special parameters to URL string - now in default HTML file special attributes can be inserted together with `JSROOT.ConnectWebWindow` call. 2. Correctly handle `#` in WebWindow URL. Such symbol used for routing inside webpage and will be often used with openui5. 3. Unify handling of URL options with RWebDisplayArgs. For now only `key` and `batch_mode` parameters are exposed to web window URL. 4. Update/extend doxygen docu. 5. Fix error in v7 CanvasPainter - v616 already fixed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3561
https://github.com/root-project/root/pull/3561:258,integrability,rout,routing,258,webui: improve CEF and QT5 handling; 1. Do not expose special parameters to URL string - now in default HTML file special attributes can be inserted together with `JSROOT.ConnectWebWindow` call. 2. Correctly handle `#` in WebWindow URL. Such symbol used for routing inside webpage and will be often used with openui5. 3. Unify handling of URL options with RWebDisplayArgs. For now only `key` and `batch_mode` parameters are exposed to web window URL. 4. Update/extend doxygen docu. 5. Fix error in v7 CanvasPainter - v616 already fixed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3561
https://github.com/root-project/root/pull/3561:62,modifiability,paramet,parameters,62,webui: improve CEF and QT5 handling; 1. Do not expose special parameters to URL string - now in default HTML file special attributes can be inserted together with `JSROOT.ConnectWebWindow` call. 2. Correctly handle `#` in WebWindow URL. Such symbol used for routing inside webpage and will be often used with openui5. 3. Unify handling of URL options with RWebDisplayArgs. For now only `key` and `batch_mode` parameters are exposed to web window URL. 4. Update/extend doxygen docu. 5. Fix error in v7 CanvasPainter - v616 already fixed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3561
https://github.com/root-project/root/pull/3561:409,modifiability,paramet,parameters,409,webui: improve CEF and QT5 handling; 1. Do not expose special parameters to URL string - now in default HTML file special attributes can be inserted together with `JSROOT.ConnectWebWindow` call. 2. Correctly handle `#` in WebWindow URL. Such symbol used for routing inside webpage and will be often used with openui5. 3. Unify handling of URL options with RWebDisplayArgs. For now only `key` and `batch_mode` parameters are exposed to web window URL. 4. Update/extend doxygen docu. 5. Fix error in v7 CanvasPainter - v616 already fixed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3561
https://github.com/root-project/root/pull/3561:461,modifiability,exten,extend,461,webui: improve CEF and QT5 handling; 1. Do not expose special parameters to URL string - now in default HTML file special attributes can be inserted together with `JSROOT.ConnectWebWindow` call. 2. Correctly handle `#` in WebWindow URL. Such symbol used for routing inside webpage and will be often used with openui5. 3. Unify handling of URL options with RWebDisplayArgs. For now only `key` and `batch_mode` parameters are exposed to web window URL. 4. Update/extend doxygen docu. 5. Fix error in v7 CanvasPainter - v616 already fixed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3561
https://github.com/root-project/root/pull/3561:489,performance,error,error,489,webui: improve CEF and QT5 handling; 1. Do not expose special parameters to URL string - now in default HTML file special attributes can be inserted together with `JSROOT.ConnectWebWindow` call. 2. Correctly handle `#` in WebWindow URL. Such symbol used for routing inside webpage and will be often used with openui5. 3. Unify handling of URL options with RWebDisplayArgs. For now only `key` and `batch_mode` parameters are exposed to web window URL. 4. Update/extend doxygen docu. 5. Fix error in v7 CanvasPainter - v616 already fixed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3561
https://github.com/root-project/root/pull/3561:454,safety,Updat,Update,454,webui: improve CEF and QT5 handling; 1. Do not expose special parameters to URL string - now in default HTML file special attributes can be inserted together with `JSROOT.ConnectWebWindow` call. 2. Correctly handle `#` in WebWindow URL. Such symbol used for routing inside webpage and will be often used with openui5. 3. Unify handling of URL options with RWebDisplayArgs. For now only `key` and `batch_mode` parameters are exposed to web window URL. 4. Update/extend doxygen docu. 5. Fix error in v7 CanvasPainter - v616 already fixed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3561
https://github.com/root-project/root/pull/3561:489,safety,error,error,489,webui: improve CEF and QT5 handling; 1. Do not expose special parameters to URL string - now in default HTML file special attributes can be inserted together with `JSROOT.ConnectWebWindow` call. 2. Correctly handle `#` in WebWindow URL. Such symbol used for routing inside webpage and will be often used with openui5. 3. Unify handling of URL options with RWebDisplayArgs. For now only `key` and `batch_mode` parameters are exposed to web window URL. 4. Update/extend doxygen docu. 5. Fix error in v7 CanvasPainter - v616 already fixed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3561
https://github.com/root-project/root/pull/3561:47,security,expos,expose,47,webui: improve CEF and QT5 handling; 1. Do not expose special parameters to URL string - now in default HTML file special attributes can be inserted together with `JSROOT.ConnectWebWindow` call. 2. Correctly handle `#` in WebWindow URL. Such symbol used for routing inside webpage and will be often used with openui5. 3. Unify handling of URL options with RWebDisplayArgs. For now only `key` and `batch_mode` parameters are exposed to web window URL. 4. Update/extend doxygen docu. 5. Fix error in v7 CanvasPainter - v616 already fixed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3561
https://github.com/root-project/root/pull/3561:424,security,expos,exposed,424,webui: improve CEF and QT5 handling; 1. Do not expose special parameters to URL string - now in default HTML file special attributes can be inserted together with `JSROOT.ConnectWebWindow` call. 2. Correctly handle `#` in WebWindow URL. Such symbol used for routing inside webpage and will be often used with openui5. 3. Unify handling of URL options with RWebDisplayArgs. For now only `key` and `batch_mode` parameters are exposed to web window URL. 4. Update/extend doxygen docu. 5. Fix error in v7 CanvasPainter - v616 already fixed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3561
https://github.com/root-project/root/pull/3561:454,security,Updat,Update,454,webui: improve CEF and QT5 handling; 1. Do not expose special parameters to URL string - now in default HTML file special attributes can be inserted together with `JSROOT.ConnectWebWindow` call. 2. Correctly handle `#` in WebWindow URL. Such symbol used for routing inside webpage and will be often used with openui5. 3. Unify handling of URL options with RWebDisplayArgs. For now only `key` and `batch_mode` parameters are exposed to web window URL. 4. Update/extend doxygen docu. 5. Fix error in v7 CanvasPainter - v616 already fixed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3561
https://github.com/root-project/root/pull/3561:489,usability,error,error,489,webui: improve CEF and QT5 handling; 1. Do not expose special parameters to URL string - now in default HTML file special attributes can be inserted together with `JSROOT.ConnectWebWindow` call. 2. Correctly handle `#` in WebWindow URL. Such symbol used for routing inside webpage and will be often used with openui5. 3. Unify handling of URL options with RWebDisplayArgs. For now only `key` and `batch_mode` parameters are exposed to web window URL. 4. Update/extend doxygen docu. 5. Fix error in v7 CanvasPainter - v616 already fixed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3561
https://github.com/root-project/root/pull/3562:48,integrability,filter,filter,48,More than one \author line confuses the doxygen filter; warning: Conditional section does not have a corresponding \endcond command within this file.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3562
https://github.com/root-project/root/pull/3562:85,reliability,doe,does,85,More than one \author line confuses the doxygen filter; warning: Conditional section does not have a corresponding \endcond command within this file.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3562
https://github.com/root-project/root/pull/3562:15,security,auth,author,15,More than one \author line confuses the doxygen filter; warning: Conditional section does not have a corresponding \endcond command within this file.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3562
https://github.com/root-project/root/pull/3562:124,usability,command,command,124,More than one \author line confuses the doxygen filter; warning: Conditional section does not have a corresponding \endcond command within this file.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3562
https://github.com/root-project/root/pull/3563:76,deployability,contain,contains,76,"Avoid crash during doxygen generation; This file has a comment section that contains old HTML markup not yet rewritten for doxygen. This would normally just be ignored, and not cause problems. However, this comment section contains code blocks enclosed in. Begin_Macro(source, gui). End_Macro. The ""gui"" qualifier is no longer supported. The two usages in this file are the only remaining ones in the whole source tree. These macros are inside a normal non-doxygen comment block, so these macros do not appear in the documentation. However, the doxygen filter does not keep track of this and tries to create images for these macros. The ""gui"" qualifier used to indicate that the macro must not be run in batch mode. But since the doxygen filter does not know about it, the filter tries to run the macro in batch mode anyway, and root crashes. This results in that all doxygen markup in this file is ignored. As can be seen on this page:. https://root.cern/doc/v616/classTGTable.html. where the generated documentation is missing information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3563
https://github.com/root-project/root/pull/3563:223,deployability,contain,contains,223,"Avoid crash during doxygen generation; This file has a comment section that contains old HTML markup not yet rewritten for doxygen. This would normally just be ignored, and not cause problems. However, this comment section contains code blocks enclosed in. Begin_Macro(source, gui). End_Macro. The ""gui"" qualifier is no longer supported. The two usages in this file are the only remaining ones in the whole source tree. These macros are inside a normal non-doxygen comment block, so these macros do not appear in the documentation. However, the doxygen filter does not keep track of this and tries to create images for these macros. The ""gui"" qualifier used to indicate that the macro must not be run in batch mode. But since the doxygen filter does not know about it, the filter tries to run the macro in batch mode anyway, and root crashes. This results in that all doxygen markup in this file is ignored. As can be seen on this page:. https://root.cern/doc/v616/classTGTable.html. where the generated documentation is missing information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3563
https://github.com/root-project/root/pull/3563:553,integrability,filter,filter,553,"Avoid crash during doxygen generation; This file has a comment section that contains old HTML markup not yet rewritten for doxygen. This would normally just be ignored, and not cause problems. However, this comment section contains code blocks enclosed in. Begin_Macro(source, gui). End_Macro. The ""gui"" qualifier is no longer supported. The two usages in this file are the only remaining ones in the whole source tree. These macros are inside a normal non-doxygen comment block, so these macros do not appear in the documentation. However, the doxygen filter does not keep track of this and tries to create images for these macros. The ""gui"" qualifier used to indicate that the macro must not be run in batch mode. But since the doxygen filter does not know about it, the filter tries to run the macro in batch mode anyway, and root crashes. This results in that all doxygen markup in this file is ignored. As can be seen on this page:. https://root.cern/doc/v616/classTGTable.html. where the generated documentation is missing information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3563
https://github.com/root-project/root/pull/3563:704,integrability,batch,batch,704,"Avoid crash during doxygen generation; This file has a comment section that contains old HTML markup not yet rewritten for doxygen. This would normally just be ignored, and not cause problems. However, this comment section contains code blocks enclosed in. Begin_Macro(source, gui). End_Macro. The ""gui"" qualifier is no longer supported. The two usages in this file are the only remaining ones in the whole source tree. These macros are inside a normal non-doxygen comment block, so these macros do not appear in the documentation. However, the doxygen filter does not keep track of this and tries to create images for these macros. The ""gui"" qualifier used to indicate that the macro must not be run in batch mode. But since the doxygen filter does not know about it, the filter tries to run the macro in batch mode anyway, and root crashes. This results in that all doxygen markup in this file is ignored. As can be seen on this page:. https://root.cern/doc/v616/classTGTable.html. where the generated documentation is missing information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3563
https://github.com/root-project/root/pull/3563:738,integrability,filter,filter,738,"Avoid crash during doxygen generation; This file has a comment section that contains old HTML markup not yet rewritten for doxygen. This would normally just be ignored, and not cause problems. However, this comment section contains code blocks enclosed in. Begin_Macro(source, gui). End_Macro. The ""gui"" qualifier is no longer supported. The two usages in this file are the only remaining ones in the whole source tree. These macros are inside a normal non-doxygen comment block, so these macros do not appear in the documentation. However, the doxygen filter does not keep track of this and tries to create images for these macros. The ""gui"" qualifier used to indicate that the macro must not be run in batch mode. But since the doxygen filter does not know about it, the filter tries to run the macro in batch mode anyway, and root crashes. This results in that all doxygen markup in this file is ignored. As can be seen on this page:. https://root.cern/doc/v616/classTGTable.html. where the generated documentation is missing information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3563
https://github.com/root-project/root/pull/3563:773,integrability,filter,filter,773,"Avoid crash during doxygen generation; This file has a comment section that contains old HTML markup not yet rewritten for doxygen. This would normally just be ignored, and not cause problems. However, this comment section contains code blocks enclosed in. Begin_Macro(source, gui). End_Macro. The ""gui"" qualifier is no longer supported. The two usages in this file are the only remaining ones in the whole source tree. These macros are inside a normal non-doxygen comment block, so these macros do not appear in the documentation. However, the doxygen filter does not keep track of this and tries to create images for these macros. The ""gui"" qualifier used to indicate that the macro must not be run in batch mode. But since the doxygen filter does not know about it, the filter tries to run the macro in batch mode anyway, and root crashes. This results in that all doxygen markup in this file is ignored. As can be seen on this page:. https://root.cern/doc/v616/classTGTable.html. where the generated documentation is missing information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3563
https://github.com/root-project/root/pull/3563:806,integrability,batch,batch,806,"Avoid crash during doxygen generation; This file has a comment section that contains old HTML markup not yet rewritten for doxygen. This would normally just be ignored, and not cause problems. However, this comment section contains code blocks enclosed in. Begin_Macro(source, gui). End_Macro. The ""gui"" qualifier is no longer supported. The two usages in this file are the only remaining ones in the whole source tree. These macros are inside a normal non-doxygen comment block, so these macros do not appear in the documentation. However, the doxygen filter does not keep track of this and tries to create images for these macros. The ""gui"" qualifier used to indicate that the macro must not be run in batch mode. But since the doxygen filter does not know about it, the filter tries to run the macro in batch mode anyway, and root crashes. This results in that all doxygen markup in this file is ignored. As can be seen on this page:. https://root.cern/doc/v616/classTGTable.html. where the generated documentation is missing information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3563
https://github.com/root-project/root/pull/3563:704,performance,batch,batch,704,"Avoid crash during doxygen generation; This file has a comment section that contains old HTML markup not yet rewritten for doxygen. This would normally just be ignored, and not cause problems. However, this comment section contains code blocks enclosed in. Begin_Macro(source, gui). End_Macro. The ""gui"" qualifier is no longer supported. The two usages in this file are the only remaining ones in the whole source tree. These macros are inside a normal non-doxygen comment block, so these macros do not appear in the documentation. However, the doxygen filter does not keep track of this and tries to create images for these macros. The ""gui"" qualifier used to indicate that the macro must not be run in batch mode. But since the doxygen filter does not know about it, the filter tries to run the macro in batch mode anyway, and root crashes. This results in that all doxygen markup in this file is ignored. As can be seen on this page:. https://root.cern/doc/v616/classTGTable.html. where the generated documentation is missing information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3563
https://github.com/root-project/root/pull/3563:806,performance,batch,batch,806,"Avoid crash during doxygen generation; This file has a comment section that contains old HTML markup not yet rewritten for doxygen. This would normally just be ignored, and not cause problems. However, this comment section contains code blocks enclosed in. Begin_Macro(source, gui). End_Macro. The ""gui"" qualifier is no longer supported. The two usages in this file are the only remaining ones in the whole source tree. These macros are inside a normal non-doxygen comment block, so these macros do not appear in the documentation. However, the doxygen filter does not keep track of this and tries to create images for these macros. The ""gui"" qualifier used to indicate that the macro must not be run in batch mode. But since the doxygen filter does not know about it, the filter tries to run the macro in batch mode anyway, and root crashes. This results in that all doxygen markup in this file is ignored. As can be seen on this page:. https://root.cern/doc/v616/classTGTable.html. where the generated documentation is missing information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3563
https://github.com/root-project/root/pull/3563:560,reliability,doe,does,560,"Avoid crash during doxygen generation; This file has a comment section that contains old HTML markup not yet rewritten for doxygen. This would normally just be ignored, and not cause problems. However, this comment section contains code blocks enclosed in. Begin_Macro(source, gui). End_Macro. The ""gui"" qualifier is no longer supported. The two usages in this file are the only remaining ones in the whole source tree. These macros are inside a normal non-doxygen comment block, so these macros do not appear in the documentation. However, the doxygen filter does not keep track of this and tries to create images for these macros. The ""gui"" qualifier used to indicate that the macro must not be run in batch mode. But since the doxygen filter does not know about it, the filter tries to run the macro in batch mode anyway, and root crashes. This results in that all doxygen markup in this file is ignored. As can be seen on this page:. https://root.cern/doc/v616/classTGTable.html. where the generated documentation is missing information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3563
https://github.com/root-project/root/pull/3563:745,reliability,doe,does,745,"Avoid crash during doxygen generation; This file has a comment section that contains old HTML markup not yet rewritten for doxygen. This would normally just be ignored, and not cause problems. However, this comment section contains code blocks enclosed in. Begin_Macro(source, gui). End_Macro. The ""gui"" qualifier is no longer supported. The two usages in this file are the only remaining ones in the whole source tree. These macros are inside a normal non-doxygen comment block, so these macros do not appear in the documentation. However, the doxygen filter does not keep track of this and tries to create images for these macros. The ""gui"" qualifier used to indicate that the macro must not be run in batch mode. But since the doxygen filter does not know about it, the filter tries to run the macro in batch mode anyway, and root crashes. This results in that all doxygen markup in this file is ignored. As can be seen on this page:. https://root.cern/doc/v616/classTGTable.html. where the generated documentation is missing information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3563
https://github.com/root-project/root/pull/3563:0,safety,Avoid,Avoid,0,"Avoid crash during doxygen generation; This file has a comment section that contains old HTML markup not yet rewritten for doxygen. This would normally just be ignored, and not cause problems. However, this comment section contains code blocks enclosed in. Begin_Macro(source, gui). End_Macro. The ""gui"" qualifier is no longer supported. The two usages in this file are the only remaining ones in the whole source tree. These macros are inside a normal non-doxygen comment block, so these macros do not appear in the documentation. However, the doxygen filter does not keep track of this and tries to create images for these macros. The ""gui"" qualifier used to indicate that the macro must not be run in batch mode. But since the doxygen filter does not know about it, the filter tries to run the macro in batch mode anyway, and root crashes. This results in that all doxygen markup in this file is ignored. As can be seen on this page:. https://root.cern/doc/v616/classTGTable.html. where the generated documentation is missing information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3563
https://github.com/root-project/root/pull/3563:327,usability,support,supported,327,"Avoid crash during doxygen generation; This file has a comment section that contains old HTML markup not yet rewritten for doxygen. This would normally just be ignored, and not cause problems. However, this comment section contains code blocks enclosed in. Begin_Macro(source, gui). End_Macro. The ""gui"" qualifier is no longer supported. The two usages in this file are the only remaining ones in the whole source tree. These macros are inside a normal non-doxygen comment block, so these macros do not appear in the documentation. However, the doxygen filter does not keep track of this and tries to create images for these macros. The ""gui"" qualifier used to indicate that the macro must not be run in batch mode. But since the doxygen filter does not know about it, the filter tries to run the macro in batch mode anyway, and root crashes. This results in that all doxygen markup in this file is ignored. As can be seen on this page:. https://root.cern/doc/v616/classTGTable.html. where the generated documentation is missing information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3563
https://github.com/root-project/root/pull/3563:517,usability,document,documentation,517,"Avoid crash during doxygen generation; This file has a comment section that contains old HTML markup not yet rewritten for doxygen. This would normally just be ignored, and not cause problems. However, this comment section contains code blocks enclosed in. Begin_Macro(source, gui). End_Macro. The ""gui"" qualifier is no longer supported. The two usages in this file are the only remaining ones in the whole source tree. These macros are inside a normal non-doxygen comment block, so these macros do not appear in the documentation. However, the doxygen filter does not keep track of this and tries to create images for these macros. The ""gui"" qualifier used to indicate that the macro must not be run in batch mode. But since the doxygen filter does not know about it, the filter tries to run the macro in batch mode anyway, and root crashes. This results in that all doxygen markup in this file is ignored. As can be seen on this page:. https://root.cern/doc/v616/classTGTable.html. where the generated documentation is missing information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3563
https://github.com/root-project/root/pull/3563:661,usability,indicat,indicate,661,"Avoid crash during doxygen generation; This file has a comment section that contains old HTML markup not yet rewritten for doxygen. This would normally just be ignored, and not cause problems. However, this comment section contains code blocks enclosed in. Begin_Macro(source, gui). End_Macro. The ""gui"" qualifier is no longer supported. The two usages in this file are the only remaining ones in the whole source tree. These macros are inside a normal non-doxygen comment block, so these macros do not appear in the documentation. However, the doxygen filter does not keep track of this and tries to create images for these macros. The ""gui"" qualifier used to indicate that the macro must not be run in batch mode. But since the doxygen filter does not know about it, the filter tries to run the macro in batch mode anyway, and root crashes. This results in that all doxygen markup in this file is ignored. As can be seen on this page:. https://root.cern/doc/v616/classTGTable.html. where the generated documentation is missing information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3563
https://github.com/root-project/root/pull/3563:1004,usability,document,documentation,1004,"Avoid crash during doxygen generation; This file has a comment section that contains old HTML markup not yet rewritten for doxygen. This would normally just be ignored, and not cause problems. However, this comment section contains code blocks enclosed in. Begin_Macro(source, gui). End_Macro. The ""gui"" qualifier is no longer supported. The two usages in this file are the only remaining ones in the whole source tree. These macros are inside a normal non-doxygen comment block, so these macros do not appear in the documentation. However, the doxygen filter does not keep track of this and tries to create images for these macros. The ""gui"" qualifier used to indicate that the macro must not be run in batch mode. But since the doxygen filter does not know about it, the filter tries to run the macro in batch mode anyway, and root crashes. This results in that all doxygen markup in this file is ignored. As can be seen on this page:. https://root.cern/doc/v616/classTGTable.html. where the generated documentation is missing information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3563
https://github.com/root-project/root/pull/3564:333,availability,error,errors,333,"[DF] Avoid forward declarations of Define'd types; Either the interpreter knows them, or we alias them to `void`. Just as before, the end result is that if users return a type. that is unknown to the interpreter from a Define, and then try. to read that Define'd column from jitted RDF nodes, the interpreter. (and consequently RDF) errors out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3564
https://github.com/root-project/root/pull/3564:333,performance,error,errors,333,"[DF] Avoid forward declarations of Define'd types; Either the interpreter knows them, or we alias them to `void`. Just as before, the end result is that if users return a type. that is unknown to the interpreter from a Define, and then try. to read that Define'd column from jitted RDF nodes, the interpreter. (and consequently RDF) errors out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3564
https://github.com/root-project/root/pull/3564:5,safety,Avoid,Avoid,5,"[DF] Avoid forward declarations of Define'd types; Either the interpreter knows them, or we alias them to `void`. Just as before, the end result is that if users return a type. that is unknown to the interpreter from a Define, and then try. to read that Define'd column from jitted RDF nodes, the interpreter. (and consequently RDF) errors out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3564
https://github.com/root-project/root/pull/3564:333,safety,error,errors,333,"[DF] Avoid forward declarations of Define'd types; Either the interpreter knows them, or we alias them to `void`. Just as before, the end result is that if users return a type. that is unknown to the interpreter from a Define, and then try. to read that Define'd column from jitted RDF nodes, the interpreter. (and consequently RDF) errors out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3564
https://github.com/root-project/root/pull/3564:156,usability,user,users,156,"[DF] Avoid forward declarations of Define'd types; Either the interpreter knows them, or we alias them to `void`. Just as before, the end result is that if users return a type. that is unknown to the interpreter from a Define, and then try. to read that Define'd column from jitted RDF nodes, the interpreter. (and consequently RDF) errors out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3564
https://github.com/root-project/root/pull/3564:333,usability,error,errors,333,"[DF] Avoid forward declarations of Define'd types; Either the interpreter knows them, or we alias them to `void`. Just as before, the end result is that if users return a type. that is unknown to the interpreter from a Define, and then try. to read that Define'd column from jitted RDF nodes, the interpreter. (and consequently RDF) errors out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3564
https://github.com/root-project/root/pull/3565:36,deployability,depend,depending,36,[DF][ROOT-10045] Fix custom actions depending on RDF+RDataSource;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3565
https://github.com/root-project/root/pull/3565:36,integrability,depend,depending,36,[DF][ROOT-10045] Fix custom actions depending on RDF+RDataSource;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3565
https://github.com/root-project/root/pull/3565:36,modifiability,depend,depending,36,[DF][ROOT-10045] Fix custom actions depending on RDF+RDataSource;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3565
https://github.com/root-project/root/pull/3565:36,safety,depend,depending,36,[DF][ROOT-10045] Fix custom actions depending on RDF+RDataSource;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3565
https://github.com/root-project/root/pull/3565:36,testability,depend,depending,36,[DF][ROOT-10045] Fix custom actions depending on RDF+RDataSource;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3565
https://github.com/root-project/root/pull/3565:21,usability,custom,custom,21,[DF][ROOT-10045] Fix custom actions depending on RDF+RDataSource;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3565
https://github.com/root-project/root/pull/3566:14,safety,test,test,14,[DF] Increase test coverage;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3566
https://github.com/root-project/root/pull/3566:14,testability,test,test,14,[DF] Increase test coverage;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3566
https://github.com/root-project/root/pull/3566:19,testability,coverag,coverage,19,[DF] Increase test coverage;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3566
https://github.com/root-project/root/pull/3567:32,usability,behavi,behaviour,32,[DF][ROOT-10043] Fix unexpected behaviour of Alias method;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3567
https://github.com/root-project/root/pull/3568:230,availability,error,error,230,Fix a bug in TH2Poly::GetBinError() and add an implementation of TH2Poly::SetBinError. ; This fixes ROOT-7608. Move to protected also the functions of TH1 that do not make sense for TH2Poly. Add a test for getting/setting the bin error,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3568
https://github.com/root-project/root/pull/3568:230,performance,error,error,230,Fix a bug in TH2Poly::GetBinError() and add an implementation of TH2Poly::SetBinError. ; This fixes ROOT-7608. Move to protected also the functions of TH1 that do not make sense for TH2Poly. Add a test for getting/setting the bin error,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3568
https://github.com/root-project/root/pull/3568:197,safety,test,test,197,Fix a bug in TH2Poly::GetBinError() and add an implementation of TH2Poly::SetBinError. ; This fixes ROOT-7608. Move to protected also the functions of TH1 that do not make sense for TH2Poly. Add a test for getting/setting the bin error,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3568
https://github.com/root-project/root/pull/3568:230,safety,error,error,230,Fix a bug in TH2Poly::GetBinError() and add an implementation of TH2Poly::SetBinError. ; This fixes ROOT-7608. Move to protected also the functions of TH1 that do not make sense for TH2Poly. Add a test for getting/setting the bin error,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3568
https://github.com/root-project/root/pull/3568:197,testability,test,test,197,Fix a bug in TH2Poly::GetBinError() and add an implementation of TH2Poly::SetBinError. ; This fixes ROOT-7608. Move to protected also the functions of TH1 that do not make sense for TH2Poly. Add a test for getting/setting the bin error,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3568
https://github.com/root-project/root/pull/3568:230,usability,error,error,230,Fix a bug in TH2Poly::GetBinError() and add an implementation of TH2Poly::SetBinError. ; This fixes ROOT-7608. Move to protected also the functions of TH1 that do not make sense for TH2Poly. Add a test for getting/setting the bin error,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3568
https://github.com/root-project/root/pull/3569:32,usability,behavi,behaviour,32,[DF][ROOT-10043] Fix unexpected behaviour of Alias method;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3569
https://github.com/root-project/root/pull/3570:35,safety,Test,Tested,35,Fixes typo in TSpectrum tutorials; Tested with 6.16/00,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3570
https://github.com/root-project/root/pull/3570:35,testability,Test,Tested,35,Fixes typo in TSpectrum tutorials; Tested with 6.16/00,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3570
https://github.com/root-project/root/pull/3571:160,deployability,modul,modulo,160,"[VecOps] Add physics helpers; Implements different physics helpers for RVec collections:. - `DeltaPhi`: Angle difference with correct handling of boundaries at modulo 2 * pi. - `DeltaR`: Distance on eta-phi plane. - `InvariantMass`: Invariant mass of four-vector collections. As follows the output of the tutorial showing the functionality of the helpers. ```bash. DeltaPhi(phi1 = { 0, 0, 0, 1, 1, -0.5 },. phi2 = { 1, -0.5, 4.14159, -0.5, 4.14159, 4.14159 }). = { 1, -0.5, -2.14159, -1.5, 3.14159, -1.64159 }. DeltaR(eta1 = { 2.4, 2.4, 2.4, -1.5, -1.5, 1 },. eta2 = { -1.5, 1, 0, 1, 0, 0 },. phi1 = { 0, 0, 0, 1, 1, -0.5 },. phi2 = { 1, -0.5, 4.14159, -0.5, 4.14159, 4.14159 }). = { 4.02616, 1.48661, 3.21659, 2.91548, 3.48132, 1.92219 }. InvariantMass(pt1 = { 40, 20, 30 },. eta1 = { 2.5, 0.5, -1 },. phi1 = { -0.5, 0, 1 },. mass1 = { 10, 10, 10 },. pt2 = { 20, 10, 40 },. eta2 = { 0.5, -0.5, 1 },. phi2 = { 0, 1, -1 },. mass2 = { 2, 2, 2 }). = { 69.0799, 23.6971, 101.326 }. InvariantMass(pt = { 40, 20, 30 },. eta = { 2.5, 0.5, -1 },. phi = { -0.5, 0, 1 },. mass = { 10, 10, 10 }). = 220.308. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3571
https://github.com/root-project/root/pull/3571:160,modifiability,modul,modulo,160,"[VecOps] Add physics helpers; Implements different physics helpers for RVec collections:. - `DeltaPhi`: Angle difference with correct handling of boundaries at modulo 2 * pi. - `DeltaR`: Distance on eta-phi plane. - `InvariantMass`: Invariant mass of four-vector collections. As follows the output of the tutorial showing the functionality of the helpers. ```bash. DeltaPhi(phi1 = { 0, 0, 0, 1, 1, -0.5 },. phi2 = { 1, -0.5, 4.14159, -0.5, 4.14159, 4.14159 }). = { 1, -0.5, -2.14159, -1.5, 3.14159, -1.64159 }. DeltaR(eta1 = { 2.4, 2.4, 2.4, -1.5, -1.5, 1 },. eta2 = { -1.5, 1, 0, 1, 0, 0 },. phi1 = { 0, 0, 0, 1, 1, -0.5 },. phi2 = { 1, -0.5, 4.14159, -0.5, 4.14159, 4.14159 }). = { 4.02616, 1.48661, 3.21659, 2.91548, 3.48132, 1.92219 }. InvariantMass(pt1 = { 40, 20, 30 },. eta1 = { 2.5, 0.5, -1 },. phi1 = { -0.5, 0, 1 },. mass1 = { 10, 10, 10 },. pt2 = { 20, 10, 40 },. eta2 = { 0.5, -0.5, 1 },. phi2 = { 0, 1, -1 },. mass2 = { 2, 2, 2 }). = { 69.0799, 23.6971, 101.326 }. InvariantMass(pt = { 40, 20, 30 },. eta = { 2.5, 0.5, -1 },. phi = { -0.5, 0, 1 },. mass = { 10, 10, 10 }). = 220.308. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3571
https://github.com/root-project/root/pull/3571:160,safety,modul,modulo,160,"[VecOps] Add physics helpers; Implements different physics helpers for RVec collections:. - `DeltaPhi`: Angle difference with correct handling of boundaries at modulo 2 * pi. - `DeltaR`: Distance on eta-phi plane. - `InvariantMass`: Invariant mass of four-vector collections. As follows the output of the tutorial showing the functionality of the helpers. ```bash. DeltaPhi(phi1 = { 0, 0, 0, 1, 1, -0.5 },. phi2 = { 1, -0.5, 4.14159, -0.5, 4.14159, 4.14159 }). = { 1, -0.5, -2.14159, -1.5, 3.14159, -1.64159 }. DeltaR(eta1 = { 2.4, 2.4, 2.4, -1.5, -1.5, 1 },. eta2 = { -1.5, 1, 0, 1, 0, 0 },. phi1 = { 0, 0, 0, 1, 1, -0.5 },. phi2 = { 1, -0.5, 4.14159, -0.5, 4.14159, 4.14159 }). = { 4.02616, 1.48661, 3.21659, 2.91548, 3.48132, 1.92219 }. InvariantMass(pt1 = { 40, 20, 30 },. eta1 = { 2.5, 0.5, -1 },. phi1 = { -0.5, 0, 1 },. mass1 = { 10, 10, 10 },. pt2 = { 20, 10, 40 },. eta2 = { 0.5, -0.5, 1 },. phi2 = { 0, 1, -1 },. mass2 = { 2, 2, 2 }). = { 69.0799, 23.6971, 101.326 }. InvariantMass(pt = { 40, 20, 30 },. eta = { 2.5, 0.5, -1 },. phi = { -0.5, 0, 1 },. mass = { 10, 10, 10 }). = 220.308. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3571
https://github.com/root-project/root/pull/3571:207,testability,plan,plane,207,"[VecOps] Add physics helpers; Implements different physics helpers for RVec collections:. - `DeltaPhi`: Angle difference with correct handling of boundaries at modulo 2 * pi. - `DeltaR`: Distance on eta-phi plane. - `InvariantMass`: Invariant mass of four-vector collections. As follows the output of the tutorial showing the functionality of the helpers. ```bash. DeltaPhi(phi1 = { 0, 0, 0, 1, 1, -0.5 },. phi2 = { 1, -0.5, 4.14159, -0.5, 4.14159, 4.14159 }). = { 1, -0.5, -2.14159, -1.5, 3.14159, -1.64159 }. DeltaR(eta1 = { 2.4, 2.4, 2.4, -1.5, -1.5, 1 },. eta2 = { -1.5, 1, 0, 1, 0, 0 },. phi1 = { 0, 0, 0, 1, 1, -0.5 },. phi2 = { 1, -0.5, 4.14159, -0.5, 4.14159, 4.14159 }). = { 4.02616, 1.48661, 3.21659, 2.91548, 3.48132, 1.92219 }. InvariantMass(pt1 = { 40, 20, 30 },. eta1 = { 2.5, 0.5, -1 },. phi1 = { -0.5, 0, 1 },. mass1 = { 10, 10, 10 },. pt2 = { 20, 10, 40 },. eta2 = { 0.5, -0.5, 1 },. phi2 = { 0, 1, -1 },. mass2 = { 2, 2, 2 }). = { 69.0799, 23.6971, 101.326 }. InvariantMass(pt = { 40, 20, 30 },. eta = { 2.5, 0.5, -1 },. phi = { -0.5, 0, 1 },. mass = { 10, 10, 10 }). = 220.308. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3571
https://github.com/root-project/root/pull/3571:21,usability,help,helpers,21,"[VecOps] Add physics helpers; Implements different physics helpers for RVec collections:. - `DeltaPhi`: Angle difference with correct handling of boundaries at modulo 2 * pi. - `DeltaR`: Distance on eta-phi plane. - `InvariantMass`: Invariant mass of four-vector collections. As follows the output of the tutorial showing the functionality of the helpers. ```bash. DeltaPhi(phi1 = { 0, 0, 0, 1, 1, -0.5 },. phi2 = { 1, -0.5, 4.14159, -0.5, 4.14159, 4.14159 }). = { 1, -0.5, -2.14159, -1.5, 3.14159, -1.64159 }. DeltaR(eta1 = { 2.4, 2.4, 2.4, -1.5, -1.5, 1 },. eta2 = { -1.5, 1, 0, 1, 0, 0 },. phi1 = { 0, 0, 0, 1, 1, -0.5 },. phi2 = { 1, -0.5, 4.14159, -0.5, 4.14159, 4.14159 }). = { 4.02616, 1.48661, 3.21659, 2.91548, 3.48132, 1.92219 }. InvariantMass(pt1 = { 40, 20, 30 },. eta1 = { 2.5, 0.5, -1 },. phi1 = { -0.5, 0, 1 },. mass1 = { 10, 10, 10 },. pt2 = { 20, 10, 40 },. eta2 = { 0.5, -0.5, 1 },. phi2 = { 0, 1, -1 },. mass2 = { 2, 2, 2 }). = { 69.0799, 23.6971, 101.326 }. InvariantMass(pt = { 40, 20, 30 },. eta = { 2.5, 0.5, -1 },. phi = { -0.5, 0, 1 },. mass = { 10, 10, 10 }). = 220.308. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3571
https://github.com/root-project/root/pull/3571:59,usability,help,helpers,59,"[VecOps] Add physics helpers; Implements different physics helpers for RVec collections:. - `DeltaPhi`: Angle difference with correct handling of boundaries at modulo 2 * pi. - `DeltaR`: Distance on eta-phi plane. - `InvariantMass`: Invariant mass of four-vector collections. As follows the output of the tutorial showing the functionality of the helpers. ```bash. DeltaPhi(phi1 = { 0, 0, 0, 1, 1, -0.5 },. phi2 = { 1, -0.5, 4.14159, -0.5, 4.14159, 4.14159 }). = { 1, -0.5, -2.14159, -1.5, 3.14159, -1.64159 }. DeltaR(eta1 = { 2.4, 2.4, 2.4, -1.5, -1.5, 1 },. eta2 = { -1.5, 1, 0, 1, 0, 0 },. phi1 = { 0, 0, 0, 1, 1, -0.5 },. phi2 = { 1, -0.5, 4.14159, -0.5, 4.14159, 4.14159 }). = { 4.02616, 1.48661, 3.21659, 2.91548, 3.48132, 1.92219 }. InvariantMass(pt1 = { 40, 20, 30 },. eta1 = { 2.5, 0.5, -1 },. phi1 = { -0.5, 0, 1 },. mass1 = { 10, 10, 10 },. pt2 = { 20, 10, 40 },. eta2 = { 0.5, -0.5, 1 },. phi2 = { 0, 1, -1 },. mass2 = { 2, 2, 2 }). = { 69.0799, 23.6971, 101.326 }. InvariantMass(pt = { 40, 20, 30 },. eta = { 2.5, 0.5, -1 },. phi = { -0.5, 0, 1 },. mass = { 10, 10, 10 }). = 220.308. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3571
https://github.com/root-project/root/pull/3571:347,usability,help,helpers,347,"[VecOps] Add physics helpers; Implements different physics helpers for RVec collections:. - `DeltaPhi`: Angle difference with correct handling of boundaries at modulo 2 * pi. - `DeltaR`: Distance on eta-phi plane. - `InvariantMass`: Invariant mass of four-vector collections. As follows the output of the tutorial showing the functionality of the helpers. ```bash. DeltaPhi(phi1 = { 0, 0, 0, 1, 1, -0.5 },. phi2 = { 1, -0.5, 4.14159, -0.5, 4.14159, 4.14159 }). = { 1, -0.5, -2.14159, -1.5, 3.14159, -1.64159 }. DeltaR(eta1 = { 2.4, 2.4, 2.4, -1.5, -1.5, 1 },. eta2 = { -1.5, 1, 0, 1, 0, 0 },. phi1 = { 0, 0, 0, 1, 1, -0.5 },. phi2 = { 1, -0.5, 4.14159, -0.5, 4.14159, 4.14159 }). = { 4.02616, 1.48661, 3.21659, 2.91548, 3.48132, 1.92219 }. InvariantMass(pt1 = { 40, 20, 30 },. eta1 = { 2.5, 0.5, -1 },. phi1 = { -0.5, 0, 1 },. mass1 = { 10, 10, 10 },. pt2 = { 20, 10, 40 },. eta2 = { 0.5, -0.5, 1 },. phi2 = { 0, 1, -1 },. mass2 = { 2, 2, 2 }). = { 69.0799, 23.6971, 101.326 }. InvariantMass(pt = { 40, 20, 30 },. eta = { 2.5, 0.5, -1 },. phi = { -0.5, 0, 1 },. mass = { 10, 10, 10 }). = 220.308. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3571
https://github.com/root-project/root/pull/3572:143,deployability,observ,observable,143,"Fix interpretation of RooAddPdf coefficients for convolutions.; When using AddPdfs in a convolution, it has to be ensured that the convolution observable remains the relevant observable to interpret RooAddPdf coefficients with. ROOT-9653. ROOT-9419. ROOT-7183",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3572
https://github.com/root-project/root/pull/3572:175,deployability,observ,observable,175,"Fix interpretation of RooAddPdf coefficients for convolutions.; When using AddPdfs in a convolution, it has to be ensured that the convolution observable remains the relevant observable to interpret RooAddPdf coefficients with. ROOT-9653. ROOT-9419. ROOT-7183",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3572
https://github.com/root-project/root/pull/3572:143,testability,observ,observable,143,"Fix interpretation of RooAddPdf coefficients for convolutions.; When using AddPdfs in a convolution, it has to be ensured that the convolution observable remains the relevant observable to interpret RooAddPdf coefficients with. ROOT-9653. ROOT-9419. ROOT-7183",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3572
https://github.com/root-project/root/pull/3572:175,testability,observ,observable,175,"Fix interpretation of RooAddPdf coefficients for convolutions.; When using AddPdfs in a convolution, it has to be ensured that the convolution observable remains the relevant observable to interpret RooAddPdf coefficients with. ROOT-9653. ROOT-9419. ROOT-7183",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3572
https://github.com/root-project/root/pull/3574:0,deployability,Updat,Update,0,Update libc.modulemap;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3574
https://github.com/root-project/root/pull/3574:12,deployability,modul,modulemap,12,Update libc.modulemap;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3574
https://github.com/root-project/root/pull/3574:12,modifiability,modul,modulemap,12,Update libc.modulemap;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3574
https://github.com/root-project/root/pull/3574:0,safety,Updat,Update,0,Update libc.modulemap;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3574
https://github.com/root-project/root/pull/3574:12,safety,modul,modulemap,12,Update libc.modulemap;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3574
https://github.com/root-project/root/pull/3574:0,security,Updat,Update,0,Update libc.modulemap;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3574
https://github.com/root-project/root/pull/3575:58,deployability,build,building,58,"[Exp PyROOT] Generate dictionaries and root map file when building CPyCppyy; This PR changes the way CPyCppyy is built to also generate its pcm and rootmap files. This is relevant to fix the `roottest-python-cling` tests, which use `TPython`, now in CPyCppyy. Moreover, the PR includes a few relevant CPyCppyy headers in the PCH and sets the `CLING_STANDARD_PCH`, to prevent Cppyy from checking the PCH, in the environment scripts of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3575
https://github.com/root-project/root/pull/3575:215,safety,test,tests,215,"[Exp PyROOT] Generate dictionaries and root map file when building CPyCppyy; This PR changes the way CPyCppyy is built to also generate its pcm and rootmap files. This is relevant to fix the `roottest-python-cling` tests, which use `TPython`, now in CPyCppyy. Moreover, the PR includes a few relevant CPyCppyy headers in the PCH and sets the `CLING_STANDARD_PCH`, to prevent Cppyy from checking the PCH, in the environment scripts of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3575
https://github.com/root-project/root/pull/3575:367,safety,prevent,prevent,367,"[Exp PyROOT] Generate dictionaries and root map file when building CPyCppyy; This PR changes the way CPyCppyy is built to also generate its pcm and rootmap files. This is relevant to fix the `roottest-python-cling` tests, which use `TPython`, now in CPyCppyy. Moreover, the PR includes a few relevant CPyCppyy headers in the PCH and sets the `CLING_STANDARD_PCH`, to prevent Cppyy from checking the PCH, in the environment scripts of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3575
https://github.com/root-project/root/pull/3575:367,security,preven,prevent,367,"[Exp PyROOT] Generate dictionaries and root map file when building CPyCppyy; This PR changes the way CPyCppyy is built to also generate its pcm and rootmap files. This is relevant to fix the `roottest-python-cling` tests, which use `TPython`, now in CPyCppyy. Moreover, the PR includes a few relevant CPyCppyy headers in the PCH and sets the `CLING_STANDARD_PCH`, to prevent Cppyy from checking the PCH, in the environment scripts of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3575
https://github.com/root-project/root/pull/3575:215,testability,test,tests,215,"[Exp PyROOT] Generate dictionaries and root map file when building CPyCppyy; This PR changes the way CPyCppyy is built to also generate its pcm and rootmap files. This is relevant to fix the `roottest-python-cling` tests, which use `TPython`, now in CPyCppyy. Moreover, the PR includes a few relevant CPyCppyy headers in the PCH and sets the `CLING_STANDARD_PCH`, to prevent Cppyy from checking the PCH, in the environment scripts of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3575
https://github.com/root-project/root/pull/3576:27,deployability,patch,patches,27,jsroot - fixes for 6-16-00-patches branch;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3576
https://github.com/root-project/root/pull/3576:27,safety,patch,patches,27,jsroot - fixes for 6-16-00-patches branch;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3576
https://github.com/root-project/root/pull/3576:27,security,patch,patches,27,jsroot - fixes for 6-16-00-patches branch;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3576
https://github.com/root-project/root/pull/3577:198,availability,Error,Error,198,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:400,availability,Error,Error,400,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:544,availability,Error,Error,544,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:615,availability,Error,Error,615,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:94,deployability,depend,dependencies,94,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:241,deployability,modul,module,241,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:268,deployability,modul,modulemap,268,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:307,deployability,build,build,307,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:360,deployability,fail,failed,360,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:489,deployability,fail,failed,489,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:591,deployability,fail,failed,591,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:188,energy efficiency,Core,Core,188,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:259,energy efficiency,Core,Core,259,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:279,energy efficiency,core,core,279,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:342,energy efficiency,core,core,342,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:382,energy efficiency,core,core,382,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:456,energy efficiency,core,core,456,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:511,energy efficiency,core,core,511,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:94,integrability,depend,dependencies,94,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:94,modifiability,depend,dependencies,94,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:241,modifiability,modul,module,241,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:268,modifiability,modul,modulemap,268,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:198,performance,Error,Error,198,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:400,performance,Error,Error,400,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:544,performance,Error,Error,544,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:615,performance,Error,Error,615,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:360,reliability,fail,failed,360,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:489,reliability,fail,failed,489,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:591,reliability,fail,failed,591,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:94,safety,depend,dependencies,94,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:198,safety,Error,Error,198,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:241,safety,modul,module,241,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:268,safety,modul,modulemap,268,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:400,safety,Error,Error,400,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:544,safety,Error,Error,544,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:615,safety,Error,Error,615,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:94,testability,depend,dependencies,94,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:198,usability,Error,Error,198,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:400,usability,Error,Error,400,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:544,usability,Error,Error,544,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3577:615,usability,Error,Error,615,"Fix a race condition for copymodulemap target; [ 47%] Built target rootcling_stage1. Scanning dependencies of target G__Core. [ 47%] Generating G__Core.cxx, ../lib/libCore.rootmap, ../lib/Core.pcm. Error in <CheckModuleValid>: Couldn't find module with name 'Core' in modulemap! core/CMakeFiles/G__Core.dir/build.make:453: recipe for target 'core/G__Core.cxx' failed. make[2]: *** [core/G__Core.cxx] Error 1. CMakeFiles/Makefile2:15584: recipe for target 'core/CMakeFiles/G__Core.dir/all' failed. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3577
https://github.com/root-project/root/pull/3578:25,availability,avail,available,25,"stl modulemap: cuchar is available starting from gcc6; $ find /usr -name ""cuchar"". /usr/include/c++/8/cuchar. /usr/include/c++/7/cuchar. /usr/include/c++/6/cuchar. PR fixes a broken CI build on Ubuntu 16 (gcc 5.4): /mnt/build/workspace/root-pullrequests-build/build/include/stl.modulemap:366:12: error: header 'cuchar' not found.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3578
https://github.com/root-project/root/pull/3578:296,availability,error,error,296,"stl modulemap: cuchar is available starting from gcc6; $ find /usr -name ""cuchar"". /usr/include/c++/8/cuchar. /usr/include/c++/7/cuchar. /usr/include/c++/6/cuchar. PR fixes a broken CI build on Ubuntu 16 (gcc 5.4): /mnt/build/workspace/root-pullrequests-build/build/include/stl.modulemap:366:12: error: header 'cuchar' not found.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3578
https://github.com/root-project/root/pull/3578:4,deployability,modul,modulemap,4,"stl modulemap: cuchar is available starting from gcc6; $ find /usr -name ""cuchar"". /usr/include/c++/8/cuchar. /usr/include/c++/7/cuchar. /usr/include/c++/6/cuchar. PR fixes a broken CI build on Ubuntu 16 (gcc 5.4): /mnt/build/workspace/root-pullrequests-build/build/include/stl.modulemap:366:12: error: header 'cuchar' not found.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3578
https://github.com/root-project/root/pull/3578:185,deployability,build,build,185,"stl modulemap: cuchar is available starting from gcc6; $ find /usr -name ""cuchar"". /usr/include/c++/8/cuchar. /usr/include/c++/7/cuchar. /usr/include/c++/6/cuchar. PR fixes a broken CI build on Ubuntu 16 (gcc 5.4): /mnt/build/workspace/root-pullrequests-build/build/include/stl.modulemap:366:12: error: header 'cuchar' not found.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3578
https://github.com/root-project/root/pull/3578:220,deployability,build,build,220,"stl modulemap: cuchar is available starting from gcc6; $ find /usr -name ""cuchar"". /usr/include/c++/8/cuchar. /usr/include/c++/7/cuchar. /usr/include/c++/6/cuchar. PR fixes a broken CI build on Ubuntu 16 (gcc 5.4): /mnt/build/workspace/root-pullrequests-build/build/include/stl.modulemap:366:12: error: header 'cuchar' not found.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3578
https://github.com/root-project/root/pull/3578:254,deployability,build,build,254,"stl modulemap: cuchar is available starting from gcc6; $ find /usr -name ""cuchar"". /usr/include/c++/8/cuchar. /usr/include/c++/7/cuchar. /usr/include/c++/6/cuchar. PR fixes a broken CI build on Ubuntu 16 (gcc 5.4): /mnt/build/workspace/root-pullrequests-build/build/include/stl.modulemap:366:12: error: header 'cuchar' not found.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3578
https://github.com/root-project/root/pull/3578:260,deployability,build,build,260,"stl modulemap: cuchar is available starting from gcc6; $ find /usr -name ""cuchar"". /usr/include/c++/8/cuchar. /usr/include/c++/7/cuchar. /usr/include/c++/6/cuchar. PR fixes a broken CI build on Ubuntu 16 (gcc 5.4): /mnt/build/workspace/root-pullrequests-build/build/include/stl.modulemap:366:12: error: header 'cuchar' not found.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3578
https://github.com/root-project/root/pull/3578:278,deployability,modul,modulemap,278,"stl modulemap: cuchar is available starting from gcc6; $ find /usr -name ""cuchar"". /usr/include/c++/8/cuchar. /usr/include/c++/7/cuchar. /usr/include/c++/6/cuchar. PR fixes a broken CI build on Ubuntu 16 (gcc 5.4): /mnt/build/workspace/root-pullrequests-build/build/include/stl.modulemap:366:12: error: header 'cuchar' not found.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3578
https://github.com/root-project/root/pull/3578:4,modifiability,modul,modulemap,4,"stl modulemap: cuchar is available starting from gcc6; $ find /usr -name ""cuchar"". /usr/include/c++/8/cuchar. /usr/include/c++/7/cuchar. /usr/include/c++/6/cuchar. PR fixes a broken CI build on Ubuntu 16 (gcc 5.4): /mnt/build/workspace/root-pullrequests-build/build/include/stl.modulemap:366:12: error: header 'cuchar' not found.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3578
https://github.com/root-project/root/pull/3578:278,modifiability,modul,modulemap,278,"stl modulemap: cuchar is available starting from gcc6; $ find /usr -name ""cuchar"". /usr/include/c++/8/cuchar. /usr/include/c++/7/cuchar. /usr/include/c++/6/cuchar. PR fixes a broken CI build on Ubuntu 16 (gcc 5.4): /mnt/build/workspace/root-pullrequests-build/build/include/stl.modulemap:366:12: error: header 'cuchar' not found.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3578
https://github.com/root-project/root/pull/3578:296,performance,error,error,296,"stl modulemap: cuchar is available starting from gcc6; $ find /usr -name ""cuchar"". /usr/include/c++/8/cuchar. /usr/include/c++/7/cuchar. /usr/include/c++/6/cuchar. PR fixes a broken CI build on Ubuntu 16 (gcc 5.4): /mnt/build/workspace/root-pullrequests-build/build/include/stl.modulemap:366:12: error: header 'cuchar' not found.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3578
https://github.com/root-project/root/pull/3578:25,reliability,availab,available,25,"stl modulemap: cuchar is available starting from gcc6; $ find /usr -name ""cuchar"". /usr/include/c++/8/cuchar. /usr/include/c++/7/cuchar. /usr/include/c++/6/cuchar. PR fixes a broken CI build on Ubuntu 16 (gcc 5.4): /mnt/build/workspace/root-pullrequests-build/build/include/stl.modulemap:366:12: error: header 'cuchar' not found.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3578
https://github.com/root-project/root/pull/3578:4,safety,modul,modulemap,4,"stl modulemap: cuchar is available starting from gcc6; $ find /usr -name ""cuchar"". /usr/include/c++/8/cuchar. /usr/include/c++/7/cuchar. /usr/include/c++/6/cuchar. PR fixes a broken CI build on Ubuntu 16 (gcc 5.4): /mnt/build/workspace/root-pullrequests-build/build/include/stl.modulemap:366:12: error: header 'cuchar' not found.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3578
https://github.com/root-project/root/pull/3578:25,safety,avail,available,25,"stl modulemap: cuchar is available starting from gcc6; $ find /usr -name ""cuchar"". /usr/include/c++/8/cuchar. /usr/include/c++/7/cuchar. /usr/include/c++/6/cuchar. PR fixes a broken CI build on Ubuntu 16 (gcc 5.4): /mnt/build/workspace/root-pullrequests-build/build/include/stl.modulemap:366:12: error: header 'cuchar' not found.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3578
https://github.com/root-project/root/pull/3578:278,safety,modul,modulemap,278,"stl modulemap: cuchar is available starting from gcc6; $ find /usr -name ""cuchar"". /usr/include/c++/8/cuchar. /usr/include/c++/7/cuchar. /usr/include/c++/6/cuchar. PR fixes a broken CI build on Ubuntu 16 (gcc 5.4): /mnt/build/workspace/root-pullrequests-build/build/include/stl.modulemap:366:12: error: header 'cuchar' not found.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3578
https://github.com/root-project/root/pull/3578:296,safety,error,error,296,"stl modulemap: cuchar is available starting from gcc6; $ find /usr -name ""cuchar"". /usr/include/c++/8/cuchar. /usr/include/c++/7/cuchar. /usr/include/c++/6/cuchar. PR fixes a broken CI build on Ubuntu 16 (gcc 5.4): /mnt/build/workspace/root-pullrequests-build/build/include/stl.modulemap:366:12: error: header 'cuchar' not found.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3578
https://github.com/root-project/root/pull/3578:25,security,availab,available,25,"stl modulemap: cuchar is available starting from gcc6; $ find /usr -name ""cuchar"". /usr/include/c++/8/cuchar. /usr/include/c++/7/cuchar. /usr/include/c++/6/cuchar. PR fixes a broken CI build on Ubuntu 16 (gcc 5.4): /mnt/build/workspace/root-pullrequests-build/build/include/stl.modulemap:366:12: error: header 'cuchar' not found.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3578
https://github.com/root-project/root/pull/3578:296,usability,error,error,296,"stl modulemap: cuchar is available starting from gcc6; $ find /usr -name ""cuchar"". /usr/include/c++/8/cuchar. /usr/include/c++/7/cuchar. /usr/include/c++/6/cuchar. PR fixes a broken CI build on Ubuntu 16 (gcc 5.4): /mnt/build/workspace/root-pullrequests-build/build/include/stl.modulemap:366:12: error: header 'cuchar' not found.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3578
https://github.com/root-project/root/pull/3579:139,availability,error,error,139,"[TCling] Add method to get using declarations of namespaces; When updating `cppyy-backend` to v1.7.3 in PyROOT experimental, a compilation error appears because of a missing functionality in `TCling`, in particular a method to get using declarations of namespaces. This functionality was added to Cppyy's ROOT recently, and a patch was created for it:. https://bitbucket.org/wlav/cppyy-backend/src/59a4a747d03c6e94eaaa28062daf83104334f27d/cling/patches/using_directives.diff. This PR proposes to add such functionality to mainstream ROOT. . Inviting @Axel-Naumann and @wlav to the party.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3579
https://github.com/root-project/root/pull/3579:66,deployability,updat,updating,66,"[TCling] Add method to get using declarations of namespaces; When updating `cppyy-backend` to v1.7.3 in PyROOT experimental, a compilation error appears because of a missing functionality in `TCling`, in particular a method to get using declarations of namespaces. This functionality was added to Cppyy's ROOT recently, and a patch was created for it:. https://bitbucket.org/wlav/cppyy-backend/src/59a4a747d03c6e94eaaa28062daf83104334f27d/cling/patches/using_directives.diff. This PR proposes to add such functionality to mainstream ROOT. . Inviting @Axel-Naumann and @wlav to the party.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3579
https://github.com/root-project/root/pull/3579:326,deployability,patch,patch,326,"[TCling] Add method to get using declarations of namespaces; When updating `cppyy-backend` to v1.7.3 in PyROOT experimental, a compilation error appears because of a missing functionality in `TCling`, in particular a method to get using declarations of namespaces. This functionality was added to Cppyy's ROOT recently, and a patch was created for it:. https://bitbucket.org/wlav/cppyy-backend/src/59a4a747d03c6e94eaaa28062daf83104334f27d/cling/patches/using_directives.diff. This PR proposes to add such functionality to mainstream ROOT. . Inviting @Axel-Naumann and @wlav to the party.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3579
https://github.com/root-project/root/pull/3579:445,deployability,patch,patches,445,"[TCling] Add method to get using declarations of namespaces; When updating `cppyy-backend` to v1.7.3 in PyROOT experimental, a compilation error appears because of a missing functionality in `TCling`, in particular a method to get using declarations of namespaces. This functionality was added to Cppyy's ROOT recently, and a patch was created for it:. https://bitbucket.org/wlav/cppyy-backend/src/59a4a747d03c6e94eaaa28062daf83104334f27d/cling/patches/using_directives.diff. This PR proposes to add such functionality to mainstream ROOT. . Inviting @Axel-Naumann and @wlav to the party.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3579
https://github.com/root-project/root/pull/3579:139,performance,error,error,139,"[TCling] Add method to get using declarations of namespaces; When updating `cppyy-backend` to v1.7.3 in PyROOT experimental, a compilation error appears because of a missing functionality in `TCling`, in particular a method to get using declarations of namespaces. This functionality was added to Cppyy's ROOT recently, and a patch was created for it:. https://bitbucket.org/wlav/cppyy-backend/src/59a4a747d03c6e94eaaa28062daf83104334f27d/cling/patches/using_directives.diff. This PR proposes to add such functionality to mainstream ROOT. . Inviting @Axel-Naumann and @wlav to the party.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3579
https://github.com/root-project/root/pull/3579:66,safety,updat,updating,66,"[TCling] Add method to get using declarations of namespaces; When updating `cppyy-backend` to v1.7.3 in PyROOT experimental, a compilation error appears because of a missing functionality in `TCling`, in particular a method to get using declarations of namespaces. This functionality was added to Cppyy's ROOT recently, and a patch was created for it:. https://bitbucket.org/wlav/cppyy-backend/src/59a4a747d03c6e94eaaa28062daf83104334f27d/cling/patches/using_directives.diff. This PR proposes to add such functionality to mainstream ROOT. . Inviting @Axel-Naumann and @wlav to the party.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3579
https://github.com/root-project/root/pull/3579:139,safety,error,error,139,"[TCling] Add method to get using declarations of namespaces; When updating `cppyy-backend` to v1.7.3 in PyROOT experimental, a compilation error appears because of a missing functionality in `TCling`, in particular a method to get using declarations of namespaces. This functionality was added to Cppyy's ROOT recently, and a patch was created for it:. https://bitbucket.org/wlav/cppyy-backend/src/59a4a747d03c6e94eaaa28062daf83104334f27d/cling/patches/using_directives.diff. This PR proposes to add such functionality to mainstream ROOT. . Inviting @Axel-Naumann and @wlav to the party.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3579
https://github.com/root-project/root/pull/3579:326,safety,patch,patch,326,"[TCling] Add method to get using declarations of namespaces; When updating `cppyy-backend` to v1.7.3 in PyROOT experimental, a compilation error appears because of a missing functionality in `TCling`, in particular a method to get using declarations of namespaces. This functionality was added to Cppyy's ROOT recently, and a patch was created for it:. https://bitbucket.org/wlav/cppyy-backend/src/59a4a747d03c6e94eaaa28062daf83104334f27d/cling/patches/using_directives.diff. This PR proposes to add such functionality to mainstream ROOT. . Inviting @Axel-Naumann and @wlav to the party.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3579
https://github.com/root-project/root/pull/3579:445,safety,patch,patches,445,"[TCling] Add method to get using declarations of namespaces; When updating `cppyy-backend` to v1.7.3 in PyROOT experimental, a compilation error appears because of a missing functionality in `TCling`, in particular a method to get using declarations of namespaces. This functionality was added to Cppyy's ROOT recently, and a patch was created for it:. https://bitbucket.org/wlav/cppyy-backend/src/59a4a747d03c6e94eaaa28062daf83104334f27d/cling/patches/using_directives.diff. This PR proposes to add such functionality to mainstream ROOT. . Inviting @Axel-Naumann and @wlav to the party.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3579
https://github.com/root-project/root/pull/3579:66,security,updat,updating,66,"[TCling] Add method to get using declarations of namespaces; When updating `cppyy-backend` to v1.7.3 in PyROOT experimental, a compilation error appears because of a missing functionality in `TCling`, in particular a method to get using declarations of namespaces. This functionality was added to Cppyy's ROOT recently, and a patch was created for it:. https://bitbucket.org/wlav/cppyy-backend/src/59a4a747d03c6e94eaaa28062daf83104334f27d/cling/patches/using_directives.diff. This PR proposes to add such functionality to mainstream ROOT. . Inviting @Axel-Naumann and @wlav to the party.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3579
https://github.com/root-project/root/pull/3579:326,security,patch,patch,326,"[TCling] Add method to get using declarations of namespaces; When updating `cppyy-backend` to v1.7.3 in PyROOT experimental, a compilation error appears because of a missing functionality in `TCling`, in particular a method to get using declarations of namespaces. This functionality was added to Cppyy's ROOT recently, and a patch was created for it:. https://bitbucket.org/wlav/cppyy-backend/src/59a4a747d03c6e94eaaa28062daf83104334f27d/cling/patches/using_directives.diff. This PR proposes to add such functionality to mainstream ROOT. . Inviting @Axel-Naumann and @wlav to the party.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3579
https://github.com/root-project/root/pull/3579:445,security,patch,patches,445,"[TCling] Add method to get using declarations of namespaces; When updating `cppyy-backend` to v1.7.3 in PyROOT experimental, a compilation error appears because of a missing functionality in `TCling`, in particular a method to get using declarations of namespaces. This functionality was added to Cppyy's ROOT recently, and a patch was created for it:. https://bitbucket.org/wlav/cppyy-backend/src/59a4a747d03c6e94eaaa28062daf83104334f27d/cling/patches/using_directives.diff. This PR proposes to add such functionality to mainstream ROOT. . Inviting @Axel-Naumann and @wlav to the party.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3579
https://github.com/root-project/root/pull/3579:139,usability,error,error,139,"[TCling] Add method to get using declarations of namespaces; When updating `cppyy-backend` to v1.7.3 in PyROOT experimental, a compilation error appears because of a missing functionality in `TCling`, in particular a method to get using declarations of namespaces. This functionality was added to Cppyy's ROOT recently, and a patch was created for it:. https://bitbucket.org/wlav/cppyy-backend/src/59a4a747d03c6e94eaaa28062daf83104334f27d/cling/patches/using_directives.diff. This PR proposes to add such functionality to mainstream ROOT. . Inviting @Axel-Naumann and @wlav to the party.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3579
https://github.com/root-project/root/pull/3580:0,energy efficiency,Reduc,Reduced,0,Reduced ExcludeModules by one;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3580
https://github.com/root-project/root/pull/3581:291,availability,failur,failures,291,"[Exp PyROOT] Update loader with new use of CLING_STANDARD_PCH; This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:. https://github.com/root-project/root/pull/3579. is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3581
https://github.com/root-project/root/pull/3581:13,deployability,Updat,Update,13,"[Exp PyROOT] Update loader with new use of CLING_STANDARD_PCH; This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:. https://github.com/root-project/root/pull/3579. is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3581
https://github.com/root-project/root/pull/3581:20,deployability,loader,loader,20,"[Exp PyROOT] Update loader with new use of CLING_STANDARD_PCH; This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:. https://github.com/root-project/root/pull/3579. is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3581
https://github.com/root-project/root/pull/3581:93,deployability,loader,loader,93,"[Exp PyROOT] Update loader with new use of CLING_STANDARD_PCH; This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:. https://github.com/root-project/root/pull/3579. is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3581
https://github.com/root-project/root/pull/3581:121,deployability,version,version,121,"[Exp PyROOT] Update loader with new use of CLING_STANDARD_PCH; This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:. https://github.com/root-project/root/pull/3579. is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3581
https://github.com/root-project/root/pull/3581:291,deployability,fail,failures,291,"[Exp PyROOT] Update loader with new use of CLING_STANDARD_PCH; This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:. https://github.com/root-project/root/pull/3579. is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3581
https://github.com/root-project/root/pull/3581:352,deployability,build,builds,352,"[Exp PyROOT] Update loader with new use of CLING_STANDARD_PCH; This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:. https://github.com/root-project/root/pull/3579. is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3581
https://github.com/root-project/root/pull/3581:426,deployability,updat,update,426,"[Exp PyROOT] Update loader with new use of CLING_STANDARD_PCH; This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:. https://github.com/root-project/root/pull/3579. is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3581
https://github.com/root-project/root/pull/3581:20,energy efficiency,load,loader,20,"[Exp PyROOT] Update loader with new use of CLING_STANDARD_PCH; This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:. https://github.com/root-project/root/pull/3579. is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3581
https://github.com/root-project/root/pull/3581:93,energy efficiency,load,loader,93,"[Exp PyROOT] Update loader with new use of CLING_STANDARD_PCH; This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:. https://github.com/root-project/root/pull/3579. is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3581
https://github.com/root-project/root/pull/3581:121,integrability,version,version,121,"[Exp PyROOT] Update loader with new use of CLING_STANDARD_PCH; This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:. https://github.com/root-project/root/pull/3579. is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3581
https://github.com/root-project/root/pull/3581:121,modifiability,version,version,121,"[Exp PyROOT] Update loader with new use of CLING_STANDARD_PCH; This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:. https://github.com/root-project/root/pull/3579. is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3581
https://github.com/root-project/root/pull/3581:457,modifiability,pac,packages,457,"[Exp PyROOT] Update loader with new use of CLING_STANDARD_PCH; This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:. https://github.com/root-project/root/pull/3579. is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3581
https://github.com/root-project/root/pull/3581:20,performance,load,loader,20,"[Exp PyROOT] Update loader with new use of CLING_STANDARD_PCH; This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:. https://github.com/root-project/root/pull/3579. is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3581
https://github.com/root-project/root/pull/3581:93,performance,load,loader,93,"[Exp PyROOT] Update loader with new use of CLING_STANDARD_PCH; This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:. https://github.com/root-project/root/pull/3579. is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3581
https://github.com/root-project/root/pull/3581:291,performance,failur,failures,291,"[Exp PyROOT] Update loader with new use of CLING_STANDARD_PCH; This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:. https://github.com/root-project/root/pull/3579. is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3581
https://github.com/root-project/root/pull/3581:291,reliability,fail,failures,291,"[Exp PyROOT] Update loader with new use of CLING_STANDARD_PCH; This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:. https://github.com/root-project/root/pull/3579. is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3581
https://github.com/root-project/root/pull/3581:13,safety,Updat,Update,13,"[Exp PyROOT] Update loader with new use of CLING_STANDARD_PCH; This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:. https://github.com/root-project/root/pull/3579. is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3581
https://github.com/root-project/root/pull/3581:232,safety,prevent,prevent,232,"[Exp PyROOT] Update loader with new use of CLING_STANDARD_PCH; This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:. https://github.com/root-project/root/pull/3579. is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3581
https://github.com/root-project/root/pull/3581:286,safety,test,test,286,"[Exp PyROOT] Update loader with new use of CLING_STANDARD_PCH; This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:. https://github.com/root-project/root/pull/3579. is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3581
https://github.com/root-project/root/pull/3581:417,safety,compl,complete,417,"[Exp PyROOT] Update loader with new use of CLING_STANDARD_PCH; This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:. https://github.com/root-project/root/pull/3579. is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3581
https://github.com/root-project/root/pull/3581:426,safety,updat,update,426,"[Exp PyROOT] Update loader with new use of CLING_STANDARD_PCH; This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:. https://github.com/root-project/root/pull/3579. is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3581
https://github.com/root-project/root/pull/3581:13,security,Updat,Update,13,"[Exp PyROOT] Update loader with new use of CLING_STANDARD_PCH; This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:. https://github.com/root-project/root/pull/3579. is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3581
https://github.com/root-project/root/pull/3581:232,security,preven,prevent,232,"[Exp PyROOT] Update loader with new use of CLING_STANDARD_PCH; This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:. https://github.com/root-project/root/pull/3579. is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3581
https://github.com/root-project/root/pull/3581:417,security,compl,complete,417,"[Exp PyROOT] Update loader with new use of CLING_STANDARD_PCH; This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:. https://github.com/root-project/root/pull/3579. is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3581
https://github.com/root-project/root/pull/3581:426,security,updat,update,426,"[Exp PyROOT] Update loader with new use of CLING_STANDARD_PCH; This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:. https://github.com/root-project/root/pull/3579. is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3581
https://github.com/root-project/root/pull/3581:286,testability,test,test,286,"[Exp PyROOT] Update loader with new use of CLING_STANDARD_PCH; This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:. https://github.com/root-project/root/pull/3579. is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3581
https://github.com/root-project/root/pull/3582:26,deployability,Updat,Update,26,Accidentally closed #3574 Update libc.modulemap;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3582
https://github.com/root-project/root/pull/3582:38,deployability,modul,modulemap,38,Accidentally closed #3574 Update libc.modulemap;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3582
https://github.com/root-project/root/pull/3582:38,modifiability,modul,modulemap,38,Accidentally closed #3574 Update libc.modulemap;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3582
https://github.com/root-project/root/pull/3582:0,safety,Accid,Accidentally,0,Accidentally closed #3574 Update libc.modulemap;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3582
https://github.com/root-project/root/pull/3582:26,safety,Updat,Update,26,Accidentally closed #3574 Update libc.modulemap;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3582
https://github.com/root-project/root/pull/3582:38,safety,modul,modulemap,38,Accidentally closed #3574 Update libc.modulemap;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3582
https://github.com/root-project/root/pull/3582:26,security,Updat,Update,26,Accidentally closed #3574 Update libc.modulemap;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3582
https://github.com/root-project/root/pull/3582:13,usability,close,closed,13,Accidentally closed #3574 Update libc.modulemap;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3582
https://github.com/root-project/root/pull/3583:0,deployability,Updat,Update,0,Update libc.modulemap;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3583
https://github.com/root-project/root/pull/3583:12,deployability,modul,modulemap,12,Update libc.modulemap;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3583
https://github.com/root-project/root/pull/3583:12,modifiability,modul,modulemap,12,Update libc.modulemap;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3583
https://github.com/root-project/root/pull/3583:0,safety,Updat,Update,0,Update libc.modulemap;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3583
https://github.com/root-project/root/pull/3583:12,safety,modul,modulemap,12,Update libc.modulemap;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3583
https://github.com/root-project/root/pull/3583:0,security,Updat,Update,0,Update libc.modulemap;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3583
https://github.com/root-project/root/pull/3585:280,deployability,depend,depending,280,Add a TMVA::Executor class to control MT in TMVA; In order to fix ROOT-10034 a new Executor class has been created. The class wraps the TExecutor types of ROOT and create in MT running a TThreadExecutor or a TSequentialExecutor. . This allows to use exactly same code in all TMVA depending on sequential or MT running. . In addition now the TMVA::Config can control the MT running. The behaviour is the following: . - ROOT::IsImplicitMTEnabled() = false TMVA uses TSequentialExecutor (no MT). - ROOT::IsImplicitMTEnabled() = true TMVA uses TThreadExecutor with the number of threads provided in ROOT::EnableImplicitMT. - TMVA::gConfig.EnableMT(nthreads) : run MT using TThreadExecutor with nthreads (if the ROOT thread pool has not been created before) otherwise use existing pool. - TMVA::gConfig.DisableMT() - delete TThreadExecutor if it has been created (i.e. release the thread pool) and use TSequentialExecutor.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3585
https://github.com/root-project/root/pull/3585:864,deployability,releas,release,864,Add a TMVA::Executor class to control MT in TMVA; In order to fix ROOT-10034 a new Executor class has been created. The class wraps the TExecutor types of ROOT and create in MT running a TThreadExecutor or a TSequentialExecutor. . This allows to use exactly same code in all TMVA depending on sequential or MT running. . In addition now the TMVA::Config can control the MT running. The behaviour is the following: . - ROOT::IsImplicitMTEnabled() = false TMVA uses TSequentialExecutor (no MT). - ROOT::IsImplicitMTEnabled() = true TMVA uses TThreadExecutor with the number of threads provided in ROOT::EnableImplicitMT. - TMVA::gConfig.EnableMT(nthreads) : run MT using TThreadExecutor with nthreads (if the ROOT thread pool has not been created before) otherwise use existing pool. - TMVA::gConfig.DisableMT() - delete TThreadExecutor if it has been created (i.e. release the thread pool) and use TSequentialExecutor.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3585
https://github.com/root-project/root/pull/3585:126,integrability,wrap,wraps,126,Add a TMVA::Executor class to control MT in TMVA; In order to fix ROOT-10034 a new Executor class has been created. The class wraps the TExecutor types of ROOT and create in MT running a TThreadExecutor or a TSequentialExecutor. . This allows to use exactly same code in all TMVA depending on sequential or MT running. . In addition now the TMVA::Config can control the MT running. The behaviour is the following: . - ROOT::IsImplicitMTEnabled() = false TMVA uses TSequentialExecutor (no MT). - ROOT::IsImplicitMTEnabled() = true TMVA uses TThreadExecutor with the number of threads provided in ROOT::EnableImplicitMT. - TMVA::gConfig.EnableMT(nthreads) : run MT using TThreadExecutor with nthreads (if the ROOT thread pool has not been created before) otherwise use existing pool. - TMVA::gConfig.DisableMT() - delete TThreadExecutor if it has been created (i.e. release the thread pool) and use TSequentialExecutor.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3585
https://github.com/root-project/root/pull/3585:280,integrability,depend,depending,280,Add a TMVA::Executor class to control MT in TMVA; In order to fix ROOT-10034 a new Executor class has been created. The class wraps the TExecutor types of ROOT and create in MT running a TThreadExecutor or a TSequentialExecutor. . This allows to use exactly same code in all TMVA depending on sequential or MT running. . In addition now the TMVA::Config can control the MT running. The behaviour is the following: . - ROOT::IsImplicitMTEnabled() = false TMVA uses TSequentialExecutor (no MT). - ROOT::IsImplicitMTEnabled() = true TMVA uses TThreadExecutor with the number of threads provided in ROOT::EnableImplicitMT. - TMVA::gConfig.EnableMT(nthreads) : run MT using TThreadExecutor with nthreads (if the ROOT thread pool has not been created before) otherwise use existing pool. - TMVA::gConfig.DisableMT() - delete TThreadExecutor if it has been created (i.e. release the thread pool) and use TSequentialExecutor.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3585
https://github.com/root-project/root/pull/3585:280,modifiability,depend,depending,280,Add a TMVA::Executor class to control MT in TMVA; In order to fix ROOT-10034 a new Executor class has been created. The class wraps the TExecutor types of ROOT and create in MT running a TThreadExecutor or a TSequentialExecutor. . This allows to use exactly same code in all TMVA depending on sequential or MT running. . In addition now the TMVA::Config can control the MT running. The behaviour is the following: . - ROOT::IsImplicitMTEnabled() = false TMVA uses TSequentialExecutor (no MT). - ROOT::IsImplicitMTEnabled() = true TMVA uses TThreadExecutor with the number of threads provided in ROOT::EnableImplicitMT. - TMVA::gConfig.EnableMT(nthreads) : run MT using TThreadExecutor with nthreads (if the ROOT thread pool has not been created before) otherwise use existing pool. - TMVA::gConfig.DisableMT() - delete TThreadExecutor if it has been created (i.e. release the thread pool) and use TSequentialExecutor.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3585
https://github.com/root-project/root/pull/3585:280,safety,depend,depending,280,Add a TMVA::Executor class to control MT in TMVA; In order to fix ROOT-10034 a new Executor class has been created. The class wraps the TExecutor types of ROOT and create in MT running a TThreadExecutor or a TSequentialExecutor. . This allows to use exactly same code in all TMVA depending on sequential or MT running. . In addition now the TMVA::Config can control the MT running. The behaviour is the following: . - ROOT::IsImplicitMTEnabled() = false TMVA uses TSequentialExecutor (no MT). - ROOT::IsImplicitMTEnabled() = true TMVA uses TThreadExecutor with the number of threads provided in ROOT::EnableImplicitMT. - TMVA::gConfig.EnableMT(nthreads) : run MT using TThreadExecutor with nthreads (if the ROOT thread pool has not been created before) otherwise use existing pool. - TMVA::gConfig.DisableMT() - delete TThreadExecutor if it has been created (i.e. release the thread pool) and use TSequentialExecutor.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3585
https://github.com/root-project/root/pull/3585:30,security,control,control,30,Add a TMVA::Executor class to control MT in TMVA; In order to fix ROOT-10034 a new Executor class has been created. The class wraps the TExecutor types of ROOT and create in MT running a TThreadExecutor or a TSequentialExecutor. . This allows to use exactly same code in all TMVA depending on sequential or MT running. . In addition now the TMVA::Config can control the MT running. The behaviour is the following: . - ROOT::IsImplicitMTEnabled() = false TMVA uses TSequentialExecutor (no MT). - ROOT::IsImplicitMTEnabled() = true TMVA uses TThreadExecutor with the number of threads provided in ROOT::EnableImplicitMT. - TMVA::gConfig.EnableMT(nthreads) : run MT using TThreadExecutor with nthreads (if the ROOT thread pool has not been created before) otherwise use existing pool. - TMVA::gConfig.DisableMT() - delete TThreadExecutor if it has been created (i.e. release the thread pool) and use TSequentialExecutor.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3585
https://github.com/root-project/root/pull/3585:358,security,control,control,358,Add a TMVA::Executor class to control MT in TMVA; In order to fix ROOT-10034 a new Executor class has been created. The class wraps the TExecutor types of ROOT and create in MT running a TThreadExecutor or a TSequentialExecutor. . This allows to use exactly same code in all TMVA depending on sequential or MT running. . In addition now the TMVA::Config can control the MT running. The behaviour is the following: . - ROOT::IsImplicitMTEnabled() = false TMVA uses TSequentialExecutor (no MT). - ROOT::IsImplicitMTEnabled() = true TMVA uses TThreadExecutor with the number of threads provided in ROOT::EnableImplicitMT. - TMVA::gConfig.EnableMT(nthreads) : run MT using TThreadExecutor with nthreads (if the ROOT thread pool has not been created before) otherwise use existing pool. - TMVA::gConfig.DisableMT() - delete TThreadExecutor if it has been created (i.e. release the thread pool) and use TSequentialExecutor.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3585
https://github.com/root-project/root/pull/3585:30,testability,control,control,30,Add a TMVA::Executor class to control MT in TMVA; In order to fix ROOT-10034 a new Executor class has been created. The class wraps the TExecutor types of ROOT and create in MT running a TThreadExecutor or a TSequentialExecutor. . This allows to use exactly same code in all TMVA depending on sequential or MT running. . In addition now the TMVA::Config can control the MT running. The behaviour is the following: . - ROOT::IsImplicitMTEnabled() = false TMVA uses TSequentialExecutor (no MT). - ROOT::IsImplicitMTEnabled() = true TMVA uses TThreadExecutor with the number of threads provided in ROOT::EnableImplicitMT. - TMVA::gConfig.EnableMT(nthreads) : run MT using TThreadExecutor with nthreads (if the ROOT thread pool has not been created before) otherwise use existing pool. - TMVA::gConfig.DisableMT() - delete TThreadExecutor if it has been created (i.e. release the thread pool) and use TSequentialExecutor.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3585
https://github.com/root-project/root/pull/3585:280,testability,depend,depending,280,Add a TMVA::Executor class to control MT in TMVA; In order to fix ROOT-10034 a new Executor class has been created. The class wraps the TExecutor types of ROOT and create in MT running a TThreadExecutor or a TSequentialExecutor. . This allows to use exactly same code in all TMVA depending on sequential or MT running. . In addition now the TMVA::Config can control the MT running. The behaviour is the following: . - ROOT::IsImplicitMTEnabled() = false TMVA uses TSequentialExecutor (no MT). - ROOT::IsImplicitMTEnabled() = true TMVA uses TThreadExecutor with the number of threads provided in ROOT::EnableImplicitMT. - TMVA::gConfig.EnableMT(nthreads) : run MT using TThreadExecutor with nthreads (if the ROOT thread pool has not been created before) otherwise use existing pool. - TMVA::gConfig.DisableMT() - delete TThreadExecutor if it has been created (i.e. release the thread pool) and use TSequentialExecutor.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3585
https://github.com/root-project/root/pull/3585:358,testability,control,control,358,Add a TMVA::Executor class to control MT in TMVA; In order to fix ROOT-10034 a new Executor class has been created. The class wraps the TExecutor types of ROOT and create in MT running a TThreadExecutor or a TSequentialExecutor. . This allows to use exactly same code in all TMVA depending on sequential or MT running. . In addition now the TMVA::Config can control the MT running. The behaviour is the following: . - ROOT::IsImplicitMTEnabled() = false TMVA uses TSequentialExecutor (no MT). - ROOT::IsImplicitMTEnabled() = true TMVA uses TThreadExecutor with the number of threads provided in ROOT::EnableImplicitMT. - TMVA::gConfig.EnableMT(nthreads) : run MT using TThreadExecutor with nthreads (if the ROOT thread pool has not been created before) otherwise use existing pool. - TMVA::gConfig.DisableMT() - delete TThreadExecutor if it has been created (i.e. release the thread pool) and use TSequentialExecutor.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3585
https://github.com/root-project/root/pull/3585:386,usability,behavi,behaviour,386,Add a TMVA::Executor class to control MT in TMVA; In order to fix ROOT-10034 a new Executor class has been created. The class wraps the TExecutor types of ROOT and create in MT running a TThreadExecutor or a TSequentialExecutor. . This allows to use exactly same code in all TMVA depending on sequential or MT running. . In addition now the TMVA::Config can control the MT running. The behaviour is the following: . - ROOT::IsImplicitMTEnabled() = false TMVA uses TSequentialExecutor (no MT). - ROOT::IsImplicitMTEnabled() = true TMVA uses TThreadExecutor with the number of threads provided in ROOT::EnableImplicitMT. - TMVA::gConfig.EnableMT(nthreads) : run MT using TThreadExecutor with nthreads (if the ROOT thread pool has not been created before) otherwise use existing pool. - TMVA::gConfig.DisableMT() - delete TThreadExecutor if it has been created (i.e. release the thread pool) and use TSequentialExecutor.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3585
https://github.com/root-project/root/pull/3586:78,availability,fault,fault,78,"[rootcling] Enable stack trace printout on crash.; Before:. ```. Segmentation fault. ```. After:. ```. rootcling_stage1 0x000000010ea2ba98 llvm::sys::PrintStackTrace(llvm::raw_ostream&) + 40. 1 rootcling_stage1 0x000000010ea2ad46 llvm::sys::RunSignalHandlers() + 86. 2 rootcling_stage1 0x000000010ea2bffe SignalHandler(int) + 270. 3 libsystem_platform.dylib 0x00007fff65610b3d _sigtramp + 29. 4 rootcling_stage1 0x000000010c7b68dd clang::operator==(clang::QualType const&, clang::QualType const&) + 29. 5 rootcling_stage1 0x000000010d531b20 clang::Preprocessor::getModuleHeaderToIncludeForDiagnostics(clang::SourceLocation, clang::Module*, clang::SourceLocation) + 48. 6 rootcling_stage1 0x000000010d95bfc7 clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535. 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Pa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:438,availability,operat,operator,438,"[rootcling] Enable stack trace printout on crash.; Before:. ```. Segmentation fault. ```. After:. ```. rootcling_stage1 0x000000010ea2ba98 llvm::sys::PrintStackTrace(llvm::raw_ostream&) + 40. 1 rootcling_stage1 0x000000010ea2ad46 llvm::sys::RunSignalHandlers() + 86. 2 rootcling_stage1 0x000000010ea2bffe SignalHandler(int) + 270. 3 libsystem_platform.dylib 0x00007fff65610b3d _sigtramp + 29. 4 rootcling_stage1 0x000000010c7b68dd clang::operator==(clang::QualType const&, clang::QualType const&) + 29. 5 rootcling_stage1 0x000000010d531b20 clang::Preprocessor::getModuleHeaderToIncludeForDiagnostics(clang::SourceLocation, clang::Module*, clang::SourceLocation) + 48. 6 rootcling_stage1 0x000000010d95bfc7 clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535. 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Pa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:19,deployability,stack,stack,19,"[rootcling] Enable stack trace printout on crash.; Before:. ```. Segmentation fault. ```. After:. ```. rootcling_stage1 0x000000010ea2ba98 llvm::sys::PrintStackTrace(llvm::raw_ostream&) + 40. 1 rootcling_stage1 0x000000010ea2ad46 llvm::sys::RunSignalHandlers() + 86. 2 rootcling_stage1 0x000000010ea2bffe SignalHandler(int) + 270. 3 libsystem_platform.dylib 0x00007fff65610b3d _sigtramp + 29. 4 rootcling_stage1 0x000000010c7b68dd clang::operator==(clang::QualType const&, clang::QualType const&) + 29. 5 rootcling_stage1 0x000000010d531b20 clang::Preprocessor::getModuleHeaderToIncludeForDiagnostics(clang::SourceLocation, clang::Module*, clang::SourceLocation) + 48. 6 rootcling_stage1 0x000000010d95bfc7 clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535. 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Pa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:631,deployability,Modul,Module,631,"[rootcling] Enable stack trace printout on crash.; Before:. ```. Segmentation fault. ```. After:. ```. rootcling_stage1 0x000000010ea2ba98 llvm::sys::PrintStackTrace(llvm::raw_ostream&) + 40. 1 rootcling_stage1 0x000000010ea2ad46 llvm::sys::RunSignalHandlers() + 86. 2 rootcling_stage1 0x000000010ea2bffe SignalHandler(int) + 270. 3 libsystem_platform.dylib 0x00007fff65610b3d _sigtramp + 29. 4 rootcling_stage1 0x000000010c7b68dd clang::operator==(clang::QualType const&, clang::QualType const&) + 29. 5 rootcling_stage1 0x000000010d531b20 clang::Preprocessor::getModuleHeaderToIncludeForDiagnostics(clang::SourceLocation, clang::Module*, clang::SourceLocation) + 48. 6 rootcling_stage1 0x000000010d95bfc7 clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535. 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Pa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:829,deployability,Modul,Module,829,"[rootcling] Enable stack trace printout on crash.; Before:. ```. Segmentation fault. ```. After:. ```. rootcling_stage1 0x000000010ea2ba98 llvm::sys::PrintStackTrace(llvm::raw_ostream&) + 40. 1 rootcling_stage1 0x000000010ea2ad46 llvm::sys::RunSignalHandlers() + 86. 2 rootcling_stage1 0x000000010ea2bffe SignalHandler(int) + 270. 3 libsystem_platform.dylib 0x00007fff65610b3d _sigtramp + 29. 4 rootcling_stage1 0x000000010c7b68dd clang::operator==(clang::QualType const&, clang::QualType const&) + 29. 5 rootcling_stage1 0x000000010d531b20 clang::Preprocessor::getModuleHeaderToIncludeForDiagnostics(clang::SourceLocation, clang::Module*, clang::SourceLocation) + 48. 6 rootcling_stage1 0x000000010d95bfc7 clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535. 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Pa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:3687,deployability,Stack,Stack,3687,"::DeclGroupRef>&) + 588. 17 rootcling_stage1 0x000000010cd68a90 cling::IncrementalParser::ParseInternal(llvm::StringRef) + 2704. 18 rootcling_stage1 0x000000010cd6ca91 cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) + 81. 19 rootcling_stage1 0x000000010cd94044 cling::Interpreter::DeclareInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const + 884. 20 rootcling_stage1 0x000000010cd9110e cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::Transaction**) + 110. 21 rootcling_stage1 0x000000010c964389 RootClingMain(int, char**, bool, bool) + 68009. 22 rootcling_stage1 0x000000010c989685 ROOT_rootcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvass",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:3749,deployability,build,builds,3749,"0 cling::IncrementalParser::ParseInternal(llvm::StringRef) + 2704. 18 rootcling_stage1 0x000000010cd6ca91 cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) + 81. 19 rootcling_stage1 0x000000010cd94044 cling::Interpreter::DeclareInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const + 884. 20 rootcling_stage1 0x000000010cd9110e cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::Transaction**) + 110. 21 rootcling_stage1 0x000000010c964389 RootClingMain(int, char**, bool, bool) + 68009. 22 rootcling_stage1 0x000000010c989685 ROOT_rootcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvass",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:3864,deployability,build,builds,3864,"crementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) + 81. 19 rootcling_stage1 0x000000010cd94044 cling::Interpreter::DeclareInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const + 884. 20 rootcling_stage1 0x000000010cd9110e cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::Transaction**) + 110. 21 rootcling_stage1 0x000000010c964389 RootClingMain(int, char**, bool, bool) + 68009. 22 rootcling_stage1 0x000000010c989685 ROOT_rootcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vva",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:3984,deployability,build,builds,3984," cling::Interpreter::DeclareInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const + 884. 20 rootcling_stage1 0x000000010cd9110e cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::Transaction**) + 110. 21 rootcling_stage1 0x000000010c964389 RootClingMain(int, char**, bool, bool) + 68009. 22 rootcling_stage1 0x000000010c989685 ROOT_rootcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4044,deployability,build,builds,4044,"char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const + 884. 20 rootcling_stage1 0x000000010cd9110e cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::Transaction**) + 110. 21 rootcling_stage1 0x000000010c964389 RootClingMain(int, char**, bool, bool) + 68009. 22 rootcling_stage1 0x000000010c989685 ROOT_rootcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4147,deployability,build,builds,4147,", cling::Transaction**) const + 884. 20 rootcling_stage1 0x000000010cd9110e cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::Transaction**) + 110. 21 rootcling_stage1 0x000000010c964389 RootClingMain(int, char**, bool, bool) + 68009. 22 rootcling_stage1 0x000000010c989685 ROOT_rootcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4199,deployability,build,builds,4199,"age1 0x000000010cd9110e cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::Transaction**) + 110. 21 rootcling_stage1 0x000000010c964389 RootClingMain(int, char**, bool, bool) + 68009. 22 rootcling_stage1 0x000000010c989685 ROOT_rootcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:78,energy efficiency,fault,fault,78,"[rootcling] Enable stack trace printout on crash.; Before:. ```. Segmentation fault. ```. After:. ```. rootcling_stage1 0x000000010ea2ba98 llvm::sys::PrintStackTrace(llvm::raw_ostream&) + 40. 1 rootcling_stage1 0x000000010ea2ad46 llvm::sys::RunSignalHandlers() + 86. 2 rootcling_stage1 0x000000010ea2bffe SignalHandler(int) + 270. 3 libsystem_platform.dylib 0x00007fff65610b3d _sigtramp + 29. 4 rootcling_stage1 0x000000010c7b68dd clang::operator==(clang::QualType const&, clang::QualType const&) + 29. 5 rootcling_stage1 0x000000010d531b20 clang::Preprocessor::getModuleHeaderToIncludeForDiagnostics(clang::SourceLocation, clang::Module*, clang::SourceLocation) + 48. 6 rootcling_stage1 0x000000010d95bfc7 clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535. 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Pa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:3092,energy efficiency,alloc,allocator,3092,"0d5f8a6a clang::Parser::ParseDeclOrFunctionDefInternal(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec&, clang::AccessSpecifier) + 138. 14 rootcling_stage1 0x000000010d5f8725 clang::Parser::ParseDeclarationOrFunctionDefinition(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) + 373. 15 rootcling_stage1 0x000000010d5f7477 clang::Parser::ParseExternalDeclaration(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) + 2423. 16 rootcling_stage1 0x000000010d5f641c clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&) + 588. 17 rootcling_stage1 0x000000010cd68a90 cling::IncrementalParser::ParseInternal(llvm::StringRef) + 2704. 18 rootcling_stage1 0x000000010cd6ca91 cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) + 81. 19 rootcling_stage1 0x000000010cd94044 cling::Interpreter::DeclareInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const + 884. 20 rootcling_stage1 0x000000010cd9110e cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::Transaction**) + 110. 21 rootcling_stage1 0x000000010c964389 RootClingMain(int, char**, bool, bool) + 68009. 22 rootcling_stage1 0x000000010c989685 ROOT_rootcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/wo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:3322,energy efficiency,alloc,allocator,3322,"tionDefinition(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) + 373. 15 rootcling_stage1 0x000000010d5f7477 clang::Parser::ParseExternalDeclaration(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) + 2423. 16 rootcling_stage1 0x000000010d5f641c clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&) + 588. 17 rootcling_stage1 0x000000010cd68a90 cling::IncrementalParser::ParseInternal(llvm::StringRef) + 2704. 18 rootcling_stage1 0x000000010cd6ca91 cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) + 81. 19 rootcling_stage1 0x000000010cd94044 cling::Interpreter::DeclareInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const + 884. 20 rootcling_stage1 0x000000010cd9110e cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::Transaction**) + 110. 21 rootcling_stage1 0x000000010c964389 RootClingMain(int, char**, bool, bool) + 68009. 22 rootcling_stage1 0x000000010c989685 ROOT_rootcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:3761,energy efficiency,core,core,3761,"crementalParser::ParseInternal(llvm::StringRef) + 2704. 18 rootcling_stage1 0x000000010cd6ca91 cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) + 81. 19 rootcling_stage1 0x000000010cd94044 cling::Interpreter::DeclareInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const + 884. 20 rootcling_stage1 0x000000010cd9110e cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::Transaction**) + 110. 21 rootcling_stage1 0x000000010c964389 RootClingMain(int, char**, bool, bool) + 68009. 22 rootcling_stage1 0x000000010c989685 ROOT_rootcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/worksp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4317,energy efficiency,core,core,4317,"1::allocator<char> > const&, cling::Transaction**) + 110. 21 rootcling_stage1 0x000000010c964389 RootClingMain(int, char**, bool, bool) + 68009. 22 rootcling_stage1 0x000000010c989685 ROOT_rootcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBrowser.h TBrowserImp.h TBuffer3D.h TBuffer3DTypes.h T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4373,energy efficiency,core,core,4373,". 21 rootcling_stage1 0x000000010c964389 RootClingMain(int, char**, bool, bool) + 68009. 22 rootcling_stage1 0x000000010c989685 ROOT_rootcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBrowser.h TBrowserImp.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TCanvasImp.h TColorGradient.h TColor.h TContext",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4429,energy efficiency,core,core,4429,"nt, char**, bool, bool) + 68009. 22 rootcling_stage1 0x000000010c989685 ROOT_rootcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBrowser.h TBrowserImp.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TCanvasImp.h TColorGradient.h TColor.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TDatime.h TDir",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4485,energy efficiency,core,core,4485,00000010c989685 ROOT_rootcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBrowser.h TBrowserImp.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TCanvasImp.h TColorGradient.h TColor.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TDatime.h TDirectory.h TEnv.h TError.h TException.h TExec.h TFileColle,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4547,energy efficiency,core,core,4547,ge1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBrowser.h TBrowserImp.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TCanvasImp.h TColorGradient.h TColor.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TDatime.h TDirectory.h TEnv.h TError.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TGuiFactory.h TInetAddress.h TIn,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4605,energy efficiency,core,core,4605,7fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBrowser.h TBrowserImp.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TCanvasImp.h TColorGradient.h TColor.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TDatime.h TDirectory.h TEnv.h TError.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TGuiFactory.h TInetAddress.h TInspectorImp.h TMacro.h TMathBase.h TMD5.h TMemberInspector.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4661,energy efficiency,core,core,4661,0e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBrowser.h TBrowserImp.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TCanvasImp.h TColorGradient.h TColor.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TDatime.h TDirectory.h TEnv.h TError.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TGuiFactory.h TInetAddress.h TInspectorImp.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TOb,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4718,energy efficiency,core,core,4718,: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBrowser.h TBrowserImp.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TCanvasImp.h TColorGradient.h TColor.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TDatime.h TDirectory.h TEnv.h TError.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TGuiFactory.h TInetAddress.h TInspectorImp.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjectSpy.h TObjString.h TParameter.h TPluginManager.h TPoi,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4780,energy efficiency,core,core,4780,/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBrowser.h TBrowserImp.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TCanvasImp.h TColorGradient.h TColor.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TDatime.h TDirectory.h TEnv.h TError.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TGuiFactory.h TInetAddress.h TInspectorImp.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjectSpy.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h TQClass.h TQComman,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4836,energy efficiency,core,core,4836,Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBrowser.h TBrowserImp.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TCanvasImp.h TColorGradient.h TColor.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TDatime.h TDirectory.h TEnv.h TError.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TGuiFactory.h TInetAddress.h TInspectorImp.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjectSpy.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h TQObject.h TRedirectOutputGuard.h TRe,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4897,energy efficiency,core,core,4897,Path /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBrowser.h TBrowserImp.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TCanvasImp.h TColorGradient.h TColor.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TDatime.h TDirectory.h TEnv.h TError.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TGuiFactory.h TInetAddress.h TInspectorImp.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjectSpy.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h TQObject.h TRedirectOutputGuard.h TRefCnt.h TRef.h TRegexp.h TRemoteObject.h TROOT.h TRootIOCtor.h,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:7709,energy efficiency,core,core,7709,ocessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h TQObject.h TRedirectOutputGuard.h TRefCnt.h TRef.h TRegexp.h TRemoteObject.h TROOT.h TRootIOCtor.h TStopwatch.h TStorage.h TString.h TStringLong.h TStyle.h TSysEvtHandler.h TSystemDirectory.h TSystemFile.h TSystem.h TTask.h TThreadSlots.h TTime.h TTimer.h TTimeStamp.h TUri.h TUrl.h TUUID.h TVersionCheck.h TVirtualAuth.h TVirtualFFT.h TVirtualGL.h TVirtualMonitoring.h TVirtualMutex.h TVirtualPadEditor.h TVirtualPad.h TVirtualPadPainter.h TVirtualPerfStats.h TVirtualPS.h TVirtualQConnection.h TVirtualRWMutex.h TVirtualTableInterface.h TVirtualViewer3D.h TVirtualX.h strlcpy.h snprintf.h ROOT/TSeq.hxx TArrayC.h TArrayD.h TArrayF.h TArray.h TArrayI.h TArrayL64.h TArrayL.h TArrayS.h TBits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h ROOT/RIntegerSequence.hxx ROOT/RMakeUnique.hxx ROOT/RNotFn.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/span.hxx ROOT/TypeTraits.hxx TMacOSXSystem.h TUnixSystem.h root_std_complex.h TClingRuntime.h TBaseClass.h TClassGenerator.h TClass.h TClassMenuItem.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TToggleGroup.h TToggle.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h Getline.h /Users/vvassilev/workspace/sources/root/core/base/inc/LinkDef.h . ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:5072,integrability,Messag,MessageTypes,5072,/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBrowser.h TBrowserImp.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TCanvasImp.h TColorGradient.h TColor.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TDatime.h TDirectory.h TEnv.h TError.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TGuiFactory.h TInetAddress.h TInspectorImp.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjectSpy.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h TQObject.h TRedirectOutputGuard.h TRefCnt.h TRef.h TRegexp.h TRemoteObject.h TROOT.h TRootIOCtor.h TStopwatch.h TStorage.h TString.h TStringLong.h TStyle.h TSysEvtHandler.h TSystemDirectory.h TSystemFile.h TSystem.h TTask.h TThreadSlots.h TTime.h TTimer.h TTimeStamp.h TUri.h T,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:5072,interoperability,Messag,MessageTypes,5072,/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBrowser.h TBrowserImp.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TCanvasImp.h TColorGradient.h TColor.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TDatime.h TDirectory.h TEnv.h TError.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TGuiFactory.h TInetAddress.h TInspectorImp.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjectSpy.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h TQObject.h TRedirectOutputGuard.h TRefCnt.h TRef.h TRegexp.h TRemoteObject.h TROOT.h TRootIOCtor.h TStopwatch.h TStorage.h TString.h TStringLong.h TStyle.h TSysEvtHandler.h TSystemDirectory.h TSystemFile.h TSystem.h TTask.h TThreadSlots.h TTime.h TTimer.h TTimeStamp.h TUri.h T,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:631,modifiability,Modul,Module,631,"[rootcling] Enable stack trace printout on crash.; Before:. ```. Segmentation fault. ```. After:. ```. rootcling_stage1 0x000000010ea2ba98 llvm::sys::PrintStackTrace(llvm::raw_ostream&) + 40. 1 rootcling_stage1 0x000000010ea2ad46 llvm::sys::RunSignalHandlers() + 86. 2 rootcling_stage1 0x000000010ea2bffe SignalHandler(int) + 270. 3 libsystem_platform.dylib 0x00007fff65610b3d _sigtramp + 29. 4 rootcling_stage1 0x000000010c7b68dd clang::operator==(clang::QualType const&, clang::QualType const&) + 29. 5 rootcling_stage1 0x000000010d531b20 clang::Preprocessor::getModuleHeaderToIncludeForDiagnostics(clang::SourceLocation, clang::Module*, clang::SourceLocation) + 48. 6 rootcling_stage1 0x000000010d95bfc7 clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535. 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Pa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:829,modifiability,Modul,Module,829,"[rootcling] Enable stack trace printout on crash.; Before:. ```. Segmentation fault. ```. After:. ```. rootcling_stage1 0x000000010ea2ba98 llvm::sys::PrintStackTrace(llvm::raw_ostream&) + 40. 1 rootcling_stage1 0x000000010ea2ad46 llvm::sys::RunSignalHandlers() + 86. 2 rootcling_stage1 0x000000010ea2bffe SignalHandler(int) + 270. 3 libsystem_platform.dylib 0x00007fff65610b3d _sigtramp + 29. 4 rootcling_stage1 0x000000010c7b68dd clang::operator==(clang::QualType const&, clang::QualType const&) + 29. 5 rootcling_stage1 0x000000010d531b20 clang::Preprocessor::getModuleHeaderToIncludeForDiagnostics(clang::SourceLocation, clang::Module*, clang::SourceLocation) + 48. 6 rootcling_stage1 0x000000010d95bfc7 clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535. 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Pa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:78,performance,fault,fault,78,"[rootcling] Enable stack trace printout on crash.; Before:. ```. Segmentation fault. ```. After:. ```. rootcling_stage1 0x000000010ea2ba98 llvm::sys::PrintStackTrace(llvm::raw_ostream&) + 40. 1 rootcling_stage1 0x000000010ea2ad46 llvm::sys::RunSignalHandlers() + 86. 2 rootcling_stage1 0x000000010ea2bffe SignalHandler(int) + 270. 3 libsystem_platform.dylib 0x00007fff65610b3d _sigtramp + 29. 4 rootcling_stage1 0x000000010c7b68dd clang::operator==(clang::QualType const&, clang::QualType const&) + 29. 5 rootcling_stage1 0x000000010d531b20 clang::Preprocessor::getModuleHeaderToIncludeForDiagnostics(clang::SourceLocation, clang::Module*, clang::SourceLocation) + 48. 6 rootcling_stage1 0x000000010d95bfc7 clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535. 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Pa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:78,reliability,fault,fault,78,"[rootcling] Enable stack trace printout on crash.; Before:. ```. Segmentation fault. ```. After:. ```. rootcling_stage1 0x000000010ea2ba98 llvm::sys::PrintStackTrace(llvm::raw_ostream&) + 40. 1 rootcling_stage1 0x000000010ea2ad46 llvm::sys::RunSignalHandlers() + 86. 2 rootcling_stage1 0x000000010ea2bffe SignalHandler(int) + 270. 3 libsystem_platform.dylib 0x00007fff65610b3d _sigtramp + 29. 4 rootcling_stage1 0x000000010c7b68dd clang::operator==(clang::QualType const&, clang::QualType const&) + 29. 5 rootcling_stage1 0x000000010d531b20 clang::Preprocessor::getModuleHeaderToIncludeForDiagnostics(clang::SourceLocation, clang::Module*, clang::SourceLocation) + 48. 6 rootcling_stage1 0x000000010d95bfc7 clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535. 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Pa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:720,reliability,diagno,diagnoseMissingImport,720,"[rootcling] Enable stack trace printout on crash.; Before:. ```. Segmentation fault. ```. After:. ```. rootcling_stage1 0x000000010ea2ba98 llvm::sys::PrintStackTrace(llvm::raw_ostream&) + 40. 1 rootcling_stage1 0x000000010ea2ad46 llvm::sys::RunSignalHandlers() + 86. 2 rootcling_stage1 0x000000010ea2bffe SignalHandler(int) + 270. 3 libsystem_platform.dylib 0x00007fff65610b3d _sigtramp + 29. 4 rootcling_stage1 0x000000010c7b68dd clang::operator==(clang::QualType const&, clang::QualType const&) + 29. 5 rootcling_stage1 0x000000010d531b20 clang::Preprocessor::getModuleHeaderToIncludeForDiagnostics(clang::SourceLocation, clang::Module*, clang::SourceLocation) + 48. 6 rootcling_stage1 0x000000010d95bfc7 clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535. 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Pa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:935,reliability,diagno,diagnoseMissingImport,935,"[rootcling] Enable stack trace printout on crash.; Before:. ```. Segmentation fault. ```. After:. ```. rootcling_stage1 0x000000010ea2ba98 llvm::sys::PrintStackTrace(llvm::raw_ostream&) + 40. 1 rootcling_stage1 0x000000010ea2ad46 llvm::sys::RunSignalHandlers() + 86. 2 rootcling_stage1 0x000000010ea2bffe SignalHandler(int) + 270. 3 libsystem_platform.dylib 0x00007fff65610b3d _sigtramp + 29. 4 rootcling_stage1 0x000000010c7b68dd clang::operator==(clang::QualType const&, clang::QualType const&) + 29. 5 rootcling_stage1 0x000000010d531b20 clang::Preprocessor::getModuleHeaderToIncludeForDiagnostics(clang::SourceLocation, clang::Module*, clang::SourceLocation) + 48. 6 rootcling_stage1 0x000000010d95bfc7 clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535. 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Pa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:1095,reliability,diagno,diagnoseTypo,1095,". rootcling_stage1 0x000000010ea2ba98 llvm::sys::PrintStackTrace(llvm::raw_ostream&) + 40. 1 rootcling_stage1 0x000000010ea2ad46 llvm::sys::RunSignalHandlers() + 86. 2 rootcling_stage1 0x000000010ea2bffe SignalHandler(int) + 270. 3 libsystem_platform.dylib 0x00007fff65610b3d _sigtramp + 29. 4 rootcling_stage1 0x000000010c7b68dd clang::operator==(clang::QualType const&, clang::QualType const&) + 29. 5 rootcling_stage1 0x000000010d531b20 clang::Preprocessor::getModuleHeaderToIncludeForDiagnostics(clang::SourceLocation, clang::Module*, clang::SourceLocation) + 48. 6 rootcling_stage1 0x000000010d95bfc7 clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535. 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::LateParsedAttrList*) + 6855. 13 rootcling_stage1 0x000000010d5f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:1268,reliability,diagno,diagnoseTypo,1268,"ling_stage1 0x000000010ea2bffe SignalHandler(int) + 270. 3 libsystem_platform.dylib 0x00007fff65610b3d _sigtramp + 29. 4 rootcling_stage1 0x000000010c7b68dd clang::operator==(clang::QualType const&, clang::QualType const&) + 29. 5 rootcling_stage1 0x000000010d531b20 clang::Preprocessor::getModuleHeaderToIncludeForDiagnostics(clang::SourceLocation, clang::Module*, clang::SourceLocation) + 48. 6 rootcling_stage1 0x000000010d95bfc7 clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535. 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::LateParsedAttrList*) + 6855. 13 rootcling_stage1 0x000000010d5f8a6a clang::Parser::ParseDeclOrFunctionDefInternal(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec&, clang::AccessSpecifier) + 138. 14 rootcling_stage1 0x0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:1408,reliability,Diagno,DiagnoseUnknownTypeName,1408,"010c7b68dd clang::operator==(clang::QualType const&, clang::QualType const&) + 29. 5 rootcling_stage1 0x000000010d531b20 clang::Preprocessor::getModuleHeaderToIncludeForDiagnostics(clang::SourceLocation, clang::Module*, clang::SourceLocation) + 48. 6 rootcling_stage1 0x000000010d95bfc7 clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535. 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::LateParsedAttrList*) + 6855. 13 rootcling_stage1 0x000000010d5f8a6a clang::Parser::ParseDeclOrFunctionDefInternal(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec&, clang::AccessSpecifier) + 138. 14 rootcling_stage1 0x000000010d5f8725 clang::Parser::ParseDeclarationOrFunctionDefinition(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::Acc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:78,safety,fault,fault,78,"[rootcling] Enable stack trace printout on crash.; Before:. ```. Segmentation fault. ```. After:. ```. rootcling_stage1 0x000000010ea2ba98 llvm::sys::PrintStackTrace(llvm::raw_ostream&) + 40. 1 rootcling_stage1 0x000000010ea2ad46 llvm::sys::RunSignalHandlers() + 86. 2 rootcling_stage1 0x000000010ea2bffe SignalHandler(int) + 270. 3 libsystem_platform.dylib 0x00007fff65610b3d _sigtramp + 29. 4 rootcling_stage1 0x000000010c7b68dd clang::operator==(clang::QualType const&, clang::QualType const&) + 29. 5 rootcling_stage1 0x000000010d531b20 clang::Preprocessor::getModuleHeaderToIncludeForDiagnostics(clang::SourceLocation, clang::Module*, clang::SourceLocation) + 48. 6 rootcling_stage1 0x000000010d95bfc7 clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535. 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Pa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:631,safety,Modul,Module,631,"[rootcling] Enable stack trace printout on crash.; Before:. ```. Segmentation fault. ```. After:. ```. rootcling_stage1 0x000000010ea2ba98 llvm::sys::PrintStackTrace(llvm::raw_ostream&) + 40. 1 rootcling_stage1 0x000000010ea2ad46 llvm::sys::RunSignalHandlers() + 86. 2 rootcling_stage1 0x000000010ea2bffe SignalHandler(int) + 270. 3 libsystem_platform.dylib 0x00007fff65610b3d _sigtramp + 29. 4 rootcling_stage1 0x000000010c7b68dd clang::operator==(clang::QualType const&, clang::QualType const&) + 29. 5 rootcling_stage1 0x000000010d531b20 clang::Preprocessor::getModuleHeaderToIncludeForDiagnostics(clang::SourceLocation, clang::Module*, clang::SourceLocation) + 48. 6 rootcling_stage1 0x000000010d95bfc7 clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535. 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Pa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:829,safety,Modul,Module,829,"[rootcling] Enable stack trace printout on crash.; Before:. ```. Segmentation fault. ```. After:. ```. rootcling_stage1 0x000000010ea2ba98 llvm::sys::PrintStackTrace(llvm::raw_ostream&) + 40. 1 rootcling_stage1 0x000000010ea2ad46 llvm::sys::RunSignalHandlers() + 86. 2 rootcling_stage1 0x000000010ea2bffe SignalHandler(int) + 270. 3 libsystem_platform.dylib 0x00007fff65610b3d _sigtramp + 29. 4 rootcling_stage1 0x000000010c7b68dd clang::operator==(clang::QualType const&, clang::QualType const&) + 29. 5 rootcling_stage1 0x000000010d531b20 clang::Preprocessor::getModuleHeaderToIncludeForDiagnostics(clang::SourceLocation, clang::Module*, clang::SourceLocation) + 48. 6 rootcling_stage1 0x000000010d95bfc7 clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535. 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Pa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:305,security,Sign,SignalHandler,305,"[rootcling] Enable stack trace printout on crash.; Before:. ```. Segmentation fault. ```. After:. ```. rootcling_stage1 0x000000010ea2ba98 llvm::sys::PrintStackTrace(llvm::raw_ostream&) + 40. 1 rootcling_stage1 0x000000010ea2ad46 llvm::sys::RunSignalHandlers() + 86. 2 rootcling_stage1 0x000000010ea2bffe SignalHandler(int) + 270. 3 libsystem_platform.dylib 0x00007fff65610b3d _sigtramp + 29. 4 rootcling_stage1 0x000000010c7b68dd clang::operator==(clang::QualType const&, clang::QualType const&) + 29. 5 rootcling_stage1 0x000000010d531b20 clang::Preprocessor::getModuleHeaderToIncludeForDiagnostics(clang::SourceLocation, clang::Module*, clang::SourceLocation) + 48. 6 rootcling_stage1 0x000000010d95bfc7 clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535. 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Pa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:1439,security,Ident,IdentifierInfo,1439,"==(clang::QualType const&, clang::QualType const&) + 29. 5 rootcling_stage1 0x000000010d531b20 clang::Preprocessor::getModuleHeaderToIncludeForDiagnostics(clang::SourceLocation, clang::Module*, clang::SourceLocation) + 48. 6 rootcling_stage1 0x000000010d95bfc7 clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535. 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::LateParsedAttrList*) + 6855. 13 rootcling_stage1 0x000000010d5f8a6a clang::Parser::ParseDeclOrFunctionDefInternal(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec&, clang::AccessSpecifier) + 138. 14 rootcling_stage1 0x000000010d5f8725 clang::Parser::ParseDeclarationOrFunctionDefinition(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) + 373. 15 ro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:1726,security,Access,AccessSpecifier,1726,"gImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535. 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::LateParsedAttrList*) + 6855. 13 rootcling_stage1 0x000000010d5f8a6a clang::Parser::ParseDeclOrFunctionDefInternal(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec&, clang::AccessSpecifier) + 138. 14 rootcling_stage1 0x000000010d5f8725 clang::Parser::ParseDeclarationOrFunctionDefinition(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) + 373. 15 rootcling_stage1 0x000000010d5f7477 clang::Parser::ParseExternalDeclaration(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) + 2423. 16 rootcling_stage1 0x000000010d5f641c clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&) + 588. 17 rootcling_stage1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:1974,security,Access,AccessSpecifier,1974,"ang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::LateParsedAttrList*) + 6855. 13 rootcling_stage1 0x000000010d5f8a6a clang::Parser::ParseDeclOrFunctionDefInternal(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec&, clang::AccessSpecifier) + 138. 14 rootcling_stage1 0x000000010d5f8725 clang::Parser::ParseDeclarationOrFunctionDefinition(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) + 373. 15 rootcling_stage1 0x000000010d5f7477 clang::Parser::ParseExternalDeclaration(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) + 2423. 16 rootcling_stage1 0x000000010d5f641c clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&) + 588. 17 rootcling_stage1 0x000000010cd68a90 cling::IncrementalParser::ParseInternal(llvm::StringRef) + 2704. 18 rootcling_stage1 0x000000010cd6ca91 cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) + 81. 19 rootcling_stage1 0x000000010cd",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:2227,security,Access,AccessSpecifier,2227," 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::LateParsedAttrList*) + 6855. 13 rootcling_stage1 0x000000010d5f8a6a clang::Parser::ParseDeclOrFunctionDefInternal(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec&, clang::AccessSpecifier) + 138. 14 rootcling_stage1 0x000000010d5f8725 clang::Parser::ParseDeclarationOrFunctionDefinition(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) + 373. 15 rootcling_stage1 0x000000010d5f7477 clang::Parser::ParseExternalDeclaration(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) + 2423. 16 rootcling_stage1 0x000000010d5f641c clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&) + 588. 17 rootcling_stage1 0x000000010cd68a90 cling::IncrementalParser::ParseInternal(llvm::StringRef) + 2704. 18 rootcling_stage1 0x000000010cd6ca91 cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) + 81. 19 rootcling_stage1 0x000000010cd94044 cling::Interpreter::DeclareInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const + 884. 20 rootcling_stage1 0x000000010cd9110e cling::In",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:2417,security,Access,AccessSpecifier,2417,"peName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::LateParsedAttrList*) + 6855. 13 rootcling_stage1 0x000000010d5f8a6a clang::Parser::ParseDeclOrFunctionDefInternal(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec&, clang::AccessSpecifier) + 138. 14 rootcling_stage1 0x000000010d5f8725 clang::Parser::ParseDeclarationOrFunctionDefinition(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) + 373. 15 rootcling_stage1 0x000000010d5f7477 clang::Parser::ParseExternalDeclaration(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) + 2423. 16 rootcling_stage1 0x000000010d5f641c clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&) + 588. 17 rootcling_stage1 0x000000010cd68a90 cling::IncrementalParser::ParseInternal(llvm::StringRef) + 2704. 18 rootcling_stage1 0x000000010cd6ca91 cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) + 81. 19 rootcling_stage1 0x000000010cd94044 cling::Interpreter::DeclareInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const + 884. 20 rootcling_stage1 0x000000010cd9110e cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::Transaction**) + 110. 21 rootcling_stage1 0x000000010c964389 RootCling",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:25,testability,trace,trace,25,"[rootcling] Enable stack trace printout on crash.; Before:. ```. Segmentation fault. ```. After:. ```. rootcling_stage1 0x000000010ea2ba98 llvm::sys::PrintStackTrace(llvm::raw_ostream&) + 40. 1 rootcling_stage1 0x000000010ea2ad46 llvm::sys::RunSignalHandlers() + 86. 2 rootcling_stage1 0x000000010ea2bffe SignalHandler(int) + 270. 3 libsystem_platform.dylib 0x00007fff65610b3d _sigtramp + 29. 4 rootcling_stage1 0x000000010c7b68dd clang::operator==(clang::QualType const&, clang::QualType const&) + 29. 5 rootcling_stage1 0x000000010d531b20 clang::Preprocessor::getModuleHeaderToIncludeForDiagnostics(clang::SourceLocation, clang::Module*, clang::SourceLocation) + 48. 6 rootcling_stage1 0x000000010d95bfc7 clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535. 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Pa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:720,testability,diagno,diagnoseMissingImport,720,"[rootcling] Enable stack trace printout on crash.; Before:. ```. Segmentation fault. ```. After:. ```. rootcling_stage1 0x000000010ea2ba98 llvm::sys::PrintStackTrace(llvm::raw_ostream&) + 40. 1 rootcling_stage1 0x000000010ea2ad46 llvm::sys::RunSignalHandlers() + 86. 2 rootcling_stage1 0x000000010ea2bffe SignalHandler(int) + 270. 3 libsystem_platform.dylib 0x00007fff65610b3d _sigtramp + 29. 4 rootcling_stage1 0x000000010c7b68dd clang::operator==(clang::QualType const&, clang::QualType const&) + 29. 5 rootcling_stage1 0x000000010d531b20 clang::Preprocessor::getModuleHeaderToIncludeForDiagnostics(clang::SourceLocation, clang::Module*, clang::SourceLocation) + 48. 6 rootcling_stage1 0x000000010d95bfc7 clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535. 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Pa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:935,testability,diagno,diagnoseMissingImport,935,"[rootcling] Enable stack trace printout on crash.; Before:. ```. Segmentation fault. ```. After:. ```. rootcling_stage1 0x000000010ea2ba98 llvm::sys::PrintStackTrace(llvm::raw_ostream&) + 40. 1 rootcling_stage1 0x000000010ea2ad46 llvm::sys::RunSignalHandlers() + 86. 2 rootcling_stage1 0x000000010ea2bffe SignalHandler(int) + 270. 3 libsystem_platform.dylib 0x00007fff65610b3d _sigtramp + 29. 4 rootcling_stage1 0x000000010c7b68dd clang::operator==(clang::QualType const&, clang::QualType const&) + 29. 5 rootcling_stage1 0x000000010d531b20 clang::Preprocessor::getModuleHeaderToIncludeForDiagnostics(clang::SourceLocation, clang::Module*, clang::SourceLocation) + 48. 6 rootcling_stage1 0x000000010d95bfc7 clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535. 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Pa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:1095,testability,diagno,diagnoseTypo,1095,". rootcling_stage1 0x000000010ea2ba98 llvm::sys::PrintStackTrace(llvm::raw_ostream&) + 40. 1 rootcling_stage1 0x000000010ea2ad46 llvm::sys::RunSignalHandlers() + 86. 2 rootcling_stage1 0x000000010ea2bffe SignalHandler(int) + 270. 3 libsystem_platform.dylib 0x00007fff65610b3d _sigtramp + 29. 4 rootcling_stage1 0x000000010c7b68dd clang::operator==(clang::QualType const&, clang::QualType const&) + 29. 5 rootcling_stage1 0x000000010d531b20 clang::Preprocessor::getModuleHeaderToIncludeForDiagnostics(clang::SourceLocation, clang::Module*, clang::SourceLocation) + 48. 6 rootcling_stage1 0x000000010d95bfc7 clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535. 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::LateParsedAttrList*) + 6855. 13 rootcling_stage1 0x000000010d5f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:1268,testability,diagno,diagnoseTypo,1268,"ling_stage1 0x000000010ea2bffe SignalHandler(int) + 270. 3 libsystem_platform.dylib 0x00007fff65610b3d _sigtramp + 29. 4 rootcling_stage1 0x000000010c7b68dd clang::operator==(clang::QualType const&, clang::QualType const&) + 29. 5 rootcling_stage1 0x000000010d531b20 clang::Preprocessor::getModuleHeaderToIncludeForDiagnostics(clang::SourceLocation, clang::Module*, clang::SourceLocation) + 48. 6 rootcling_stage1 0x000000010d95bfc7 clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535. 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::LateParsedAttrList*) + 6855. 13 rootcling_stage1 0x000000010d5f8a6a clang::Parser::ParseDeclOrFunctionDefInternal(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec&, clang::AccessSpecifier) + 138. 14 rootcling_stage1 0x0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:1408,testability,Diagno,DiagnoseUnknownTypeName,1408,"010c7b68dd clang::operator==(clang::QualType const&, clang::QualType const&) + 29. 5 rootcling_stage1 0x000000010d531b20 clang::Preprocessor::getModuleHeaderToIncludeForDiagnostics(clang::SourceLocation, clang::Module*, clang::SourceLocation) + 48. 6 rootcling_stage1 0x000000010d95bfc7 clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535. 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395. 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441. 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51. 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985. 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288. 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::LateParsedAttrList*) + 6855. 13 rootcling_stage1 0x000000010d5f8a6a clang::Parser::ParseDeclOrFunctionDefInternal(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec&, clang::AccessSpecifier) + 138. 14 rootcling_stage1 0x000000010d5f8725 clang::Parser::ParseDeclarationOrFunctionDefinition(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::Acc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:3723,usability,User,Users,3723,"g_stage1 0x000000010cd68a90 cling::IncrementalParser::ParseInternal(llvm::StringRef) + 2704. 18 rootcling_stage1 0x000000010cd6ca91 cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) + 81. 19 rootcling_stage1 0x000000010cd94044 cling::Interpreter::DeclareInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const + 884. 20 rootcling_stage1 0x000000010cd9110e cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::Transaction**) + 110. 21 rootcling_stage1 0x000000010c964389 RootClingMain(int, char**, bool, bool) + 68009. 22 rootcling_stage1 0x000000010c989685 ROOT_rootcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/cli",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:3838,usability,User,Users,3838,"000000010cd6ca91 cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) + 81. 19 rootcling_stage1 0x000000010cd94044 cling::Interpreter::DeclareInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const + 884. 20 rootcling_stage1 0x000000010cd9110e cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::Transaction**) + 110. 21 rootcling_stage1 0x000000010c964389 RootClingMain(int, char**, bool, bool) + 68009. 22 rootcling_stage1 0x000000010c989685 ROOT_rootcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:3905,usability,User,Users,3905," cling::CompilationOptions const&) + 81. 19 rootcling_stage1 0x000000010cd94044 cling::Interpreter::DeclareInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const + 884. 20 rootcling_stage1 0x000000010cd9110e cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::Transaction**) + 110. 21 rootcling_stage1 0x000000010c964389 RootClingMain(int, char**, bool, bool) + 68009. 22 rootcling_stage1 0x000000010c989685 ROOT_rootcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -write",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:3958,usability,User,Users,3958,"_stage1 0x000000010cd94044 cling::Interpreter::DeclareInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const + 884. 20 rootcling_stage1 0x000000010cd9110e cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::Transaction**) + 110. 21 rootcling_stage1 0x000000010c964389 RootClingMain(int, char**, bool, bool) + 68009. 22 rootcling_stage1 0x000000010c989685 ROOT_rootcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4018,usability,User,Users,4018,"al(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const + 884. 20 rootcling_stage1 0x000000010cd9110e cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::Transaction**) + 110. 21 rootcling_stage1 0x000000010c964389 RootClingMain(int, char**, bool, bool) + 68009. 22 rootcling_stage1 0x000000010c989685 ROOT_rootcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h B",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4079,usability,User,Users,4079,"std::__1::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const + 884. 20 rootcling_stage1 0x000000010cd9110e cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::Transaction**) + 110. 21 rootcling_stage1 0x000000010c964389 RootClingMain(int, char**, bool, bool) + 68009. 22 rootcling_stage1 0x000000010c989685 ROOT_rootcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTyp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4121,usability,User,Users,4121,":CompilationOptions const&, cling::Transaction**) const + 884. 20 rootcling_stage1 0x000000010cd9110e cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::Transaction**) + 110. 21 rootcling_stage1 0x000000010c964389 RootClingMain(int, char**, bool, bool) + 68009. 22 rootcling_stage1 0x000000010c989685 ROOT_rootcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4173,usability,User,Users,4173,"nst + 884. 20 rootcling_stage1 0x000000010cd9110e cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::Transaction**) + 110. 21 rootcling_stage1 0x000000010c964389 RootClingMain(int, char**, bool, bool) + 68009. 22 rootcling_stage1 0x000000010c989685 ROOT_rootcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4222,usability,User,Users,4222," cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::Transaction**) + 110. 21 rootcling_stage1 0x000000010c964389 RootClingMain(int, char**, bool, bool) + 68009. 22 rootcling_stage1 0x000000010c989685 ROOT_rootcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttP",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4278,usability,User,Users,4278,", std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::Transaction**) + 110. 21 rootcling_stage1 0x000000010c964389 RootClingMain(int, char**, bool, bool) + 68009. 22 rootcling_stage1 0x000000010c989685 ROOT_rootcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBrowser.h TBrows",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4334,usability,User,Users,4334," > const&, cling::Transaction**) + 110. 21 rootcling_stage1 0x000000010c964389 RootClingMain(int, char**, bool, bool) + 68009. 22 rootcling_stage1 0x000000010c989685 ROOT_rootcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBrowser.h TBrowserImp.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TCanvasIm",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4390,usability,User,Users,4390,"ge1 0x000000010c964389 RootClingMain(int, char**, bool, bool) + 68009. 22 rootcling_stage1 0x000000010c989685 ROOT_rootcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBrowser.h TBrowserImp.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TCanvasImp.h TColorGradient.h TColor.h TContextMenu.h TContextMen",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4446,usability,User,Users,4446,bool) + 68009. 22 rootcling_stage1 0x000000010c989685 ROOT_rootcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBrowser.h TBrowserImp.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TCanvasImp.h TColorGradient.h TColor.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TDatime.h TDirectory.h TEnv.h TE,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4508,usability,User,Users,4508,tcling_Driver + 1381. 23 rootcling_stage1 0x000000010c76db68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBrowser.h TBrowserImp.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TCanvasImp.h TColorGradient.h TColor.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TDatime.h TDirectory.h TEnv.h TError.h TException.h TExec.h TFileCollection.h TFileInfo.h TFol,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4566,usability,User,Users,4566,68 main + 104. 24 libdyld.dylib 0x00007fff65427085 start + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBrowser.h TBrowserImp.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TCanvasImp.h TColorGradient.h TColor.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TDatime.h TDirectory.h TEnv.h TError.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TGuiFactory.h TInetAddress.h TInspectorImp.h TMacro.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4622,usability,User,Users,4622, + 1. 25 libdyld.dylib 0x00000000000000e5 start + 2596114529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBrowser.h TBrowserImp.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TCanvasImp.h TColorGradient.h TColor.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TDatime.h TDirectory.h TEnv.h TError.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TGuiFactory.h TInetAddress.h TInspectorImp.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4679,usability,User,Users,4679,529. Stack dump:. 0.	Program arguments: /Users/vvassilev/workspace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBrowser.h TBrowserImp.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TCanvasImp.h TColorGradient.h TColor.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TDatime.h TDirectory.h TEnv.h TError.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TGuiFactory.h TInetAddress.h TInspectorImp.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjectSpy.h TObjStrin,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4741,usability,User,Users,4741,pace/builds/root/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBrowser.h TBrowserImp.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TCanvasImp.h TColorGradient.h TColor.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TDatime.h TDirectory.h TEnv.h TError.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TGuiFactory.h TInetAddress.h TInspectorImp.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjectSpy.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcess,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4797,usability,User,Users,4797,ge1 -v2 -f G__Core.cxx -cxxmodule -s /Users/vvassilev/workspace/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBrowser.h TBrowserImp.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TCanvasImp.h TColorGradient.h TColor.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TDatime.h TDirectory.h TEnv.h TError.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TGuiFactory.h TInetAddress.h TInspectorImp.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjectSpy.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:4858,usability,User,Users,4858,ce/builds/root/lib/libCore.so -excludePath /Users/vvassilev/workspace/sources/root -excludePath /Users/vvassilev/workspace/builds/root -rml libCore.so -rmf /Users/vvassilev/workspace/builds/root/lib/libCore.rootmap -I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBrowser.h TBrowserImp.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TCanvasImp.h TColorGradient.h TColor.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TDatime.h TDirectory.h TEnv.h TError.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TGuiFactory.h TInetAddress.h TInspectorImp.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjectSpy.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h TQObject.h TRedirectOutputGuard.h TRefCnt.h TRef.h TRegexp.h,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3586:7670,usability,User,Users,7670,ocessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h TQObject.h TRedirectOutputGuard.h TRefCnt.h TRef.h TRegexp.h TRemoteObject.h TROOT.h TRootIOCtor.h TStopwatch.h TStorage.h TString.h TStringLong.h TStyle.h TSysEvtHandler.h TSystemDirectory.h TSystemFile.h TSystem.h TTask.h TThreadSlots.h TTime.h TTimer.h TTimeStamp.h TUri.h TUrl.h TUUID.h TVersionCheck.h TVirtualAuth.h TVirtualFFT.h TVirtualGL.h TVirtualMonitoring.h TVirtualMutex.h TVirtualPadEditor.h TVirtualPad.h TVirtualPadPainter.h TVirtualPerfStats.h TVirtualPS.h TVirtualQConnection.h TVirtualRWMutex.h TVirtualTableInterface.h TVirtualViewer3D.h TVirtualX.h strlcpy.h snprintf.h ROOT/TSeq.hxx TArrayC.h TArrayD.h TArrayF.h TArray.h TArrayI.h TArrayL64.h TArrayL.h TArrayS.h TBits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h ROOT/RIntegerSequence.hxx ROOT/RMakeUnique.hxx ROOT/RNotFn.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/span.hxx ROOT/TypeTraits.hxx TMacOSXSystem.h TUnixSystem.h root_std_complex.h TClingRuntime.h TBaseClass.h TClassGenerator.h TClass.h TClassMenuItem.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TToggleGroup.h TToggle.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h Getline.h /Users/vvassilev/workspace/sources/root/core/base/inc/LinkDef.h . ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3586
https://github.com/root-project/root/pull/3587:188,availability,error,errors,188,[cxxmodules] Finish the revert in root-project/root@533dd5e50d7; Duplicating Cling_Runtime and Cling_Runtime_Extra in both module.modulemap. and module.modulemap.build causes redefinition errors if -Dbuiltin_clang=Off. We should not duplicate the cling runtime modules in both modulemaps.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3587
https://github.com/root-project/root/pull/3587:123,deployability,modul,module,123,[cxxmodules] Finish the revert in root-project/root@533dd5e50d7; Duplicating Cling_Runtime and Cling_Runtime_Extra in both module.modulemap. and module.modulemap.build causes redefinition errors if -Dbuiltin_clang=Off. We should not duplicate the cling runtime modules in both modulemaps.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3587
https://github.com/root-project/root/pull/3587:130,deployability,modul,modulemap,130,[cxxmodules] Finish the revert in root-project/root@533dd5e50d7; Duplicating Cling_Runtime and Cling_Runtime_Extra in both module.modulemap. and module.modulemap.build causes redefinition errors if -Dbuiltin_clang=Off. We should not duplicate the cling runtime modules in both modulemaps.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3587
https://github.com/root-project/root/pull/3587:145,deployability,modul,module,145,[cxxmodules] Finish the revert in root-project/root@533dd5e50d7; Duplicating Cling_Runtime and Cling_Runtime_Extra in both module.modulemap. and module.modulemap.build causes redefinition errors if -Dbuiltin_clang=Off. We should not duplicate the cling runtime modules in both modulemaps.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3587
https://github.com/root-project/root/pull/3587:152,deployability,modul,modulemap,152,[cxxmodules] Finish the revert in root-project/root@533dd5e50d7; Duplicating Cling_Runtime and Cling_Runtime_Extra in both module.modulemap. and module.modulemap.build causes redefinition errors if -Dbuiltin_clang=Off. We should not duplicate the cling runtime modules in both modulemaps.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3587
https://github.com/root-project/root/pull/3587:162,deployability,build,build,162,[cxxmodules] Finish the revert in root-project/root@533dd5e50d7; Duplicating Cling_Runtime and Cling_Runtime_Extra in both module.modulemap. and module.modulemap.build causes redefinition errors if -Dbuiltin_clang=Off. We should not duplicate the cling runtime modules in both modulemaps.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3587
https://github.com/root-project/root/pull/3587:261,deployability,modul,modules,261,[cxxmodules] Finish the revert in root-project/root@533dd5e50d7; Duplicating Cling_Runtime and Cling_Runtime_Extra in both module.modulemap. and module.modulemap.build causes redefinition errors if -Dbuiltin_clang=Off. We should not duplicate the cling runtime modules in both modulemaps.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3587
https://github.com/root-project/root/pull/3587:277,deployability,modul,modulemaps,277,[cxxmodules] Finish the revert in root-project/root@533dd5e50d7; Duplicating Cling_Runtime and Cling_Runtime_Extra in both module.modulemap. and module.modulemap.build causes redefinition errors if -Dbuiltin_clang=Off. We should not duplicate the cling runtime modules in both modulemaps.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3587
https://github.com/root-project/root/pull/3587:123,modifiability,modul,module,123,[cxxmodules] Finish the revert in root-project/root@533dd5e50d7; Duplicating Cling_Runtime and Cling_Runtime_Extra in both module.modulemap. and module.modulemap.build causes redefinition errors if -Dbuiltin_clang=Off. We should not duplicate the cling runtime modules in both modulemaps.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3587
https://github.com/root-project/root/pull/3587:130,modifiability,modul,modulemap,130,[cxxmodules] Finish the revert in root-project/root@533dd5e50d7; Duplicating Cling_Runtime and Cling_Runtime_Extra in both module.modulemap. and module.modulemap.build causes redefinition errors if -Dbuiltin_clang=Off. We should not duplicate the cling runtime modules in both modulemaps.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3587
https://github.com/root-project/root/pull/3587:145,modifiability,modul,module,145,[cxxmodules] Finish the revert in root-project/root@533dd5e50d7; Duplicating Cling_Runtime and Cling_Runtime_Extra in both module.modulemap. and module.modulemap.build causes redefinition errors if -Dbuiltin_clang=Off. We should not duplicate the cling runtime modules in both modulemaps.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3587
https://github.com/root-project/root/pull/3587:152,modifiability,modul,modulemap,152,[cxxmodules] Finish the revert in root-project/root@533dd5e50d7; Duplicating Cling_Runtime and Cling_Runtime_Extra in both module.modulemap. and module.modulemap.build causes redefinition errors if -Dbuiltin_clang=Off. We should not duplicate the cling runtime modules in both modulemaps.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3587
https://github.com/root-project/root/pull/3587:261,modifiability,modul,modules,261,[cxxmodules] Finish the revert in root-project/root@533dd5e50d7; Duplicating Cling_Runtime and Cling_Runtime_Extra in both module.modulemap. and module.modulemap.build causes redefinition errors if -Dbuiltin_clang=Off. We should not duplicate the cling runtime modules in both modulemaps.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3587
https://github.com/root-project/root/pull/3587:277,modifiability,modul,modulemaps,277,[cxxmodules] Finish the revert in root-project/root@533dd5e50d7; Duplicating Cling_Runtime and Cling_Runtime_Extra in both module.modulemap. and module.modulemap.build causes redefinition errors if -Dbuiltin_clang=Off. We should not duplicate the cling runtime modules in both modulemaps.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3587
https://github.com/root-project/root/pull/3587:188,performance,error,errors,188,[cxxmodules] Finish the revert in root-project/root@533dd5e50d7; Duplicating Cling_Runtime and Cling_Runtime_Extra in both module.modulemap. and module.modulemap.build causes redefinition errors if -Dbuiltin_clang=Off. We should not duplicate the cling runtime modules in both modulemaps.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3587
https://github.com/root-project/root/pull/3587:123,safety,modul,module,123,[cxxmodules] Finish the revert in root-project/root@533dd5e50d7; Duplicating Cling_Runtime and Cling_Runtime_Extra in both module.modulemap. and module.modulemap.build causes redefinition errors if -Dbuiltin_clang=Off. We should not duplicate the cling runtime modules in both modulemaps.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3587
https://github.com/root-project/root/pull/3587:130,safety,modul,modulemap,130,[cxxmodules] Finish the revert in root-project/root@533dd5e50d7; Duplicating Cling_Runtime and Cling_Runtime_Extra in both module.modulemap. and module.modulemap.build causes redefinition errors if -Dbuiltin_clang=Off. We should not duplicate the cling runtime modules in both modulemaps.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3587
https://github.com/root-project/root/pull/3587:145,safety,modul,module,145,[cxxmodules] Finish the revert in root-project/root@533dd5e50d7; Duplicating Cling_Runtime and Cling_Runtime_Extra in both module.modulemap. and module.modulemap.build causes redefinition errors if -Dbuiltin_clang=Off. We should not duplicate the cling runtime modules in both modulemaps.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3587
https://github.com/root-project/root/pull/3587:152,safety,modul,modulemap,152,[cxxmodules] Finish the revert in root-project/root@533dd5e50d7; Duplicating Cling_Runtime and Cling_Runtime_Extra in both module.modulemap. and module.modulemap.build causes redefinition errors if -Dbuiltin_clang=Off. We should not duplicate the cling runtime modules in both modulemaps.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3587
https://github.com/root-project/root/pull/3587:188,safety,error,errors,188,[cxxmodules] Finish the revert in root-project/root@533dd5e50d7; Duplicating Cling_Runtime and Cling_Runtime_Extra in both module.modulemap. and module.modulemap.build causes redefinition errors if -Dbuiltin_clang=Off. We should not duplicate the cling runtime modules in both modulemaps.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3587
https://github.com/root-project/root/pull/3587:261,safety,modul,modules,261,[cxxmodules] Finish the revert in root-project/root@533dd5e50d7; Duplicating Cling_Runtime and Cling_Runtime_Extra in both module.modulemap. and module.modulemap.build causes redefinition errors if -Dbuiltin_clang=Off. We should not duplicate the cling runtime modules in both modulemaps.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3587
https://github.com/root-project/root/pull/3587:277,safety,modul,modulemaps,277,[cxxmodules] Finish the revert in root-project/root@533dd5e50d7; Duplicating Cling_Runtime and Cling_Runtime_Extra in both module.modulemap. and module.modulemap.build causes redefinition errors if -Dbuiltin_clang=Off. We should not duplicate the cling runtime modules in both modulemaps.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3587
https://github.com/root-project/root/pull/3587:188,usability,error,errors,188,[cxxmodules] Finish the revert in root-project/root@533dd5e50d7; Duplicating Cling_Runtime and Cling_Runtime_Extra in both module.modulemap. and module.modulemap.build causes redefinition errors if -Dbuiltin_clang=Off. We should not duplicate the cling runtime modules in both modulemaps.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3587
https://github.com/root-project/root/pull/3589:198,availability,error,error,198,"Revert ""Reduced ExcludeModules by one""; This reverts commit 3efc1356fcd48771c821314fab6c4427078480bd. `/mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/tutorials/hist/ContourList.C:23:19: error: expected unqualified-id. const Double_t PI = TMath::Pi();. /usr/share/R/include/R_ext/Constants.h:36:24: note: expanded from macro 'PI'. #define PI M_PI. /usr/include/math.h:777:16: note: expanded from macro M_PI. CMake Error at /mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/cmake/modules/RootTestDriver.cmake:230 (message):. error code: 1`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3589
https://github.com/root-project/root/pull/3589:425,availability,Error,Error,425,"Revert ""Reduced ExcludeModules by one""; This reverts commit 3efc1356fcd48771c821314fab6c4427078480bd. `/mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/tutorials/hist/ContourList.C:23:19: error: expected unqualified-id. const Double_t PI = TMath::Pi();. /usr/share/R/include/R_ext/Constants.h:36:24: note: expanded from macro 'PI'. #define PI M_PI. /usr/include/math.h:777:16: note: expanded from macro M_PI. CMake Error at /mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/cmake/modules/RootTestDriver.cmake:230 (message):. error code: 1`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3589
https://github.com/root-project/root/pull/3589:544,availability,error,error,544,"Revert ""Reduced ExcludeModules by one""; This reverts commit 3efc1356fcd48771c821314fab6c4427078480bd. `/mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/tutorials/hist/ContourList.C:23:19: error: expected unqualified-id. const Double_t PI = TMath::Pi();. /usr/share/R/include/R_ext/Constants.h:36:24: note: expanded from macro 'PI'. #define PI M_PI. /usr/include/math.h:777:16: note: expanded from macro M_PI. CMake Error at /mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/cmake/modules/RootTestDriver.cmake:230 (message):. error code: 1`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3589
https://github.com/root-project/root/pull/3589:108,deployability,build,build,108,"Revert ""Reduced ExcludeModules by one""; This reverts commit 3efc1356fcd48771c821314fab6c4427078480bd. `/mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/tutorials/hist/ContourList.C:23:19: error: expected unqualified-id. const Double_t PI = TMath::Pi();. /usr/share/R/include/R_ext/Constants.h:36:24: note: expanded from macro 'PI'. #define PI M_PI. /usr/include/math.h:777:16: note: expanded from macro M_PI. CMake Error at /mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/cmake/modules/RootTestDriver.cmake:230 (message):. error code: 1`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3589
https://github.com/root-project/root/pull/3589:439,deployability,build,build,439,"Revert ""Reduced ExcludeModules by one""; This reverts commit 3efc1356fcd48771c821314fab6c4427078480bd. `/mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/tutorials/hist/ContourList.C:23:19: error: expected unqualified-id. const Double_t PI = TMath::Pi();. /usr/share/R/include/R_ext/Constants.h:36:24: note: expanded from macro 'PI'. #define PI M_PI. /usr/include/math.h:777:16: note: expanded from macro M_PI. CMake Error at /mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/cmake/modules/RootTestDriver.cmake:230 (message):. error code: 1`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3589
https://github.com/root-project/root/pull/3589:499,deployability,modul,modules,499,"Revert ""Reduced ExcludeModules by one""; This reverts commit 3efc1356fcd48771c821314fab6c4427078480bd. `/mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/tutorials/hist/ContourList.C:23:19: error: expected unqualified-id. const Double_t PI = TMath::Pi();. /usr/share/R/include/R_ext/Constants.h:36:24: note: expanded from macro 'PI'. #define PI M_PI. /usr/include/math.h:777:16: note: expanded from macro M_PI. CMake Error at /mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/cmake/modules/RootTestDriver.cmake:230 (message):. error code: 1`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3589
https://github.com/root-project/root/pull/3589:8,energy efficiency,Reduc,Reduced,8,"Revert ""Reduced ExcludeModules by one""; This reverts commit 3efc1356fcd48771c821314fab6c4427078480bd. `/mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/tutorials/hist/ContourList.C:23:19: error: expected unqualified-id. const Double_t PI = TMath::Pi();. /usr/share/R/include/R_ext/Constants.h:36:24: note: expanded from macro 'PI'. #define PI M_PI. /usr/include/math.h:777:16: note: expanded from macro M_PI. CMake Error at /mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/cmake/modules/RootTestDriver.cmake:230 (message):. error code: 1`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3589
https://github.com/root-project/root/pull/3589:533,integrability,messag,message,533,"Revert ""Reduced ExcludeModules by one""; This reverts commit 3efc1356fcd48771c821314fab6c4427078480bd. `/mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/tutorials/hist/ContourList.C:23:19: error: expected unqualified-id. const Double_t PI = TMath::Pi();. /usr/share/R/include/R_ext/Constants.h:36:24: note: expanded from macro 'PI'. #define PI M_PI. /usr/include/math.h:777:16: note: expanded from macro M_PI. CMake Error at /mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/cmake/modules/RootTestDriver.cmake:230 (message):. error code: 1`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3589
https://github.com/root-project/root/pull/3589:269,interoperability,share,share,269,"Revert ""Reduced ExcludeModules by one""; This reverts commit 3efc1356fcd48771c821314fab6c4427078480bd. `/mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/tutorials/hist/ContourList.C:23:19: error: expected unqualified-id. const Double_t PI = TMath::Pi();. /usr/share/R/include/R_ext/Constants.h:36:24: note: expanded from macro 'PI'. #define PI M_PI. /usr/include/math.h:777:16: note: expanded from macro M_PI. CMake Error at /mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/cmake/modules/RootTestDriver.cmake:230 (message):. error code: 1`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3589
https://github.com/root-project/root/pull/3589:533,interoperability,messag,message,533,"Revert ""Reduced ExcludeModules by one""; This reverts commit 3efc1356fcd48771c821314fab6c4427078480bd. `/mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/tutorials/hist/ContourList.C:23:19: error: expected unqualified-id. const Double_t PI = TMath::Pi();. /usr/share/R/include/R_ext/Constants.h:36:24: note: expanded from macro 'PI'. #define PI M_PI. /usr/include/math.h:777:16: note: expanded from macro M_PI. CMake Error at /mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/cmake/modules/RootTestDriver.cmake:230 (message):. error code: 1`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3589
https://github.com/root-project/root/pull/3589:499,modifiability,modul,modules,499,"Revert ""Reduced ExcludeModules by one""; This reverts commit 3efc1356fcd48771c821314fab6c4427078480bd. `/mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/tutorials/hist/ContourList.C:23:19: error: expected unqualified-id. const Double_t PI = TMath::Pi();. /usr/share/R/include/R_ext/Constants.h:36:24: note: expanded from macro 'PI'. #define PI M_PI. /usr/include/math.h:777:16: note: expanded from macro M_PI. CMake Error at /mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/cmake/modules/RootTestDriver.cmake:230 (message):. error code: 1`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3589
https://github.com/root-project/root/pull/3589:198,performance,error,error,198,"Revert ""Reduced ExcludeModules by one""; This reverts commit 3efc1356fcd48771c821314fab6c4427078480bd. `/mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/tutorials/hist/ContourList.C:23:19: error: expected unqualified-id. const Double_t PI = TMath::Pi();. /usr/share/R/include/R_ext/Constants.h:36:24: note: expanded from macro 'PI'. #define PI M_PI. /usr/include/math.h:777:16: note: expanded from macro M_PI. CMake Error at /mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/cmake/modules/RootTestDriver.cmake:230 (message):. error code: 1`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3589
https://github.com/root-project/root/pull/3589:425,performance,Error,Error,425,"Revert ""Reduced ExcludeModules by one""; This reverts commit 3efc1356fcd48771c821314fab6c4427078480bd. `/mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/tutorials/hist/ContourList.C:23:19: error: expected unqualified-id. const Double_t PI = TMath::Pi();. /usr/share/R/include/R_ext/Constants.h:36:24: note: expanded from macro 'PI'. #define PI M_PI. /usr/include/math.h:777:16: note: expanded from macro M_PI. CMake Error at /mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/cmake/modules/RootTestDriver.cmake:230 (message):. error code: 1`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3589
https://github.com/root-project/root/pull/3589:544,performance,error,error,544,"Revert ""Reduced ExcludeModules by one""; This reverts commit 3efc1356fcd48771c821314fab6c4427078480bd. `/mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/tutorials/hist/ContourList.C:23:19: error: expected unqualified-id. const Double_t PI = TMath::Pi();. /usr/share/R/include/R_ext/Constants.h:36:24: note: expanded from macro 'PI'. #define PI M_PI. /usr/include/math.h:777:16: note: expanded from macro M_PI. CMake Error at /mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/cmake/modules/RootTestDriver.cmake:230 (message):. error code: 1`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3589
https://github.com/root-project/root/pull/3589:198,safety,error,error,198,"Revert ""Reduced ExcludeModules by one""; This reverts commit 3efc1356fcd48771c821314fab6c4427078480bd. `/mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/tutorials/hist/ContourList.C:23:19: error: expected unqualified-id. const Double_t PI = TMath::Pi();. /usr/share/R/include/R_ext/Constants.h:36:24: note: expanded from macro 'PI'. #define PI M_PI. /usr/include/math.h:777:16: note: expanded from macro M_PI. CMake Error at /mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/cmake/modules/RootTestDriver.cmake:230 (message):. error code: 1`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3589
https://github.com/root-project/root/pull/3589:425,safety,Error,Error,425,"Revert ""Reduced ExcludeModules by one""; This reverts commit 3efc1356fcd48771c821314fab6c4427078480bd. `/mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/tutorials/hist/ContourList.C:23:19: error: expected unqualified-id. const Double_t PI = TMath::Pi();. /usr/share/R/include/R_ext/Constants.h:36:24: note: expanded from macro 'PI'. #define PI M_PI. /usr/include/math.h:777:16: note: expanded from macro M_PI. CMake Error at /mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/cmake/modules/RootTestDriver.cmake:230 (message):. error code: 1`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3589
https://github.com/root-project/root/pull/3589:499,safety,modul,modules,499,"Revert ""Reduced ExcludeModules by one""; This reverts commit 3efc1356fcd48771c821314fab6c4427078480bd. `/mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/tutorials/hist/ContourList.C:23:19: error: expected unqualified-id. const Double_t PI = TMath::Pi();. /usr/share/R/include/R_ext/Constants.h:36:24: note: expanded from macro 'PI'. #define PI M_PI. /usr/include/math.h:777:16: note: expanded from macro M_PI. CMake Error at /mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/cmake/modules/RootTestDriver.cmake:230 (message):. error code: 1`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3589
https://github.com/root-project/root/pull/3589:544,safety,error,error,544,"Revert ""Reduced ExcludeModules by one""; This reverts commit 3efc1356fcd48771c821314fab6c4427078480bd. `/mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/tutorials/hist/ContourList.C:23:19: error: expected unqualified-id. const Double_t PI = TMath::Pi();. /usr/share/R/include/R_ext/Constants.h:36:24: note: expanded from macro 'PI'. #define PI M_PI. /usr/include/math.h:777:16: note: expanded from macro M_PI. CMake Error at /mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/cmake/modules/RootTestDriver.cmake:230 (message):. error code: 1`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3589
https://github.com/root-project/root/pull/3589:198,usability,error,error,198,"Revert ""Reduced ExcludeModules by one""; This reverts commit 3efc1356fcd48771c821314fab6c4427078480bd. `/mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/tutorials/hist/ContourList.C:23:19: error: expected unqualified-id. const Double_t PI = TMath::Pi();. /usr/share/R/include/R_ext/Constants.h:36:24: note: expanded from macro 'PI'. #define PI M_PI. /usr/include/math.h:777:16: note: expanded from macro M_PI. CMake Error at /mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/cmake/modules/RootTestDriver.cmake:230 (message):. error code: 1`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3589
https://github.com/root-project/root/pull/3589:425,usability,Error,Error,425,"Revert ""Reduced ExcludeModules by one""; This reverts commit 3efc1356fcd48771c821314fab6c4427078480bd. `/mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/tutorials/hist/ContourList.C:23:19: error: expected unqualified-id. const Double_t PI = TMath::Pi();. /usr/share/R/include/R_ext/Constants.h:36:24: note: expanded from macro 'PI'. #define PI M_PI. /usr/include/math.h:777:16: note: expanded from macro M_PI. CMake Error at /mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/cmake/modules/RootTestDriver.cmake:230 (message):. error code: 1`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3589
https://github.com/root-project/root/pull/3589:544,usability,error,error,544,"Revert ""Reduced ExcludeModules by one""; This reverts commit 3efc1356fcd48771c821314fab6c4427078480bd. `/mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/tutorials/hist/ContourList.C:23:19: error: expected unqualified-id. const Double_t PI = TMath::Pi();. /usr/share/R/include/R_ext/Constants.h:36:24: note: expanded from macro 'PI'. #define PI M_PI. /usr/include/math.h:777:16: note: expanded from macro M_PI. CMake Error at /mnt/build/night/LABEL/ROOT-ubuntu18.04/SPEC/rtcxxmod/root/cmake/modules/RootTestDriver.cmake:230 (message):. error code: 1`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3589
https://github.com/root-project/root/pull/3590:11,modifiability,variab,variables,11,Fix JITted variables on Windows;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3590
https://github.com/root-project/root/pull/3591:306,deployability,depend,depend,306,"Attempt to fix a bug with cut order; This pull request is a attempt to fix the problem described here:. https://root-forum.cern.ch/t/graphical-and-variable-cuts-in-ttree-draw/32862. When a selection including a graphical cut and and other cut is done on a tree having array variables, the selected entries depend in the order in which the graphical and the normal cut are done. The simplest macro showing the problem (using the root file attached to the forum) is:. ```. {. auto file = new TFile(""ptmac.root"");. auto C = new TCanvas();. C->Divide(2,1);. TCutG *gcut = new TCutG(""CUTG"",5);. gcut->SetVarX(""z"");. gcut->SetVarY(""theta"");. gcut->SetPoint(0,-30,2);. gcut->SetPoint(1,-10,5);. gcut->SetPoint(2,-5,40);. gcut->SetPoint(3,-50,25);. gcut->SetPoint(4,-30,2);. C->cd(1); tree->Draw(""z"",""z>-20 && CUTG"","""",10000);. C->cd(2); tree->Draw(""z"",""CUTG && z>-20"","""",10000);. }. ```. without this fix the two plots are different whereas they should be the same. . Not being an expert in that part of the ROOT code, I am not completely sure this fix is the best.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3591
https://github.com/root-project/root/pull/3591:170,energy efficiency,draw,draw,170,"Attempt to fix a bug with cut order; This pull request is a attempt to fix the problem described here:. https://root-forum.cern.ch/t/graphical-and-variable-cuts-in-ttree-draw/32862. When a selection including a graphical cut and and other cut is done on a tree having array variables, the selected entries depend in the order in which the graphical and the normal cut are done. The simplest macro showing the problem (using the root file attached to the forum) is:. ```. {. auto file = new TFile(""ptmac.root"");. auto C = new TCanvas();. C->Divide(2,1);. TCutG *gcut = new TCutG(""CUTG"",5);. gcut->SetVarX(""z"");. gcut->SetVarY(""theta"");. gcut->SetPoint(0,-30,2);. gcut->SetPoint(1,-10,5);. gcut->SetPoint(2,-5,40);. gcut->SetPoint(3,-50,25);. gcut->SetPoint(4,-30,2);. C->cd(1); tree->Draw(""z"",""z>-20 && CUTG"","""",10000);. C->cd(2); tree->Draw(""z"",""CUTG && z>-20"","""",10000);. }. ```. without this fix the two plots are different whereas they should be the same. . Not being an expert in that part of the ROOT code, I am not completely sure this fix is the best.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3591
https://github.com/root-project/root/pull/3591:783,energy efficiency,Draw,Draw,783,"Attempt to fix a bug with cut order; This pull request is a attempt to fix the problem described here:. https://root-forum.cern.ch/t/graphical-and-variable-cuts-in-ttree-draw/32862. When a selection including a graphical cut and and other cut is done on a tree having array variables, the selected entries depend in the order in which the graphical and the normal cut are done. The simplest macro showing the problem (using the root file attached to the forum) is:. ```. {. auto file = new TFile(""ptmac.root"");. auto C = new TCanvas();. C->Divide(2,1);. TCutG *gcut = new TCutG(""CUTG"",5);. gcut->SetVarX(""z"");. gcut->SetVarY(""theta"");. gcut->SetPoint(0,-30,2);. gcut->SetPoint(1,-10,5);. gcut->SetPoint(2,-5,40);. gcut->SetPoint(3,-50,25);. gcut->SetPoint(4,-30,2);. C->cd(1); tree->Draw(""z"",""z>-20 && CUTG"","""",10000);. C->cd(2); tree->Draw(""z"",""CUTG && z>-20"","""",10000);. }. ```. without this fix the two plots are different whereas they should be the same. . Not being an expert in that part of the ROOT code, I am not completely sure this fix is the best.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3591
https://github.com/root-project/root/pull/3591:836,energy efficiency,Draw,Draw,836,"Attempt to fix a bug with cut order; This pull request is a attempt to fix the problem described here:. https://root-forum.cern.ch/t/graphical-and-variable-cuts-in-ttree-draw/32862. When a selection including a graphical cut and and other cut is done on a tree having array variables, the selected entries depend in the order in which the graphical and the normal cut are done. The simplest macro showing the problem (using the root file attached to the forum) is:. ```. {. auto file = new TFile(""ptmac.root"");. auto C = new TCanvas();. C->Divide(2,1);. TCutG *gcut = new TCutG(""CUTG"",5);. gcut->SetVarX(""z"");. gcut->SetVarY(""theta"");. gcut->SetPoint(0,-30,2);. gcut->SetPoint(1,-10,5);. gcut->SetPoint(2,-5,40);. gcut->SetPoint(3,-50,25);. gcut->SetPoint(4,-30,2);. C->cd(1); tree->Draw(""z"",""z>-20 && CUTG"","""",10000);. C->cd(2); tree->Draw(""z"",""CUTG && z>-20"","""",10000);. }. ```. without this fix the two plots are different whereas they should be the same. . Not being an expert in that part of the ROOT code, I am not completely sure this fix is the best.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3591
https://github.com/root-project/root/pull/3591:306,integrability,depend,depend,306,"Attempt to fix a bug with cut order; This pull request is a attempt to fix the problem described here:. https://root-forum.cern.ch/t/graphical-and-variable-cuts-in-ttree-draw/32862. When a selection including a graphical cut and and other cut is done on a tree having array variables, the selected entries depend in the order in which the graphical and the normal cut are done. The simplest macro showing the problem (using the root file attached to the forum) is:. ```. {. auto file = new TFile(""ptmac.root"");. auto C = new TCanvas();. C->Divide(2,1);. TCutG *gcut = new TCutG(""CUTG"",5);. gcut->SetVarX(""z"");. gcut->SetVarY(""theta"");. gcut->SetPoint(0,-30,2);. gcut->SetPoint(1,-10,5);. gcut->SetPoint(2,-5,40);. gcut->SetPoint(3,-50,25);. gcut->SetPoint(4,-30,2);. C->cd(1); tree->Draw(""z"",""z>-20 && CUTG"","""",10000);. C->cd(2); tree->Draw(""z"",""CUTG && z>-20"","""",10000);. }. ```. without this fix the two plots are different whereas they should be the same. . Not being an expert in that part of the ROOT code, I am not completely sure this fix is the best.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3591
https://github.com/root-project/root/pull/3591:147,modifiability,variab,variable-cuts-in-ttree-draw,147,"Attempt to fix a bug with cut order; This pull request is a attempt to fix the problem described here:. https://root-forum.cern.ch/t/graphical-and-variable-cuts-in-ttree-draw/32862. When a selection including a graphical cut and and other cut is done on a tree having array variables, the selected entries depend in the order in which the graphical and the normal cut are done. The simplest macro showing the problem (using the root file attached to the forum) is:. ```. {. auto file = new TFile(""ptmac.root"");. auto C = new TCanvas();. C->Divide(2,1);. TCutG *gcut = new TCutG(""CUTG"",5);. gcut->SetVarX(""z"");. gcut->SetVarY(""theta"");. gcut->SetPoint(0,-30,2);. gcut->SetPoint(1,-10,5);. gcut->SetPoint(2,-5,40);. gcut->SetPoint(3,-50,25);. gcut->SetPoint(4,-30,2);. C->cd(1); tree->Draw(""z"",""z>-20 && CUTG"","""",10000);. C->cd(2); tree->Draw(""z"",""CUTG && z>-20"","""",10000);. }. ```. without this fix the two plots are different whereas they should be the same. . Not being an expert in that part of the ROOT code, I am not completely sure this fix is the best.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3591
https://github.com/root-project/root/pull/3591:274,modifiability,variab,variables,274,"Attempt to fix a bug with cut order; This pull request is a attempt to fix the problem described here:. https://root-forum.cern.ch/t/graphical-and-variable-cuts-in-ttree-draw/32862. When a selection including a graphical cut and and other cut is done on a tree having array variables, the selected entries depend in the order in which the graphical and the normal cut are done. The simplest macro showing the problem (using the root file attached to the forum) is:. ```. {. auto file = new TFile(""ptmac.root"");. auto C = new TCanvas();. C->Divide(2,1);. TCutG *gcut = new TCutG(""CUTG"",5);. gcut->SetVarX(""z"");. gcut->SetVarY(""theta"");. gcut->SetPoint(0,-30,2);. gcut->SetPoint(1,-10,5);. gcut->SetPoint(2,-5,40);. gcut->SetPoint(3,-50,25);. gcut->SetPoint(4,-30,2);. C->cd(1); tree->Draw(""z"",""z>-20 && CUTG"","""",10000);. C->cd(2); tree->Draw(""z"",""CUTG && z>-20"","""",10000);. }. ```. without this fix the two plots are different whereas they should be the same. . Not being an expert in that part of the ROOT code, I am not completely sure this fix is the best.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3591
https://github.com/root-project/root/pull/3591:306,modifiability,depend,depend,306,"Attempt to fix a bug with cut order; This pull request is a attempt to fix the problem described here:. https://root-forum.cern.ch/t/graphical-and-variable-cuts-in-ttree-draw/32862. When a selection including a graphical cut and and other cut is done on a tree having array variables, the selected entries depend in the order in which the graphical and the normal cut are done. The simplest macro showing the problem (using the root file attached to the forum) is:. ```. {. auto file = new TFile(""ptmac.root"");. auto C = new TCanvas();. C->Divide(2,1);. TCutG *gcut = new TCutG(""CUTG"",5);. gcut->SetVarX(""z"");. gcut->SetVarY(""theta"");. gcut->SetPoint(0,-30,2);. gcut->SetPoint(1,-10,5);. gcut->SetPoint(2,-5,40);. gcut->SetPoint(3,-50,25);. gcut->SetPoint(4,-30,2);. C->cd(1); tree->Draw(""z"",""z>-20 && CUTG"","""",10000);. C->cd(2); tree->Draw(""z"",""CUTG && z>-20"","""",10000);. }. ```. without this fix the two plots are different whereas they should be the same. . Not being an expert in that part of the ROOT code, I am not completely sure this fix is the best.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3591
https://github.com/root-project/root/pull/3591:306,safety,depend,depend,306,"Attempt to fix a bug with cut order; This pull request is a attempt to fix the problem described here:. https://root-forum.cern.ch/t/graphical-and-variable-cuts-in-ttree-draw/32862. When a selection including a graphical cut and and other cut is done on a tree having array variables, the selected entries depend in the order in which the graphical and the normal cut are done. The simplest macro showing the problem (using the root file attached to the forum) is:. ```. {. auto file = new TFile(""ptmac.root"");. auto C = new TCanvas();. C->Divide(2,1);. TCutG *gcut = new TCutG(""CUTG"",5);. gcut->SetVarX(""z"");. gcut->SetVarY(""theta"");. gcut->SetPoint(0,-30,2);. gcut->SetPoint(1,-10,5);. gcut->SetPoint(2,-5,40);. gcut->SetPoint(3,-50,25);. gcut->SetPoint(4,-30,2);. C->cd(1); tree->Draw(""z"",""z>-20 && CUTG"","""",10000);. C->cd(2); tree->Draw(""z"",""CUTG && z>-20"","""",10000);. }. ```. without this fix the two plots are different whereas they should be the same. . Not being an expert in that part of the ROOT code, I am not completely sure this fix is the best.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3591
https://github.com/root-project/root/pull/3591:1021,safety,compl,completely,1021,"Attempt to fix a bug with cut order; This pull request is a attempt to fix the problem described here:. https://root-forum.cern.ch/t/graphical-and-variable-cuts-in-ttree-draw/32862. When a selection including a graphical cut and and other cut is done on a tree having array variables, the selected entries depend in the order in which the graphical and the normal cut are done. The simplest macro showing the problem (using the root file attached to the forum) is:. ```. {. auto file = new TFile(""ptmac.root"");. auto C = new TCanvas();. C->Divide(2,1);. TCutG *gcut = new TCutG(""CUTG"",5);. gcut->SetVarX(""z"");. gcut->SetVarY(""theta"");. gcut->SetPoint(0,-30,2);. gcut->SetPoint(1,-10,5);. gcut->SetPoint(2,-5,40);. gcut->SetPoint(3,-50,25);. gcut->SetPoint(4,-30,2);. C->cd(1); tree->Draw(""z"",""z>-20 && CUTG"","""",10000);. C->cd(2); tree->Draw(""z"",""CUTG && z>-20"","""",10000);. }. ```. without this fix the two plots are different whereas they should be the same. . Not being an expert in that part of the ROOT code, I am not completely sure this fix is the best.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3591
https://github.com/root-project/root/pull/3591:1021,security,compl,completely,1021,"Attempt to fix a bug with cut order; This pull request is a attempt to fix the problem described here:. https://root-forum.cern.ch/t/graphical-and-variable-cuts-in-ttree-draw/32862. When a selection including a graphical cut and and other cut is done on a tree having array variables, the selected entries depend in the order in which the graphical and the normal cut are done. The simplest macro showing the problem (using the root file attached to the forum) is:. ```. {. auto file = new TFile(""ptmac.root"");. auto C = new TCanvas();. C->Divide(2,1);. TCutG *gcut = new TCutG(""CUTG"",5);. gcut->SetVarX(""z"");. gcut->SetVarY(""theta"");. gcut->SetPoint(0,-30,2);. gcut->SetPoint(1,-10,5);. gcut->SetPoint(2,-5,40);. gcut->SetPoint(3,-50,25);. gcut->SetPoint(4,-30,2);. C->cd(1); tree->Draw(""z"",""z>-20 && CUTG"","""",10000);. C->cd(2); tree->Draw(""z"",""CUTG && z>-20"","""",10000);. }. ```. without this fix the two plots are different whereas they should be the same. . Not being an expert in that part of the ROOT code, I am not completely sure this fix is the best.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3591
https://github.com/root-project/root/pull/3591:306,testability,depend,depend,306,"Attempt to fix a bug with cut order; This pull request is a attempt to fix the problem described here:. https://root-forum.cern.ch/t/graphical-and-variable-cuts-in-ttree-draw/32862. When a selection including a graphical cut and and other cut is done on a tree having array variables, the selected entries depend in the order in which the graphical and the normal cut are done. The simplest macro showing the problem (using the root file attached to the forum) is:. ```. {. auto file = new TFile(""ptmac.root"");. auto C = new TCanvas();. C->Divide(2,1);. TCutG *gcut = new TCutG(""CUTG"",5);. gcut->SetVarX(""z"");. gcut->SetVarY(""theta"");. gcut->SetPoint(0,-30,2);. gcut->SetPoint(1,-10,5);. gcut->SetPoint(2,-5,40);. gcut->SetPoint(3,-50,25);. gcut->SetPoint(4,-30,2);. C->cd(1); tree->Draw(""z"",""z>-20 && CUTG"","""",10000);. C->cd(2); tree->Draw(""z"",""CUTG && z>-20"","""",10000);. }. ```. without this fix the two plots are different whereas they should be the same. . Not being an expert in that part of the ROOT code, I am not completely sure this fix is the best.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3591
https://github.com/root-project/root/pull/3591:382,testability,simpl,simplest,382,"Attempt to fix a bug with cut order; This pull request is a attempt to fix the problem described here:. https://root-forum.cern.ch/t/graphical-and-variable-cuts-in-ttree-draw/32862. When a selection including a graphical cut and and other cut is done on a tree having array variables, the selected entries depend in the order in which the graphical and the normal cut are done. The simplest macro showing the problem (using the root file attached to the forum) is:. ```. {. auto file = new TFile(""ptmac.root"");. auto C = new TCanvas();. C->Divide(2,1);. TCutG *gcut = new TCutG(""CUTG"",5);. gcut->SetVarX(""z"");. gcut->SetVarY(""theta"");. gcut->SetPoint(0,-30,2);. gcut->SetPoint(1,-10,5);. gcut->SetPoint(2,-5,40);. gcut->SetPoint(3,-50,25);. gcut->SetPoint(4,-30,2);. C->cd(1); tree->Draw(""z"",""z>-20 && CUTG"","""",10000);. C->cd(2); tree->Draw(""z"",""CUTG && z>-20"","""",10000);. }. ```. without this fix the two plots are different whereas they should be the same. . Not being an expert in that part of the ROOT code, I am not completely sure this fix is the best.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3591
https://github.com/root-project/root/pull/3591:382,usability,simpl,simplest,382,"Attempt to fix a bug with cut order; This pull request is a attempt to fix the problem described here:. https://root-forum.cern.ch/t/graphical-and-variable-cuts-in-ttree-draw/32862. When a selection including a graphical cut and and other cut is done on a tree having array variables, the selected entries depend in the order in which the graphical and the normal cut are done. The simplest macro showing the problem (using the root file attached to the forum) is:. ```. {. auto file = new TFile(""ptmac.root"");. auto C = new TCanvas();. C->Divide(2,1);. TCutG *gcut = new TCutG(""CUTG"",5);. gcut->SetVarX(""z"");. gcut->SetVarY(""theta"");. gcut->SetPoint(0,-30,2);. gcut->SetPoint(1,-10,5);. gcut->SetPoint(2,-5,40);. gcut->SetPoint(3,-50,25);. gcut->SetPoint(4,-30,2);. C->cd(1); tree->Draw(""z"",""z>-20 && CUTG"","""",10000);. C->cd(2); tree->Draw(""z"",""CUTG && z>-20"","""",10000);. }. ```. without this fix the two plots are different whereas they should be the same. . Not being an expert in that part of the ROOT code, I am not completely sure this fix is the best.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3591
https://github.com/root-project/root/pull/3593:216,deployability,patch,patch,216,[cxxmodules] Optimize IsWrapper; The getNameAsString interface causes a lot of temporary allocations. The analysis if a decl is a cling-style wrapper can work only on a. simple declarations on the global scope. This patch filters out complex declarations (eg in namespaces) and. checks only the identifier content. The patch reduces the memory footprint difference shown in root-project/root#3012.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3593
https://github.com/root-project/root/pull/3593:319,deployability,patch,patch,319,[cxxmodules] Optimize IsWrapper; The getNameAsString interface causes a lot of temporary allocations. The analysis if a decl is a cling-style wrapper can work only on a. simple declarations on the global scope. This patch filters out complex declarations (eg in namespaces) and. checks only the identifier content. The patch reduces the memory footprint difference shown in root-project/root#3012.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3593
https://github.com/root-project/root/pull/3593:13,energy efficiency,Optim,Optimize,13,[cxxmodules] Optimize IsWrapper; The getNameAsString interface causes a lot of temporary allocations. The analysis if a decl is a cling-style wrapper can work only on a. simple declarations on the global scope. This patch filters out complex declarations (eg in namespaces) and. checks only the identifier content. The patch reduces the memory footprint difference shown in root-project/root#3012.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3593
https://github.com/root-project/root/pull/3593:89,energy efficiency,alloc,allocations,89,[cxxmodules] Optimize IsWrapper; The getNameAsString interface causes a lot of temporary allocations. The analysis if a decl is a cling-style wrapper can work only on a. simple declarations on the global scope. This patch filters out complex declarations (eg in namespaces) and. checks only the identifier content. The patch reduces the memory footprint difference shown in root-project/root#3012.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3593
https://github.com/root-project/root/pull/3593:325,energy efficiency,reduc,reduces,325,[cxxmodules] Optimize IsWrapper; The getNameAsString interface causes a lot of temporary allocations. The analysis if a decl is a cling-style wrapper can work only on a. simple declarations on the global scope. This patch filters out complex declarations (eg in namespaces) and. checks only the identifier content. The patch reduces the memory footprint difference shown in root-project/root#3012.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3593
https://github.com/root-project/root/pull/3593:53,integrability,interfac,interface,53,[cxxmodules] Optimize IsWrapper; The getNameAsString interface causes a lot of temporary allocations. The analysis if a decl is a cling-style wrapper can work only on a. simple declarations on the global scope. This patch filters out complex declarations (eg in namespaces) and. checks only the identifier content. The patch reduces the memory footprint difference shown in root-project/root#3012.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3593
https://github.com/root-project/root/pull/3593:142,integrability,wrap,wrapper,142,[cxxmodules] Optimize IsWrapper; The getNameAsString interface causes a lot of temporary allocations. The analysis if a decl is a cling-style wrapper can work only on a. simple declarations on the global scope. This patch filters out complex declarations (eg in namespaces) and. checks only the identifier content. The patch reduces the memory footprint difference shown in root-project/root#3012.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3593
https://github.com/root-project/root/pull/3593:222,integrability,filter,filters,222,[cxxmodules] Optimize IsWrapper; The getNameAsString interface causes a lot of temporary allocations. The analysis if a decl is a cling-style wrapper can work only on a. simple declarations on the global scope. This patch filters out complex declarations (eg in namespaces) and. checks only the identifier content. The patch reduces the memory footprint difference shown in root-project/root#3012.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3593
https://github.com/root-project/root/pull/3593:53,interoperability,interfac,interface,53,[cxxmodules] Optimize IsWrapper; The getNameAsString interface causes a lot of temporary allocations. The analysis if a decl is a cling-style wrapper can work only on a. simple declarations on the global scope. This patch filters out complex declarations (eg in namespaces) and. checks only the identifier content. The patch reduces the memory footprint difference shown in root-project/root#3012.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3593
https://github.com/root-project/root/pull/3593:142,interoperability,wrapper,wrapper,142,[cxxmodules] Optimize IsWrapper; The getNameAsString interface causes a lot of temporary allocations. The analysis if a decl is a cling-style wrapper can work only on a. simple declarations on the global scope. This patch filters out complex declarations (eg in namespaces) and. checks only the identifier content. The patch reduces the memory footprint difference shown in root-project/root#3012.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3593
https://github.com/root-project/root/pull/3593:53,modifiability,interfac,interface,53,[cxxmodules] Optimize IsWrapper; The getNameAsString interface causes a lot of temporary allocations. The analysis if a decl is a cling-style wrapper can work only on a. simple declarations on the global scope. This patch filters out complex declarations (eg in namespaces) and. checks only the identifier content. The patch reduces the memory footprint difference shown in root-project/root#3012.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3593
https://github.com/root-project/root/pull/3593:13,performance,Optimiz,Optimize,13,[cxxmodules] Optimize IsWrapper; The getNameAsString interface causes a lot of temporary allocations. The analysis if a decl is a cling-style wrapper can work only on a. simple declarations on the global scope. This patch filters out complex declarations (eg in namespaces) and. checks only the identifier content. The patch reduces the memory footprint difference shown in root-project/root#3012.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3593
https://github.com/root-project/root/pull/3593:306,performance,content,content,306,[cxxmodules] Optimize IsWrapper; The getNameAsString interface causes a lot of temporary allocations. The analysis if a decl is a cling-style wrapper can work only on a. simple declarations on the global scope. This patch filters out complex declarations (eg in namespaces) and. checks only the identifier content. The patch reduces the memory footprint difference shown in root-project/root#3012.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3593
https://github.com/root-project/root/pull/3593:337,performance,memor,memory,337,[cxxmodules] Optimize IsWrapper; The getNameAsString interface causes a lot of temporary allocations. The analysis if a decl is a cling-style wrapper can work only on a. simple declarations on the global scope. This patch filters out complex declarations (eg in namespaces) and. checks only the identifier content. The patch reduces the memory footprint difference shown in root-project/root#3012.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3593
https://github.com/root-project/root/pull/3593:216,safety,patch,patch,216,[cxxmodules] Optimize IsWrapper; The getNameAsString interface causes a lot of temporary allocations. The analysis if a decl is a cling-style wrapper can work only on a. simple declarations on the global scope. This patch filters out complex declarations (eg in namespaces) and. checks only the identifier content. The patch reduces the memory footprint difference shown in root-project/root#3012.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3593
https://github.com/root-project/root/pull/3593:234,safety,compl,complex,234,[cxxmodules] Optimize IsWrapper; The getNameAsString interface causes a lot of temporary allocations. The analysis if a decl is a cling-style wrapper can work only on a. simple declarations on the global scope. This patch filters out complex declarations (eg in namespaces) and. checks only the identifier content. The patch reduces the memory footprint difference shown in root-project/root#3012.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3593
https://github.com/root-project/root/pull/3593:319,safety,patch,patch,319,[cxxmodules] Optimize IsWrapper; The getNameAsString interface causes a lot of temporary allocations. The analysis if a decl is a cling-style wrapper can work only on a. simple declarations on the global scope. This patch filters out complex declarations (eg in namespaces) and. checks only the identifier content. The patch reduces the memory footprint difference shown in root-project/root#3012.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3593
https://github.com/root-project/root/pull/3593:216,security,patch,patch,216,[cxxmodules] Optimize IsWrapper; The getNameAsString interface causes a lot of temporary allocations. The analysis if a decl is a cling-style wrapper can work only on a. simple declarations on the global scope. This patch filters out complex declarations (eg in namespaces) and. checks only the identifier content. The patch reduces the memory footprint difference shown in root-project/root#3012.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3593
https://github.com/root-project/root/pull/3593:234,security,compl,complex,234,[cxxmodules] Optimize IsWrapper; The getNameAsString interface causes a lot of temporary allocations. The analysis if a decl is a cling-style wrapper can work only on a. simple declarations on the global scope. This patch filters out complex declarations (eg in namespaces) and. checks only the identifier content. The patch reduces the memory footprint difference shown in root-project/root#3012.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3593
https://github.com/root-project/root/pull/3593:295,security,ident,identifier,295,[cxxmodules] Optimize IsWrapper; The getNameAsString interface causes a lot of temporary allocations. The analysis if a decl is a cling-style wrapper can work only on a. simple declarations on the global scope. This patch filters out complex declarations (eg in namespaces) and. checks only the identifier content. The patch reduces the memory footprint difference shown in root-project/root#3012.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3593
https://github.com/root-project/root/pull/3593:319,security,patch,patch,319,[cxxmodules] Optimize IsWrapper; The getNameAsString interface causes a lot of temporary allocations. The analysis if a decl is a cling-style wrapper can work only on a. simple declarations on the global scope. This patch filters out complex declarations (eg in namespaces) and. checks only the identifier content. The patch reduces the memory footprint difference shown in root-project/root#3012.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3593
https://github.com/root-project/root/pull/3593:170,testability,simpl,simple,170,[cxxmodules] Optimize IsWrapper; The getNameAsString interface causes a lot of temporary allocations. The analysis if a decl is a cling-style wrapper can work only on a. simple declarations on the global scope. This patch filters out complex declarations (eg in namespaces) and. checks only the identifier content. The patch reduces the memory footprint difference shown in root-project/root#3012.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3593
https://github.com/root-project/root/pull/3593:170,usability,simpl,simple,170,[cxxmodules] Optimize IsWrapper; The getNameAsString interface causes a lot of temporary allocations. The analysis if a decl is a cling-style wrapper can work only on a. simple declarations on the global scope. This patch filters out complex declarations (eg in namespaces) and. checks only the identifier content. The patch reduces the memory footprint difference shown in root-project/root#3012.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3593
https://github.com/root-project/root/pull/3593:337,usability,memor,memory,337,[cxxmodules] Optimize IsWrapper; The getNameAsString interface causes a lot of temporary allocations. The analysis if a decl is a cling-style wrapper can work only on a. simple declarations on the global scope. This patch filters out complex declarations (eg in namespaces) and. checks only the identifier content. The patch reduces the memory footprint difference shown in root-project/root#3012.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3593
https://github.com/root-project/root/pull/3594:84,availability,error,error-prone,84,"[DF] Use the new template TFile::Get overload; ...wherever it's more readable, less error-prone than the alternatives.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3594
https://github.com/root-project/root/pull/3594:84,performance,error,error-prone,84,"[DF] Use the new template TFile::Get overload; ...wherever it's more readable, less error-prone than the alternatives.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3594
https://github.com/root-project/root/pull/3594:84,safety,error,error-prone,84,"[DF] Use the new template TFile::Get overload; ...wherever it's more readable, less error-prone than the alternatives.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3594
https://github.com/root-project/root/pull/3594:84,usability,error,error-prone,84,"[DF] Use the new template TFile::Get overload; ...wherever it's more readable, less error-prone than the alternatives.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3594
https://github.com/root-project/root/pull/3595:16,availability,error,error,16,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:761,availability,error,error,761,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:959,availability,error,error,959,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:1415,availability,Error,Error,1415,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:1568,deployability,modul,modules,1568,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:1250,integrability,messag,message,1250,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:1250,interoperability,messag,message,1250,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:84,modifiability,pac,packages,84,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:250,modifiability,pac,package,250,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:452,modifiability,pac,packages,452,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:1181,modifiability,pac,packages,1181,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:1514,modifiability,pac,packages,1514,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:1568,modifiability,modul,modules,1568,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:16,performance,error,error,16,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:337,performance,Content,Content,337,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:543,performance,Content,Content,543,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:761,performance,error,error,761,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:959,performance,error,error,959,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:1415,performance,Error,Error,1415,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:16,safety,error,error,16,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:60,safety,test,tests,60,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:73,safety,test,testing,73,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:285,safety,test,tests,285,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:526,safety,test,tests,526,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:611,safety,Test,TestTest,611,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:629,safety,Test,TestCase,629,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:693,safety,test,tests,693,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:761,safety,error,error,761,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:896,safety,test,test,896,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:920,safety,test,tests,920,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:959,safety,error,error,959,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:1046,safety,test,test,1046,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:1415,safety,Error,Error,1415,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:1568,safety,modul,modules,1568,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:60,testability,test,tests,60,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:73,testability,test,testing,73,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:285,testability,test,tests,285,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:526,testability,test,tests,526,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:582,testability,unit,unittest,582,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:611,testability,Test,TestTest,611,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:620,testability,unit,unittest,620,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:629,testability,Test,TestCase,629,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:693,testability,test,tests,693,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:896,testability,test,test,896,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:920,testability,test,tests,920,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:1046,testability,test,test,1046,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:1448,testability,Trace,Traceback,1448,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:16,usability,error,error,16,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:217,usability,minim,minimal,217,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:761,usability,error,error,761,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:959,usability,error,error,959,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3595:1415,usability,Error,Error,1415,"Possible fix to error and warning when using ROOT in pytest tests; While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:. ```. . ├── setup.py. └── tests. └── test_test.py. 1 directory, 2 files. ```. Content of `setup.py`:. ```python. from setuptools import setup, find_packages. setup(. name=""root_cleanup_test"",. packages=find_packages(),. setup_requires=[""pytest-runner""],. test_suite=""tests"",. ). ```. Content of `test_test.py`. ```. import unittest. import ROOT. class TestTest(unittest.TestCase):. def test_test(self):. pass. ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````. ========== warnings summary ==========. /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S. message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html. ========== 1 passed, 1 warnings in 0.41 seconds ==========. Error in atexit._run_exitfuncs:. Traceback (most recent call last):. File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup. facade = sys.modules[ __name__ ]. KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3595
https://github.com/root-project/root/pull/3596:225,deployability,Releas,Release,225,[Math] Suggest Math::LorentzVector instead of TLorentzVector; this commit suggests to prefer the usage of ROOT::Math::TLorentzVector. specialisations instead of the TLorentzVector class given the. advantages of the former. - Release notes are changes. - The documentation of TLorentzVector updated to point to the specialisations of ROOT::Math::TLorentzVector. - The RDF tutorials using TLorentzVector upgraded,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3596
https://github.com/root-project/root/pull/3596:290,deployability,updat,updated,290,[Math] Suggest Math::LorentzVector instead of TLorentzVector; this commit suggests to prefer the usage of ROOT::Math::TLorentzVector. specialisations instead of the TLorentzVector class given the. advantages of the former. - Release notes are changes. - The documentation of TLorentzVector updated to point to the specialisations of ROOT::Math::TLorentzVector. - The RDF tutorials using TLorentzVector upgraded,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3596
https://github.com/root-project/root/pull/3596:402,deployability,upgrad,upgraded,402,[Math] Suggest Math::LorentzVector instead of TLorentzVector; this commit suggests to prefer the usage of ROOT::Math::TLorentzVector. specialisations instead of the TLorentzVector class given the. advantages of the former. - Release notes are changes. - The documentation of TLorentzVector updated to point to the specialisations of ROOT::Math::TLorentzVector. - The RDF tutorials using TLorentzVector upgraded,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3596
https://github.com/root-project/root/pull/3596:402,modifiability,upgrad,upgraded,402,[Math] Suggest Math::LorentzVector instead of TLorentzVector; this commit suggests to prefer the usage of ROOT::Math::TLorentzVector. specialisations instead of the TLorentzVector class given the. advantages of the former. - Release notes are changes. - The documentation of TLorentzVector updated to point to the specialisations of ROOT::Math::TLorentzVector. - The RDF tutorials using TLorentzVector upgraded,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3596
https://github.com/root-project/root/pull/3596:290,safety,updat,updated,290,[Math] Suggest Math::LorentzVector instead of TLorentzVector; this commit suggests to prefer the usage of ROOT::Math::TLorentzVector. specialisations instead of the TLorentzVector class given the. advantages of the former. - Release notes are changes. - The documentation of TLorentzVector updated to point to the specialisations of ROOT::Math::TLorentzVector. - The RDF tutorials using TLorentzVector upgraded,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3596
https://github.com/root-project/root/pull/3596:290,security,updat,updated,290,[Math] Suggest Math::LorentzVector instead of TLorentzVector; this commit suggests to prefer the usage of ROOT::Math::TLorentzVector. specialisations instead of the TLorentzVector class given the. advantages of the former. - Release notes are changes. - The documentation of TLorentzVector updated to point to the specialisations of ROOT::Math::TLorentzVector. - The RDF tutorials using TLorentzVector upgraded,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3596
https://github.com/root-project/root/pull/3596:86,usability,prefer,prefer,86,[Math] Suggest Math::LorentzVector instead of TLorentzVector; this commit suggests to prefer the usage of ROOT::Math::TLorentzVector. specialisations instead of the TLorentzVector class given the. advantages of the former. - Release notes are changes. - The documentation of TLorentzVector updated to point to the specialisations of ROOT::Math::TLorentzVector. - The RDF tutorials using TLorentzVector upgraded,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3596
https://github.com/root-project/root/pull/3596:258,usability,document,documentation,258,[Math] Suggest Math::LorentzVector instead of TLorentzVector; this commit suggests to prefer the usage of ROOT::Math::TLorentzVector. specialisations instead of the TLorentzVector class given the. advantages of the former. - Release notes are changes. - The documentation of TLorentzVector updated to point to the specialisations of ROOT::Math::TLorentzVector. - The RDF tutorials using TLorentzVector upgraded,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3596
https://github.com/root-project/root/pull/3599:360,availability,error,error,360,"Revert changes in cling module.modulemap; This reverts commit 3854aa142b82202d36d066ad9ce80f57a00f8276. It fixes:. ""While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:11:. /.../root/interpreter/cling/include/cling/Interpreter/DynamicLookupRuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". ^. While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:17:""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3599
https://github.com/root-project/root/pull/3599:24,deployability,modul,module,24,"Revert changes in cling module.modulemap; This reverts commit 3854aa142b82202d36d066ad9ce80f57a00f8276. It fixes:. ""While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:11:. /.../root/interpreter/cling/include/cling/Interpreter/DynamicLookupRuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". ^. While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:17:""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3599
https://github.com/root-project/root/pull/3599:31,deployability,modul,modulemap,31,"Revert changes in cling module.modulemap; This reverts commit 3854aa142b82202d36d066ad9ce80f57a00f8276. It fixes:. ""While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:11:. /.../root/interpreter/cling/include/cling/Interpreter/DynamicLookupRuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". ^. While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:17:""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3599
https://github.com/root-project/root/pull/3599:122,deployability,build,building,122,"Revert changes in cling module.modulemap; This reverts commit 3854aa142b82202d36d066ad9ce80f57a00f8276. It fixes:. ""While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:11:. /.../root/interpreter/cling/include/cling/Interpreter/DynamicLookupRuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". ^. While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:17:""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3599
https://github.com/root-project/root/pull/3599:131,deployability,modul,module,131,"Revert changes in cling module.modulemap; This reverts commit 3854aa142b82202d36d066ad9ce80f57a00f8276. It fixes:. ""While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:11:. /.../root/interpreter/cling/include/cling/Interpreter/DynamicLookupRuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". ^. While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:17:""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3599
https://github.com/root-project/root/pull/3599:247,deployability,modul,module-includes,247,"Revert changes in cling module.modulemap; This reverts commit 3854aa142b82202d36d066ad9ce80f57a00f8276. It fixes:. ""While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:11:. /.../root/interpreter/cling/include/cling/Interpreter/DynamicLookupRuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". ^. While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:17:""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3599
https://github.com/root-project/root/pull/3599:432,deployability,build,building,432,"Revert changes in cling module.modulemap; This reverts commit 3854aa142b82202d36d066ad9ce80f57a00f8276. It fixes:. ""While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:11:. /.../root/interpreter/cling/include/cling/Interpreter/DynamicLookupRuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". ^. While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:17:""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3599
https://github.com/root-project/root/pull/3599:441,deployability,modul,module,441,"Revert changes in cling module.modulemap; This reverts commit 3854aa142b82202d36d066ad9ce80f57a00f8276. It fixes:. ""While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:11:. /.../root/interpreter/cling/include/cling/Interpreter/DynamicLookupRuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". ^. While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:17:""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3599
https://github.com/root-project/root/pull/3599:557,deployability,modul,module-includes,557,"Revert changes in cling module.modulemap; This reverts commit 3854aa142b82202d36d066ad9ce80f57a00f8276. It fixes:. ""While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:11:. /.../root/interpreter/cling/include/cling/Interpreter/DynamicLookupRuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". ^. While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:17:""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3599
https://github.com/root-project/root/pull/3599:182,energy efficiency,core,core,182,"Revert changes in cling module.modulemap; This reverts commit 3854aa142b82202d36d066ad9ce80f57a00f8276. It fixes:. ""While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:11:. /.../root/interpreter/cling/include/cling/Interpreter/DynamicLookupRuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". ^. While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:17:""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3599
https://github.com/root-project/root/pull/3599:492,energy efficiency,core,core,492,"Revert changes in cling module.modulemap; This reverts commit 3854aa142b82202d36d066ad9ce80f57a00f8276. It fixes:. ""While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:11:. /.../root/interpreter/cling/include/cling/Interpreter/DynamicLookupRuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". ^. While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:17:""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3599
https://github.com/root-project/root/pull/3599:24,modifiability,modul,module,24,"Revert changes in cling module.modulemap; This reverts commit 3854aa142b82202d36d066ad9ce80f57a00f8276. It fixes:. ""While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:11:. /.../root/interpreter/cling/include/cling/Interpreter/DynamicLookupRuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". ^. While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:17:""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3599
https://github.com/root-project/root/pull/3599:31,modifiability,modul,modulemap,31,"Revert changes in cling module.modulemap; This reverts commit 3854aa142b82202d36d066ad9ce80f57a00f8276. It fixes:. ""While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:11:. /.../root/interpreter/cling/include/cling/Interpreter/DynamicLookupRuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". ^. While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:17:""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3599
https://github.com/root-project/root/pull/3599:131,modifiability,modul,module,131,"Revert changes in cling module.modulemap; This reverts commit 3854aa142b82202d36d066ad9ce80f57a00f8276. It fixes:. ""While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:11:. /.../root/interpreter/cling/include/cling/Interpreter/DynamicLookupRuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". ^. While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:17:""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3599
https://github.com/root-project/root/pull/3599:247,modifiability,modul,module-includes,247,"Revert changes in cling module.modulemap; This reverts commit 3854aa142b82202d36d066ad9ce80f57a00f8276. It fixes:. ""While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:11:. /.../root/interpreter/cling/include/cling/Interpreter/DynamicLookupRuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". ^. While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:17:""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3599
https://github.com/root-project/root/pull/3599:441,modifiability,modul,module,441,"Revert changes in cling module.modulemap; This reverts commit 3854aa142b82202d36d066ad9ce80f57a00f8276. It fixes:. ""While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:11:. /.../root/interpreter/cling/include/cling/Interpreter/DynamicLookupRuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". ^. While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:17:""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3599
https://github.com/root-project/root/pull/3599:557,modifiability,modul,module-includes,557,"Revert changes in cling module.modulemap; This reverts commit 3854aa142b82202d36d066ad9ce80f57a00f8276. It fixes:. ""While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:11:. /.../root/interpreter/cling/include/cling/Interpreter/DynamicLookupRuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". ^. While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:17:""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3599
https://github.com/root-project/root/pull/3599:360,performance,error,error,360,"Revert changes in cling module.modulemap; This reverts commit 3854aa142b82202d36d066ad9ce80f57a00f8276. It fixes:. ""While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:11:. /.../root/interpreter/cling/include/cling/Interpreter/DynamicLookupRuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". ^. While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:17:""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3599
https://github.com/root-project/root/pull/3599:24,safety,modul,module,24,"Revert changes in cling module.modulemap; This reverts commit 3854aa142b82202d36d066ad9ce80f57a00f8276. It fixes:. ""While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:11:. /.../root/interpreter/cling/include/cling/Interpreter/DynamicLookupRuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". ^. While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:17:""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3599
https://github.com/root-project/root/pull/3599:31,safety,modul,modulemap,31,"Revert changes in cling module.modulemap; This reverts commit 3854aa142b82202d36d066ad9ce80f57a00f8276. It fixes:. ""While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:11:. /.../root/interpreter/cling/include/cling/Interpreter/DynamicLookupRuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". ^. While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:17:""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3599
https://github.com/root-project/root/pull/3599:131,safety,modul,module,131,"Revert changes in cling module.modulemap; This reverts commit 3854aa142b82202d36d066ad9ce80f57a00f8276. It fixes:. ""While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:11:. /.../root/interpreter/cling/include/cling/Interpreter/DynamicLookupRuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". ^. While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:17:""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3599
https://github.com/root-project/root/pull/3599:247,safety,modul,module-includes,247,"Revert changes in cling module.modulemap; This reverts commit 3854aa142b82202d36d066ad9ce80f57a00f8276. It fixes:. ""While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:11:. /.../root/interpreter/cling/include/cling/Interpreter/DynamicLookupRuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". ^. While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:17:""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3599
https://github.com/root-project/root/pull/3599:360,safety,error,error,360,"Revert changes in cling module.modulemap; This reverts commit 3854aa142b82202d36d066ad9ce80f57a00f8276. It fixes:. ""While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:11:. /.../root/interpreter/cling/include/cling/Interpreter/DynamicLookupRuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". ^. While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:17:""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3599
https://github.com/root-project/root/pull/3599:441,safety,modul,module,441,"Revert changes in cling module.modulemap; This reverts commit 3854aa142b82202d36d066ad9ce80f57a00f8276. It fixes:. ""While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:11:. /.../root/interpreter/cling/include/cling/Interpreter/DynamicLookupRuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". ^. While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:17:""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3599
https://github.com/root-project/root/pull/3599:557,safety,modul,module-includes,557,"Revert changes in cling module.modulemap; This reverts commit 3854aa142b82202d36d066ad9ce80f57a00f8276. It fixes:. ""While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:11:. /.../root/interpreter/cling/include/cling/Interpreter/DynamicLookupRuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". ^. While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:17:""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3599
https://github.com/root-project/root/pull/3599:360,usability,error,error,360,"Revert changes in cling module.modulemap; This reverts commit 3854aa142b82202d36d066ad9ce80f57a00f8276. It fixes:. ""While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:11:. /.../root/interpreter/cling/include/cling/Interpreter/DynamicLookupRuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". ^. While building module 'Cling_Interpreter' imported from /.../root/core/metacling/src/TClingCallbacks.h:12:. In file included from <module-includes>:17:""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3599
https://github.com/root-project/root/pull/3600:421,availability,error,error,421,"Missing lines from modulemap from previous revert; From V.Vasilev, it fixes:. [ 72%] Building CXX object interpreter/llvm/src/tools/clang/lib/CodeGen/CMakeFiles/clangCodeGen.dir/CodeGenModule.cpp.o. While building module 'Cling_Interpreter' imported from /.../root/core/clingutils/src/RStl.cxx:25:. In file included from <module-includes>:5:. /.../root/interpreter/cling/include/cling/Interpreter/RuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". #error ""This file must not be included by compiled programs."". ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3600
https://github.com/root-project/root/pull/3600:485,availability,error,error,485,"Missing lines from modulemap from previous revert; From V.Vasilev, it fixes:. [ 72%] Building CXX object interpreter/llvm/src/tools/clang/lib/CodeGen/CMakeFiles/clangCodeGen.dir/CodeGenModule.cpp.o. While building module 'Cling_Interpreter' imported from /.../root/core/clingutils/src/RStl.cxx:25:. In file included from <module-includes>:5:. /.../root/interpreter/cling/include/cling/Interpreter/RuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". #error ""This file must not be included by compiled programs."". ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3600
https://github.com/root-project/root/pull/3600:19,deployability,modul,modulemap,19,"Missing lines from modulemap from previous revert; From V.Vasilev, it fixes:. [ 72%] Building CXX object interpreter/llvm/src/tools/clang/lib/CodeGen/CMakeFiles/clangCodeGen.dir/CodeGenModule.cpp.o. While building module 'Cling_Interpreter' imported from /.../root/core/clingutils/src/RStl.cxx:25:. In file included from <module-includes>:5:. /.../root/interpreter/cling/include/cling/Interpreter/RuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". #error ""This file must not be included by compiled programs."". ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3600
https://github.com/root-project/root/pull/3600:85,deployability,Build,Building,85,"Missing lines from modulemap from previous revert; From V.Vasilev, it fixes:. [ 72%] Building CXX object interpreter/llvm/src/tools/clang/lib/CodeGen/CMakeFiles/clangCodeGen.dir/CodeGenModule.cpp.o. While building module 'Cling_Interpreter' imported from /.../root/core/clingutils/src/RStl.cxx:25:. In file included from <module-includes>:5:. /.../root/interpreter/cling/include/cling/Interpreter/RuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". #error ""This file must not be included by compiled programs."". ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3600
https://github.com/root-project/root/pull/3600:205,deployability,build,building,205,"Missing lines from modulemap from previous revert; From V.Vasilev, it fixes:. [ 72%] Building CXX object interpreter/llvm/src/tools/clang/lib/CodeGen/CMakeFiles/clangCodeGen.dir/CodeGenModule.cpp.o. While building module 'Cling_Interpreter' imported from /.../root/core/clingutils/src/RStl.cxx:25:. In file included from <module-includes>:5:. /.../root/interpreter/cling/include/cling/Interpreter/RuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". #error ""This file must not be included by compiled programs."". ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3600
https://github.com/root-project/root/pull/3600:214,deployability,modul,module,214,"Missing lines from modulemap from previous revert; From V.Vasilev, it fixes:. [ 72%] Building CXX object interpreter/llvm/src/tools/clang/lib/CodeGen/CMakeFiles/clangCodeGen.dir/CodeGenModule.cpp.o. While building module 'Cling_Interpreter' imported from /.../root/core/clingutils/src/RStl.cxx:25:. In file included from <module-includes>:5:. /.../root/interpreter/cling/include/cling/Interpreter/RuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". #error ""This file must not be included by compiled programs."". ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3600
https://github.com/root-project/root/pull/3600:322,deployability,modul,module-includes,322,"Missing lines from modulemap from previous revert; From V.Vasilev, it fixes:. [ 72%] Building CXX object interpreter/llvm/src/tools/clang/lib/CodeGen/CMakeFiles/clangCodeGen.dir/CodeGenModule.cpp.o. While building module 'Cling_Interpreter' imported from /.../root/core/clingutils/src/RStl.cxx:25:. In file included from <module-includes>:5:. /.../root/interpreter/cling/include/cling/Interpreter/RuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". #error ""This file must not be included by compiled programs."". ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3600
https://github.com/root-project/root/pull/3600:265,energy efficiency,core,core,265,"Missing lines from modulemap from previous revert; From V.Vasilev, it fixes:. [ 72%] Building CXX object interpreter/llvm/src/tools/clang/lib/CodeGen/CMakeFiles/clangCodeGen.dir/CodeGenModule.cpp.o. While building module 'Cling_Interpreter' imported from /.../root/core/clingutils/src/RStl.cxx:25:. In file included from <module-includes>:5:. /.../root/interpreter/cling/include/cling/Interpreter/RuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". #error ""This file must not be included by compiled programs."". ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3600
https://github.com/root-project/root/pull/3600:19,modifiability,modul,modulemap,19,"Missing lines from modulemap from previous revert; From V.Vasilev, it fixes:. [ 72%] Building CXX object interpreter/llvm/src/tools/clang/lib/CodeGen/CMakeFiles/clangCodeGen.dir/CodeGenModule.cpp.o. While building module 'Cling_Interpreter' imported from /.../root/core/clingutils/src/RStl.cxx:25:. In file included from <module-includes>:5:. /.../root/interpreter/cling/include/cling/Interpreter/RuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". #error ""This file must not be included by compiled programs."". ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3600
https://github.com/root-project/root/pull/3600:214,modifiability,modul,module,214,"Missing lines from modulemap from previous revert; From V.Vasilev, it fixes:. [ 72%] Building CXX object interpreter/llvm/src/tools/clang/lib/CodeGen/CMakeFiles/clangCodeGen.dir/CodeGenModule.cpp.o. While building module 'Cling_Interpreter' imported from /.../root/core/clingutils/src/RStl.cxx:25:. In file included from <module-includes>:5:. /.../root/interpreter/cling/include/cling/Interpreter/RuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". #error ""This file must not be included by compiled programs."". ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3600
https://github.com/root-project/root/pull/3600:322,modifiability,modul,module-includes,322,"Missing lines from modulemap from previous revert; From V.Vasilev, it fixes:. [ 72%] Building CXX object interpreter/llvm/src/tools/clang/lib/CodeGen/CMakeFiles/clangCodeGen.dir/CodeGenModule.cpp.o. While building module 'Cling_Interpreter' imported from /.../root/core/clingutils/src/RStl.cxx:25:. In file included from <module-includes>:5:. /.../root/interpreter/cling/include/cling/Interpreter/RuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". #error ""This file must not be included by compiled programs."". ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3600
https://github.com/root-project/root/pull/3600:421,performance,error,error,421,"Missing lines from modulemap from previous revert; From V.Vasilev, it fixes:. [ 72%] Building CXX object interpreter/llvm/src/tools/clang/lib/CodeGen/CMakeFiles/clangCodeGen.dir/CodeGenModule.cpp.o. While building module 'Cling_Interpreter' imported from /.../root/core/clingutils/src/RStl.cxx:25:. In file included from <module-includes>:5:. /.../root/interpreter/cling/include/cling/Interpreter/RuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". #error ""This file must not be included by compiled programs."". ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3600
https://github.com/root-project/root/pull/3600:485,performance,error,error,485,"Missing lines from modulemap from previous revert; From V.Vasilev, it fixes:. [ 72%] Building CXX object interpreter/llvm/src/tools/clang/lib/CodeGen/CMakeFiles/clangCodeGen.dir/CodeGenModule.cpp.o. While building module 'Cling_Interpreter' imported from /.../root/core/clingutils/src/RStl.cxx:25:. In file included from <module-includes>:5:. /.../root/interpreter/cling/include/cling/Interpreter/RuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". #error ""This file must not be included by compiled programs."". ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3600
https://github.com/root-project/root/pull/3600:19,safety,modul,modulemap,19,"Missing lines from modulemap from previous revert; From V.Vasilev, it fixes:. [ 72%] Building CXX object interpreter/llvm/src/tools/clang/lib/CodeGen/CMakeFiles/clangCodeGen.dir/CodeGenModule.cpp.o. While building module 'Cling_Interpreter' imported from /.../root/core/clingutils/src/RStl.cxx:25:. In file included from <module-includes>:5:. /.../root/interpreter/cling/include/cling/Interpreter/RuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". #error ""This file must not be included by compiled programs."". ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3600
https://github.com/root-project/root/pull/3600:214,safety,modul,module,214,"Missing lines from modulemap from previous revert; From V.Vasilev, it fixes:. [ 72%] Building CXX object interpreter/llvm/src/tools/clang/lib/CodeGen/CMakeFiles/clangCodeGen.dir/CodeGenModule.cpp.o. While building module 'Cling_Interpreter' imported from /.../root/core/clingutils/src/RStl.cxx:25:. In file included from <module-includes>:5:. /.../root/interpreter/cling/include/cling/Interpreter/RuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". #error ""This file must not be included by compiled programs."". ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3600
https://github.com/root-project/root/pull/3600:322,safety,modul,module-includes,322,"Missing lines from modulemap from previous revert; From V.Vasilev, it fixes:. [ 72%] Building CXX object interpreter/llvm/src/tools/clang/lib/CodeGen/CMakeFiles/clangCodeGen.dir/CodeGenModule.cpp.o. While building module 'Cling_Interpreter' imported from /.../root/core/clingutils/src/RStl.cxx:25:. In file included from <module-includes>:5:. /.../root/interpreter/cling/include/cling/Interpreter/RuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". #error ""This file must not be included by compiled programs."". ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3600
https://github.com/root-project/root/pull/3600:421,safety,error,error,421,"Missing lines from modulemap from previous revert; From V.Vasilev, it fixes:. [ 72%] Building CXX object interpreter/llvm/src/tools/clang/lib/CodeGen/CMakeFiles/clangCodeGen.dir/CodeGenModule.cpp.o. While building module 'Cling_Interpreter' imported from /.../root/core/clingutils/src/RStl.cxx:25:. In file included from <module-includes>:5:. /.../root/interpreter/cling/include/cling/Interpreter/RuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". #error ""This file must not be included by compiled programs."". ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3600
https://github.com/root-project/root/pull/3600:485,safety,error,error,485,"Missing lines from modulemap from previous revert; From V.Vasilev, it fixes:. [ 72%] Building CXX object interpreter/llvm/src/tools/clang/lib/CodeGen/CMakeFiles/clangCodeGen.dir/CodeGenModule.cpp.o. While building module 'Cling_Interpreter' imported from /.../root/core/clingutils/src/RStl.cxx:25:. In file included from <module-includes>:5:. /.../root/interpreter/cling/include/cling/Interpreter/RuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". #error ""This file must not be included by compiled programs."". ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3600
https://github.com/root-project/root/pull/3600:126,usability,tool,tools,126,"Missing lines from modulemap from previous revert; From V.Vasilev, it fixes:. [ 72%] Building CXX object interpreter/llvm/src/tools/clang/lib/CodeGen/CMakeFiles/clangCodeGen.dir/CodeGenModule.cpp.o. While building module 'Cling_Interpreter' imported from /.../root/core/clingutils/src/RStl.cxx:25:. In file included from <module-includes>:5:. /.../root/interpreter/cling/include/cling/Interpreter/RuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". #error ""This file must not be included by compiled programs."". ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3600
https://github.com/root-project/root/pull/3600:421,usability,error,error,421,"Missing lines from modulemap from previous revert; From V.Vasilev, it fixes:. [ 72%] Building CXX object interpreter/llvm/src/tools/clang/lib/CodeGen/CMakeFiles/clangCodeGen.dir/CodeGenModule.cpp.o. While building module 'Cling_Interpreter' imported from /.../root/core/clingutils/src/RStl.cxx:25:. In file included from <module-includes>:5:. /.../root/interpreter/cling/include/cling/Interpreter/RuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". #error ""This file must not be included by compiled programs."". ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3600
https://github.com/root-project/root/pull/3600:485,usability,error,error,485,"Missing lines from modulemap from previous revert; From V.Vasilev, it fixes:. [ 72%] Building CXX object interpreter/llvm/src/tools/clang/lib/CodeGen/CMakeFiles/clangCodeGen.dir/CodeGenModule.cpp.o. While building module 'Cling_Interpreter' imported from /.../root/core/clingutils/src/RStl.cxx:25:. In file included from <module-includes>:5:. /.../root/interpreter/cling/include/cling/Interpreter/RuntimeUniverse.h:13:2: error: ""This file must not be included by compiled programs."". #error ""This file must not be included by compiled programs."". ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3600
https://github.com/root-project/root/pull/3601:56,availability,operat,operation,56,[TTree] Avoid getting the number of branches twice; The operation is relatively costly as TObjArray::GetEntries also. creates a TReadLockGuard.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3601
https://github.com/root-project/root/pull/3601:8,safety,Avoid,Avoid,8,[TTree] Avoid getting the number of branches twice; The operation is relatively costly as TObjArray::GetEntries also. creates a TReadLockGuard.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3601
https://github.com/root-project/root/pull/3602:126,energy efficiency,green,green,126,[ROOT-9707][DF] Defer declaration of type aliases to the interpreter until right before the event loop; ~~This PR should turn green when [ROOT-9790](https://sft.its.cern.ch/jira/browse/ROOT-9790) is resolved.~~ A temporary workaround for greedy jitting of `Cache` and `Snapshot` has been added.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3602
https://github.com/root-project/root/pull/3602:92,integrability,event,event,92,[ROOT-9707][DF] Defer declaration of type aliases to the interpreter until right before the event loop; ~~This PR should turn green when [ROOT-9790](https://sft.its.cern.ch/jira/browse/ROOT-9790) is resolved.~~ A temporary workaround for greedy jitting of `Cache` and `Snapshot` has been added.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3602
https://github.com/root-project/root/pull/3602:257,performance,Cach,Cache,257,[ROOT-9707][DF] Defer declaration of type aliases to the interpreter until right before the event loop; ~~This PR should turn green when [ROOT-9790](https://sft.its.cern.ch/jira/browse/ROOT-9790) is resolved.~~ A temporary workaround for greedy jitting of `Cache` and `Snapshot` has been added.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3602
https://github.com/root-project/root/pull/3603:319,availability,operat,operations,319,"[TTree] Call GetEntriesUnsafe instead of GetEntriesFast when possible; `GetEntriesFast` is not as fast as it could be: it constructs and. destructs a `TReadLockGuard`, and might need to modify `TObjArray::fLast`. This PR introduced `GetEntriesUnsafe`, a thread-unsafe version of `GetEntriesFast`. that side-steps these operations when possible. Measurements for the benchmarks in the `philippe` branch of the [df_bench](https://gitlab.com/bluehood/df_bench) repository:. With `GetEntriesFast`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 192943 ns 192939 ns 3664. TreeGetEntryTwoBranchesAndAllStatusFalse 110524 ns 110521 ns 6433. TreeGetEntryTwoBranches 195864 ns 195859 ns 3430. TreeGetEntryTwoBranchesWithoutSetStatus 317772 ns 317761 ns 2095. BranchGetEntryOneBranch 103652 ns 103650 ns 6730. BranchGetEntryTwoBranches 104072 ns 104070 ns 6707. ```. With `GetEntriesUnsafe`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 152708 ns 152690 ns 4579. TreeGetEntryTwoBranchesAndAllStatusFalse 91277 ns 91274 ns 7731. TreeGetEntryTwoBranches 173940 ns 173922 ns 4024. TreeGetEntryTwoBranchesWithoutSetStatus 279271 ns 279261 ns 2514. BranchGetEntryOneBranch 104515 ns 104503 ns 6721. BranchGetEntryTwoBranches 104180 ns 104177 ns 6652. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3603
https://github.com/root-project/root/pull/3603:268,deployability,version,version,268,"[TTree] Call GetEntriesUnsafe instead of GetEntriesFast when possible; `GetEntriesFast` is not as fast as it could be: it constructs and. destructs a `TReadLockGuard`, and might need to modify `TObjArray::fLast`. This PR introduced `GetEntriesUnsafe`, a thread-unsafe version of `GetEntriesFast`. that side-steps these operations when possible. Measurements for the benchmarks in the `philippe` branch of the [df_bench](https://gitlab.com/bluehood/df_bench) repository:. With `GetEntriesFast`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 192943 ns 192939 ns 3664. TreeGetEntryTwoBranchesAndAllStatusFalse 110524 ns 110521 ns 6433. TreeGetEntryTwoBranches 195864 ns 195859 ns 3430. TreeGetEntryTwoBranchesWithoutSetStatus 317772 ns 317761 ns 2095. BranchGetEntryOneBranch 103652 ns 103650 ns 6730. BranchGetEntryTwoBranches 104072 ns 104070 ns 6707. ```. With `GetEntriesUnsafe`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 152708 ns 152690 ns 4579. TreeGetEntryTwoBranchesAndAllStatusFalse 91277 ns 91274 ns 7731. TreeGetEntryTwoBranches 173940 ns 173922 ns 4024. TreeGetEntryTwoBranchesWithoutSetStatus 279271 ns 279261 ns 2514. BranchGetEntryOneBranch 104515 ns 104503 ns 6721. BranchGetEntryTwoBranches 104180 ns 104177 ns 6652. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3603
https://github.com/root-project/root/pull/3603:345,energy efficiency,Measur,Measurements,345,"[TTree] Call GetEntriesUnsafe instead of GetEntriesFast when possible; `GetEntriesFast` is not as fast as it could be: it constructs and. destructs a `TReadLockGuard`, and might need to modify `TObjArray::fLast`. This PR introduced `GetEntriesUnsafe`, a thread-unsafe version of `GetEntriesFast`. that side-steps these operations when possible. Measurements for the benchmarks in the `philippe` branch of the [df_bench](https://gitlab.com/bluehood/df_bench) repository:. With `GetEntriesFast`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 192943 ns 192939 ns 3664. TreeGetEntryTwoBranchesAndAllStatusFalse 110524 ns 110521 ns 6433. TreeGetEntryTwoBranches 195864 ns 195859 ns 3430. TreeGetEntryTwoBranchesWithoutSetStatus 317772 ns 317761 ns 2095. BranchGetEntryOneBranch 103652 ns 103650 ns 6730. BranchGetEntryTwoBranches 104072 ns 104070 ns 6707. ```. With `GetEntriesUnsafe`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 152708 ns 152690 ns 4579. TreeGetEntryTwoBranchesAndAllStatusFalse 91277 ns 91274 ns 7731. TreeGetEntryTwoBranches 173940 ns 173922 ns 4024. TreeGetEntryTwoBranchesWithoutSetStatus 279271 ns 279261 ns 2514. BranchGetEntryOneBranch 104515 ns 104503 ns 6721. BranchGetEntryTwoBranches 104180 ns 104177 ns 6652. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3603
https://github.com/root-project/root/pull/3603:600,energy efficiency,CPU,CPU,600,"[TTree] Call GetEntriesUnsafe instead of GetEntriesFast when possible; `GetEntriesFast` is not as fast as it could be: it constructs and. destructs a `TReadLockGuard`, and might need to modify `TObjArray::fLast`. This PR introduced `GetEntriesUnsafe`, a thread-unsafe version of `GetEntriesFast`. that side-steps these operations when possible. Measurements for the benchmarks in the `philippe` branch of the [df_bench](https://gitlab.com/bluehood/df_bench) repository:. With `GetEntriesFast`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 192943 ns 192939 ns 3664. TreeGetEntryTwoBranchesAndAllStatusFalse 110524 ns 110521 ns 6433. TreeGetEntryTwoBranches 195864 ns 195859 ns 3430. TreeGetEntryTwoBranchesWithoutSetStatus 317772 ns 317761 ns 2095. BranchGetEntryOneBranch 103652 ns 103650 ns 6730. BranchGetEntryTwoBranches 104072 ns 104070 ns 6707. ```. With `GetEntriesUnsafe`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 152708 ns 152690 ns 4579. TreeGetEntryTwoBranchesAndAllStatusFalse 91277 ns 91274 ns 7731. TreeGetEntryTwoBranches 173940 ns 173922 ns 4024. TreeGetEntryTwoBranchesWithoutSetStatus 279271 ns 279261 ns 2514. BranchGetEntryOneBranch 104515 ns 104503 ns 6721. BranchGetEntryTwoBranches 104180 ns 104177 ns 6652. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3603
https://github.com/root-project/root/pull/3603:1170,energy efficiency,CPU,CPU,1170,"[TTree] Call GetEntriesUnsafe instead of GetEntriesFast when possible; `GetEntriesFast` is not as fast as it could be: it constructs and. destructs a `TReadLockGuard`, and might need to modify `TObjArray::fLast`. This PR introduced `GetEntriesUnsafe`, a thread-unsafe version of `GetEntriesFast`. that side-steps these operations when possible. Measurements for the benchmarks in the `philippe` branch of the [df_bench](https://gitlab.com/bluehood/df_bench) repository:. With `GetEntriesFast`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 192943 ns 192939 ns 3664. TreeGetEntryTwoBranchesAndAllStatusFalse 110524 ns 110521 ns 6433. TreeGetEntryTwoBranches 195864 ns 195859 ns 3430. TreeGetEntryTwoBranchesWithoutSetStatus 317772 ns 317761 ns 2095. BranchGetEntryOneBranch 103652 ns 103650 ns 6730. BranchGetEntryTwoBranches 104072 ns 104070 ns 6707. ```. With `GetEntriesUnsafe`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 152708 ns 152690 ns 4579. TreeGetEntryTwoBranchesAndAllStatusFalse 91277 ns 91274 ns 7731. TreeGetEntryTwoBranches 173940 ns 173922 ns 4024. TreeGetEntryTwoBranchesWithoutSetStatus 279271 ns 279261 ns 2514. BranchGetEntryOneBranch 104515 ns 104503 ns 6721. BranchGetEntryTwoBranches 104180 ns 104177 ns 6652. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3603
https://github.com/root-project/root/pull/3603:268,integrability,version,version,268,"[TTree] Call GetEntriesUnsafe instead of GetEntriesFast when possible; `GetEntriesFast` is not as fast as it could be: it constructs and. destructs a `TReadLockGuard`, and might need to modify `TObjArray::fLast`. This PR introduced `GetEntriesUnsafe`, a thread-unsafe version of `GetEntriesFast`. that side-steps these operations when possible. Measurements for the benchmarks in the `philippe` branch of the [df_bench](https://gitlab.com/bluehood/df_bench) repository:. With `GetEntriesFast`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 192943 ns 192939 ns 3664. TreeGetEntryTwoBranchesAndAllStatusFalse 110524 ns 110521 ns 6433. TreeGetEntryTwoBranches 195864 ns 195859 ns 3430. TreeGetEntryTwoBranchesWithoutSetStatus 317772 ns 317761 ns 2095. BranchGetEntryOneBranch 103652 ns 103650 ns 6730. BranchGetEntryTwoBranches 104072 ns 104070 ns 6707. ```. With `GetEntriesUnsafe`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 152708 ns 152690 ns 4579. TreeGetEntryTwoBranchesAndAllStatusFalse 91277 ns 91274 ns 7731. TreeGetEntryTwoBranches 173940 ns 173922 ns 4024. TreeGetEntryTwoBranchesWithoutSetStatus 279271 ns 279261 ns 2514. BranchGetEntryOneBranch 104515 ns 104503 ns 6721. BranchGetEntryTwoBranches 104180 ns 104177 ns 6652. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3603
https://github.com/root-project/root/pull/3603:458,integrability,repositor,repository,458,"[TTree] Call GetEntriesUnsafe instead of GetEntriesFast when possible; `GetEntriesFast` is not as fast as it could be: it constructs and. destructs a `TReadLockGuard`, and might need to modify `TObjArray::fLast`. This PR introduced `GetEntriesUnsafe`, a thread-unsafe version of `GetEntriesFast`. that side-steps these operations when possible. Measurements for the benchmarks in the `philippe` branch of the [df_bench](https://gitlab.com/bluehood/df_bench) repository:. With `GetEntriesFast`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 192943 ns 192939 ns 3664. TreeGetEntryTwoBranchesAndAllStatusFalse 110524 ns 110521 ns 6433. TreeGetEntryTwoBranches 195864 ns 195859 ns 3430. TreeGetEntryTwoBranchesWithoutSetStatus 317772 ns 317761 ns 2095. BranchGetEntryOneBranch 103652 ns 103650 ns 6730. BranchGetEntryTwoBranches 104072 ns 104070 ns 6707. ```. With `GetEntriesUnsafe`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 152708 ns 152690 ns 4579. TreeGetEntryTwoBranchesAndAllStatusFalse 91277 ns 91274 ns 7731. TreeGetEntryTwoBranches 173940 ns 173922 ns 4024. TreeGetEntryTwoBranchesWithoutSetStatus 279271 ns 279261 ns 2514. BranchGetEntryOneBranch 104515 ns 104503 ns 6721. BranchGetEntryTwoBranches 104180 ns 104177 ns 6652. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3603
https://github.com/root-project/root/pull/3603:458,interoperability,repositor,repository,458,"[TTree] Call GetEntriesUnsafe instead of GetEntriesFast when possible; `GetEntriesFast` is not as fast as it could be: it constructs and. destructs a `TReadLockGuard`, and might need to modify `TObjArray::fLast`. This PR introduced `GetEntriesUnsafe`, a thread-unsafe version of `GetEntriesFast`. that side-steps these operations when possible. Measurements for the benchmarks in the `philippe` branch of the [df_bench](https://gitlab.com/bluehood/df_bench) repository:. With `GetEntriesFast`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 192943 ns 192939 ns 3664. TreeGetEntryTwoBranchesAndAllStatusFalse 110524 ns 110521 ns 6433. TreeGetEntryTwoBranches 195864 ns 195859 ns 3430. TreeGetEntryTwoBranchesWithoutSetStatus 317772 ns 317761 ns 2095. BranchGetEntryOneBranch 103652 ns 103650 ns 6730. BranchGetEntryTwoBranches 104072 ns 104070 ns 6707. ```. With `GetEntriesUnsafe`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 152708 ns 152690 ns 4579. TreeGetEntryTwoBranchesAndAllStatusFalse 91277 ns 91274 ns 7731. TreeGetEntryTwoBranches 173940 ns 173922 ns 4024. TreeGetEntryTwoBranchesWithoutSetStatus 279271 ns 279261 ns 2514. BranchGetEntryOneBranch 104515 ns 104503 ns 6721. BranchGetEntryTwoBranches 104180 ns 104177 ns 6652. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3603
https://github.com/root-project/root/pull/3603:268,modifiability,version,version,268,"[TTree] Call GetEntriesUnsafe instead of GetEntriesFast when possible; `GetEntriesFast` is not as fast as it could be: it constructs and. destructs a `TReadLockGuard`, and might need to modify `TObjArray::fLast`. This PR introduced `GetEntriesUnsafe`, a thread-unsafe version of `GetEntriesFast`. that side-steps these operations when possible. Measurements for the benchmarks in the `philippe` branch of the [df_bench](https://gitlab.com/bluehood/df_bench) repository:. With `GetEntriesFast`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 192943 ns 192939 ns 3664. TreeGetEntryTwoBranchesAndAllStatusFalse 110524 ns 110521 ns 6433. TreeGetEntryTwoBranches 195864 ns 195859 ns 3430. TreeGetEntryTwoBranchesWithoutSetStatus 317772 ns 317761 ns 2095. BranchGetEntryOneBranch 103652 ns 103650 ns 6730. BranchGetEntryTwoBranches 104072 ns 104070 ns 6707. ```. With `GetEntriesUnsafe`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 152708 ns 152690 ns 4579. TreeGetEntryTwoBranchesAndAllStatusFalse 91277 ns 91274 ns 7731. TreeGetEntryTwoBranches 173940 ns 173922 ns 4024. TreeGetEntryTwoBranchesWithoutSetStatus 279271 ns 279261 ns 2514. BranchGetEntryOneBranch 104515 ns 104503 ns 6721. BranchGetEntryTwoBranches 104180 ns 104177 ns 6652. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3603
https://github.com/root-project/root/pull/3603:595,performance,Time,Time,595,"[TTree] Call GetEntriesUnsafe instead of GetEntriesFast when possible; `GetEntriesFast` is not as fast as it could be: it constructs and. destructs a `TReadLockGuard`, and might need to modify `TObjArray::fLast`. This PR introduced `GetEntriesUnsafe`, a thread-unsafe version of `GetEntriesFast`. that side-steps these operations when possible. Measurements for the benchmarks in the `philippe` branch of the [df_bench](https://gitlab.com/bluehood/df_bench) repository:. With `GetEntriesFast`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 192943 ns 192939 ns 3664. TreeGetEntryTwoBranchesAndAllStatusFalse 110524 ns 110521 ns 6433. TreeGetEntryTwoBranches 195864 ns 195859 ns 3430. TreeGetEntryTwoBranchesWithoutSetStatus 317772 ns 317761 ns 2095. BranchGetEntryOneBranch 103652 ns 103650 ns 6730. BranchGetEntryTwoBranches 104072 ns 104070 ns 6707. ```. With `GetEntriesUnsafe`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 152708 ns 152690 ns 4579. TreeGetEntryTwoBranchesAndAllStatusFalse 91277 ns 91274 ns 7731. TreeGetEntryTwoBranches 173940 ns 173922 ns 4024. TreeGetEntryTwoBranchesWithoutSetStatus 279271 ns 279261 ns 2514. BranchGetEntryOneBranch 104515 ns 104503 ns 6721. BranchGetEntryTwoBranches 104180 ns 104177 ns 6652. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3603
https://github.com/root-project/root/pull/3603:600,performance,CPU,CPU,600,"[TTree] Call GetEntriesUnsafe instead of GetEntriesFast when possible; `GetEntriesFast` is not as fast as it could be: it constructs and. destructs a `TReadLockGuard`, and might need to modify `TObjArray::fLast`. This PR introduced `GetEntriesUnsafe`, a thread-unsafe version of `GetEntriesFast`. that side-steps these operations when possible. Measurements for the benchmarks in the `philippe` branch of the [df_bench](https://gitlab.com/bluehood/df_bench) repository:. With `GetEntriesFast`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 192943 ns 192939 ns 3664. TreeGetEntryTwoBranchesAndAllStatusFalse 110524 ns 110521 ns 6433. TreeGetEntryTwoBranches 195864 ns 195859 ns 3430. TreeGetEntryTwoBranchesWithoutSetStatus 317772 ns 317761 ns 2095. BranchGetEntryOneBranch 103652 ns 103650 ns 6730. BranchGetEntryTwoBranches 104072 ns 104070 ns 6707. ```. With `GetEntriesUnsafe`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 152708 ns 152690 ns 4579. TreeGetEntryTwoBranchesAndAllStatusFalse 91277 ns 91274 ns 7731. TreeGetEntryTwoBranches 173940 ns 173922 ns 4024. TreeGetEntryTwoBranchesWithoutSetStatus 279271 ns 279261 ns 2514. BranchGetEntryOneBranch 104515 ns 104503 ns 6721. BranchGetEntryTwoBranches 104180 ns 104177 ns 6652. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3603
https://github.com/root-project/root/pull/3603:1165,performance,Time,Time,1165,"[TTree] Call GetEntriesUnsafe instead of GetEntriesFast when possible; `GetEntriesFast` is not as fast as it could be: it constructs and. destructs a `TReadLockGuard`, and might need to modify `TObjArray::fLast`. This PR introduced `GetEntriesUnsafe`, a thread-unsafe version of `GetEntriesFast`. that side-steps these operations when possible. Measurements for the benchmarks in the `philippe` branch of the [df_bench](https://gitlab.com/bluehood/df_bench) repository:. With `GetEntriesFast`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 192943 ns 192939 ns 3664. TreeGetEntryTwoBranchesAndAllStatusFalse 110524 ns 110521 ns 6433. TreeGetEntryTwoBranches 195864 ns 195859 ns 3430. TreeGetEntryTwoBranchesWithoutSetStatus 317772 ns 317761 ns 2095. BranchGetEntryOneBranch 103652 ns 103650 ns 6730. BranchGetEntryTwoBranches 104072 ns 104070 ns 6707. ```. With `GetEntriesUnsafe`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 152708 ns 152690 ns 4579. TreeGetEntryTwoBranchesAndAllStatusFalse 91277 ns 91274 ns 7731. TreeGetEntryTwoBranches 173940 ns 173922 ns 4024. TreeGetEntryTwoBranchesWithoutSetStatus 279271 ns 279261 ns 2514. BranchGetEntryOneBranch 104515 ns 104503 ns 6721. BranchGetEntryTwoBranches 104180 ns 104177 ns 6652. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3603
https://github.com/root-project/root/pull/3603:1170,performance,CPU,CPU,1170,"[TTree] Call GetEntriesUnsafe instead of GetEntriesFast when possible; `GetEntriesFast` is not as fast as it could be: it constructs and. destructs a `TReadLockGuard`, and might need to modify `TObjArray::fLast`. This PR introduced `GetEntriesUnsafe`, a thread-unsafe version of `GetEntriesFast`. that side-steps these operations when possible. Measurements for the benchmarks in the `philippe` branch of the [df_bench](https://gitlab.com/bluehood/df_bench) repository:. With `GetEntriesFast`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 192943 ns 192939 ns 3664. TreeGetEntryTwoBranchesAndAllStatusFalse 110524 ns 110521 ns 6433. TreeGetEntryTwoBranches 195864 ns 195859 ns 3430. TreeGetEntryTwoBranchesWithoutSetStatus 317772 ns 317761 ns 2095. BranchGetEntryOneBranch 103652 ns 103650 ns 6730. BranchGetEntryTwoBranches 104072 ns 104070 ns 6707. ```. With `GetEntriesUnsafe`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 152708 ns 152690 ns 4579. TreeGetEntryTwoBranchesAndAllStatusFalse 91277 ns 91274 ns 7731. TreeGetEntryTwoBranches 173940 ns 173922 ns 4024. TreeGetEntryTwoBranchesWithoutSetStatus 279271 ns 279261 ns 2514. BranchGetEntryOneBranch 104515 ns 104503 ns 6721. BranchGetEntryTwoBranches 104180 ns 104177 ns 6652. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3603
https://github.com/root-project/root/pull/3603:261,safety,unsaf,unsafe,261,"[TTree] Call GetEntriesUnsafe instead of GetEntriesFast when possible; `GetEntriesFast` is not as fast as it could be: it constructs and. destructs a `TReadLockGuard`, and might need to modify `TObjArray::fLast`. This PR introduced `GetEntriesUnsafe`, a thread-unsafe version of `GetEntriesFast`. that side-steps these operations when possible. Measurements for the benchmarks in the `philippe` branch of the [df_bench](https://gitlab.com/bluehood/df_bench) repository:. With `GetEntriesFast`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 192943 ns 192939 ns 3664. TreeGetEntryTwoBranchesAndAllStatusFalse 110524 ns 110521 ns 6433. TreeGetEntryTwoBranches 195864 ns 195859 ns 3430. TreeGetEntryTwoBranchesWithoutSetStatus 317772 ns 317761 ns 2095. BranchGetEntryOneBranch 103652 ns 103650 ns 6730. BranchGetEntryTwoBranches 104072 ns 104070 ns 6707. ```. With `GetEntriesUnsafe`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 152708 ns 152690 ns 4579. TreeGetEntryTwoBranchesAndAllStatusFalse 91277 ns 91274 ns 7731. TreeGetEntryTwoBranches 173940 ns 173922 ns 4024. TreeGetEntryTwoBranchesWithoutSetStatus 279271 ns 279261 ns 2514. BranchGetEntryOneBranch 104515 ns 104503 ns 6721. BranchGetEntryTwoBranches 104180 ns 104177 ns 6652. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3603
https://github.com/root-project/root/pull/3603:186,security,modif,modify,186,"[TTree] Call GetEntriesUnsafe instead of GetEntriesFast when possible; `GetEntriesFast` is not as fast as it could be: it constructs and. destructs a `TReadLockGuard`, and might need to modify `TObjArray::fLast`. This PR introduced `GetEntriesUnsafe`, a thread-unsafe version of `GetEntriesFast`. that side-steps these operations when possible. Measurements for the benchmarks in the `philippe` branch of the [df_bench](https://gitlab.com/bluehood/df_bench) repository:. With `GetEntriesFast`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 192943 ns 192939 ns 3664. TreeGetEntryTwoBranchesAndAllStatusFalse 110524 ns 110521 ns 6433. TreeGetEntryTwoBranches 195864 ns 195859 ns 3430. TreeGetEntryTwoBranchesWithoutSetStatus 317772 ns 317761 ns 2095. BranchGetEntryOneBranch 103652 ns 103650 ns 6730. BranchGetEntryTwoBranches 104072 ns 104070 ns 6707. ```. With `GetEntriesUnsafe`:. ```. -----------------------------------------------------------------------------------. Benchmark Time CPU Iterations. -----------------------------------------------------------------------------------. TreeGetEntryOneBranch 152708 ns 152690 ns 4579. TreeGetEntryTwoBranchesAndAllStatusFalse 91277 ns 91274 ns 7731. TreeGetEntryTwoBranches 173940 ns 173922 ns 4024. TreeGetEntryTwoBranchesWithoutSetStatus 279271 ns 279261 ns 2514. BranchGetEntryOneBranch 104515 ns 104503 ns 6721. BranchGetEntryTwoBranches 104180 ns 104177 ns 6652. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3603
https://github.com/root-project/root/pull/3604:0,deployability,releas,release,0,release notes about jsroot location;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3604
https://github.com/root-project/root/pull/3605:30,availability,error,error,30,"Fixes the redefinition symbol error for 'Point' for cxxmodules(macosx); . /build/jenkins/night/LABEL/mac1014/SPEC/cxxmod-noimt/root/test/testGenVectorVc.cxx:194:1: error: redefinition of 'Point' as different kind of symbol. using Point = ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<T>, ROOT::Math::DefaultCoordinateSystemTag>;. ^. In module 'Darwin' imported from /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/assert.h:42:. /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/MacTypes.h:538:8: note: previous definition is here. struct Point {. ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3605
https://github.com/root-project/root/pull/3605:164,availability,error,error,164,"Fixes the redefinition symbol error for 'Point' for cxxmodules(macosx); . /build/jenkins/night/LABEL/mac1014/SPEC/cxxmod-noimt/root/test/testGenVectorVc.cxx:194:1: error: redefinition of 'Point' as different kind of symbol. using Point = ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<T>, ROOT::Math::DefaultCoordinateSystemTag>;. ^. In module 'Darwin' imported from /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/assert.h:42:. /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/MacTypes.h:538:8: note: previous definition is here. struct Point {. ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3605
https://github.com/root-project/root/pull/3605:75,deployability,build,build,75,"Fixes the redefinition symbol error for 'Point' for cxxmodules(macosx); . /build/jenkins/night/LABEL/mac1014/SPEC/cxxmod-noimt/root/test/testGenVectorVc.cxx:194:1: error: redefinition of 'Point' as different kind of symbol. using Point = ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<T>, ROOT::Math::DefaultCoordinateSystemTag>;. ^. In module 'Darwin' imported from /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/assert.h:42:. /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/MacTypes.h:538:8: note: previous definition is here. struct Point {. ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3605
https://github.com/root-project/root/pull/3605:343,deployability,modul,module,343,"Fixes the redefinition symbol error for 'Point' for cxxmodules(macosx); . /build/jenkins/night/LABEL/mac1014/SPEC/cxxmod-noimt/root/test/testGenVectorVc.cxx:194:1: error: redefinition of 'Point' as different kind of symbol. using Point = ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<T>, ROOT::Math::DefaultCoordinateSystemTag>;. ^. In module 'Darwin' imported from /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/assert.h:42:. /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/MacTypes.h:538:8: note: previous definition is here. struct Point {. ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3605
https://github.com/root-project/root/pull/3605:343,modifiability,modul,module,343,"Fixes the redefinition symbol error for 'Point' for cxxmodules(macosx); . /build/jenkins/night/LABEL/mac1014/SPEC/cxxmod-noimt/root/test/testGenVectorVc.cxx:194:1: error: redefinition of 'Point' as different kind of symbol. using Point = ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<T>, ROOT::Math::DefaultCoordinateSystemTag>;. ^. In module 'Darwin' imported from /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/assert.h:42:. /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/MacTypes.h:538:8: note: previous definition is here. struct Point {. ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3605
https://github.com/root-project/root/pull/3605:30,performance,error,error,30,"Fixes the redefinition symbol error for 'Point' for cxxmodules(macosx); . /build/jenkins/night/LABEL/mac1014/SPEC/cxxmod-noimt/root/test/testGenVectorVc.cxx:194:1: error: redefinition of 'Point' as different kind of symbol. using Point = ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<T>, ROOT::Math::DefaultCoordinateSystemTag>;. ^. In module 'Darwin' imported from /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/assert.h:42:. /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/MacTypes.h:538:8: note: previous definition is here. struct Point {. ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3605
https://github.com/root-project/root/pull/3605:164,performance,error,error,164,"Fixes the redefinition symbol error for 'Point' for cxxmodules(macosx); . /build/jenkins/night/LABEL/mac1014/SPEC/cxxmod-noimt/root/test/testGenVectorVc.cxx:194:1: error: redefinition of 'Point' as different kind of symbol. using Point = ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<T>, ROOT::Math::DefaultCoordinateSystemTag>;. ^. In module 'Darwin' imported from /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/assert.h:42:. /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/MacTypes.h:538:8: note: previous definition is here. struct Point {. ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3605
https://github.com/root-project/root/pull/3605:30,safety,error,error,30,"Fixes the redefinition symbol error for 'Point' for cxxmodules(macosx); . /build/jenkins/night/LABEL/mac1014/SPEC/cxxmod-noimt/root/test/testGenVectorVc.cxx:194:1: error: redefinition of 'Point' as different kind of symbol. using Point = ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<T>, ROOT::Math::DefaultCoordinateSystemTag>;. ^. In module 'Darwin' imported from /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/assert.h:42:. /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/MacTypes.h:538:8: note: previous definition is here. struct Point {. ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3605
https://github.com/root-project/root/pull/3605:132,safety,test,test,132,"Fixes the redefinition symbol error for 'Point' for cxxmodules(macosx); . /build/jenkins/night/LABEL/mac1014/SPEC/cxxmod-noimt/root/test/testGenVectorVc.cxx:194:1: error: redefinition of 'Point' as different kind of symbol. using Point = ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<T>, ROOT::Math::DefaultCoordinateSystemTag>;. ^. In module 'Darwin' imported from /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/assert.h:42:. /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/MacTypes.h:538:8: note: previous definition is here. struct Point {. ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3605
https://github.com/root-project/root/pull/3605:137,safety,test,testGenVectorVc,137,"Fixes the redefinition symbol error for 'Point' for cxxmodules(macosx); . /build/jenkins/night/LABEL/mac1014/SPEC/cxxmod-noimt/root/test/testGenVectorVc.cxx:194:1: error: redefinition of 'Point' as different kind of symbol. using Point = ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<T>, ROOT::Math::DefaultCoordinateSystemTag>;. ^. In module 'Darwin' imported from /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/assert.h:42:. /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/MacTypes.h:538:8: note: previous definition is here. struct Point {. ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3605
https://github.com/root-project/root/pull/3605:164,safety,error,error,164,"Fixes the redefinition symbol error for 'Point' for cxxmodules(macosx); . /build/jenkins/night/LABEL/mac1014/SPEC/cxxmod-noimt/root/test/testGenVectorVc.cxx:194:1: error: redefinition of 'Point' as different kind of symbol. using Point = ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<T>, ROOT::Math::DefaultCoordinateSystemTag>;. ^. In module 'Darwin' imported from /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/assert.h:42:. /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/MacTypes.h:538:8: note: previous definition is here. struct Point {. ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3605
https://github.com/root-project/root/pull/3605:343,safety,modul,module,343,"Fixes the redefinition symbol error for 'Point' for cxxmodules(macosx); . /build/jenkins/night/LABEL/mac1014/SPEC/cxxmod-noimt/root/test/testGenVectorVc.cxx:194:1: error: redefinition of 'Point' as different kind of symbol. using Point = ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<T>, ROOT::Math::DefaultCoordinateSystemTag>;. ^. In module 'Darwin' imported from /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/assert.h:42:. /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/MacTypes.h:538:8: note: previous definition is here. struct Point {. ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3605
https://github.com/root-project/root/pull/3605:132,testability,test,test,132,"Fixes the redefinition symbol error for 'Point' for cxxmodules(macosx); . /build/jenkins/night/LABEL/mac1014/SPEC/cxxmod-noimt/root/test/testGenVectorVc.cxx:194:1: error: redefinition of 'Point' as different kind of symbol. using Point = ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<T>, ROOT::Math::DefaultCoordinateSystemTag>;. ^. In module 'Darwin' imported from /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/assert.h:42:. /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/MacTypes.h:538:8: note: previous definition is here. struct Point {. ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3605
https://github.com/root-project/root/pull/3605:137,testability,test,testGenVectorVc,137,"Fixes the redefinition symbol error for 'Point' for cxxmodules(macosx); . /build/jenkins/night/LABEL/mac1014/SPEC/cxxmod-noimt/root/test/testGenVectorVc.cxx:194:1: error: redefinition of 'Point' as different kind of symbol. using Point = ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<T>, ROOT::Math::DefaultCoordinateSystemTag>;. ^. In module 'Darwin' imported from /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/assert.h:42:. /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/MacTypes.h:538:8: note: previous definition is here. struct Point {. ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3605
https://github.com/root-project/root/pull/3605:442,testability,assert,assert,442,"Fixes the redefinition symbol error for 'Point' for cxxmodules(macosx); . /build/jenkins/night/LABEL/mac1014/SPEC/cxxmod-noimt/root/test/testGenVectorVc.cxx:194:1: error: redefinition of 'Point' as different kind of symbol. using Point = ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<T>, ROOT::Math::DefaultCoordinateSystemTag>;. ^. In module 'Darwin' imported from /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/assert.h:42:. /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/MacTypes.h:538:8: note: previous definition is here. struct Point {. ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3605
https://github.com/root-project/root/pull/3605:30,usability,error,error,30,"Fixes the redefinition symbol error for 'Point' for cxxmodules(macosx); . /build/jenkins/night/LABEL/mac1014/SPEC/cxxmod-noimt/root/test/testGenVectorVc.cxx:194:1: error: redefinition of 'Point' as different kind of symbol. using Point = ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<T>, ROOT::Math::DefaultCoordinateSystemTag>;. ^. In module 'Darwin' imported from /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/assert.h:42:. /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/MacTypes.h:538:8: note: previous definition is here. struct Point {. ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3605
https://github.com/root-project/root/pull/3605:164,usability,error,error,164,"Fixes the redefinition symbol error for 'Point' for cxxmodules(macosx); . /build/jenkins/night/LABEL/mac1014/SPEC/cxxmod-noimt/root/test/testGenVectorVc.cxx:194:1: error: redefinition of 'Point' as different kind of symbol. using Point = ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<T>, ROOT::Math::DefaultCoordinateSystemTag>;. ^. In module 'Darwin' imported from /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/assert.h:42:. /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/MacTypes.h:538:8: note: previous definition is here. struct Point {. ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3605
https://github.com/root-project/root/pull/3605:392,usability,Command,CommandLineTools,392,"Fixes the redefinition symbol error for 'Point' for cxxmodules(macosx); . /build/jenkins/night/LABEL/mac1014/SPEC/cxxmod-noimt/root/test/testGenVectorVc.cxx:194:1: error: redefinition of 'Point' as different kind of symbol. using Point = ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<T>, ROOT::Math::DefaultCoordinateSystemTag>;. ^. In module 'Darwin' imported from /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/assert.h:42:. /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/MacTypes.h:538:8: note: previous definition is here. struct Point {. ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3605
https://github.com/root-project/root/pull/3605:475,usability,Command,CommandLineTools,475,"Fixes the redefinition symbol error for 'Point' for cxxmodules(macosx); . /build/jenkins/night/LABEL/mac1014/SPEC/cxxmod-noimt/root/test/testGenVectorVc.cxx:194:1: error: redefinition of 'Point' as different kind of symbol. using Point = ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<T>, ROOT::Math::DefaultCoordinateSystemTag>;. ^. In module 'Darwin' imported from /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/assert.h:42:. /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/MacTypes.h:538:8: note: previous definition is here. struct Point {. ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3605
https://github.com/root-project/root/pull/3606:18,performance,lock,lock,18,Add missing write lock guard in TObjArray::GetAbsLast.; This fixes ROOT-10057,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3606
https://github.com/root-project/root/pull/3606:18,security,lock,lock,18,Add missing write lock guard in TObjArray::GetAbsLast.; This fixes ROOT-10057,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3606
https://github.com/root-project/root/pull/3611:19,deployability,updat,updates,19,"[RF] Documentation updates.; Add pending updates of the RooFit documentation such as fixing typos, adding clarifications and pulling comments outside of functions such that doxygen can find them. Meant to be an NFC, but run CI to be sure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3611
https://github.com/root-project/root/pull/3611:41,deployability,updat,updates,41,"[RF] Documentation updates.; Add pending updates of the RooFit documentation such as fixing typos, adding clarifications and pulling comments outside of functions such that doxygen can find them. Meant to be an NFC, but run CI to be sure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3611
https://github.com/root-project/root/pull/3611:19,safety,updat,updates,19,"[RF] Documentation updates.; Add pending updates of the RooFit documentation such as fixing typos, adding clarifications and pulling comments outside of functions such that doxygen can find them. Meant to be an NFC, but run CI to be sure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3611
https://github.com/root-project/root/pull/3611:41,safety,updat,updates,41,"[RF] Documentation updates.; Add pending updates of the RooFit documentation such as fixing typos, adding clarifications and pulling comments outside of functions such that doxygen can find them. Meant to be an NFC, but run CI to be sure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3611
https://github.com/root-project/root/pull/3611:19,security,updat,updates,19,"[RF] Documentation updates.; Add pending updates of the RooFit documentation such as fixing typos, adding clarifications and pulling comments outside of functions such that doxygen can find them. Meant to be an NFC, but run CI to be sure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3611
https://github.com/root-project/root/pull/3611:41,security,updat,updates,41,"[RF] Documentation updates.; Add pending updates of the RooFit documentation such as fixing typos, adding clarifications and pulling comments outside of functions such that doxygen can find them. Meant to be an NFC, but run CI to be sure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3611
https://github.com/root-project/root/pull/3611:5,usability,Document,Documentation,5,"[RF] Documentation updates.; Add pending updates of the RooFit documentation such as fixing typos, adding clarifications and pulling comments outside of functions such that doxygen can find them. Meant to be an NFC, but run CI to be sure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3611
https://github.com/root-project/root/pull/3611:63,usability,document,documentation,63,"[RF] Documentation updates.; Add pending updates of the RooFit documentation such as fixing typos, adding clarifications and pulling comments outside of functions such that doxygen can find them. Meant to be an NFC, but run CI to be sure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3611
https://github.com/root-project/root/pull/3612:69,deployability,API,API,69,Bulk I/O - v3 revision PR; @pcanal @bbockelm . This PR is about Bulk API after revision of previous PR #2519,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3612
https://github.com/root-project/root/pull/3612:69,integrability,API,API,69,Bulk I/O - v3 revision PR; @pcanal @bbockelm . This PR is about Bulk API after revision of previous PR #2519,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3612
https://github.com/root-project/root/pull/3612:69,interoperability,API,API,69,Bulk I/O - v3 revision PR; @pcanal @bbockelm . This PR is about Bulk API after revision of previous PR #2519,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3612
https://github.com/root-project/root/pull/3612:5,performance,I/O,I/O,5,Bulk I/O - v3 revision PR; @pcanal @bbockelm . This PR is about Bulk API after revision of previous PR #2519,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3612
https://github.com/root-project/root/pull/3616:12,energy efficiency,Optim,Optimize,12,"[metacling] Optimize TCling*Info interfaces; Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3616
https://github.com/root-project/root/pull/3616:45,energy efficiency,Current,Currently,45,"[metacling] Optimize TCling*Info interfaces; Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3616
https://github.com/root-project/root/pull/3616:168,energy efficiency,alloc,allocations,168,"[metacling] Optimize TCling*Info interfaces; Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3616
https://github.com/root-project/root/pull/3616:299,energy efficiency,reduc,reduces,299,"[metacling] Optimize TCling*Info interfaces; Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3616
https://github.com/root-project/root/pull/3616:328,energy efficiency,alloc,allocations,328,"[metacling] Optimize TCling*Info interfaces; Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3616
https://github.com/root-project/root/pull/3616:485,energy efficiency,reduc,reduce,485,"[metacling] Optimize TCling*Info interfaces; Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3616
https://github.com/root-project/root/pull/3616:506,energy efficiency,alloc,allocations,506,"[metacling] Optimize TCling*Info interfaces; Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3616
https://github.com/root-project/root/pull/3616:33,integrability,interfac,interfaces,33,"[metacling] Optimize TCling*Info interfaces; Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3616
https://github.com/root-project/root/pull/3616:68,integrability,interfac,interface,68,"[metacling] Optimize TCling*Info interfaces; Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3616
https://github.com/root-project/root/pull/3616:127,integrability,sub,suboptimal,127,"[metacling] Optimize TCling*Info interfaces; Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3616
https://github.com/root-project/root/pull/3616:33,interoperability,interfac,interfaces,33,"[metacling] Optimize TCling*Info interfaces; Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3616
https://github.com/root-project/root/pull/3616:68,interoperability,interfac,interface,68,"[metacling] Optimize TCling*Info interfaces; Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3616
https://github.com/root-project/root/pull/3616:352,interoperability,standard,standard,352,"[metacling] Optimize TCling*Info interfaces; Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3616
https://github.com/root-project/root/pull/3616:33,modifiability,interfac,interfaces,33,"[metacling] Optimize TCling*Info interfaces; Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3616
https://github.com/root-project/root/pull/3616:68,modifiability,interfac,interface,68,"[metacling] Optimize TCling*Info interfaces; Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3616
https://github.com/root-project/root/pull/3616:12,performance,Optimiz,Optimize,12,"[metacling] Optimize TCling*Info interfaces; Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3616
https://github.com/root-project/root/pull/3616:161,performance,memor,memory,161,"[metacling] Optimize TCling*Info interfaces; Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3616
https://github.com/root-project/root/pull/3616:266,performance,cach,cache,266,"[metacling] Optimize TCling*Info interfaces; Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3616
https://github.com/root-project/root/pull/3616:321,performance,memor,memory,321,"[metacling] Optimize TCling*Info interfaces; Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3616
https://github.com/root-project/root/pull/3616:403,performance,cach,cache,403,"[metacling] Optimize TCling*Info interfaces; Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3616
https://github.com/root-project/root/pull/3616:572,performance,memor,memory,572,"[metacling] Optimize TCling*Info interfaces; Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3616
https://github.com/root-project/root/pull/3616:427,safety,test,test,427,"[metacling] Optimize TCling*Info interfaces; Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3616
https://github.com/root-project/root/pull/3616:215,security,immut,immutable,215,"[metacling] Optimize TCling*Info interfaces; Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3616
https://github.com/root-project/root/pull/3616:427,testability,test,test,427,"[metacling] Optimize TCling*Info interfaces; Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3616
https://github.com/root-project/root/pull/3616:161,usability,memor,memory,161,"[metacling] Optimize TCling*Info interfaces; Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3616
https://github.com/root-project/root/pull/3616:321,usability,memor,memory,321,"[metacling] Optimize TCling*Info interfaces; Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3616
https://github.com/root-project/root/pull/3616:572,usability,memor,memory,572,"[metacling] Optimize TCling*Info interfaces; Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3616
https://github.com/root-project/root/pull/3617:16,integrability,Event,Event,16,Fix conflicting Event definitions in roottest;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3617
https://github.com/root-project/root/pull/3617:4,interoperability,conflict,conflicting,4,Fix conflicting Event definitions in roottest;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3617
https://github.com/root-project/root/pull/3618:46,availability,operat,operation,46,"Added user defined const properties. Added Up operation in TGeoIterator.; This is needed to map to the corresponding feature of Geant4, allowing the user to add constant properties as a map <TString, Double_t> that becomes persistent.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3618
https://github.com/root-project/root/pull/3618:6,usability,user,user,6,"Added user defined const properties. Added Up operation in TGeoIterator.; This is needed to map to the corresponding feature of Geant4, allowing the user to add constant properties as a map <TString, Double_t> that becomes persistent.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3618
https://github.com/root-project/root/pull/3618:149,usability,user,user,149,"Added user defined const properties. Added Up operation in TGeoIterator.; This is needed to map to the corresponding feature of Geant4, allowing the user to add constant properties as a map <TString, Double_t> that becomes persistent.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3618
https://github.com/root-project/root/pull/3619:0,deployability,Updat,Update,0,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3619
https://github.com/root-project/root/pull/3619:29,deployability,version,version,29,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3619
https://github.com/root-project/root/pull/3619:157,deployability,contain,contains,157,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3619
https://github.com/root-project/root/pull/3619:181,deployability,version,version,181,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3619
https://github.com/root-project/root/pull/3619:222,deployability,updat,update,222,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3619
https://github.com/root-project/root/pull/3619:247,deployability,version,version,247,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3619
https://github.com/root-project/root/pull/3619:29,integrability,version,version,29,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3619
https://github.com/root-project/root/pull/3619:181,integrability,version,version,181,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3619
https://github.com/root-project/root/pull/3619:247,integrability,version,version,247,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3619
https://github.com/root-project/root/pull/3619:29,modifiability,version,version,29,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3619
https://github.com/root-project/root/pull/3619:181,modifiability,version,version,181,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3619
https://github.com/root-project/root/pull/3619:247,modifiability,version,version,247,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3619
https://github.com/root-project/root/pull/3619:0,safety,Updat,Update,0,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3619
https://github.com/root-project/root/pull/3619:222,safety,updat,update,222,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3619
https://github.com/root-project/root/pull/3619:0,security,Updat,Update,0,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3619
https://github.com/root-project/root/pull/3619:222,security,updat,update,222,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3619
https://github.com/root-project/root/pull/3620:0,deployability,Updat,Update,0,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3620
https://github.com/root-project/root/pull/3620:29,deployability,version,version,29,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3620
https://github.com/root-project/root/pull/3620:157,deployability,contain,contains,157,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3620
https://github.com/root-project/root/pull/3620:181,deployability,version,version,181,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3620
https://github.com/root-project/root/pull/3620:222,deployability,updat,update,222,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3620
https://github.com/root-project/root/pull/3620:247,deployability,version,version,247,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3620
https://github.com/root-project/root/pull/3620:29,integrability,version,version,29,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3620
https://github.com/root-project/root/pull/3620:181,integrability,version,version,181,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3620
https://github.com/root-project/root/pull/3620:247,integrability,version,version,247,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3620
https://github.com/root-project/root/pull/3620:29,modifiability,version,version,29,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3620
https://github.com/root-project/root/pull/3620:181,modifiability,version,version,181,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3620
https://github.com/root-project/root/pull/3620:247,modifiability,version,version,247,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3620
https://github.com/root-project/root/pull/3620:0,safety,Updat,Update,0,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3620
https://github.com/root-project/root/pull/3620:222,safety,updat,update,222,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3620
https://github.com/root-project/root/pull/3620:0,security,Updat,Update,0,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3620
https://github.com/root-project/root/pull/3620:222,security,updat,update,222,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3620
https://github.com/root-project/root/pull/3621:0,deployability,Updat,Update,0,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3621
https://github.com/root-project/root/pull/3621:29,deployability,version,version,29,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3621
https://github.com/root-project/root/pull/3621:157,deployability,contain,contains,157,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3621
https://github.com/root-project/root/pull/3621:181,deployability,version,version,181,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3621
https://github.com/root-project/root/pull/3621:222,deployability,updat,update,222,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3621
https://github.com/root-project/root/pull/3621:247,deployability,version,version,247,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3621
https://github.com/root-project/root/pull/3621:29,integrability,version,version,29,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3621
https://github.com/root-project/root/pull/3621:181,integrability,version,version,181,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3621
https://github.com/root-project/root/pull/3621:247,integrability,version,version,247,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3621
https://github.com/root-project/root/pull/3621:29,modifiability,version,version,29,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3621
https://github.com/root-project/root/pull/3621:181,modifiability,version,version,181,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3621
https://github.com/root-project/root/pull/3621:247,modifiability,version,version,247,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3621
https://github.com/root-project/root/pull/3621:0,safety,Updat,Update,0,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3621
https://github.com/root-project/root/pull/3621:222,safety,updat,update,222,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3621
https://github.com/root-project/root/pull/3621:0,security,Updat,Update,0,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3621
https://github.com/root-project/root/pull/3621:222,security,updat,update,222,"Update all TH1 derived class version number.; This is a follow-up on 8c9c1a3fbe3a1c5704635f8941abeb9596104c77. At the moment, the derived class StreamerInfo contains the base class version number :(. This means we need to update the derived class version number when the base class number increases ... This solves the problem seen at: https://root-forum.cern.ch/t/problem-in-opening-past-rootfile-tclonesarray-with-th1s-with-root-v6-16-and-ubuntu18/33293/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3621
https://github.com/root-project/root/pull/3622:149,deployability,modul,modules,149,"[cxxmodules] Do not attach an overlay file if no -cxxmodule is specif…; …ied. We cannot merge both codepaths because root.exe should always run with modules. if -Druntime_cxxmodules is specified, however, rootcling enables modules only. if -cxxmodule flag is passed. This patch fixes asserts when ROOT is built in -Druntime_cxxmodules=On but. no -cxxmodule flag is specified (in tree/test for instance).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3622
https://github.com/root-project/root/pull/3622:223,deployability,modul,modules,223,"[cxxmodules] Do not attach an overlay file if no -cxxmodule is specif…; …ied. We cannot merge both codepaths because root.exe should always run with modules. if -Druntime_cxxmodules is specified, however, rootcling enables modules only. if -cxxmodule flag is passed. This patch fixes asserts when ROOT is built in -Druntime_cxxmodules=On but. no -cxxmodule flag is specified (in tree/test for instance).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3622
https://github.com/root-project/root/pull/3622:272,deployability,patch,patch,272,"[cxxmodules] Do not attach an overlay file if no -cxxmodule is specif…; …ied. We cannot merge both codepaths because root.exe should always run with modules. if -Druntime_cxxmodules is specified, however, rootcling enables modules only. if -cxxmodule flag is passed. This patch fixes asserts when ROOT is built in -Druntime_cxxmodules=On but. no -cxxmodule flag is specified (in tree/test for instance).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3622
https://github.com/root-project/root/pull/3622:63,interoperability,specif,specif,63,"[cxxmodules] Do not attach an overlay file if no -cxxmodule is specif…; …ied. We cannot merge both codepaths because root.exe should always run with modules. if -Druntime_cxxmodules is specified, however, rootcling enables modules only. if -cxxmodule flag is passed. This patch fixes asserts when ROOT is built in -Druntime_cxxmodules=On but. no -cxxmodule flag is specified (in tree/test for instance).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3622
https://github.com/root-project/root/pull/3622:185,interoperability,specif,specified,185,"[cxxmodules] Do not attach an overlay file if no -cxxmodule is specif…; …ied. We cannot merge both codepaths because root.exe should always run with modules. if -Druntime_cxxmodules is specified, however, rootcling enables modules only. if -cxxmodule flag is passed. This patch fixes asserts when ROOT is built in -Druntime_cxxmodules=On but. no -cxxmodule flag is specified (in tree/test for instance).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3622
https://github.com/root-project/root/pull/3622:365,interoperability,specif,specified,365,"[cxxmodules] Do not attach an overlay file if no -cxxmodule is specif…; …ied. We cannot merge both codepaths because root.exe should always run with modules. if -Druntime_cxxmodules is specified, however, rootcling enables modules only. if -cxxmodule flag is passed. This patch fixes asserts when ROOT is built in -Druntime_cxxmodules=On but. no -cxxmodule flag is specified (in tree/test for instance).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3622
https://github.com/root-project/root/pull/3622:149,modifiability,modul,modules,149,"[cxxmodules] Do not attach an overlay file if no -cxxmodule is specif…; …ied. We cannot merge both codepaths because root.exe should always run with modules. if -Druntime_cxxmodules is specified, however, rootcling enables modules only. if -cxxmodule flag is passed. This patch fixes asserts when ROOT is built in -Druntime_cxxmodules=On but. no -cxxmodule flag is specified (in tree/test for instance).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3622
https://github.com/root-project/root/pull/3622:223,modifiability,modul,modules,223,"[cxxmodules] Do not attach an overlay file if no -cxxmodule is specif…; …ied. We cannot merge both codepaths because root.exe should always run with modules. if -Druntime_cxxmodules is specified, however, rootcling enables modules only. if -cxxmodule flag is passed. This patch fixes asserts when ROOT is built in -Druntime_cxxmodules=On but. no -cxxmodule flag is specified (in tree/test for instance).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3622
https://github.com/root-project/root/pull/3622:149,safety,modul,modules,149,"[cxxmodules] Do not attach an overlay file if no -cxxmodule is specif…; …ied. We cannot merge both codepaths because root.exe should always run with modules. if -Druntime_cxxmodules is specified, however, rootcling enables modules only. if -cxxmodule flag is passed. This patch fixes asserts when ROOT is built in -Druntime_cxxmodules=On but. no -cxxmodule flag is specified (in tree/test for instance).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3622
https://github.com/root-project/root/pull/3622:223,safety,modul,modules,223,"[cxxmodules] Do not attach an overlay file if no -cxxmodule is specif…; …ied. We cannot merge both codepaths because root.exe should always run with modules. if -Druntime_cxxmodules is specified, however, rootcling enables modules only. if -cxxmodule flag is passed. This patch fixes asserts when ROOT is built in -Druntime_cxxmodules=On but. no -cxxmodule flag is specified (in tree/test for instance).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3622
https://github.com/root-project/root/pull/3622:272,safety,patch,patch,272,"[cxxmodules] Do not attach an overlay file if no -cxxmodule is specif…; …ied. We cannot merge both codepaths because root.exe should always run with modules. if -Druntime_cxxmodules is specified, however, rootcling enables modules only. if -cxxmodule flag is passed. This patch fixes asserts when ROOT is built in -Druntime_cxxmodules=On but. no -cxxmodule flag is specified (in tree/test for instance).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3622
https://github.com/root-project/root/pull/3622:384,safety,test,test,384,"[cxxmodules] Do not attach an overlay file if no -cxxmodule is specif…; …ied. We cannot merge both codepaths because root.exe should always run with modules. if -Druntime_cxxmodules is specified, however, rootcling enables modules only. if -cxxmodule flag is passed. This patch fixes asserts when ROOT is built in -Druntime_cxxmodules=On but. no -cxxmodule flag is specified (in tree/test for instance).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3622
https://github.com/root-project/root/pull/3622:272,security,patch,patch,272,"[cxxmodules] Do not attach an overlay file if no -cxxmodule is specif…; …ied. We cannot merge both codepaths because root.exe should always run with modules. if -Druntime_cxxmodules is specified, however, rootcling enables modules only. if -cxxmodule flag is passed. This patch fixes asserts when ROOT is built in -Druntime_cxxmodules=On but. no -cxxmodule flag is specified (in tree/test for instance).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3622
https://github.com/root-project/root/pull/3622:284,testability,assert,asserts,284,"[cxxmodules] Do not attach an overlay file if no -cxxmodule is specif…; …ied. We cannot merge both codepaths because root.exe should always run with modules. if -Druntime_cxxmodules is specified, however, rootcling enables modules only. if -cxxmodule flag is passed. This patch fixes asserts when ROOT is built in -Druntime_cxxmodules=On but. no -cxxmodule flag is specified (in tree/test for instance).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3622
https://github.com/root-project/root/pull/3622:384,testability,test,test,384,"[cxxmodules] Do not attach an overlay file if no -cxxmodule is specif…; …ied. We cannot merge both codepaths because root.exe should always run with modules. if -Druntime_cxxmodules is specified, however, rootcling enables modules only. if -cxxmodule flag is passed. This patch fixes asserts when ROOT is built in -Druntime_cxxmodules=On but. no -cxxmodule flag is specified (in tree/test for instance).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3622
https://github.com/root-project/root/pull/3623:14,security,access,accessors,14,Added missing accessors for polish property in TGeoOpticalSurface.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3623
https://github.com/root-project/root/pull/3624:233,availability,failur,failures,233,"[build] makepchinput.py: Fix ceb925ae1e:; This was appending ""roottest"" to the filter string, instead of *also* filtering ""roottest"". roottest dictionaries will always have full path names, so veto ""/roottest/"". Fixes 19 incremental failures that ceb925ae1e claimed to fix:. projectroot.roottest.root.meta.roottest_root_meta_drawing. projectroot.roottest.root.tree.split.roottest_root_tree_split_make. projectroot.roottest.root.treeformula.parse.roottest_root_treeformula_parse_make. projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make. projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make. projectroot.roottest.root.io.fakeClass.roottest_root_io_fakeClass_make. projectroot.roottest.root.tree.addresses.roottest_root_tree_addresses_make. projectroot.roottest.root.treeformula.retobj.roottest_root_treeformula_retobj_make. projectroot.roottest.root.treeproxy.roottest_root_treeproxy_make. projectroot.roottest.root.treeformula.schemaEvolution.roottest_root_treeformula_schemaEvolution_make. projectroot.roottest.root.tree.evolution.roottest_root_tree_evolution_make. projectroot.roottest.root.treeformula.array.roottest_root_treeformula_array_make. projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execState. projectroot.roottest.root.meta.roottest_root_meta_runautoload_auto. projectroot.roottest.root.collection.roottest_root_collection_execMissing. projectroot.test.test_stresstmva_interpreted. projectroot.roottest.root.io.evolution.roottest_root_io_evolution_make. projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make. projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3624
https://github.com/root-project/root/pull/3624:1,deployability,build,build,1,"[build] makepchinput.py: Fix ceb925ae1e:; This was appending ""roottest"" to the filter string, instead of *also* filtering ""roottest"". roottest dictionaries will always have full path names, so veto ""/roottest/"". Fixes 19 incremental failures that ceb925ae1e claimed to fix:. projectroot.roottest.root.meta.roottest_root_meta_drawing. projectroot.roottest.root.tree.split.roottest_root_tree_split_make. projectroot.roottest.root.treeformula.parse.roottest_root_treeformula_parse_make. projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make. projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make. projectroot.roottest.root.io.fakeClass.roottest_root_io_fakeClass_make. projectroot.roottest.root.tree.addresses.roottest_root_tree_addresses_make. projectroot.roottest.root.treeformula.retobj.roottest_root_treeformula_retobj_make. projectroot.roottest.root.treeproxy.roottest_root_treeproxy_make. projectroot.roottest.root.treeformula.schemaEvolution.roottest_root_treeformula_schemaEvolution_make. projectroot.roottest.root.tree.evolution.roottest_root_tree_evolution_make. projectroot.roottest.root.treeformula.array.roottest_root_treeformula_array_make. projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execState. projectroot.roottest.root.meta.roottest_root_meta_runautoload_auto. projectroot.roottest.root.collection.roottest_root_collection_execMissing. projectroot.test.test_stresstmva_interpreted. projectroot.roottest.root.io.evolution.roottest_root_io_evolution_make. projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make. projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3624
https://github.com/root-project/root/pull/3624:233,deployability,fail,failures,233,"[build] makepchinput.py: Fix ceb925ae1e:; This was appending ""roottest"" to the filter string, instead of *also* filtering ""roottest"". roottest dictionaries will always have full path names, so veto ""/roottest/"". Fixes 19 incremental failures that ceb925ae1e claimed to fix:. projectroot.roottest.root.meta.roottest_root_meta_drawing. projectroot.roottest.root.tree.split.roottest_root_tree_split_make. projectroot.roottest.root.treeformula.parse.roottest_root_treeformula_parse_make. projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make. projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make. projectroot.roottest.root.io.fakeClass.roottest_root_io_fakeClass_make. projectroot.roottest.root.tree.addresses.roottest_root_tree_addresses_make. projectroot.roottest.root.treeformula.retobj.roottest_root_treeformula_retobj_make. projectroot.roottest.root.treeproxy.roottest_root_treeproxy_make. projectroot.roottest.root.treeformula.schemaEvolution.roottest_root_treeformula_schemaEvolution_make. projectroot.roottest.root.tree.evolution.roottest_root_tree_evolution_make. projectroot.roottest.root.treeformula.array.roottest_root_treeformula_array_make. projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execState. projectroot.roottest.root.meta.roottest_root_meta_runautoload_auto. projectroot.roottest.root.collection.roottest_root_collection_execMissing. projectroot.test.test_stresstmva_interpreted. projectroot.roottest.root.io.evolution.roottest_root_io_evolution_make. projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make. projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3624
https://github.com/root-project/root/pull/3624:79,integrability,filter,filter,79,"[build] makepchinput.py: Fix ceb925ae1e:; This was appending ""roottest"" to the filter string, instead of *also* filtering ""roottest"". roottest dictionaries will always have full path names, so veto ""/roottest/"". Fixes 19 incremental failures that ceb925ae1e claimed to fix:. projectroot.roottest.root.meta.roottest_root_meta_drawing. projectroot.roottest.root.tree.split.roottest_root_tree_split_make. projectroot.roottest.root.treeformula.parse.roottest_root_treeformula_parse_make. projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make. projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make. projectroot.roottest.root.io.fakeClass.roottest_root_io_fakeClass_make. projectroot.roottest.root.tree.addresses.roottest_root_tree_addresses_make. projectroot.roottest.root.treeformula.retobj.roottest_root_treeformula_retobj_make. projectroot.roottest.root.treeproxy.roottest_root_treeproxy_make. projectroot.roottest.root.treeformula.schemaEvolution.roottest_root_treeformula_schemaEvolution_make. projectroot.roottest.root.tree.evolution.roottest_root_tree_evolution_make. projectroot.roottest.root.treeformula.array.roottest_root_treeformula_array_make. projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execState. projectroot.roottest.root.meta.roottest_root_meta_runautoload_auto. projectroot.roottest.root.collection.roottest_root_collection_execMissing. projectroot.test.test_stresstmva_interpreted. projectroot.roottest.root.io.evolution.roottest_root_io_evolution_make. projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make. projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3624
https://github.com/root-project/root/pull/3624:112,integrability,filter,filtering,112,"[build] makepchinput.py: Fix ceb925ae1e:; This was appending ""roottest"" to the filter string, instead of *also* filtering ""roottest"". roottest dictionaries will always have full path names, so veto ""/roottest/"". Fixes 19 incremental failures that ceb925ae1e claimed to fix:. projectroot.roottest.root.meta.roottest_root_meta_drawing. projectroot.roottest.root.tree.split.roottest_root_tree_split_make. projectroot.roottest.root.treeformula.parse.roottest_root_treeformula_parse_make. projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make. projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make. projectroot.roottest.root.io.fakeClass.roottest_root_io_fakeClass_make. projectroot.roottest.root.tree.addresses.roottest_root_tree_addresses_make. projectroot.roottest.root.treeformula.retobj.roottest_root_treeformula_retobj_make. projectroot.roottest.root.treeproxy.roottest_root_treeproxy_make. projectroot.roottest.root.treeformula.schemaEvolution.roottest_root_treeformula_schemaEvolution_make. projectroot.roottest.root.tree.evolution.roottest_root_tree_evolution_make. projectroot.roottest.root.treeformula.array.roottest_root_treeformula_array_make. projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execState. projectroot.roottest.root.meta.roottest_root_meta_runautoload_auto. projectroot.roottest.root.collection.roottest_root_collection_execMissing. projectroot.test.test_stresstmva_interpreted. projectroot.roottest.root.io.evolution.roottest_root_io_evolution_make. projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make. projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3624
https://github.com/root-project/root/pull/3624:974,integrability,schema,schemaEvolution,974,"[build] makepchinput.py: Fix ceb925ae1e:; This was appending ""roottest"" to the filter string, instead of *also* filtering ""roottest"". roottest dictionaries will always have full path names, so veto ""/roottest/"". Fixes 19 incremental failures that ceb925ae1e claimed to fix:. projectroot.roottest.root.meta.roottest_root_meta_drawing. projectroot.roottest.root.tree.split.roottest_root_tree_split_make. projectroot.roottest.root.treeformula.parse.roottest_root_treeformula_parse_make. projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make. projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make. projectroot.roottest.root.io.fakeClass.roottest_root_io_fakeClass_make. projectroot.roottest.root.tree.addresses.roottest_root_tree_addresses_make. projectroot.roottest.root.treeformula.retobj.roottest_root_treeformula_retobj_make. projectroot.roottest.root.treeproxy.roottest_root_treeproxy_make. projectroot.roottest.root.treeformula.schemaEvolution.roottest_root_treeformula_schemaEvolution_make. projectroot.roottest.root.tree.evolution.roottest_root_tree_evolution_make. projectroot.roottest.root.treeformula.array.roottest_root_treeformula_array_make. projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execState. projectroot.roottest.root.meta.roottest_root_meta_runautoload_auto. projectroot.roottest.root.collection.roottest_root_collection_execMissing. projectroot.test.test_stresstmva_interpreted. projectroot.roottest.root.io.evolution.roottest_root_io_evolution_make. projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make. projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3624
https://github.com/root-project/root/pull/3624:233,performance,failur,failures,233,"[build] makepchinput.py: Fix ceb925ae1e:; This was appending ""roottest"" to the filter string, instead of *also* filtering ""roottest"". roottest dictionaries will always have full path names, so veto ""/roottest/"". Fixes 19 incremental failures that ceb925ae1e claimed to fix:. projectroot.roottest.root.meta.roottest_root_meta_drawing. projectroot.roottest.root.tree.split.roottest_root_tree_split_make. projectroot.roottest.root.treeformula.parse.roottest_root_treeformula_parse_make. projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make. projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make. projectroot.roottest.root.io.fakeClass.roottest_root_io_fakeClass_make. projectroot.roottest.root.tree.addresses.roottest_root_tree_addresses_make. projectroot.roottest.root.treeformula.retobj.roottest_root_treeformula_retobj_make. projectroot.roottest.root.treeproxy.roottest_root_treeproxy_make. projectroot.roottest.root.treeformula.schemaEvolution.roottest_root_treeformula_schemaEvolution_make. projectroot.roottest.root.tree.evolution.roottest_root_tree_evolution_make. projectroot.roottest.root.treeformula.array.roottest_root_treeformula_array_make. projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execState. projectroot.roottest.root.meta.roottest_root_meta_runautoload_auto. projectroot.roottest.root.collection.roottest_root_collection_execMissing. projectroot.test.test_stresstmva_interpreted. projectroot.roottest.root.io.evolution.roottest_root_io_evolution_make. projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make. projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3624
https://github.com/root-project/root/pull/3624:233,reliability,fail,failures,233,"[build] makepchinput.py: Fix ceb925ae1e:; This was appending ""roottest"" to the filter string, instead of *also* filtering ""roottest"". roottest dictionaries will always have full path names, so veto ""/roottest/"". Fixes 19 incremental failures that ceb925ae1e claimed to fix:. projectroot.roottest.root.meta.roottest_root_meta_drawing. projectroot.roottest.root.tree.split.roottest_root_tree_split_make. projectroot.roottest.root.treeformula.parse.roottest_root_treeformula_parse_make. projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make. projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make. projectroot.roottest.root.io.fakeClass.roottest_root_io_fakeClass_make. projectroot.roottest.root.tree.addresses.roottest_root_tree_addresses_make. projectroot.roottest.root.treeformula.retobj.roottest_root_treeformula_retobj_make. projectroot.roottest.root.treeproxy.roottest_root_treeproxy_make. projectroot.roottest.root.treeformula.schemaEvolution.roottest_root_treeformula_schemaEvolution_make. projectroot.roottest.root.tree.evolution.roottest_root_tree_evolution_make. projectroot.roottest.root.treeformula.array.roottest_root_treeformula_array_make. projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execState. projectroot.roottest.root.meta.roottest_root_meta_runautoload_auto. projectroot.roottest.root.collection.roottest_root_collection_execMissing. projectroot.test.test_stresstmva_interpreted. projectroot.roottest.root.io.evolution.roottest_root_io_evolution_make. projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make. projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3624
https://github.com/root-project/root/pull/3624:1426,safety,test,test,1426,"[build] makepchinput.py: Fix ceb925ae1e:; This was appending ""roottest"" to the filter string, instead of *also* filtering ""roottest"". roottest dictionaries will always have full path names, so veto ""/roottest/"". Fixes 19 incremental failures that ceb925ae1e claimed to fix:. projectroot.roottest.root.meta.roottest_root_meta_drawing. projectroot.roottest.root.tree.split.roottest_root_tree_split_make. projectroot.roottest.root.treeformula.parse.roottest_root_treeformula_parse_make. projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make. projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make. projectroot.roottest.root.io.fakeClass.roottest_root_io_fakeClass_make. projectroot.roottest.root.tree.addresses.roottest_root_tree_addresses_make. projectroot.roottest.root.treeformula.retobj.roottest_root_treeformula_retobj_make. projectroot.roottest.root.treeproxy.roottest_root_treeproxy_make. projectroot.roottest.root.treeformula.schemaEvolution.roottest_root_treeformula_schemaEvolution_make. projectroot.roottest.root.tree.evolution.roottest_root_tree_evolution_make. projectroot.roottest.root.treeformula.array.roottest_root_treeformula_array_make. projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execState. projectroot.roottest.root.meta.roottest_root_meta_runautoload_auto. projectroot.roottest.root.collection.roottest_root_collection_execMissing. projectroot.test.test_stresstmva_interpreted. projectroot.roottest.root.io.evolution.roottest_root_io_evolution_make. projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make. projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3624
https://github.com/root-project/root/pull/3624:1426,testability,test,test,1426,"[build] makepchinput.py: Fix ceb925ae1e:; This was appending ""roottest"" to the filter string, instead of *also* filtering ""roottest"". roottest dictionaries will always have full path names, so veto ""/roottest/"". Fixes 19 incremental failures that ceb925ae1e claimed to fix:. projectroot.roottest.root.meta.roottest_root_meta_drawing. projectroot.roottest.root.tree.split.roottest_root_tree_split_make. projectroot.roottest.root.treeformula.parse.roottest_root_treeformula_parse_make. projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make. projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make. projectroot.roottest.root.io.fakeClass.roottest_root_io_fakeClass_make. projectroot.roottest.root.tree.addresses.roottest_root_tree_addresses_make. projectroot.roottest.root.treeformula.retobj.roottest_root_treeformula_retobj_make. projectroot.roottest.root.treeproxy.roottest_root_treeproxy_make. projectroot.roottest.root.treeformula.schemaEvolution.roottest_root_treeformula_schemaEvolution_make. projectroot.roottest.root.tree.evolution.roottest_root_tree_evolution_make. projectroot.roottest.root.treeformula.array.roottest_root_treeformula_array_make. projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execState. projectroot.roottest.root.meta.roottest_root_meta_runautoload_auto. projectroot.roottest.root.collection.roottest_root_collection_execMissing. projectroot.test.test_stresstmva_interpreted. projectroot.roottest.root.io.evolution.roottest_root_io_evolution_make. projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make. projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3624
https://github.com/root-project/root/pull/3625:8,deployability,log,logic,8,Fix the logic when using TMVA::gConfig().EnableMT/DIsableMT(); - when ROOT::IsEnableImplicitMT() TMVA will run by default in MT. - when TMVA::gConfig().EnableMT(0) or TMVA::gConfig().EnableMT(nthreads > 1) TMVA will run in MT independently of ROOT::IsEnabledImplicitMT(). - when TMVA::gConfig().EnableMT(1) or TMVA::gConfig().DisableMT() TMVA will run sequentially and its thread pool will be released,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3625
https://github.com/root-project/root/pull/3625:393,deployability,releas,released,393,Fix the logic when using TMVA::gConfig().EnableMT/DIsableMT(); - when ROOT::IsEnableImplicitMT() TMVA will run by default in MT. - when TMVA::gConfig().EnableMT(0) or TMVA::gConfig().EnableMT(nthreads > 1) TMVA will run in MT independently of ROOT::IsEnabledImplicitMT(). - when TMVA::gConfig().EnableMT(1) or TMVA::gConfig().DisableMT() TMVA will run sequentially and its thread pool will be released,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3625
https://github.com/root-project/root/pull/3625:8,safety,log,logic,8,Fix the logic when using TMVA::gConfig().EnableMT/DIsableMT(); - when ROOT::IsEnableImplicitMT() TMVA will run by default in MT. - when TMVA::gConfig().EnableMT(0) or TMVA::gConfig().EnableMT(nthreads > 1) TMVA will run in MT independently of ROOT::IsEnabledImplicitMT(). - when TMVA::gConfig().EnableMT(1) or TMVA::gConfig().DisableMT() TMVA will run sequentially and its thread pool will be released,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3625
https://github.com/root-project/root/pull/3625:8,security,log,logic,8,Fix the logic when using TMVA::gConfig().EnableMT/DIsableMT(); - when ROOT::IsEnableImplicitMT() TMVA will run by default in MT. - when TMVA::gConfig().EnableMT(0) or TMVA::gConfig().EnableMT(nthreads > 1) TMVA will run in MT independently of ROOT::IsEnabledImplicitMT(). - when TMVA::gConfig().EnableMT(1) or TMVA::gConfig().DisableMT() TMVA will run sequentially and its thread pool will be released,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3625
https://github.com/root-project/root/pull/3625:8,testability,log,logic,8,Fix the logic when using TMVA::gConfig().EnableMT/DIsableMT(); - when ROOT::IsEnableImplicitMT() TMVA will run by default in MT. - when TMVA::gConfig().EnableMT(0) or TMVA::gConfig().EnableMT(nthreads > 1) TMVA will run in MT independently of ROOT::IsEnabledImplicitMT(). - when TMVA::gConfig().EnableMT(1) or TMVA::gConfig().DisableMT() TMVA will run sequentially and its thread pool will be released,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3625
https://github.com/root-project/root/pull/3626:187,modifiability,variab,variables,187,"Fix the replacement of S,B with x,y in formula use in TMVAGUI; Fix the replacement of S,B with x,y in formula used for performance metrics when S and B appear in function name and not as variables. . Example: RooStats::AsimovSignificance(S,B) which has a S in its function name",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3626
https://github.com/root-project/root/pull/3626:119,performance,performance metric,performance metrics,119,"Fix the replacement of S,B with x,y in formula use in TMVAGUI; Fix the replacement of S,B with x,y in formula used for performance metrics when S and B appear in function name and not as variables. . Example: RooStats::AsimovSignificance(S,B) which has a S in its function name",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3626
https://github.com/root-project/root/pull/3626:119,usability,perform,performance,119,"Fix the replacement of S,B with x,y in formula use in TMVAGUI; Fix the replacement of S,B with x,y in formula used for performance metrics when S and B appear in function name and not as variables. . Example: RooStats::AsimovSignificance(S,B) which has a S in its function name",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3626
https://github.com/root-project/root/pull/3629:39,usability,help,helper,39,[VecOps] Add overload for Combinations helper with size of RVecs;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3629
https://github.com/root-project/root/pull/3631:17,deployability,version,version,17,[RDF] Add Python version of Dimuon tutorial; Add python version of RDF tutorial producing dimuon spectrum from CMS Open Data. This PR depends on #3571.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3631
https://github.com/root-project/root/pull/3631:56,deployability,version,version,56,[RDF] Add Python version of Dimuon tutorial; Add python version of RDF tutorial producing dimuon spectrum from CMS Open Data. This PR depends on #3571.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3631
https://github.com/root-project/root/pull/3631:134,deployability,depend,depends,134,[RDF] Add Python version of Dimuon tutorial; Add python version of RDF tutorial producing dimuon spectrum from CMS Open Data. This PR depends on #3571.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3631
https://github.com/root-project/root/pull/3631:17,integrability,version,version,17,[RDF] Add Python version of Dimuon tutorial; Add python version of RDF tutorial producing dimuon spectrum from CMS Open Data. This PR depends on #3571.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3631
https://github.com/root-project/root/pull/3631:56,integrability,version,version,56,[RDF] Add Python version of Dimuon tutorial; Add python version of RDF tutorial producing dimuon spectrum from CMS Open Data. This PR depends on #3571.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3631
https://github.com/root-project/root/pull/3631:134,integrability,depend,depends,134,[RDF] Add Python version of Dimuon tutorial; Add python version of RDF tutorial producing dimuon spectrum from CMS Open Data. This PR depends on #3571.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3631
https://github.com/root-project/root/pull/3631:17,modifiability,version,version,17,[RDF] Add Python version of Dimuon tutorial; Add python version of RDF tutorial producing dimuon spectrum from CMS Open Data. This PR depends on #3571.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3631
https://github.com/root-project/root/pull/3631:56,modifiability,version,version,56,[RDF] Add Python version of Dimuon tutorial; Add python version of RDF tutorial producing dimuon spectrum from CMS Open Data. This PR depends on #3571.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3631
https://github.com/root-project/root/pull/3631:134,modifiability,depend,depends,134,[RDF] Add Python version of Dimuon tutorial; Add python version of RDF tutorial producing dimuon spectrum from CMS Open Data. This PR depends on #3571.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3631
https://github.com/root-project/root/pull/3631:134,safety,depend,depends,134,[RDF] Add Python version of Dimuon tutorial; Add python version of RDF tutorial producing dimuon spectrum from CMS Open Data. This PR depends on #3571.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3631
https://github.com/root-project/root/pull/3631:134,testability,depend,depends,134,[RDF] Add Python version of Dimuon tutorial; Add python version of RDF tutorial producing dimuon spectrum from CMS Open Data. This PR depends on #3571.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3631
https://github.com/root-project/root/pull/3633:10,deployability,version,version,10,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:167,deployability,automat,automatically,167,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:281,deployability,instal,installed,281,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:304,deployability,build,builds,304,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:407,deployability,build,build,407,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:526,deployability,updat,updated,526,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:657,deployability,instal,install,657,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:680,deployability,instal,install,680,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:780,deployability,fail,fail,780,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:810,deployability,releas,release,810,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:818,deployability,build,builds,818,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:837,deployability,fail,fail,837,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:884,deployability,instal,installed,884,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:940,deployability,releas,release,940,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:948,deployability,build,builds,948,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:972,deployability,fail,fails,972,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:181,energy efficiency,load,load,181,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:204,energy efficiency,load,load-safe-path,204,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:752,energy efficiency,load,load,752,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:845,energy efficiency,load,load,845,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:10,integrability,version,version,10,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:133,integrability,coupl,couple,133,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:314,integrability,coupl,couple,314,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:10,modifiability,version,version,10,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:133,modifiability,coupl,couple,133,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:314,modifiability,coupl,couple,314,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:181,performance,load,load,181,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:204,performance,load,load-safe-path,204,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:752,performance,load,load,752,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:845,performance,load,load,845,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:780,reliability,fail,fail,780,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:837,reliability,fail,fail,837,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:972,reliability,fail,fails,972,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:209,safety,safe,safe-path,209,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:526,safety,updat,updated,526,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:909,safety,test,test,909,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:526,security,updat,updated,526,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:133,testability,coupl,couple,133,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:167,testability,automat,automatically,167,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:314,testability,coupl,couple,314,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3633:909,testability,test,test,909,"Add alpha version of gdb pretty printers.; This adds gdb pretty printers for a few objects such as TString and TNamed, as well. as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`. is set to ROOT's lib directory. The printers should only be installed during debug builds. A couple of things are still unclear:. - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make. - Is it correct to use `install(FILES ...)` to install? - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail. o With old gdbs. o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3633
https://github.com/root-project/root/pull/3634:15,deployability,Updat,Update,15,[DOC][skip ci] Update RVec release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3634
https://github.com/root-project/root/pull/3634:27,deployability,releas,release,27,[DOC][skip ci] Update RVec release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3634
https://github.com/root-project/root/pull/3634:15,safety,Updat,Update,15,[DOC][skip ci] Update RVec release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3634
https://github.com/root-project/root/pull/3634:15,security,Updat,Update,15,[DOC][skip ci] Update RVec release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3634
https://github.com/root-project/root/pull/3635:189,availability,ERROR,ERROR,189,"Reduced ExcludeModules; This commit reduces ExcludeModules, which reduces dependency on rootmap files. These modules contain global variables which conflict with users' code such as PI and ERROR. This commit also undefines them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3635
https://github.com/root-project/root/pull/3635:74,deployability,depend,dependency,74,"Reduced ExcludeModules; This commit reduces ExcludeModules, which reduces dependency on rootmap files. These modules contain global variables which conflict with users' code such as PI and ERROR. This commit also undefines them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3635
https://github.com/root-project/root/pull/3635:109,deployability,modul,modules,109,"Reduced ExcludeModules; This commit reduces ExcludeModules, which reduces dependency on rootmap files. These modules contain global variables which conflict with users' code such as PI and ERROR. This commit also undefines them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3635
https://github.com/root-project/root/pull/3635:117,deployability,contain,contain,117,"Reduced ExcludeModules; This commit reduces ExcludeModules, which reduces dependency on rootmap files. These modules contain global variables which conflict with users' code such as PI and ERROR. This commit also undefines them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3635
https://github.com/root-project/root/pull/3635:0,energy efficiency,Reduc,Reduced,0,"Reduced ExcludeModules; This commit reduces ExcludeModules, which reduces dependency on rootmap files. These modules contain global variables which conflict with users' code such as PI and ERROR. This commit also undefines them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3635
https://github.com/root-project/root/pull/3635:36,energy efficiency,reduc,reduces,36,"Reduced ExcludeModules; This commit reduces ExcludeModules, which reduces dependency on rootmap files. These modules contain global variables which conflict with users' code such as PI and ERROR. This commit also undefines them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3635
https://github.com/root-project/root/pull/3635:66,energy efficiency,reduc,reduces,66,"Reduced ExcludeModules; This commit reduces ExcludeModules, which reduces dependency on rootmap files. These modules contain global variables which conflict with users' code such as PI and ERROR. This commit also undefines them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3635
https://github.com/root-project/root/pull/3635:74,integrability,depend,dependency,74,"Reduced ExcludeModules; This commit reduces ExcludeModules, which reduces dependency on rootmap files. These modules contain global variables which conflict with users' code such as PI and ERROR. This commit also undefines them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3635
https://github.com/root-project/root/pull/3635:148,interoperability,conflict,conflict,148,"Reduced ExcludeModules; This commit reduces ExcludeModules, which reduces dependency on rootmap files. These modules contain global variables which conflict with users' code such as PI and ERROR. This commit also undefines them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3635
https://github.com/root-project/root/pull/3635:74,modifiability,depend,dependency,74,"Reduced ExcludeModules; This commit reduces ExcludeModules, which reduces dependency on rootmap files. These modules contain global variables which conflict with users' code such as PI and ERROR. This commit also undefines them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3635
https://github.com/root-project/root/pull/3635:109,modifiability,modul,modules,109,"Reduced ExcludeModules; This commit reduces ExcludeModules, which reduces dependency on rootmap files. These modules contain global variables which conflict with users' code such as PI and ERROR. This commit also undefines them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3635
https://github.com/root-project/root/pull/3635:132,modifiability,variab,variables,132,"Reduced ExcludeModules; This commit reduces ExcludeModules, which reduces dependency on rootmap files. These modules contain global variables which conflict with users' code such as PI and ERROR. This commit also undefines them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3635
https://github.com/root-project/root/pull/3635:189,performance,ERROR,ERROR,189,"Reduced ExcludeModules; This commit reduces ExcludeModules, which reduces dependency on rootmap files. These modules contain global variables which conflict with users' code such as PI and ERROR. This commit also undefines them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3635
https://github.com/root-project/root/pull/3635:74,safety,depend,dependency,74,"Reduced ExcludeModules; This commit reduces ExcludeModules, which reduces dependency on rootmap files. These modules contain global variables which conflict with users' code such as PI and ERROR. This commit also undefines them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3635
https://github.com/root-project/root/pull/3635:109,safety,modul,modules,109,"Reduced ExcludeModules; This commit reduces ExcludeModules, which reduces dependency on rootmap files. These modules contain global variables which conflict with users' code such as PI and ERROR. This commit also undefines them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3635
https://github.com/root-project/root/pull/3635:189,safety,ERROR,ERROR,189,"Reduced ExcludeModules; This commit reduces ExcludeModules, which reduces dependency on rootmap files. These modules contain global variables which conflict with users' code such as PI and ERROR. This commit also undefines them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3635
https://github.com/root-project/root/pull/3635:74,testability,depend,dependency,74,"Reduced ExcludeModules; This commit reduces ExcludeModules, which reduces dependency on rootmap files. These modules contain global variables which conflict with users' code such as PI and ERROR. This commit also undefines them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3635
https://github.com/root-project/root/pull/3635:162,usability,user,users,162,"Reduced ExcludeModules; This commit reduces ExcludeModules, which reduces dependency on rootmap files. These modules contain global variables which conflict with users' code such as PI and ERROR. This commit also undefines them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3635
https://github.com/root-project/root/pull/3635:189,usability,ERROR,ERROR,189,"Reduced ExcludeModules; This commit reduces ExcludeModules, which reduces dependency on rootmap files. These modules contain global variables which conflict with users' code such as PI and ERROR. This commit also undefines them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3635
https://github.com/root-project/root/pull/3636:1436,availability,error,error,1436,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1637,availability,error,error,1637,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1853,availability,Error,Error,1853,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1964,availability,error,errors,1964,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:2107,availability,Error,Error,2107,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:76,deployability,depend,dependency,76,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:129,deployability,depend,depend,129,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:193,deployability,build,build,193,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:292,deployability,build,build,292,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:400,deployability,build,build,400,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:545,deployability,build,build,545,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:653,deployability,build,build,653,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:889,deployability,build,build,889,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:997,deployability,build,build,997,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1131,deployability,build,build,1131,"d both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked fro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1275,deployability,depend,dependencies,1275,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1369,deployability,Build,Building,1369,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1448,deployability,build,build,1448,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1480,deployability,BUILD,BUILDTYPE,1480,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1527,deployability,build,build,1527,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1572,deployability,build,build,1572,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1712,deployability,build,build,1712,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1789,deployability,fail,failed,1789,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1935,deployability,build,build,1935,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:2052,deployability,fail,failed,2052,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:254,energy efficiency,core,core,254,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:264,energy efficiency,core,core,264,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:514,energy efficiency,core,core,514,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:848,energy efficiency,core,core,848,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:858,energy efficiency,core,core,858,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1389,energy efficiency,core,core,1389,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1578,energy efficiency,core,core,1578,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1684,energy efficiency,core,core,1684,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1747,energy efficiency,core,core,1747,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1811,energy efficiency,core,core,1811,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1907,energy efficiency,core,core,1907,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:2019,energy efficiency,core,core,2019,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:2074,energy efficiency,core,core,2074,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:76,integrability,depend,dependency,76,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:129,integrability,depend,depend,129,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1275,integrability,depend,dependencies,1275,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:76,modifiability,depend,dependency,76,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:129,modifiability,depend,depend,129,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1275,modifiability,depend,dependencies,1275,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1195,performance,concurren,concurrently,1195,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1436,performance,error,error,1436,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1637,performance,error,error,1637,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1853,performance,Error,Error,1853,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1964,performance,error,errors,1964,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:2107,performance,Error,Error,2107,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1789,reliability,fail,failed,1789,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:2052,reliability,fail,failed,2052,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:76,safety,depend,dependency,76,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:129,safety,depend,depend,129,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1275,safety,depend,dependencies,1275,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1436,safety,error,error,1436,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1637,safety,error,error,1637,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1647,safety,input,input,1647,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1853,safety,Error,Error,1853,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1964,safety,error,errors,1964,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:2107,safety,Error,Error,2107,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:76,testability,depend,dependency,76,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:129,testability,depend,depend,129,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1275,testability,depend,dependencies,1275,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:375,usability,progress,progress-dir,375,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:389,usability,User,Users,389,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:430,usability,progress,progress-num,430,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:628,usability,progress,progress-dir,628,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:642,usability,User,Users,642,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:683,usability,progress,progress-num,683,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:972,usability,progress,progress-dir,972,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:986,usability,User,Users,986,"Fix dupe G__Imt target v6 16; ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1027,usability,progress,progress-num,1027,"T_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists. This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMake",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1436,usability,error,error,1436,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1637,usability,error,error,1637,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1647,usability,input,input,1647,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1853,usability,Error,Error,1853,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:1964,usability,error,errors,1964,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3636:2107,usability,Error,Error,2107,"ctionary build twice. See the result of $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:. $ grep -r ""Generating G__Imt"" core/imt. core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. Scanning dependencies of target G__Imt. [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap. [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o. g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory. g++: fatal error: no input files. compilation terminated. core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed. make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1. [ 73%] Built target G__Imt. make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors. CMakeFiles/Makefile2:18311: recipe for target 'core/imt/CMakeFiles/Imt.dir/all' failed. make[4]: *** [core/imt/CMakeFiles/Imt.dir/all] Error 2. (cherry picked from commit a3e7a3c535b80c3a6cf0883a0bf8de66eca7d93f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3636
https://github.com/root-project/root/pull/3638:19,availability,down,download,19,[Tutorials] CsvDS: download csv in the macro and not in CMake; therewith making them standalone.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3638
https://github.com/root-project/root/pull/3639:5,energy efficiency,Reduc,Reduce,5,[RF] Reduce global statics; RooFit uses a lot of global statics in factories. These have been replaced by function-local statics.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3639
https://github.com/root-project/root/pull/3640:264,availability,redund,redundant,264,"[TCling] Add iterator of using declarations to TClingMethodInfo; Ported from Cppyy patch by @wlav :`. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. Adds an iterator for using declarations to `TClingMethodInfo`. it should make redundant the pythonisations that add the method overloads from a base class to the derived class that uses them:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/PyROOT/src/PyzPythonHelpers.cxx#L113. Instead of relying on pythonisations for specific classes, this PR adds the necessary logic to have this functionality solved in a generic way in the bindings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3640
https://github.com/root-project/root/pull/3640:83,deployability,patch,patch,83,"[TCling] Add iterator of using declarations to TClingMethodInfo; Ported from Cppyy patch by @wlav :`. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. Adds an iterator for using declarations to `TClingMethodInfo`. it should make redundant the pythonisations that add the method overloads from a base class to the derived class that uses them:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/PyROOT/src/PyzPythonHelpers.cxx#L113. Instead of relying on pythonisations for specific classes, this PR adds the necessary logic to have this functionality solved in a generic way in the bindings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3640
https://github.com/root-project/root/pull/3640:160,deployability,patch,patches,160,"[TCling] Add iterator of using declarations to TClingMethodInfo; Ported from Cppyy patch by @wlav :`. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. Adds an iterator for using declarations to `TClingMethodInfo`. it should make redundant the pythonisations that add the method overloads from a base class to the derived class that uses them:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/PyROOT/src/PyzPythonHelpers.cxx#L113. Instead of relying on pythonisations for specific classes, this PR adds the necessary logic to have this functionality solved in a generic way in the bindings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3640
https://github.com/root-project/root/pull/3640:264,deployability,redundan,redundant,264,"[TCling] Add iterator of using declarations to TClingMethodInfo; Ported from Cppyy patch by @wlav :`. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. Adds an iterator for using declarations to `TClingMethodInfo`. it should make redundant the pythonisations that add the method overloads from a base class to the derived class that uses them:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/PyROOT/src/PyzPythonHelpers.cxx#L113. Instead of relying on pythonisations for specific classes, this PR adds the necessary logic to have this functionality solved in a generic way in the bindings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3640
https://github.com/root-project/root/pull/3640:581,deployability,log,logic,581,"[TCling] Add iterator of using declarations to TClingMethodInfo; Ported from Cppyy patch by @wlav :`. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. Adds an iterator for using declarations to `TClingMethodInfo`. it should make redundant the pythonisations that add the method overloads from a base class to the derived class that uses them:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/PyROOT/src/PyzPythonHelpers.cxx#L113. Instead of relying on pythonisations for specific classes, this PR adds the necessary logic to have this functionality solved in a generic way in the bindings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3640
https://github.com/root-project/root/pull/3640:428,interoperability,bind,bindings,428,"[TCling] Add iterator of using declarations to TClingMethodInfo; Ported from Cppyy patch by @wlav :`. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. Adds an iterator for using declarations to `TClingMethodInfo`. it should make redundant the pythonisations that add the method overloads from a base class to the derived class that uses them:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/PyROOT/src/PyzPythonHelpers.cxx#L113. Instead of relying on pythonisations for specific classes, this PR adds the necessary logic to have this functionality solved in a generic way in the bindings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3640
https://github.com/root-project/root/pull/3640:536,interoperability,specif,specific,536,"[TCling] Add iterator of using declarations to TClingMethodInfo; Ported from Cppyy patch by @wlav :`. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. Adds an iterator for using declarations to `TClingMethodInfo`. it should make redundant the pythonisations that add the method overloads from a base class to the derived class that uses them:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/PyROOT/src/PyzPythonHelpers.cxx#L113. Instead of relying on pythonisations for specific classes, this PR adds the necessary logic to have this functionality solved in a generic way in the bindings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3640
https://github.com/root-project/root/pull/3640:645,interoperability,bind,bindings,645,"[TCling] Add iterator of using declarations to TClingMethodInfo; Ported from Cppyy patch by @wlav :`. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. Adds an iterator for using declarations to `TClingMethodInfo`. it should make redundant the pythonisations that add the method overloads from a base class to the derived class that uses them:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/PyROOT/src/PyzPythonHelpers.cxx#L113. Instead of relying on pythonisations for specific classes, this PR adds the necessary logic to have this functionality solved in a generic way in the bindings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3640
https://github.com/root-project/root/pull/3640:428,modifiability,bind,bindings,428,"[TCling] Add iterator of using declarations to TClingMethodInfo; Ported from Cppyy patch by @wlav :`. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. Adds an iterator for using declarations to `TClingMethodInfo`. it should make redundant the pythonisations that add the method overloads from a base class to the derived class that uses them:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/PyROOT/src/PyzPythonHelpers.cxx#L113. Instead of relying on pythonisations for specific classes, this PR adds the necessary logic to have this functionality solved in a generic way in the bindings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3640
https://github.com/root-project/root/pull/3640:645,modifiability,bind,bindings,645,"[TCling] Add iterator of using declarations to TClingMethodInfo; Ported from Cppyy patch by @wlav :`. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. Adds an iterator for using declarations to `TClingMethodInfo`. it should make redundant the pythonisations that add the method overloads from a base class to the derived class that uses them:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/PyROOT/src/PyzPythonHelpers.cxx#L113. Instead of relying on pythonisations for specific classes, this PR adds the necessary logic to have this functionality solved in a generic way in the bindings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3640
https://github.com/root-project/root/pull/3640:264,reliability,redundan,redundant,264,"[TCling] Add iterator of using declarations to TClingMethodInfo; Ported from Cppyy patch by @wlav :`. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. Adds an iterator for using declarations to `TClingMethodInfo`. it should make redundant the pythonisations that add the method overloads from a base class to the derived class that uses them:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/PyROOT/src/PyzPythonHelpers.cxx#L113. Instead of relying on pythonisations for specific classes, this PR adds the necessary logic to have this functionality solved in a generic way in the bindings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3640
https://github.com/root-project/root/pull/3640:83,safety,patch,patch,83,"[TCling] Add iterator of using declarations to TClingMethodInfo; Ported from Cppyy patch by @wlav :`. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. Adds an iterator for using declarations to `TClingMethodInfo`. it should make redundant the pythonisations that add the method overloads from a base class to the derived class that uses them:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/PyROOT/src/PyzPythonHelpers.cxx#L113. Instead of relying on pythonisations for specific classes, this PR adds the necessary logic to have this functionality solved in a generic way in the bindings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3640
https://github.com/root-project/root/pull/3640:160,safety,patch,patches,160,"[TCling] Add iterator of using declarations to TClingMethodInfo; Ported from Cppyy patch by @wlav :`. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. Adds an iterator for using declarations to `TClingMethodInfo`. it should make redundant the pythonisations that add the method overloads from a base class to the derived class that uses them:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/PyROOT/src/PyzPythonHelpers.cxx#L113. Instead of relying on pythonisations for specific classes, this PR adds the necessary logic to have this functionality solved in a generic way in the bindings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3640
https://github.com/root-project/root/pull/3640:264,safety,redund,redundant,264,"[TCling] Add iterator of using declarations to TClingMethodInfo; Ported from Cppyy patch by @wlav :`. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. Adds an iterator for using declarations to `TClingMethodInfo`. it should make redundant the pythonisations that add the method overloads from a base class to the derived class that uses them:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/PyROOT/src/PyzPythonHelpers.cxx#L113. Instead of relying on pythonisations for specific classes, this PR adds the necessary logic to have this functionality solved in a generic way in the bindings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3640
https://github.com/root-project/root/pull/3640:581,safety,log,logic,581,"[TCling] Add iterator of using declarations to TClingMethodInfo; Ported from Cppyy patch by @wlav :`. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. Adds an iterator for using declarations to `TClingMethodInfo`. it should make redundant the pythonisations that add the method overloads from a base class to the derived class that uses them:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/PyROOT/src/PyzPythonHelpers.cxx#L113. Instead of relying on pythonisations for specific classes, this PR adds the necessary logic to have this functionality solved in a generic way in the bindings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3640
https://github.com/root-project/root/pull/3640:83,security,patch,patch,83,"[TCling] Add iterator of using declarations to TClingMethodInfo; Ported from Cppyy patch by @wlav :`. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. Adds an iterator for using declarations to `TClingMethodInfo`. it should make redundant the pythonisations that add the method overloads from a base class to the derived class that uses them:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/PyROOT/src/PyzPythonHelpers.cxx#L113. Instead of relying on pythonisations for specific classes, this PR adds the necessary logic to have this functionality solved in a generic way in the bindings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3640
https://github.com/root-project/root/pull/3640:160,security,patch,patches,160,"[TCling] Add iterator of using declarations to TClingMethodInfo; Ported from Cppyy patch by @wlav :`. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. Adds an iterator for using declarations to `TClingMethodInfo`. it should make redundant the pythonisations that add the method overloads from a base class to the derived class that uses them:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/PyROOT/src/PyzPythonHelpers.cxx#L113. Instead of relying on pythonisations for specific classes, this PR adds the necessary logic to have this functionality solved in a generic way in the bindings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3640
https://github.com/root-project/root/pull/3640:581,security,log,logic,581,"[TCling] Add iterator of using declarations to TClingMethodInfo; Ported from Cppyy patch by @wlav :`. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. Adds an iterator for using declarations to `TClingMethodInfo`. it should make redundant the pythonisations that add the method overloads from a base class to the derived class that uses them:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/PyROOT/src/PyzPythonHelpers.cxx#L113. Instead of relying on pythonisations for specific classes, this PR adds the necessary logic to have this functionality solved in a generic way in the bindings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3640
https://github.com/root-project/root/pull/3640:581,testability,log,logic,581,"[TCling] Add iterator of using declarations to TClingMethodInfo; Ported from Cppyy patch by @wlav :`. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. Adds an iterator for using declarations to `TClingMethodInfo`. it should make redundant the pythonisations that add the method overloads from a base class to the derived class that uses them:. https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/PyROOT/src/PyzPythonHelpers.cxx#L113. Instead of relying on pythonisations for specific classes, this PR adds the necessary logic to have this functionality solved in a generic way in the bindings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3640
https://github.com/root-project/root/pull/3641:111,deployability,build,builds,111,"[VecOps] Use better solution to pick up M_PI on windows; Many thanks to @bellenot ! Let's check whether the PR builds are happy with this. Remaining issue with this: Is it ok to include `math.h` or `cmath` (or even both?) based on the platform? Could this interfere with picking up the overloads for the fast math functions since `math.h` and `cmath` define their API in different namespaces? @lmoneta You have insights into this? The PR works but still, I feel a little uncomfortable since I do not fully understand the impact of the different includes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3641
https://github.com/root-project/root/pull/3641:364,deployability,API,API,364,"[VecOps] Use better solution to pick up M_PI on windows; Many thanks to @bellenot ! Let's check whether the PR builds are happy with this. Remaining issue with this: Is it ok to include `math.h` or `cmath` (or even both?) based on the platform? Could this interfere with picking up the overloads for the fast math functions since `math.h` and `cmath` define their API in different namespaces? @lmoneta You have insights into this? The PR works but still, I feel a little uncomfortable since I do not fully understand the impact of the different includes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3641
https://github.com/root-project/root/pull/3641:364,integrability,API,API,364,"[VecOps] Use better solution to pick up M_PI on windows; Many thanks to @bellenot ! Let's check whether the PR builds are happy with this. Remaining issue with this: Is it ok to include `math.h` or `cmath` (or even both?) based on the platform? Could this interfere with picking up the overloads for the fast math functions since `math.h` and `cmath` define their API in different namespaces? @lmoneta You have insights into this? The PR works but still, I feel a little uncomfortable since I do not fully understand the impact of the different includes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3641
https://github.com/root-project/root/pull/3641:235,interoperability,platform,platform,235,"[VecOps] Use better solution to pick up M_PI on windows; Many thanks to @bellenot ! Let's check whether the PR builds are happy with this. Remaining issue with this: Is it ok to include `math.h` or `cmath` (or even both?) based on the platform? Could this interfere with picking up the overloads for the fast math functions since `math.h` and `cmath` define their API in different namespaces? @lmoneta You have insights into this? The PR works but still, I feel a little uncomfortable since I do not fully understand the impact of the different includes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3641
