id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/4198:45,deployability,fail,fails,45,The failure is not due to this pr. This test fails for all pr I’ve looked at.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4198
https://github.com/root-project/root/pull/4198:4,performance,failur,failure,4,The failure is not due to this pr. This test fails for all pr I’ve looked at.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4198
https://github.com/root-project/root/pull/4198:4,reliability,fail,failure,4,The failure is not due to this pr. This test fails for all pr I’ve looked at.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4198
https://github.com/root-project/root/pull/4198:45,reliability,fail,fails,45,The failure is not due to this pr. This test fails for all pr I’ve looked at.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4198
https://github.com/root-project/root/pull/4198:40,safety,test,test,40,The failure is not due to this pr. This test fails for all pr I’ve looked at.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4198
https://github.com/root-project/root/pull/4198:40,testability,test,test,40,The failure is not due to this pr. This test fails for all pr I’ve looked at.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4198
https://github.com/root-project/root/pull/4201:21,reliability,doe,does,21,"Damn, Mac OS X's sed does not support the `{/++/p}` part to only print matching lines...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4201
https://github.com/root-project/root/pull/4201:30,usability,support,support,30,"Damn, Mac OS X's sed does not support the `{/++/p}` part to only print matching lines...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4201
https://github.com/root-project/root/pull/4201:12,deployability,version,version,12,The current version should be fully POSIX compliant now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4201
https://github.com/root-project/root/pull/4201:4,energy efficiency,current,current,4,The current version should be fully POSIX compliant now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4201
https://github.com/root-project/root/pull/4201:12,integrability,version,version,12,The current version should be fully POSIX compliant now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4201
https://github.com/root-project/root/pull/4201:42,integrability,complian,compliant,42,The current version should be fully POSIX compliant now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4201
https://github.com/root-project/root/pull/4201:12,modifiability,version,version,12,The current version should be fully POSIX compliant now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4201
https://github.com/root-project/root/pull/4201:42,safety,compl,compliant,42,The current version should be fully POSIX compliant now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4201
https://github.com/root-project/root/pull/4201:42,security,compl,compliant,42,The current version should be fully POSIX compliant now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4201
https://github.com/root-project/root/pull/4201:23,usability,support,supporting,23,Fix for Mac OS sed not supporting `\s` for space.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4201
https://github.com/root-project/root/pull/4201:13,interoperability,format,format,13,Please clang-format.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4201
https://github.com/root-project/root/pull/4203:63,integrability,coupl,couple,63,"https://travis-ci.org/root-project/root/jobs/571747561 shows a couple of formatting issues. Notably . ```diff. - void OpenInBrowser(const TString & url);. + void OpenInBrowser(const TString &url);. ```. is *fine* as is, though! As is that ` << ""\n Cling (C/C++ interpreter) meta commands usage\n""` part - you can leave those as they are. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4203
https://github.com/root-project/root/pull/4203:73,interoperability,format,formatting,73,"https://travis-ci.org/root-project/root/jobs/571747561 shows a couple of formatting issues. Notably . ```diff. - void OpenInBrowser(const TString & url);. + void OpenInBrowser(const TString &url);. ```. is *fine* as is, though! As is that ` << ""\n Cling (C/C++ interpreter) meta commands usage\n""` part - you can leave those as they are. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4203
https://github.com/root-project/root/pull/4203:63,modifiability,coupl,couple,63,"https://travis-ci.org/root-project/root/jobs/571747561 shows a couple of formatting issues. Notably . ```diff. - void OpenInBrowser(const TString & url);. + void OpenInBrowser(const TString &url);. ```. is *fine* as is, though! As is that ` << ""\n Cling (C/C++ interpreter) meta commands usage\n""` part - you can leave those as they are. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4203
https://github.com/root-project/root/pull/4203:63,testability,coupl,couple,63,"https://travis-ci.org/root-project/root/jobs/571747561 shows a couple of formatting issues. Notably . ```diff. - void OpenInBrowser(const TString & url);. + void OpenInBrowser(const TString &url);. ```. is *fine* as is, though! As is that ` << ""\n Cling (C/C++ interpreter) meta commands usage\n""` part - you can leave those as they are. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4203
https://github.com/root-project/root/pull/4203:279,usability,command,commands,279,"https://travis-ci.org/root-project/root/jobs/571747561 shows a couple of formatting issues. Notably . ```diff. - void OpenInBrowser(const TString & url);. + void OpenInBrowser(const TString &url);. ```. is *fine* as is, though! As is that ` << ""\n Cling (C/C++ interpreter) meta commands usage\n""` part - you can leave those as they are. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4203
https://github.com/root-project/root/pull/4203:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4203
https://github.com/root-project/root/pull/4203:11,deployability,build,build,11,@phsft-bot build just on windows10/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4203
https://github.com/root-project/root/pull/4203:11,deployability,build,build,11,@phsft-bot build just on windows10/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4203
https://github.com/root-project/root/pull/4203:17,interoperability,format,formatting,17,"Can we split the formatting commit of the existing code into a separate commit, please, such that everything "".help"" (and only that) is in a single commit? @couet should be able to help you with that. It makes reviewing much simpler, and I will review once this is done.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4203
https://github.com/root-project/root/pull/4203:210,safety,review,reviewing,210,"Can we split the formatting commit of the existing code into a separate commit, please, such that everything "".help"" (and only that) is in a single commit? @couet should be able to help you with that. It makes reviewing much simpler, and I will review once this is done.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4203
https://github.com/root-project/root/pull/4203:245,safety,review,review,245,"Can we split the formatting commit of the existing code into a separate commit, please, such that everything "".help"" (and only that) is in a single commit? @couet should be able to help you with that. It makes reviewing much simpler, and I will review once this is done.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4203
https://github.com/root-project/root/pull/4203:210,testability,review,reviewing,210,"Can we split the formatting commit of the existing code into a separate commit, please, such that everything "".help"" (and only that) is in a single commit? @couet should be able to help you with that. It makes reviewing much simpler, and I will review once this is done.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4203
https://github.com/root-project/root/pull/4203:225,testability,simpl,simpler,225,"Can we split the formatting commit of the existing code into a separate commit, please, such that everything "".help"" (and only that) is in a single commit? @couet should be able to help you with that. It makes reviewing much simpler, and I will review once this is done.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4203
https://github.com/root-project/root/pull/4203:245,testability,review,review,245,"Can we split the formatting commit of the existing code into a separate commit, please, such that everything "".help"" (and only that) is in a single commit? @couet should be able to help you with that. It makes reviewing much simpler, and I will review once this is done.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4203
https://github.com/root-project/root/pull/4203:111,usability,help,help,111,"Can we split the formatting commit of the existing code into a separate commit, please, such that everything "".help"" (and only that) is in a single commit? @couet should be able to help you with that. It makes reviewing much simpler, and I will review once this is done.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4203
https://github.com/root-project/root/pull/4203:181,usability,help,help,181,"Can we split the formatting commit of the existing code into a separate commit, please, such that everything "".help"" (and only that) is in a single commit? @couet should be able to help you with that. It makes reviewing much simpler, and I will review once this is done.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4203
https://github.com/root-project/root/pull/4203:225,usability,simpl,simpler,225,"Can we split the formatting commit of the existing code into a separate commit, please, such that everything "".help"" (and only that) is in a single commit? @couet should be able to help you with that. It makes reviewing much simpler, and I will review once this is done.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4203
https://github.com/root-project/root/pull/4203:26,deployability,patch,patches,26,We'll have to rebase your patches on top of mine - https://github.com/root-project/root/pull/4338 should go in first.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4203
https://github.com/root-project/root/pull/4203:26,safety,patch,patches,26,We'll have to rebase your patches on top of mine - https://github.com/root-project/root/pull/4338 should go in first.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4203
https://github.com/root-project/root/pull/4203:26,security,patch,patches,26,We'll have to rebase your patches on top of mine - https://github.com/root-project/root/pull/4338 should go in first.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4203
https://github.com/root-project/root/pull/4203:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4203
https://github.com/root-project/root/pull/4203:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4203
https://github.com/root-project/root/pull/4205:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4205
https://github.com/root-project/root/pull/4205:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4205
https://github.com/root-project/root/pull/4210:69,performance,time,time,69,"No change in C++ code - jenkins tests does not required. @alja, next time please add some text marker like `[eve7]` in begin of each commit comments.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4210
https://github.com/root-project/root/pull/4210:38,reliability,doe,does,38,"No change in C++ code - jenkins tests does not required. @alja, next time please add some text marker like `[eve7]` in begin of each commit comments.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4210
https://github.com/root-project/root/pull/4210:32,safety,test,tests,32,"No change in C++ code - jenkins tests does not required. @alja, next time please add some text marker like `[eve7]` in begin of each commit comments.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4210
https://github.com/root-project/root/pull/4210:32,testability,test,tests,32,"No change in C++ code - jenkins tests does not required. @alja, next time please add some text marker like `[eve7]` in begin of each commit comments.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4210
https://github.com/root-project/root/pull/4211:175,usability,tool,toolbox,175,"I agree that we should place the files somewhere else. As well to develop sooner or later a kind of deprecation strategy. However, it's not a ""GUI"", I would advertise it as a toolbox for analyzing ML workflows (graphical and non-graphical such as ROC/AUC and so on).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4211:200,usability,workflow,workflows,200,"I agree that we should place the files somewhere else. As well to develop sooner or later a kind of deprecation strategy. However, it's not a ""GUI"", I would advertise it as a toolbox for analyzing ML workflows (graphical and non-graphical such as ROC/AUC and so on).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4211
https://github.com/root-project/root/pull/4212:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4212
https://github.com/root-project/root/pull/4213:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4213
https://github.com/root-project/root/pull/4213:26,energy efficiency,profil,profile,26,Could you fix your GitHub profile match to the one from the commit message?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4213
https://github.com/root-project/root/pull/4213:67,integrability,messag,message,67,Could you fix your GitHub profile match to the one from the commit message?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4213
https://github.com/root-project/root/pull/4213:67,interoperability,messag,message,67,Could you fix your GitHub profile match to the one from the commit message?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4213
https://github.com/root-project/root/pull/4213:26,performance,profil,profile,26,Could you fix your GitHub profile match to the one from the commit message?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4213
https://github.com/root-project/root/pull/4213:28,energy efficiency,profil,profile,28,> Could you fix your GitHub profile match to the one from the commit message? Done!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4213
https://github.com/root-project/root/pull/4213:69,integrability,messag,message,69,> Could you fix your GitHub profile match to the one from the commit message? Done!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4213
https://github.com/root-project/root/pull/4213:69,interoperability,messag,message,69,> Could you fix your GitHub profile match to the one from the commit message? Done!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4213
https://github.com/root-project/root/pull/4213:28,performance,profil,profile,28,> Could you fix your GitHub profile match to the one from the commit message? Done!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4213
https://github.com/root-project/root/pull/4214:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:19,integrability,sub,submitted,19,"No idea why github submitted my review twice, sorry...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:32,safety,review,review,32,"No idea why github submitted my review twice, sorry...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:32,testability,review,review,32,"No idea why github submitted my review twice, sorry...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:239,integrability,transform,transformation,239,"> This seems to be a generic feature and I think it is worth documenting a little more. I do not see a lot of tests. I believe we should add some be it only for documentation purposes of this PR. I'd be interested to see what is the exact transformation happening and why only the definitions are hidden. As requested, I have extended the Doxygen documentation. This PR does not include tests, though (to be added in a future PR).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:239,interoperability,transform,transformation,239,"> This seems to be a generic feature and I think it is worth documenting a little more. I do not see a lot of tests. I believe we should add some be it only for documentation purposes of this PR. I'd be interested to see what is the exact transformation happening and why only the definitions are hidden. As requested, I have extended the Doxygen documentation. This PR does not include tests, though (to be added in a future PR).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:326,modifiability,exten,extended,326,"> This seems to be a generic feature and I think it is worth documenting a little more. I do not see a lot of tests. I believe we should add some be it only for documentation purposes of this PR. I'd be interested to see what is the exact transformation happening and why only the definitions are hidden. As requested, I have extended the Doxygen documentation. This PR does not include tests, though (to be added in a future PR).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:370,reliability,doe,does,370,"> This seems to be a generic feature and I think it is worth documenting a little more. I do not see a lot of tests. I believe we should add some be it only for documentation purposes of this PR. I'd be interested to see what is the exact transformation happening and why only the definitions are hidden. As requested, I have extended the Doxygen documentation. This PR does not include tests, though (to be added in a future PR).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:110,safety,test,tests,110,"> This seems to be a generic feature and I think it is worth documenting a little more. I do not see a lot of tests. I believe we should add some be it only for documentation purposes of this PR. I'd be interested to see what is the exact transformation happening and why only the definitions are hidden. As requested, I have extended the Doxygen documentation. This PR does not include tests, though (to be added in a future PR).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:387,safety,test,tests,387,"> This seems to be a generic feature and I think it is worth documenting a little more. I do not see a lot of tests. I believe we should add some be it only for documentation purposes of this PR. I'd be interested to see what is the exact transformation happening and why only the definitions are hidden. As requested, I have extended the Doxygen documentation. This PR does not include tests, though (to be added in a future PR).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:110,testability,test,tests,110,"> This seems to be a generic feature and I think it is worth documenting a little more. I do not see a lot of tests. I believe we should add some be it only for documentation purposes of this PR. I'd be interested to see what is the exact transformation happening and why only the definitions are hidden. As requested, I have extended the Doxygen documentation. This PR does not include tests, though (to be added in a future PR).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:387,testability,test,tests,387,"> This seems to be a generic feature and I think it is worth documenting a little more. I do not see a lot of tests. I believe we should add some be it only for documentation purposes of this PR. I'd be interested to see what is the exact transformation happening and why only the definitions are hidden. As requested, I have extended the Doxygen documentation. This PR does not include tests, though (to be added in a future PR).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:61,usability,document,documenting,61,"> This seems to be a generic feature and I think it is worth documenting a little more. I do not see a lot of tests. I believe we should add some be it only for documentation purposes of this PR. I'd be interested to see what is the exact transformation happening and why only the definitions are hidden. As requested, I have extended the Doxygen documentation. This PR does not include tests, though (to be added in a future PR).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:161,usability,document,documentation,161,"> This seems to be a generic feature and I think it is worth documenting a little more. I do not see a lot of tests. I believe we should add some be it only for documentation purposes of this PR. I'd be interested to see what is the exact transformation happening and why only the definitions are hidden. As requested, I have extended the Doxygen documentation. This PR does not include tests, though (to be added in a future PR).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:347,usability,document,documentation,347,"> This seems to be a generic feature and I think it is worth documenting a little more. I do not see a lot of tests. I believe we should add some be it only for documentation purposes of this PR. I'd be interested to see what is the exact transformation happening and why only the definitions are hidden. As requested, I have extended the Doxygen documentation. This PR does not include tests, though (to be added in a future PR).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:17,deployability,updat,updated,17,This PR has been updated to support function overload/class templates. :-). Please review.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:17,safety,updat,updated,17,This PR has been updated to support function overload/class templates. :-). Please review.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:83,safety,review,review,83,This PR has been updated to support function overload/class templates. :-). Please review.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:17,security,updat,updated,17,This PR has been updated to support function overload/class templates. :-). Please review.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:83,testability,review,review,83,This PR has been updated to support function overload/class templates. :-). Please review.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:28,usability,support,support,28,This PR has been updated to support function overload/class templates. :-). Please review.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:241,integrability,transform,transformation,241,"> > This seems to be a generic feature and I think it is worth documenting a little more. I do not see a lot of tests. I believe we should add some be it only for documentation purposes of this PR. I'd be interested to see what is the exact transformation happening and why only the definitions are hidden. > . > As requested, I have extended the Doxygen documentation. This PR does not include tests, though (to be added in a future PR). IMO that’s a prerequisite for this new feature. We usually do not have new features without a good amount of tests. Delaying them for future seems like a bad idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:241,interoperability,transform,transformation,241,"> > This seems to be a generic feature and I think it is worth documenting a little more. I do not see a lot of tests. I believe we should add some be it only for documentation purposes of this PR. I'd be interested to see what is the exact transformation happening and why only the definitions are hidden. > . > As requested, I have extended the Doxygen documentation. This PR does not include tests, though (to be added in a future PR). IMO that’s a prerequisite for this new feature. We usually do not have new features without a good amount of tests. Delaying them for future seems like a bad idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:334,modifiability,exten,extended,334,"> > This seems to be a generic feature and I think it is worth documenting a little more. I do not see a lot of tests. I believe we should add some be it only for documentation purposes of this PR. I'd be interested to see what is the exact transformation happening and why only the definitions are hidden. > . > As requested, I have extended the Doxygen documentation. This PR does not include tests, though (to be added in a future PR). IMO that’s a prerequisite for this new feature. We usually do not have new features without a good amount of tests. Delaying them for future seems like a bad idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:378,reliability,doe,does,378,"> > This seems to be a generic feature and I think it is worth documenting a little more. I do not see a lot of tests. I believe we should add some be it only for documentation purposes of this PR. I'd be interested to see what is the exact transformation happening and why only the definitions are hidden. > . > As requested, I have extended the Doxygen documentation. This PR does not include tests, though (to be added in a future PR). IMO that’s a prerequisite for this new feature. We usually do not have new features without a good amount of tests. Delaying them for future seems like a bad idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:112,safety,test,tests,112,"> > This seems to be a generic feature and I think it is worth documenting a little more. I do not see a lot of tests. I believe we should add some be it only for documentation purposes of this PR. I'd be interested to see what is the exact transformation happening and why only the definitions are hidden. > . > As requested, I have extended the Doxygen documentation. This PR does not include tests, though (to be added in a future PR). IMO that’s a prerequisite for this new feature. We usually do not have new features without a good amount of tests. Delaying them for future seems like a bad idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:395,safety,test,tests,395,"> > This seems to be a generic feature and I think it is worth documenting a little more. I do not see a lot of tests. I believe we should add some be it only for documentation purposes of this PR. I'd be interested to see what is the exact transformation happening and why only the definitions are hidden. > . > As requested, I have extended the Doxygen documentation. This PR does not include tests, though (to be added in a future PR). IMO that’s a prerequisite for this new feature. We usually do not have new features without a good amount of tests. Delaying them for future seems like a bad idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:548,safety,test,tests,548,"> > This seems to be a generic feature and I think it is worth documenting a little more. I do not see a lot of tests. I believe we should add some be it only for documentation purposes of this PR. I'd be interested to see what is the exact transformation happening and why only the definitions are hidden. > . > As requested, I have extended the Doxygen documentation. This PR does not include tests, though (to be added in a future PR). IMO that’s a prerequisite for this new feature. We usually do not have new features without a good amount of tests. Delaying them for future seems like a bad idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:112,testability,test,tests,112,"> > This seems to be a generic feature and I think it is worth documenting a little more. I do not see a lot of tests. I believe we should add some be it only for documentation purposes of this PR. I'd be interested to see what is the exact transformation happening and why only the definitions are hidden. > . > As requested, I have extended the Doxygen documentation. This PR does not include tests, though (to be added in a future PR). IMO that’s a prerequisite for this new feature. We usually do not have new features without a good amount of tests. Delaying them for future seems like a bad idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:395,testability,test,tests,395,"> > This seems to be a generic feature and I think it is worth documenting a little more. I do not see a lot of tests. I believe we should add some be it only for documentation purposes of this PR. I'd be interested to see what is the exact transformation happening and why only the definitions are hidden. > . > As requested, I have extended the Doxygen documentation. This PR does not include tests, though (to be added in a future PR). IMO that’s a prerequisite for this new feature. We usually do not have new features without a good amount of tests. Delaying them for future seems like a bad idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:548,testability,test,tests,548,"> > This seems to be a generic feature and I think it is worth documenting a little more. I do not see a lot of tests. I believe we should add some be it only for documentation purposes of this PR. I'd be interested to see what is the exact transformation happening and why only the definitions are hidden. > . > As requested, I have extended the Doxygen documentation. This PR does not include tests, though (to be added in a future PR). IMO that’s a prerequisite for this new feature. We usually do not have new features without a good amount of tests. Delaying them for future seems like a bad idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:63,usability,document,documenting,63,"> > This seems to be a generic feature and I think it is worth documenting a little more. I do not see a lot of tests. I believe we should add some be it only for documentation purposes of this PR. I'd be interested to see what is the exact transformation happening and why only the definitions are hidden. > . > As requested, I have extended the Doxygen documentation. This PR does not include tests, though (to be added in a future PR). IMO that’s a prerequisite for this new feature. We usually do not have new features without a good amount of tests. Delaying them for future seems like a bad idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:163,usability,document,documentation,163,"> > This seems to be a generic feature and I think it is worth documenting a little more. I do not see a lot of tests. I believe we should add some be it only for documentation purposes of this PR. I'd be interested to see what is the exact transformation happening and why only the definitions are hidden. > . > As requested, I have extended the Doxygen documentation. This PR does not include tests, though (to be added in a future PR). IMO that’s a prerequisite for this new feature. We usually do not have new features without a good amount of tests. Delaying them for future seems like a bad idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:355,usability,document,documentation,355,"> > This seems to be a generic feature and I think it is worth documenting a little more. I do not see a lot of tests. I believe we should add some be it only for documentation purposes of this PR. I'd be interested to see what is the exact transformation happening and why only the definitions are hidden. > . > As requested, I have extended the Doxygen documentation. This PR does not include tests, though (to be added in a future PR). IMO that’s a prerequisite for this new feature. We usually do not have new features without a good amount of tests. Delaying them for future seems like a bad idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:10,security,expos,expose,10,Yes let's expose to users and we see how this fares. If we run into problems we make it less visible (e.g. only for notebooks),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:20,usability,user,users,20,Yes let's expose to users and we see how this fares. If we run into problems we make it less visible (e.g. only for notebooks),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:319,deployability,unload,unloading,319,> Yes let's expose to users and we see how this fares. If we run into problems we make it less visible (e.g. only for notebooks). I think that is not the best approach. My general worry is that we are turning by default a feature which messes up with the lookup tables with no tests to improve the less used feature of unloading. I would propose to make this feature configurable and enable it only for ROOT through TCling to gather some usage experience.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:367,integrability,configur,configurable,367,> Yes let's expose to users and we see how this fares. If we run into problems we make it less visible (e.g. only for notebooks). I think that is not the best approach. My general worry is that we are turning by default a feature which messes up with the lookup tables with no tests to improve the less used feature of unloading. I would propose to make this feature configurable and enable it only for ROOT through TCling to gather some usage experience.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:367,modifiability,configur,configurable,367,> Yes let's expose to users and we see how this fares. If we run into problems we make it less visible (e.g. only for notebooks). I think that is not the best approach. My general worry is that we are turning by default a feature which messes up with the lookup tables with no tests to improve the less used feature of unloading. I would propose to make this feature configurable and enable it only for ROOT through TCling to gather some usage experience.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:277,safety,test,tests,277,> Yes let's expose to users and we see how this fares. If we run into problems we make it less visible (e.g. only for notebooks). I think that is not the best approach. My general worry is that we are turning by default a feature which messes up with the lookup tables with no tests to improve the less used feature of unloading. I would propose to make this feature configurable and enable it only for ROOT through TCling to gather some usage experience.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:12,security,expos,expose,12,> Yes let's expose to users and we see how this fares. If we run into problems we make it less visible (e.g. only for notebooks). I think that is not the best approach. My general worry is that we are turning by default a feature which messes up with the lookup tables with no tests to improve the less used feature of unloading. I would propose to make this feature configurable and enable it only for ROOT through TCling to gather some usage experience.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:367,security,configur,configurable,367,> Yes let's expose to users and we see how this fares. If we run into problems we make it less visible (e.g. only for notebooks). I think that is not the best approach. My general worry is that we are turning by default a feature which messes up with the lookup tables with no tests to improve the less used feature of unloading. I would propose to make this feature configurable and enable it only for ROOT through TCling to gather some usage experience.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:277,testability,test,tests,277,> Yes let's expose to users and we see how this fares. If we run into problems we make it less visible (e.g. only for notebooks). I think that is not the best approach. My general worry is that we are turning by default a feature which messes up with the lookup tables with no tests to improve the less used feature of unloading. I would propose to make this feature configurable and enable it only for ROOT through TCling to gather some usage experience.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:22,usability,user,users,22,> Yes let's expose to users and we see how this fares. If we run into problems we make it less visible (e.g. only for notebooks). I think that is not the best approach. My general worry is that we are turning by default a feature which messes up with the lookup tables with no tests to improve the less used feature of unloading. I would propose to make this feature configurable and enable it only for ROOT through TCling to gather some usage experience.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:444,usability,experien,experience,444,> Yes let's expose to users and we see how this fares. If we run into problems we make it less visible (e.g. only for notebooks). I think that is not the best approach. My general worry is that we are turning by default a feature which messes up with the lookup tables with no tests to improve the less used feature of unloading. I would propose to make this feature configurable and enable it only for ROOT through TCling to gather some usage experience.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:188,deployability,unload,unloading,188,"> turning by default a feature which messes up with the lookup tables. How does it mess things up? > with no tests. As I said that won't be the case. > to improve the less used feature of unloading. I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. > make this feature configurable. Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:242,deployability,unload,unloading,242,"> turning by default a feature which messes up with the lookup tables. How does it mess things up? > with no tests. As I said that won't be the case. > to improve the less used feature of unloading. I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. > make this feature configurable. Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:432,integrability,configur,configurable,432,"> turning by default a feature which messes up with the lookup tables. How does it mess things up? > with no tests. As I said that won't be the case. > to improve the less used feature of unloading. I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. > make this feature configurable. Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:432,modifiability,configur,configurable,432,"> turning by default a feature which messes up with the lookup tables. How does it mess things up? > with no tests. As I said that won't be the case. > to improve the less used feature of unloading. I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. > make this feature configurable. Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:75,reliability,doe,does,75,"> turning by default a feature which messes up with the lookup tables. How does it mess things up? > with no tests. As I said that won't be the case. > to improve the less used feature of unloading. I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. > make this feature configurable. Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:109,safety,test,tests,109,"> turning by default a feature which messes up with the lookup tables. How does it mess things up? > with no tests. As I said that won't be the case. > to improve the less used feature of unloading. I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. > make this feature configurable. Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:432,security,configur,configurable,432,"> turning by default a feature which messes up with the lookup tables. How does it mess things up? > with no tests. As I said that won't be the case. > to improve the less used feature of unloading. I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. > make this feature configurable. Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:109,testability,test,tests,109,"> turning by default a feature which messes up with the lookup tables. How does it mess things up? > with no tests. As I said that won't be the case. > to improve the less used feature of unloading. I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. > make this feature configurable. Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:207,testability,understand,understand,207,"> turning by default a feature which messes up with the lookup tables. How does it mess things up? > with no tests. As I said that won't be the case. > to improve the less used feature of unloading. I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. > make this feature configurable. Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:400,usability,user,users,400,"> turning by default a feature which messes up with the lookup tables. How does it mess things up? > with no tests. As I said that won't be the case. > to improve the less used feature of unloading. I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. > make this feature configurable. Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:559,usability,usab,usability,559,"> turning by default a feature which messes up with the lookup tables. How does it mess things up? > with no tests. As I said that won't be the case. > to improve the less used feature of unloading. I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. > make this feature configurable. Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:269,deployability,unload,unload,269,". > How does it mess things up? IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. > . > > with no tests. > . > As I said that won't be the case. > . > > to improve the less used feature of unloading. > . > I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. . > . > > make this feature configurable. > . > Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability... As I said, I am not sure if the implementation does not force the regular person (not using unloading) to pay for something he does not use. Secondly, while I understand the test will come at some point in future, I cannot judge on the implementation without any test. Those are two points which we should always consider when enabling something of this size by default for cling standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:460,deployability,unload,unloading,460,". > How does it mess things up? IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. > . > > with no tests. > . > As I said that won't be the case. > . > > to improve the less used feature of unloading. > . > I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. . > . > > make this feature configurable. > . > Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability... As I said, I am not sure if the implementation does not force the regular person (not using unloading) to pay for something he does not use. Secondly, while I understand the test will come at some point in future, I cannot judge on the implementation without any test. Those are two points which we should always consider when enabling something of this size by default for cling standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:520,deployability,unload,unloading,520,". > How does it mess things up? IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. > . > > with no tests. > . > As I said that won't be the case. > . > > to improve the less used feature of unloading. > . > I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. . > . > > make this feature configurable. > . > Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability... As I said, I am not sure if the implementation does not force the regular person (not using unloading) to pay for something he does not use. Secondly, while I understand the test will come at some point in future, I cannot judge on the implementation without any test. Those are two points which we should always consider when enabling something of this size by default for cling standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:1161,deployability,unload,unloading,1161,". > How does it mess things up? IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. > . > > with no tests. > . > As I said that won't be the case. > . > > to improve the less used feature of unloading. > . > I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. . > . > > make this feature configurable. > . > Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability... As I said, I am not sure if the implementation does not force the regular person (not using unloading) to pay for something he does not use. Secondly, while I understand the test will come at some point in future, I cannot judge on the implementation without any test. Those are two points which we should always consider when enabling something of this size by default for cling standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:84,energy efficiency,current,currently,84,". > How does it mess things up? IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. > . > > with no tests. > . > As I said that won't be the case. > . > > to improve the less used feature of unloading. > . > I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. . > . > > make this feature configurable. > . > Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability... As I said, I am not sure if the implementation does not force the regular person (not using unloading) to pay for something he does not use. Secondly, while I understand the test will come at some point in future, I cannot judge on the implementation without any test. Those are two points which we should always consider when enabling something of this size by default for cling standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:923,integrability,configur,configurable,923,". > How does it mess things up? IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. > . > > with no tests. > . > As I said that won't be the case. > . > > to improve the less used feature of unloading. > . > I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. . > . > > make this feature configurable. > . > Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability... As I said, I am not sure if the implementation does not force the regular person (not using unloading) to pay for something he does not use. Secondly, while I understand the test will come at some point in future, I cannot judge on the implementation without any test. Those are two points which we should always consider when enabling something of this size by default for cling standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:923,modifiability,configur,configurable,923,". > How does it mess things up? IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. > . > > with no tests. > . > As I said that won't be the case. > . > > to improve the less used feature of unloading. > . > I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. . > . > > make this feature configurable. > . > Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability... As I said, I am not sure if the implementation does not force the regular person (not using unloading) to pay for something he does not use. Secondly, while I understand the test will come at some point in future, I cannot judge on the implementation without any test. Those are two points which we should always consider when enabling something of this size by default for cling standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:8,reliability,doe,does,8,". > How does it mess things up? IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. > . > > with no tests. > . > As I said that won't be the case. > . > > to improve the less used feature of unloading. > . > I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. . > . > > make this feature configurable. > . > Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability... As I said, I am not sure if the implementation does not force the regular person (not using unloading) to pay for something he does not use. Secondly, while I understand the test will come at some point in future, I cannot judge on the implementation without any test. Those are two points which we should always consider when enabling something of this size by default for cling standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:1116,reliability,doe,does,1116,". > How does it mess things up? IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. > . > > with no tests. > . > As I said that won't be the case. > . > > to improve the less used feature of unloading. > . > I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. . > . > > make this feature configurable. > . > Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability... As I said, I am not sure if the implementation does not force the regular person (not using unloading) to pay for something he does not use. Secondly, while I understand the test will come at some point in future, I cannot judge on the implementation without any test. Those are two points which we should always consider when enabling something of this size by default for cling standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:1196,reliability,doe,does,1196,". > How does it mess things up? IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. > . > > with no tests. > . > As I said that won't be the case. > . > > to improve the less used feature of unloading. > . > I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. . > . > > make this feature configurable. > . > Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability... As I said, I am not sure if the implementation does not force the regular person (not using unloading) to pay for something he does not use. Secondly, while I understand the test will come at some point in future, I cannot judge on the implementation without any test. Those are two points which we should always consider when enabling something of this size by default for cling standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:369,safety,test,tests,369,". > How does it mess things up? IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. > . > > with no tests. > . > As I said that won't be the case. > . > > to improve the less used feature of unloading. > . > I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. . > . > > make this feature configurable. > . > Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability... As I said, I am not sure if the implementation does not force the regular person (not using unloading) to pay for something he does not use. Secondly, while I understand the test will come at some point in future, I cannot judge on the implementation without any test. Those are two points which we should always consider when enabling something of this size by default for cling standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:1243,safety,test,test,1243,". > How does it mess things up? IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. > . > > with no tests. > . > As I said that won't be the case. > . > > to improve the less used feature of unloading. > . > I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. . > . > > make this feature configurable. > . > Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability... As I said, I am not sure if the implementation does not force the regular person (not using unloading) to pay for something he does not use. Secondly, while I understand the test will come at some point in future, I cannot judge on the implementation without any test. Those are two points which we should always consider when enabling something of this size by default for cling standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:1332,safety,test,test,1332,". > How does it mess things up? IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. > . > > with no tests. > . > As I said that won't be the case. > . > > to improve the less used feature of unloading. > . > I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. . > . > > make this feature configurable. > . > Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability... As I said, I am not sure if the implementation does not force the regular person (not using unloading) to pay for something he does not use. Secondly, while I understand the test will come at some point in future, I cannot judge on the implementation without any test. Those are two points which we should always consider when enabling something of this size by default for cling standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:124,security,token,token,124,". > How does it mess things up? IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. > . > > with no tests. > . > As I said that won't be the case. > . > > to improve the less used feature of unloading. > . > I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. . > . > > make this feature configurable. > . > Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability... As I said, I am not sure if the implementation does not force the regular person (not using unloading) to pay for something he does not use. Secondly, while I understand the test will come at some point in future, I cannot judge on the implementation without any test. Those are two points which we should always consider when enabling something of this size by default for cling standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:923,security,configur,configurable,923,". > How does it mess things up? IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. > . > > with no tests. > . > As I said that won't be the case. > . > > to improve the less used feature of unloading. > . > I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. . > . > > make this feature configurable. > . > Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability... As I said, I am not sure if the implementation does not force the regular person (not using unloading) to pay for something he does not use. Secondly, while I understand the test will come at some point in future, I cannot judge on the implementation without any test. Those are two points which we should always consider when enabling something of this size by default for cling standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:369,testability,test,tests,369,". > How does it mess things up? IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. > . > > with no tests. > . > As I said that won't be the case. > . > > to improve the less used feature of unloading. > . > I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. . > . > > make this feature configurable. > . > Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability... As I said, I am not sure if the implementation does not force the regular person (not using unloading) to pay for something he does not use. Secondly, while I understand the test will come at some point in future, I cannot judge on the implementation without any test. Those are two points which we should always consider when enabling something of this size by default for cling standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:485,testability,understand,understand,485,". > How does it mess things up? IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. > . > > with no tests. > . > As I said that won't be the case. > . > > to improve the less used feature of unloading. > . > I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. . > . > > make this feature configurable. > . > Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability... As I said, I am not sure if the implementation does not force the regular person (not using unloading) to pay for something he does not use. Secondly, while I understand the test will come at some point in future, I cannot judge on the implementation without any test. Those are two points which we should always consider when enabling something of this size by default for cling standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:1228,testability,understand,understand,1228,". > How does it mess things up? IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. > . > > with no tests. > . > As I said that won't be the case. > . > > to improve the less used feature of unloading. > . > I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. . > . > > make this feature configurable. > . > Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability... As I said, I am not sure if the implementation does not force the regular person (not using unloading) to pay for something he does not use. Secondly, while I understand the test will come at some point in future, I cannot judge on the implementation without any test. Those are two points which we should always consider when enabling something of this size by default for cling standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:1243,testability,test,test,1243,". > How does it mess things up? IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. > . > > with no tests. > . > As I said that won't be the case. > . > > to improve the less used feature of unloading. > . > I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. . > . > > make this feature configurable. > . > Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability... As I said, I am not sure if the implementation does not force the regular person (not using unloading) to pay for something he does not use. Secondly, while I understand the test will come at some point in future, I cannot judge on the implementation without any test. Those are two points which we should always consider when enabling something of this size by default for cling standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:1332,testability,test,test,1332,". > How does it mess things up? IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. > . > > with no tests. > . > As I said that won't be the case. > . > > to improve the less used feature of unloading. > . > I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. . > . > > make this feature configurable. > . > Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability... As I said, I am not sure if the implementation does not force the regular person (not using unloading) to pay for something he does not use. Secondly, while I understand the test will come at some point in future, I cannot judge on the implementation without any test. Those are two points which we should always consider when enabling something of this size by default for cling standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:678,usability,user,users,678,". > How does it mess things up? IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. > . > > with no tests. > . > As I said that won't be the case. > . > > to improve the less used feature of unloading. > . > I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. . > . > > make this feature configurable. > . > Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability... As I said, I am not sure if the implementation does not force the regular person (not using unloading) to pay for something he does not use. Secondly, while I understand the test will come at some point in future, I cannot judge on the implementation without any test. Those are two points which we should always consider when enabling something of this size by default for cling standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:816,usability,experien,experience,816,". > How does it mess things up? IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. > . > > with no tests. > . > As I said that won't be the case. > . > > to improve the less used feature of unloading. > . > I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. . > . > > make this feature configurable. > . > Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability... As I said, I am not sure if the implementation does not force the regular person (not using unloading) to pay for something he does not use. Secondly, while I understand the test will come at some point in future, I cannot judge on the implementation without any test. Those are two points which we should always consider when enabling something of this size by default for cling standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:888,usability,user,users,888,". > How does it mess things up? IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. > . > > with no tests. > . > As I said that won't be the case. > . > > to improve the less used feature of unloading. > . > I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. . > . > > make this feature configurable. > . > Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability... As I said, I am not sure if the implementation does not force the regular person (not using unloading) to pay for something he does not use. Secondly, while I understand the test will come at some point in future, I cannot judge on the implementation without any test. Those are two points which we should always consider when enabling something of this size by default for cling standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:1056,usability,usab,usability,1056,". > How does it mess things up? IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. > . > > with no tests. > . > As I said that won't be the case. > . > > to improve the less used feature of unloading. > . > I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. . > . > > make this feature configurable. > . > Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability... As I said, I am not sure if the implementation does not force the regular person (not using unloading) to pay for something he does not use. Secondly, while I understand the test will come at some point in future, I cannot judge on the implementation without any test. Those are two points which we should always consider when enabling something of this size by default for cling standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:1143,usability,person,person,1143,". > How does it mess things up? IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. > . > > with no tests. > . > As I said that won't be the case. > . > > to improve the less used feature of unloading. > . > I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. . > . > > make this feature configurable. > . > Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability... As I said, I am not sure if the implementation does not force the regular person (not using unloading) to pay for something he does not use. Secondly, while I understand the test will come at some point in future, I cannot judge on the implementation without any test. Those are two points which we should always consider when enabling something of this size by default for cling standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:239,deployability,unload,unload,239,"> IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. I am not sure if IIUC your comment, but if I did, you are worried because it manually patches lookup tables so that old definitions cannot be found. That was the only way AFAIK (without a patch to Clang's SemaLookup), to invalidate old declarations so that a unqualified lookup is not ambiguous. Also, please see https://github.com/root-project/cling/issues/259 for some background on this feature. > I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. As suggested, I have disabled this feature for Cling standalone. It is manually enabled in TCling, so that it remains usable from the ROOT prompt and Jupyter notebooks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:409,deployability,patch,patches,409,"> IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. I am not sure if IIUC your comment, but if I did, you are worried because it manually patches lookup tables so that old definitions cannot be found. That was the only way AFAIK (without a patch to Clang's SemaLookup), to invalidate old declarations so that a unqualified lookup is not ambiguous. Also, please see https://github.com/root-project/cling/issues/259 for some background on this feature. > I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. As suggested, I have disabled this feature for Cling standalone. It is manually enabled in TCling, so that it remains usable from the ROOT prompt and Jupyter notebooks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:511,deployability,patch,patch,511,"> IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. I am not sure if IIUC your comment, but if I did, you are worried because it manually patches lookup tables so that old definitions cannot be found. That was the only way AFAIK (without a patch to Clang's SemaLookup), to invalidate old declarations so that a unqualified lookup is not ambiguous. Also, please see https://github.com/root-project/cling/issues/259 for some background on this feature. > I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. As suggested, I have disabled this feature for Cling standalone. It is manually enabled in TCling, so that it remains usable from the ROOT prompt and Jupyter notebooks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:54,energy efficiency,current,currently,54,"> IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. I am not sure if IIUC your comment, but if I did, you are worried because it manually patches lookup tables so that old definitions cannot be found. That was the only way AFAIK (without a patch to Clang's SemaLookup), to invalidate old declarations so that a unqualified lookup is not ambiguous. Also, please see https://github.com/root-project/cling/issues/259 for some background on this feature. > I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. As suggested, I have disabled this feature for Cling standalone. It is manually enabled in TCling, so that it remains usable from the ROOT prompt and Jupyter notebooks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:409,safety,patch,patches,409,"> IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. I am not sure if IIUC your comment, but if I did, you are worried because it manually patches lookup tables so that old definitions cannot be found. That was the only way AFAIK (without a patch to Clang's SemaLookup), to invalidate old declarations so that a unqualified lookup is not ambiguous. Also, please see https://github.com/root-project/cling/issues/259 for some background on this feature. > I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. As suggested, I have disabled this feature for Cling standalone. It is manually enabled in TCling, so that it remains usable from the ROOT prompt and Jupyter notebooks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:511,safety,patch,patch,511,"> IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. I am not sure if IIUC your comment, but if I did, you are worried because it manually patches lookup tables so that old definitions cannot be found. That was the only way AFAIK (without a patch to Clang's SemaLookup), to invalidate old declarations so that a unqualified lookup is not ambiguous. Also, please see https://github.com/root-project/cling/issues/259 for some background on this feature. > I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. As suggested, I have disabled this feature for Cling standalone. It is manually enabled in TCling, so that it remains usable from the ROOT prompt and Jupyter notebooks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:94,security,token,token,94,"> IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. I am not sure if IIUC your comment, but if I did, you are worried because it manually patches lookup tables so that old definitions cannot be found. That was the only way AFAIK (without a patch to Clang's SemaLookup), to invalidate old declarations so that a unqualified lookup is not ambiguous. Also, please see https://github.com/root-project/cling/issues/259 for some background on this feature. > I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. As suggested, I have disabled this feature for Cling standalone. It is manually enabled in TCling, so that it remains usable from the ROOT prompt and Jupyter notebooks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:409,security,patch,patches,409,"> IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. I am not sure if IIUC your comment, but if I did, you are worried because it manually patches lookup tables so that old definitions cannot be found. That was the only way AFAIK (without a patch to Clang's SemaLookup), to invalidate old declarations so that a unqualified lookup is not ambiguous. Also, please see https://github.com/root-project/cling/issues/259 for some background on this feature. > I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. As suggested, I have disabled this feature for Cling standalone. It is manually enabled in TCling, so that it remains usable from the ROOT prompt and Jupyter notebooks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:511,security,patch,patch,511,"> IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. I am not sure if IIUC your comment, but if I did, you are worried because it manually patches lookup tables so that old definitions cannot be found. That was the only way AFAIK (without a patch to Clang's SemaLookup), to invalidate old declarations so that a unqualified lookup is not ambiguous. Also, please see https://github.com/root-project/cling/issues/259 for some background on this feature. > I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. As suggested, I have disabled this feature for Cling standalone. It is manually enabled in TCling, so that it remains usable from the ROOT prompt and Jupyter notebooks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:850,usability,experien,experience,850,"> IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. I am not sure if IIUC your comment, but if I did, you are worried because it manually patches lookup tables so that old definitions cannot be found. That was the only way AFAIK (without a patch to Clang's SemaLookup), to invalidate old declarations so that a unqualified lookup is not ambiguous. Also, please see https://github.com/root-project/cling/issues/259 for some background on this feature. > I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. As suggested, I have disabled this feature for Cling standalone. It is manually enabled in TCling, so that it remains usable from the ROOT prompt and Jupyter notebooks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:922,usability,user,users,922,"> IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. I am not sure if IIUC your comment, but if I did, you are worried because it manually patches lookup tables so that old definitions cannot be found. That was the only way AFAIK (without a patch to Clang's SemaLookup), to invalidate old declarations so that a unqualified lookup is not ambiguous. Also, please see https://github.com/root-project/cling/issues/259 for some background on this feature. > I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. As suggested, I have disabled this feature for Cling standalone. It is manually enabled in TCling, so that it remains usable from the ROOT prompt and Jupyter notebooks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:1047,usability,usab,usable,1047,"> IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. I am not sure if IIUC your comment, but if I did, you are worried because it manually patches lookup tables so that old definitions cannot be found. That was the only way AFAIK (without a patch to Clang's SemaLookup), to invalidate old declarations so that a unqualified lookup is not ambiguous. Also, please see https://github.com/root-project/cling/issues/259 for some background on this feature. > I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. As suggested, I have disabled this feature for Cling standalone. It is manually enabled in TCling, so that it remains usable from the ROOT prompt and Jupyter notebooks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:47,deployability,unload,unloading,47,"**Big thanks** to all root/cling contributors! unloading may be used for REPL ( similar to https://www.youtube.com/watch?v=dY9CFugqXmo ), so **WHOLE community of C++ developers may benefit from that feature**.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4214:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4214
https://github.com/root-project/root/pull/4215:8,availability,failur,failure,8,The win failure is due to infrastructure. The code change is ifdef-ed as non windows.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4215
https://github.com/root-project/root/pull/4215:8,deployability,fail,failure,8,The win failure is due to infrastructure. The code change is ifdef-ed as non windows.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4215
https://github.com/root-project/root/pull/4215:26,deployability,infrastructur,infrastructure,26,The win failure is due to infrastructure. The code change is ifdef-ed as non windows.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4215
https://github.com/root-project/root/pull/4215:8,performance,failur,failure,8,The win failure is due to infrastructure. The code change is ifdef-ed as non windows.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4215
https://github.com/root-project/root/pull/4215:8,reliability,fail,failure,8,The win failure is due to infrastructure. The code change is ifdef-ed as non windows.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4215
https://github.com/root-project/root/pull/4216:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4216
https://github.com/root-project/root/pull/4216:11,deployability,build,build,11,@phsft-bot build just on mac1014/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4216
https://github.com/root-project/root/pull/4219:11,deployability,build,build,11,@phsft-bot build just on windows10/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4219
https://github.com/root-project/root/pull/4222:16,deployability,updat,update,16,Javier wants to update the branch. Do not merge yet.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4222
https://github.com/root-project/root/pull/4222:16,safety,updat,update,16,Javier wants to update the branch. Do not merge yet.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4222
https://github.com/root-project/root/pull/4222:16,security,updat,update,16,Javier wants to update the branch. Do not merge yet.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4222
https://github.com/root-project/root/pull/4222:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4222
https://github.com/root-project/root/pull/4222:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4222
https://github.com/root-project/root/pull/4223:0,availability,Error,Error,0,Error has nothing to do with submitted code,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4223
https://github.com/root-project/root/pull/4223:29,integrability,sub,submitted,29,Error has nothing to do with submitted code,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4223
https://github.com/root-project/root/pull/4223:0,performance,Error,Error,0,Error has nothing to do with submitted code,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4223
https://github.com/root-project/root/pull/4223:0,safety,Error,Error,0,Error has nothing to do with submitted code,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4223
https://github.com/root-project/root/pull/4223:0,usability,Error,Error,0,Error has nothing to do with submitted code,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4223
https://github.com/root-project/root/pull/4225:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4225
https://github.com/root-project/root/pull/4226:11,deployability,build,build,11,@phsft-bot build just on windows10/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4226
https://github.com/root-project/root/pull/4226:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4226
https://github.com/root-project/root/pull/4227:11,deployability,build,build,11,@phsft-bot build just on windows10/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4227
https://github.com/root-project/root/pull/4228:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4228
https://github.com/root-project/root/pull/4229:115,deployability,version,versions,115,"That’s what I was thinking, too. Inspecting some of the code makes me seriously doubt it... (especially with older versions of root)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4229
https://github.com/root-project/root/pull/4229:115,integrability,version,versions,115,"That’s what I was thinking, too. Inspecting some of the code makes me seriously doubt it... (especially with older versions of root)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4229
https://github.com/root-project/root/pull/4229:115,modifiability,version,versions,115,"That’s what I was thinking, too. Inspecting some of the code makes me seriously doubt it... (especially with older versions of root)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4229
https://github.com/root-project/root/pull/4230:68,deployability,build,build,68,"@vgvassilev I just cleaned a lock in windows node, I will retrigger build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4230
https://github.com/root-project/root/pull/4230:29,performance,lock,lock,29,"@vgvassilev I just cleaned a lock in windows node, I will retrigger build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4230
https://github.com/root-project/root/pull/4230:29,security,lock,lock,29,"@vgvassilev I just cleaned a lock in windows node, I will retrigger build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4230
https://github.com/root-project/root/pull/4230:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4230
https://github.com/root-project/root/pull/4232:11,deployability,build,build,11,@phsft-bot build just on windows10/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4232
https://github.com/root-project/root/pull/4232:11,deployability,build,build,11,@phsft-bot build just on windows10/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4232
https://github.com/root-project/root/pull/4232:11,deployability,build,build,11,@phsft-bot build just on windows10/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4232
https://github.com/root-project/root/pull/4233:14,availability,error,errors,14,Again jenkins errors has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4233
https://github.com/root-project/root/pull/4233:14,performance,error,errors,14,Again jenkins errors has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4233
https://github.com/root-project/root/pull/4233:14,safety,error,errors,14,Again jenkins errors has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4233
https://github.com/root-project/root/pull/4233:14,usability,error,errors,14,Again jenkins errors has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4233
https://github.com/root-project/root/pull/4234:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4234
https://github.com/root-project/root/pull/4234:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4234
https://github.com/root-project/root/pull/4236:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4236
https://github.com/root-project/root/pull/4236:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4236
https://github.com/root-project/root/pull/4239:11,availability,error,error,11,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:67,availability,error,error,67,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:1575,availability,error,errors,1575,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:36,deployability,fail,failing,36,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:95,deployability,build,build,95,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:147,deployability,log,logs,147,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:389,deployability,fail,fails,389,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:503,deployability,continu,continue,503,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:682,deployability,build,build,682,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:762,deployability,build,build,762,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:945,deployability,Build,Building,945,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:969,deployability,build,build,969,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:1082,deployability,build,build,1082,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:1124,deployability,build,build,1124,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:1180,deployability,Build,Building,1180,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:1204,deployability,build,build,1204,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:1317,deployability,build,build,1317,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:1359,deployability,build,build,1359,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:1511,deployability,build,build,1511,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:1529,deployability,Releas,Release,1529,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:881,energy efficiency,Cpu,Cpu,881,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:245,integrability,repositor,repository,245,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:445,integrability,repositor,repository,445,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:245,interoperability,repositor,repository,245,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:445,interoperability,repositor,repository,445,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:587,modifiability,exten,extended,587,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:11,performance,error,error,11,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:67,performance,error,error,67,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:157,performance,lock,lock,157,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:642,performance,lock,lock,642,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:670,performance,lock,lock,670,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:861,performance,Time,Time,861,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:881,performance,Cpu,Cpu,881,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:885,performance,Time,Time,885,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:1575,performance,error,errors,1575,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:36,reliability,fail,failing,36,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:389,reliability,fail,fails,389,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:1047,reliability,doe,does,1047,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:1282,reliability,doe,does,1282,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:11,safety,error,error,11,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:67,safety,error,error,67,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:147,safety,log,logs,147,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:1575,safety,error,errors,1575,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:147,security,log,logs,147,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:157,security,lock,lock,157,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:642,security,lock,lock,642,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:670,security,lock,lock,670,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:147,testability,log,logs,147,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:11,usability,error,error,11,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:67,usability,error,error,67,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:954,usability,Custom,Custom,954,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:1189,usability,Custom,Custom,1189,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:1415,usability,Command,Command,1415,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4239:1575,usability,error,errors,1575,"The window error are about git gc's failing to run:. ```. 18:55:18 error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. 18:55:18 . 18:55:18 Another git process seems to be running in this repository, e.g. 18:55:18 an editor opened by 'git commit'. Please make sure all processes. 18:55:18 are terminated then try again. If it still fails, a git process. 18:55:18 may have crashed in this repository earlier:. 18:55:18 remove the file manually to continue. ```. which seems to already have been forseen but the work-around was not extended enough? ```. 18:54:57 -- Cleaning up possible lock files [rm -f .git/HEAD.lock] in C:/build/workspace/root-pullrequests-build_2/root. ```. Any way ... in the end the build actually suceeded:. ```. 20:45:01 . 20:45:01 Processing hsimple.C... 20:45:01 hsimple : Real Time = 0.30 seconds Cpu Time = 0.22 seconds. 20:45:01 (TFile *) 0xa21a568. 20:45:01 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:01 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:02 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 20:45:02 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 20:45:03 Command exited with the value: 0. 20:45:03 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 20:45:03 0 Compiler errors. 20:45:03 50 or more Compiler warnings. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4239
https://github.com/root-project/root/pull/4241:43,usability,confirm,confirm,43,"Sorry and thank you for the changes! I can confirm, that is has no effect on other parts of the code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4241
https://github.com/root-project/root/pull/4242:47,performance,time,time,47,I think I got the ordering backwards the first time around... should be fine now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4242
https://github.com/root-project/root/pull/4242:55,deployability,build,build,55,@vgvassilev @amadio I tried locally to run incremental build using proposed fix and seems like it works...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4242
https://github.com/root-project/root/pull/4242:901,availability,error,errors,901,"Thank you @amadio! I am going to merge fix, since I want to re-enable incrementals in Jenkins. Windows build is actually green:. `13:11:40 Processing hsimple.C... 13:11:40 hsimple : Real Time = 0.33 seconds Cpu Time = 0.25 seconds. 13:11:40 (TFile *) 0xa3f64a8. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Command exited with the value: 0. 13:11:40 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 13:11:40 0 Compiler errors`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4242
https://github.com/root-project/root/pull/4242:103,deployability,build,build,103,"Thank you @amadio! I am going to merge fix, since I want to re-enable incrementals in Jenkins. Windows build is actually green:. `13:11:40 Processing hsimple.C... 13:11:40 hsimple : Real Time = 0.33 seconds Cpu Time = 0.25 seconds. 13:11:40 (TFile *) 0xa3f64a8. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Command exited with the value: 0. 13:11:40 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 13:11:40 0 Compiler errors`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4242
https://github.com/root-project/root/pull/4242:271,deployability,Build,Building,271,"Thank you @amadio! I am going to merge fix, since I want to re-enable incrementals in Jenkins. Windows build is actually green:. `13:11:40 Processing hsimple.C... 13:11:40 hsimple : Real Time = 0.33 seconds Cpu Time = 0.25 seconds. 13:11:40 (TFile *) 0xa3f64a8. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Command exited with the value: 0. 13:11:40 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 13:11:40 0 Compiler errors`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4242
https://github.com/root-project/root/pull/4242:295,deployability,build,build,295,"Thank you @amadio! I am going to merge fix, since I want to re-enable incrementals in Jenkins. Windows build is actually green:. `13:11:40 Processing hsimple.C... 13:11:40 hsimple : Real Time = 0.33 seconds Cpu Time = 0.25 seconds. 13:11:40 (TFile *) 0xa3f64a8. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Command exited with the value: 0. 13:11:40 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 13:11:40 0 Compiler errors`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4242
https://github.com/root-project/root/pull/4242:408,deployability,build,build,408,"Thank you @amadio! I am going to merge fix, since I want to re-enable incrementals in Jenkins. Windows build is actually green:. `13:11:40 Processing hsimple.C... 13:11:40 hsimple : Real Time = 0.33 seconds Cpu Time = 0.25 seconds. 13:11:40 (TFile *) 0xa3f64a8. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Command exited with the value: 0. 13:11:40 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 13:11:40 0 Compiler errors`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4242
https://github.com/root-project/root/pull/4242:450,deployability,build,build,450,"Thank you @amadio! I am going to merge fix, since I want to re-enable incrementals in Jenkins. Windows build is actually green:. `13:11:40 Processing hsimple.C... 13:11:40 hsimple : Real Time = 0.33 seconds Cpu Time = 0.25 seconds. 13:11:40 (TFile *) 0xa3f64a8. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Command exited with the value: 0. 13:11:40 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 13:11:40 0 Compiler errors`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4242
https://github.com/root-project/root/pull/4242:506,deployability,Build,Building,506,"Thank you @amadio! I am going to merge fix, since I want to re-enable incrementals in Jenkins. Windows build is actually green:. `13:11:40 Processing hsimple.C... 13:11:40 hsimple : Real Time = 0.33 seconds Cpu Time = 0.25 seconds. 13:11:40 (TFile *) 0xa3f64a8. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Command exited with the value: 0. 13:11:40 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 13:11:40 0 Compiler errors`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4242
https://github.com/root-project/root/pull/4242:530,deployability,build,build,530,"Thank you @amadio! I am going to merge fix, since I want to re-enable incrementals in Jenkins. Windows build is actually green:. `13:11:40 Processing hsimple.C... 13:11:40 hsimple : Real Time = 0.33 seconds Cpu Time = 0.25 seconds. 13:11:40 (TFile *) 0xa3f64a8. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Command exited with the value: 0. 13:11:40 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 13:11:40 0 Compiler errors`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4242
https://github.com/root-project/root/pull/4242:643,deployability,build,build,643,"Thank you @amadio! I am going to merge fix, since I want to re-enable incrementals in Jenkins. Windows build is actually green:. `13:11:40 Processing hsimple.C... 13:11:40 hsimple : Real Time = 0.33 seconds Cpu Time = 0.25 seconds. 13:11:40 (TFile *) 0xa3f64a8. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Command exited with the value: 0. 13:11:40 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 13:11:40 0 Compiler errors`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4242
https://github.com/root-project/root/pull/4242:685,deployability,build,build,685,"Thank you @amadio! I am going to merge fix, since I want to re-enable incrementals in Jenkins. Windows build is actually green:. `13:11:40 Processing hsimple.C... 13:11:40 hsimple : Real Time = 0.33 seconds Cpu Time = 0.25 seconds. 13:11:40 (TFile *) 0xa3f64a8. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Command exited with the value: 0. 13:11:40 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 13:11:40 0 Compiler errors`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4242
https://github.com/root-project/root/pull/4242:837,deployability,build,build,837,"Thank you @amadio! I am going to merge fix, since I want to re-enable incrementals in Jenkins. Windows build is actually green:. `13:11:40 Processing hsimple.C... 13:11:40 hsimple : Real Time = 0.33 seconds Cpu Time = 0.25 seconds. 13:11:40 (TFile *) 0xa3f64a8. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Command exited with the value: 0. 13:11:40 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 13:11:40 0 Compiler errors`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4242
https://github.com/root-project/root/pull/4242:855,deployability,Releas,Release,855,"Thank you @amadio! I am going to merge fix, since I want to re-enable incrementals in Jenkins. Windows build is actually green:. `13:11:40 Processing hsimple.C... 13:11:40 hsimple : Real Time = 0.33 seconds Cpu Time = 0.25 seconds. 13:11:40 (TFile *) 0xa3f64a8. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Command exited with the value: 0. 13:11:40 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 13:11:40 0 Compiler errors`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4242
https://github.com/root-project/root/pull/4242:121,energy efficiency,green,green,121,"Thank you @amadio! I am going to merge fix, since I want to re-enable incrementals in Jenkins. Windows build is actually green:. `13:11:40 Processing hsimple.C... 13:11:40 hsimple : Real Time = 0.33 seconds Cpu Time = 0.25 seconds. 13:11:40 (TFile *) 0xa3f64a8. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Command exited with the value: 0. 13:11:40 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 13:11:40 0 Compiler errors`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4242
https://github.com/root-project/root/pull/4242:207,energy efficiency,Cpu,Cpu,207,"Thank you @amadio! I am going to merge fix, since I want to re-enable incrementals in Jenkins. Windows build is actually green:. `13:11:40 Processing hsimple.C... 13:11:40 hsimple : Real Time = 0.33 seconds Cpu Time = 0.25 seconds. 13:11:40 (TFile *) 0xa3f64a8. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Command exited with the value: 0. 13:11:40 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 13:11:40 0 Compiler errors`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4242
https://github.com/root-project/root/pull/4242:187,performance,Time,Time,187,"Thank you @amadio! I am going to merge fix, since I want to re-enable incrementals in Jenkins. Windows build is actually green:. `13:11:40 Processing hsimple.C... 13:11:40 hsimple : Real Time = 0.33 seconds Cpu Time = 0.25 seconds. 13:11:40 (TFile *) 0xa3f64a8. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Command exited with the value: 0. 13:11:40 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 13:11:40 0 Compiler errors`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4242
https://github.com/root-project/root/pull/4242:207,performance,Cpu,Cpu,207,"Thank you @amadio! I am going to merge fix, since I want to re-enable incrementals in Jenkins. Windows build is actually green:. `13:11:40 Processing hsimple.C... 13:11:40 hsimple : Real Time = 0.33 seconds Cpu Time = 0.25 seconds. 13:11:40 (TFile *) 0xa3f64a8. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Command exited with the value: 0. 13:11:40 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 13:11:40 0 Compiler errors`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4242
https://github.com/root-project/root/pull/4242:211,performance,Time,Time,211,"Thank you @amadio! I am going to merge fix, since I want to re-enable incrementals in Jenkins. Windows build is actually green:. `13:11:40 Processing hsimple.C... 13:11:40 hsimple : Real Time = 0.33 seconds Cpu Time = 0.25 seconds. 13:11:40 (TFile *) 0xa3f64a8. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Command exited with the value: 0. 13:11:40 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 13:11:40 0 Compiler errors`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4242
https://github.com/root-project/root/pull/4242:901,performance,error,errors,901,"Thank you @amadio! I am going to merge fix, since I want to re-enable incrementals in Jenkins. Windows build is actually green:. `13:11:40 Processing hsimple.C... 13:11:40 hsimple : Real Time = 0.33 seconds Cpu Time = 0.25 seconds. 13:11:40 (TFile *) 0xa3f64a8. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Command exited with the value: 0. 13:11:40 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 13:11:40 0 Compiler errors`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4242
https://github.com/root-project/root/pull/4242:373,reliability,doe,does,373,"Thank you @amadio! I am going to merge fix, since I want to re-enable incrementals in Jenkins. Windows build is actually green:. `13:11:40 Processing hsimple.C... 13:11:40 hsimple : Real Time = 0.33 seconds Cpu Time = 0.25 seconds. 13:11:40 (TFile *) 0xa3f64a8. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Command exited with the value: 0. 13:11:40 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 13:11:40 0 Compiler errors`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4242
https://github.com/root-project/root/pull/4242:608,reliability,doe,does,608,"Thank you @amadio! I am going to merge fix, since I want to re-enable incrementals in Jenkins. Windows build is actually green:. `13:11:40 Processing hsimple.C... 13:11:40 hsimple : Real Time = 0.33 seconds Cpu Time = 0.25 seconds. 13:11:40 (TFile *) 0xa3f64a8. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Command exited with the value: 0. 13:11:40 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 13:11:40 0 Compiler errors`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4242
https://github.com/root-project/root/pull/4242:901,safety,error,errors,901,"Thank you @amadio! I am going to merge fix, since I want to re-enable incrementals in Jenkins. Windows build is actually green:. `13:11:40 Processing hsimple.C... 13:11:40 hsimple : Real Time = 0.33 seconds Cpu Time = 0.25 seconds. 13:11:40 (TFile *) 0xa3f64a8. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Command exited with the value: 0. 13:11:40 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 13:11:40 0 Compiler errors`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4242
https://github.com/root-project/root/pull/4242:280,usability,Custom,Custom,280,"Thank you @amadio! I am going to merge fix, since I want to re-enable incrementals in Jenkins. Windows build is actually green:. `13:11:40 Processing hsimple.C... 13:11:40 hsimple : Real Time = 0.33 seconds Cpu Time = 0.25 seconds. 13:11:40 (TFile *) 0xa3f64a8. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Command exited with the value: 0. 13:11:40 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 13:11:40 0 Compiler errors`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4242
https://github.com/root-project/root/pull/4242:515,usability,Custom,Custom,515,"Thank you @amadio! I am going to merge fix, since I want to re-enable incrementals in Jenkins. Windows build is actually green:. `13:11:40 Processing hsimple.C... 13:11:40 hsimple : Real Time = 0.33 seconds Cpu Time = 0.25 seconds. 13:11:40 (TFile *) 0xa3f64a8. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Command exited with the value: 0. 13:11:40 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 13:11:40 0 Compiler errors`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4242
https://github.com/root-project/root/pull/4242:741,usability,Command,Command,741,"Thank you @amadio! I am going to merge fix, since I want to re-enable incrementals in Jenkins. Windows build is actually green:. `13:11:40 Processing hsimple.C... 13:11:40 hsimple : Real Time = 0.33 seconds Cpu Time = 0.25 seconds. 13:11:40 (TFile *) 0xa3f64a8. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Command exited with the value: 0. 13:11:40 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 13:11:40 0 Compiler errors`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4242
https://github.com/root-project/root/pull/4242:901,usability,error,errors,901,"Thank you @amadio! I am going to merge fix, since I want to re-enable incrementals in Jenkins. Windows build is actually green:. `13:11:40 Processing hsimple.C... 13:11:40 hsimple : Real Time = 0.33 seconds Cpu Time = 0.25 seconds. 13:11:40 (TFile *) 0xa3f64a8. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Building Custom Rule C:/build/workspace/root-pullrequests-build_2/root/CMakeLists.txt. 13:11:40 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build_2/build/CMakeFiles/generate.stamp is up-to-date. 13:11:40 Command exited with the value: 0. 13:11:40 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpucount. 13:11:40 0 Compiler errors`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4242
https://github.com/root-project/root/pull/4243:188,deployability,releas,release,188,"Indeed, after https://github.com/root-project/root/commit/b0129ad797ce9f163c7a1f71376d3f6a26c2ac15, this is no longer necessary. Also, unless you set `-DLLVM_BUILD_TYPE=...` to other than release, it will be built as release. So no, I don't think you can shoot yourself unless you set the build type to empty and add your custom flags, in which case you probably know what you are doing. I also have a commit to print the options in the correct order with the flags for the build type last, but didn't get to merge that one yet. It's in a branch on my office machine. Cheers,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4243
https://github.com/root-project/root/pull/4243:217,deployability,releas,release,217,"Indeed, after https://github.com/root-project/root/commit/b0129ad797ce9f163c7a1f71376d3f6a26c2ac15, this is no longer necessary. Also, unless you set `-DLLVM_BUILD_TYPE=...` to other than release, it will be built as release. So no, I don't think you can shoot yourself unless you set the build type to empty and add your custom flags, in which case you probably know what you are doing. I also have a commit to print the options in the correct order with the flags for the build type last, but didn't get to merge that one yet. It's in a branch on my office machine. Cheers,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4243
https://github.com/root-project/root/pull/4243:289,deployability,build,build,289,"Indeed, after https://github.com/root-project/root/commit/b0129ad797ce9f163c7a1f71376d3f6a26c2ac15, this is no longer necessary. Also, unless you set `-DLLVM_BUILD_TYPE=...` to other than release, it will be built as release. So no, I don't think you can shoot yourself unless you set the build type to empty and add your custom flags, in which case you probably know what you are doing. I also have a commit to print the options in the correct order with the flags for the build type last, but didn't get to merge that one yet. It's in a branch on my office machine. Cheers,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4243
https://github.com/root-project/root/pull/4243:474,deployability,build,build,474,"Indeed, after https://github.com/root-project/root/commit/b0129ad797ce9f163c7a1f71376d3f6a26c2ac15, this is no longer necessary. Also, unless you set `-DLLVM_BUILD_TYPE=...` to other than release, it will be built as release. So no, I don't think you can shoot yourself unless you set the build type to empty and add your custom flags, in which case you probably know what you are doing. I also have a commit to print the options in the correct order with the flags for the build type last, but didn't get to merge that one yet. It's in a branch on my office machine. Cheers,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4243
https://github.com/root-project/root/pull/4243:322,usability,custom,custom,322,"Indeed, after https://github.com/root-project/root/commit/b0129ad797ce9f163c7a1f71376d3f6a26c2ac15, this is no longer necessary. Also, unless you set `-DLLVM_BUILD_TYPE=...` to other than release, it will be built as release. So no, I don't think you can shoot yourself unless you set the build type to empty and add your custom flags, in which case you probably know what you are doing. I also have a commit to print the options in the correct order with the flags for the build type last, but didn't get to merge that one yet. It's in a branch on my office machine. Cheers,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4243
https://github.com/root-project/root/pull/4244:72,deployability,Fail,Failed,72,"Removed the fallback to `main()`. The message now reads:. ```. warning: Failed to call `LHCb002(1, (const char**)nullptr)` to execute the macro. Add this function or rename the macro. Falling back to `.L`. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4244
https://github.com/root-project/root/pull/4244:38,integrability,messag,message,38,"Removed the fallback to `main()`. The message now reads:. ```. warning: Failed to call `LHCb002(1, (const char**)nullptr)` to execute the macro. Add this function or rename the macro. Falling back to `.L`. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4244
https://github.com/root-project/root/pull/4244:38,interoperability,messag,message,38,"Removed the fallback to `main()`. The message now reads:. ```. warning: Failed to call `LHCb002(1, (const char**)nullptr)` to execute the macro. Add this function or rename the macro. Falling back to `.L`. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4244
https://github.com/root-project/root/pull/4244:72,reliability,Fail,Failed,72,"Removed the fallback to `main()`. The message now reads:. ```. warning: Failed to call `LHCb002(1, (const char**)nullptr)` to execute the macro. Add this function or rename the macro. Falling back to `.L`. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4244
https://github.com/root-project/root/pull/4244:34,integrability,messag,message,34,A new line somewhere to break the message in two lines wouldn't hurt.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4244
https://github.com/root-project/root/pull/4244:34,interoperability,messag,message,34,A new line somewhere to break the message in two lines wouldn't hurt.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4244
https://github.com/root-project/root/pull/4244:36,integrability,messag,message,36,> A new line somewhere to break the message in two lines wouldn't hurt. Done (by editing on github)! Please squash this away when merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4244
https://github.com/root-project/root/pull/4244:36,interoperability,messag,message,36,> A new line somewhere to break the message in two lines wouldn't hurt. Done (by editing on github)! Please squash this away when merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4244
https://github.com/root-project/root/pull/4246:25,energy efficiency,green,green,25,"Merging as everything is green, and as we want to get this into the nightlies on a fast track.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4246
https://github.com/root-project/root/pull/4246:28,deployability,patch,patches,28,Cherry-picked into v6-18-00-patches as aed00fdc16ed4e299b191d964a80ab9ef4257770,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4246
https://github.com/root-project/root/pull/4246:28,safety,patch,patches,28,Cherry-picked into v6-18-00-patches as aed00fdc16ed4e299b191d964a80ab9ef4257770,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4246
https://github.com/root-project/root/pull/4246:28,security,patch,patches,28,Cherry-picked into v6-18-00-patches as aed00fdc16ed4e299b191d964a80ab9ef4257770,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4246
https://github.com/root-project/root/pull/4247:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4247
https://github.com/root-project/root/pull/4250:37,deployability,fail,fail,37,Some tests not run on my machine may fail. This PR is to get those fixed too.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4250
https://github.com/root-project/root/pull/4250:37,reliability,fail,fail,37,Some tests not run on my machine may fail. This PR is to get those fixed too.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4250
https://github.com/root-project/root/pull/4250:5,safety,test,tests,5,Some tests not run on my machine may fail. This PR is to get those fixed too.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4250
https://github.com/root-project/root/pull/4250:5,testability,test,tests,5,Some tests not run on my machine may fail. This PR is to get those fixed too.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4250
https://github.com/root-project/root/pull/4250:50,testability,plan,planning,50,Merging of this is pending discussion in the next planning meeting.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4250
https://github.com/root-project/root/pull/4250:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4250
https://github.com/root-project/root/pull/4250:81,deployability,fail,fail,81,"There is a `custom_diff.py` script in roottest that makes the test cmsUnloadwork fail. I will close this pull request for now, as I don't want to touch that script at the moment, but later on I might reopen once this last test is also fixed after removing the blank line print out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4250
https://github.com/root-project/root/pull/4250:81,reliability,fail,fail,81,"There is a `custom_diff.py` script in roottest that makes the test cmsUnloadwork fail. I will close this pull request for now, as I don't want to touch that script at the moment, but later on I might reopen once this last test is also fixed after removing the blank line print out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4250
https://github.com/root-project/root/pull/4250:62,safety,test,test,62,"There is a `custom_diff.py` script in roottest that makes the test cmsUnloadwork fail. I will close this pull request for now, as I don't want to touch that script at the moment, but later on I might reopen once this last test is also fixed after removing the blank line print out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4250
https://github.com/root-project/root/pull/4250:222,safety,test,test,222,"There is a `custom_diff.py` script in roottest that makes the test cmsUnloadwork fail. I will close this pull request for now, as I don't want to touch that script at the moment, but later on I might reopen once this last test is also fixed after removing the blank line print out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4250
https://github.com/root-project/root/pull/4250:62,testability,test,test,62,"There is a `custom_diff.py` script in roottest that makes the test cmsUnloadwork fail. I will close this pull request for now, as I don't want to touch that script at the moment, but later on I might reopen once this last test is also fixed after removing the blank line print out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4250
https://github.com/root-project/root/pull/4250:222,testability,test,test,222,"There is a `custom_diff.py` script in roottest that makes the test cmsUnloadwork fail. I will close this pull request for now, as I don't want to touch that script at the moment, but later on I might reopen once this last test is also fixed after removing the blank line print out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4250
https://github.com/root-project/root/pull/4250:94,usability,close,close,94,"There is a `custom_diff.py` script in roottest that makes the test cmsUnloadwork fail. I will close this pull request for now, as I don't want to touch that script at the moment, but later on I might reopen once this last test is also fixed after removing the blank line print out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4250
https://github.com/root-project/root/pull/4253:35,performance,content,content,35,Tested with TH1 and NTuple as file content.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:0,safety,Test,Tested,0,Tested with TH1 and NTuple as file content.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:0,testability,Test,Tested,0,Tested with TH1 and NTuple as file content.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:45,availability,error,errors,45,@pcanal . And that about clang-tidy analyzer errors? . It complains that virtual methods like `SysOpen` called in constructor - how it could works at all?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:45,performance,error,errors,45,@pcanal . And that about clang-tidy analyzer errors? . It complains that virtual methods like `SysOpen` called in constructor - how it could works at all?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:45,safety,error,errors,45,@pcanal . And that about clang-tidy analyzer errors? . It complains that virtual methods like `SysOpen` called in constructor - how it could works at all?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:58,safety,compl,complains,58,@pcanal . And that about clang-tidy analyzer errors? . It complains that virtual methods like `SysOpen` called in constructor - how it could works at all?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:58,security,compl,complains,58,@pcanal . And that about clang-tidy analyzer errors? . It complains that virtual methods like `SysOpen` called in constructor - how it could works at all?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:45,usability,error,errors,45,@pcanal . And that about clang-tidy analyzer errors? . It complains that virtual methods like `SysOpen` called in constructor - how it could works at all?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:37,availability,error,errors,37,"> And that about clang-tidy analyzer errors? They are not related to this PR of course but it looks like (in first approx) they need to be fixed/looked-at. > It complains that virtual methods like SysOpen called in constructor - how it could works at all? It works because it calls what the virtual table shows 'so-far' and essentially it is equivalent to a call to TFile::SysOpen, we probably ought to make it clear and do the substitution explicitly in the code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:428,integrability,sub,substitution,428,"> And that about clang-tidy analyzer errors? They are not related to this PR of course but it looks like (in first approx) they need to be fixed/looked-at. > It complains that virtual methods like SysOpen called in constructor - how it could works at all? It works because it calls what the virtual table shows 'so-far' and essentially it is equivalent to a call to TFile::SysOpen, we probably ought to make it clear and do the substitution explicitly in the code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:37,performance,error,errors,37,"> And that about clang-tidy analyzer errors? They are not related to this PR of course but it looks like (in first approx) they need to be fixed/looked-at. > It complains that virtual methods like SysOpen called in constructor - how it could works at all? It works because it calls what the virtual table shows 'so-far' and essentially it is equivalent to a call to TFile::SysOpen, we probably ought to make it clear and do the substitution explicitly in the code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:37,safety,error,errors,37,"> And that about clang-tidy analyzer errors? They are not related to this PR of course but it looks like (in first approx) they need to be fixed/looked-at. > It complains that virtual methods like SysOpen called in constructor - how it could works at all? It works because it calls what the virtual table shows 'so-far' and essentially it is equivalent to a call to TFile::SysOpen, we probably ought to make it clear and do the substitution explicitly in the code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:161,safety,compl,complains,161,"> And that about clang-tidy analyzer errors? They are not related to this PR of course but it looks like (in first approx) they need to be fixed/looked-at. > It complains that virtual methods like SysOpen called in constructor - how it could works at all? It works because it calls what the virtual table shows 'so-far' and essentially it is equivalent to a call to TFile::SysOpen, we probably ought to make it clear and do the substitution explicitly in the code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:161,security,compl,complains,161,"> And that about clang-tidy analyzer errors? They are not related to this PR of course but it looks like (in first approx) they need to be fixed/looked-at. > It complains that virtual methods like SysOpen called in constructor - how it could works at all? It works because it calls what the virtual table shows 'so-far' and essentially it is equivalent to a call to TFile::SysOpen, we probably ought to make it clear and do the substitution explicitly in the code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:37,usability,error,errors,37,"> And that about clang-tidy analyzer errors? They are not related to this PR of course but it looks like (in first approx) they need to be fixed/looked-at. > It complains that virtual methods like SysOpen called in constructor - how it could works at all? It works because it calls what the virtual table shows 'so-far' and essentially it is equivalent to a call to TFile::SysOpen, we probably ought to make it clear and do the substitution explicitly in the code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:411,usability,clear,clear,411,"> And that about clang-tidy analyzer errors? They are not related to this PR of course but it looks like (in first approx) they need to be fixed/looked-at. > It complains that virtual methods like SysOpen called in constructor - how it could works at all? It works because it calls what the virtual table shows 'so-far' and essentially it is equivalent to a call to TFile::SysOpen, we probably ought to make it clear and do the substitution explicitly in the code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:390,availability,error,error,390,"> It works because it calls what the virtual table shows 'so-far' and essentially it is equivalent to a call to > TFile::SysOpen, we probably ought to make it clear and do the substitution explicitly in the code. Probably, one should clearly use `TFile::SysOpen()` calls here and check that none of subclasses tries to use that TFile constructor. . > They are not related to this PR . Yes, error message has nothing to do with PR. . Changes are minimal and looking very promissing. . Probably, one should check if BIT(9) was used in older ROOT versions with TFile.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:544,deployability,version,versions,544,"> It works because it calls what the virtual table shows 'so-far' and essentially it is equivalent to a call to > TFile::SysOpen, we probably ought to make it clear and do the substitution explicitly in the code. Probably, one should clearly use `TFile::SysOpen()` calls here and check that none of subclasses tries to use that TFile constructor. . > They are not related to this PR . Yes, error message has nothing to do with PR. . Changes are minimal and looking very promissing. . Probably, one should check if BIT(9) was used in older ROOT versions with TFile.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:176,integrability,sub,substitution,176,"> It works because it calls what the virtual table shows 'so-far' and essentially it is equivalent to a call to > TFile::SysOpen, we probably ought to make it clear and do the substitution explicitly in the code. Probably, one should clearly use `TFile::SysOpen()` calls here and check that none of subclasses tries to use that TFile constructor. . > They are not related to this PR . Yes, error message has nothing to do with PR. . Changes are minimal and looking very promissing. . Probably, one should check if BIT(9) was used in older ROOT versions with TFile.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:299,integrability,sub,subclasses,299,"> It works because it calls what the virtual table shows 'so-far' and essentially it is equivalent to a call to > TFile::SysOpen, we probably ought to make it clear and do the substitution explicitly in the code. Probably, one should clearly use `TFile::SysOpen()` calls here and check that none of subclasses tries to use that TFile constructor. . > They are not related to this PR . Yes, error message has nothing to do with PR. . Changes are minimal and looking very promissing. . Probably, one should check if BIT(9) was used in older ROOT versions with TFile.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:396,integrability,messag,message,396,"> It works because it calls what the virtual table shows 'so-far' and essentially it is equivalent to a call to > TFile::SysOpen, we probably ought to make it clear and do the substitution explicitly in the code. Probably, one should clearly use `TFile::SysOpen()` calls here and check that none of subclasses tries to use that TFile constructor. . > They are not related to this PR . Yes, error message has nothing to do with PR. . Changes are minimal and looking very promissing. . Probably, one should check if BIT(9) was used in older ROOT versions with TFile.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:544,integrability,version,versions,544,"> It works because it calls what the virtual table shows 'so-far' and essentially it is equivalent to a call to > TFile::SysOpen, we probably ought to make it clear and do the substitution explicitly in the code. Probably, one should clearly use `TFile::SysOpen()` calls here and check that none of subclasses tries to use that TFile constructor. . > They are not related to this PR . Yes, error message has nothing to do with PR. . Changes are minimal and looking very promissing. . Probably, one should check if BIT(9) was used in older ROOT versions with TFile.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:396,interoperability,messag,message,396,"> It works because it calls what the virtual table shows 'so-far' and essentially it is equivalent to a call to > TFile::SysOpen, we probably ought to make it clear and do the substitution explicitly in the code. Probably, one should clearly use `TFile::SysOpen()` calls here and check that none of subclasses tries to use that TFile constructor. . > They are not related to this PR . Yes, error message has nothing to do with PR. . Changes are minimal and looking very promissing. . Probably, one should check if BIT(9) was used in older ROOT versions with TFile.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:544,modifiability,version,versions,544,"> It works because it calls what the virtual table shows 'so-far' and essentially it is equivalent to a call to > TFile::SysOpen, we probably ought to make it clear and do the substitution explicitly in the code. Probably, one should clearly use `TFile::SysOpen()` calls here and check that none of subclasses tries to use that TFile constructor. . > They are not related to this PR . Yes, error message has nothing to do with PR. . Changes are minimal and looking very promissing. . Probably, one should check if BIT(9) was used in older ROOT versions with TFile.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:390,performance,error,error,390,"> It works because it calls what the virtual table shows 'so-far' and essentially it is equivalent to a call to > TFile::SysOpen, we probably ought to make it clear and do the substitution explicitly in the code. Probably, one should clearly use `TFile::SysOpen()` calls here and check that none of subclasses tries to use that TFile constructor. . > They are not related to this PR . Yes, error message has nothing to do with PR. . Changes are minimal and looking very promissing. . Probably, one should check if BIT(9) was used in older ROOT versions with TFile.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:390,safety,error,error,390,"> It works because it calls what the virtual table shows 'so-far' and essentially it is equivalent to a call to > TFile::SysOpen, we probably ought to make it clear and do the substitution explicitly in the code. Probably, one should clearly use `TFile::SysOpen()` calls here and check that none of subclasses tries to use that TFile constructor. . > They are not related to this PR . Yes, error message has nothing to do with PR. . Changes are minimal and looking very promissing. . Probably, one should check if BIT(9) was used in older ROOT versions with TFile.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:159,usability,clear,clear,159,"> It works because it calls what the virtual table shows 'so-far' and essentially it is equivalent to a call to > TFile::SysOpen, we probably ought to make it clear and do the substitution explicitly in the code. Probably, one should clearly use `TFile::SysOpen()` calls here and check that none of subclasses tries to use that TFile constructor. . > They are not related to this PR . Yes, error message has nothing to do with PR. . Changes are minimal and looking very promissing. . Probably, one should check if BIT(9) was used in older ROOT versions with TFile.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:234,usability,clear,clearly,234,"> It works because it calls what the virtual table shows 'so-far' and essentially it is equivalent to a call to > TFile::SysOpen, we probably ought to make it clear and do the substitution explicitly in the code. Probably, one should clearly use `TFile::SysOpen()` calls here and check that none of subclasses tries to use that TFile constructor. . > They are not related to this PR . Yes, error message has nothing to do with PR. . Changes are minimal and looking very promissing. . Probably, one should check if BIT(9) was used in older ROOT versions with TFile.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:390,usability,error,error,390,"> It works because it calls what the virtual table shows 'so-far' and essentially it is equivalent to a call to > TFile::SysOpen, we probably ought to make it clear and do the substitution explicitly in the code. Probably, one should clearly use `TFile::SysOpen()` calls here and check that none of subclasses tries to use that TFile constructor. . > They are not related to this PR . Yes, error message has nothing to do with PR. . Changes are minimal and looking very promissing. . Probably, one should check if BIT(9) was used in older ROOT versions with TFile.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:445,usability,minim,minimal,445,"> It works because it calls what the virtual table shows 'so-far' and essentially it is equivalent to a call to > TFile::SysOpen, we probably ought to make it clear and do the substitution explicitly in the code. Probably, one should clearly use `TFile::SysOpen()` calls here and check that none of subclasses tries to use that TFile constructor. . > They are not related to this PR . Yes, error message has nothing to do with PR. . Changes are minimal and looking very promissing. . Probably, one should check if BIT(9) was used in older ROOT versions with TFile.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:36,testability,verif,verified,36,"Thanks. This looks good. I have not verified that this is sufficient to produce 'reproducible'. And at the least, It should be documentation that because of the change of the value of the uuid, support for TRef stored in a file 'reproducible' file will be at least degrated and possibly removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:127,usability,document,documentation,127,"Thanks. This looks good. I have not verified that this is sufficient to produce 'reproducible'. And at the least, It should be documentation that because of the change of the value of the uuid, support for TRef stored in a file 'reproducible' file will be at least degrated and possibly removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:194,usability,support,support,194,"Thanks. This looks good. I have not verified that this is sufficient to produce 'reproducible'. And at the least, It should be documentation that because of the change of the value of the uuid, support for TRef stored in a file 'reproducible' file will be at least degrated and possibly removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:343,deployability,depend,dependent,343,"Thank you very much for this, this is obviously much nicer than our horrible solution and highly appreciated. I cannot judge everything since I'm not familiar enough with these details. One thing different to our hack which I don't see here is the name of the file. We set `fName` to a hardcoded constant (empty didn't work) so that we're not dependent on the name of the file on creation. (for example I can create a file with `mkstemp()`, write and then rename and I will get the same checksum as writing directly to the final name). At the very least it would be necessary to be able to construct the file with the same name in different directories and still obtain the checksum but I would prefer if the filename doesn't have any affect on the checksum. . I would be fine if I can set the name after creating the file but it looks to me that the first key with the file metadata is written right in the beginning and a later change might not have the desired effect?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:343,integrability,depend,dependent,343,"Thank you very much for this, this is obviously much nicer than our horrible solution and highly appreciated. I cannot judge everything since I'm not familiar enough with these details. One thing different to our hack which I don't see here is the name of the file. We set `fName` to a hardcoded constant (empty didn't work) so that we're not dependent on the name of the file on creation. (for example I can create a file with `mkstemp()`, write and then rename and I will get the same checksum as writing directly to the final name). At the very least it would be necessary to be able to construct the file with the same name in different directories and still obtain the checksum but I would prefer if the filename doesn't have any affect on the checksum. . I would be fine if I can set the name after creating the file but it looks to me that the first key with the file metadata is written right in the beginning and a later change might not have the desired effect?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:343,modifiability,depend,dependent,343,"Thank you very much for this, this is obviously much nicer than our horrible solution and highly appreciated. I cannot judge everything since I'm not familiar enough with these details. One thing different to our hack which I don't see here is the name of the file. We set `fName` to a hardcoded constant (empty didn't work) so that we're not dependent on the name of the file on creation. (for example I can create a file with `mkstemp()`, write and then rename and I will get the same checksum as writing directly to the final name). At the very least it would be necessary to be able to construct the file with the same name in different directories and still obtain the checksum but I would prefer if the filename doesn't have any affect on the checksum. . I would be fine if I can set the name after creating the file but it looks to me that the first key with the file metadata is written right in the beginning and a later change might not have the desired effect?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:718,reliability,doe,doesn,718,"Thank you very much for this, this is obviously much nicer than our horrible solution and highly appreciated. I cannot judge everything since I'm not familiar enough with these details. One thing different to our hack which I don't see here is the name of the file. We set `fName` to a hardcoded constant (empty didn't work) so that we're not dependent on the name of the file on creation. (for example I can create a file with `mkstemp()`, write and then rename and I will get the same checksum as writing directly to the final name). At the very least it would be necessary to be able to construct the file with the same name in different directories and still obtain the checksum but I would prefer if the filename doesn't have any affect on the checksum. . I would be fine if I can set the name after creating the file but it looks to me that the first key with the file metadata is written right in the beginning and a later change might not have the desired effect?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:343,safety,depend,dependent,343,"Thank you very much for this, this is obviously much nicer than our horrible solution and highly appreciated. I cannot judge everything since I'm not familiar enough with these details. One thing different to our hack which I don't see here is the name of the file. We set `fName` to a hardcoded constant (empty didn't work) so that we're not dependent on the name of the file on creation. (for example I can create a file with `mkstemp()`, write and then rename and I will get the same checksum as writing directly to the final name). At the very least it would be necessary to be able to construct the file with the same name in different directories and still obtain the checksum but I would prefer if the filename doesn't have any affect on the checksum. . I would be fine if I can set the name after creating the file but it looks to me that the first key with the file metadata is written right in the beginning and a later change might not have the desired effect?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:213,security,hack,hack,213,"Thank you very much for this, this is obviously much nicer than our horrible solution and highly appreciated. I cannot judge everything since I'm not familiar enough with these details. One thing different to our hack which I don't see here is the name of the file. We set `fName` to a hardcoded constant (empty didn't work) so that we're not dependent on the name of the file on creation. (for example I can create a file with `mkstemp()`, write and then rename and I will get the same checksum as writing directly to the final name). At the very least it would be necessary to be able to construct the file with the same name in different directories and still obtain the checksum but I would prefer if the filename doesn't have any affect on the checksum. . I would be fine if I can set the name after creating the file but it looks to me that the first key with the file metadata is written right in the beginning and a later change might not have the desired effect?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:286,security,hardcod,hardcoded,286,"Thank you very much for this, this is obviously much nicer than our horrible solution and highly appreciated. I cannot judge everything since I'm not familiar enough with these details. One thing different to our hack which I don't see here is the name of the file. We set `fName` to a hardcoded constant (empty didn't work) so that we're not dependent on the name of the file on creation. (for example I can create a file with `mkstemp()`, write and then rename and I will get the same checksum as writing directly to the final name). At the very least it would be necessary to be able to construct the file with the same name in different directories and still obtain the checksum but I would prefer if the filename doesn't have any affect on the checksum. . I would be fine if I can set the name after creating the file but it looks to me that the first key with the file metadata is written right in the beginning and a later change might not have the desired effect?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:487,security,checksum,checksum,487,"Thank you very much for this, this is obviously much nicer than our horrible solution and highly appreciated. I cannot judge everything since I'm not familiar enough with these details. One thing different to our hack which I don't see here is the name of the file. We set `fName` to a hardcoded constant (empty didn't work) so that we're not dependent on the name of the file on creation. (for example I can create a file with `mkstemp()`, write and then rename and I will get the same checksum as writing directly to the final name). At the very least it would be necessary to be able to construct the file with the same name in different directories and still obtain the checksum but I would prefer if the filename doesn't have any affect on the checksum. . I would be fine if I can set the name after creating the file but it looks to me that the first key with the file metadata is written right in the beginning and a later change might not have the desired effect?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:674,security,checksum,checksum,674,"Thank you very much for this, this is obviously much nicer than our horrible solution and highly appreciated. I cannot judge everything since I'm not familiar enough with these details. One thing different to our hack which I don't see here is the name of the file. We set `fName` to a hardcoded constant (empty didn't work) so that we're not dependent on the name of the file on creation. (for example I can create a file with `mkstemp()`, write and then rename and I will get the same checksum as writing directly to the final name). At the very least it would be necessary to be able to construct the file with the same name in different directories and still obtain the checksum but I would prefer if the filename doesn't have any affect on the checksum. . I would be fine if I can set the name after creating the file but it looks to me that the first key with the file metadata is written right in the beginning and a later change might not have the desired effect?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:749,security,checksum,checksum,749,"Thank you very much for this, this is obviously much nicer than our horrible solution and highly appreciated. I cannot judge everything since I'm not familiar enough with these details. One thing different to our hack which I don't see here is the name of the file. We set `fName` to a hardcoded constant (empty didn't work) so that we're not dependent on the name of the file on creation. (for example I can create a file with `mkstemp()`, write and then rename and I will get the same checksum as writing directly to the final name). At the very least it would be necessary to be able to construct the file with the same name in different directories and still obtain the checksum but I would prefer if the filename doesn't have any affect on the checksum. . I would be fine if I can set the name after creating the file but it looks to me that the first key with the file metadata is written right in the beginning and a later change might not have the desired effect?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:343,testability,depend,dependent,343,"Thank you very much for this, this is obviously much nicer than our horrible solution and highly appreciated. I cannot judge everything since I'm not familiar enough with these details. One thing different to our hack which I don't see here is the name of the file. We set `fName` to a hardcoded constant (empty didn't work) so that we're not dependent on the name of the file on creation. (for example I can create a file with `mkstemp()`, write and then rename and I will get the same checksum as writing directly to the final name). At the very least it would be necessary to be able to construct the file with the same name in different directories and still obtain the checksum but I would prefer if the filename doesn't have any affect on the checksum. . I would be fine if I can set the name after creating the file but it looks to me that the first key with the file metadata is written right in the beginning and a later change might not have the desired effect?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:695,usability,prefer,prefer,695,"Thank you very much for this, this is obviously much nicer than our horrible solution and highly appreciated. I cannot judge everything since I'm not familiar enough with these details. One thing different to our hack which I don't see here is the name of the file. We set `fName` to a hardcoded constant (empty didn't work) so that we're not dependent on the name of the file on creation. (for example I can create a file with `mkstemp()`, write and then rename and I will get the same checksum as writing directly to the final name). At the very least it would be necessary to be able to construct the file with the same name in different directories and still obtain the checksum but I would prefer if the filename doesn't have any affect on the checksum. . I would be fine if I can set the name after creating the file but it looks to me that the first key with the file metadata is written right in the beginning and a later change might not have the desired effect?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:77,deployability,depend,dependent,77,"> We set fName to a hardcoded constant (empty didn't work) so that we're not dependent on the name of the file on creation. Currently file name stored as before. If one creating file in other directory or with other name - it is already not exactly same code. I guess, one can resolve this problem by writing proper test scripts. Idea of the PR - if exactly same code runs twice, created binary files should be identical. To achieve this, default values for TKey/TDirectory time stamps and UUID are stored. Because of this some ROOT features will not work for such files - one will not be able read TRef's correctly. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:124,energy efficiency,Current,Currently,124,"> We set fName to a hardcoded constant (empty didn't work) so that we're not dependent on the name of the file on creation. Currently file name stored as before. If one creating file in other directory or with other name - it is already not exactly same code. I guess, one can resolve this problem by writing proper test scripts. Idea of the PR - if exactly same code runs twice, created binary files should be identical. To achieve this, default values for TKey/TDirectory time stamps and UUID are stored. Because of this some ROOT features will not work for such files - one will not be able read TRef's correctly. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:77,integrability,depend,dependent,77,"> We set fName to a hardcoded constant (empty didn't work) so that we're not dependent on the name of the file on creation. Currently file name stored as before. If one creating file in other directory or with other name - it is already not exactly same code. I guess, one can resolve this problem by writing proper test scripts. Idea of the PR - if exactly same code runs twice, created binary files should be identical. To achieve this, default values for TKey/TDirectory time stamps and UUID are stored. Because of this some ROOT features will not work for such files - one will not be able read TRef's correctly. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:77,modifiability,depend,dependent,77,"> We set fName to a hardcoded constant (empty didn't work) so that we're not dependent on the name of the file on creation. Currently file name stored as before. If one creating file in other directory or with other name - it is already not exactly same code. I guess, one can resolve this problem by writing proper test scripts. Idea of the PR - if exactly same code runs twice, created binary files should be identical. To achieve this, default values for TKey/TDirectory time stamps and UUID are stored. Because of this some ROOT features will not work for such files - one will not be able read TRef's correctly. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:474,performance,time,time,474,"> We set fName to a hardcoded constant (empty didn't work) so that we're not dependent on the name of the file on creation. Currently file name stored as before. If one creating file in other directory or with other name - it is already not exactly same code. I guess, one can resolve this problem by writing proper test scripts. Idea of the PR - if exactly same code runs twice, created binary files should be identical. To achieve this, default values for TKey/TDirectory time stamps and UUID are stored. Because of this some ROOT features will not work for such files - one will not be able read TRef's correctly. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:77,safety,depend,dependent,77,"> We set fName to a hardcoded constant (empty didn't work) so that we're not dependent on the name of the file on creation. Currently file name stored as before. If one creating file in other directory or with other name - it is already not exactly same code. I guess, one can resolve this problem by writing proper test scripts. Idea of the PR - if exactly same code runs twice, created binary files should be identical. To achieve this, default values for TKey/TDirectory time stamps and UUID are stored. Because of this some ROOT features will not work for such files - one will not be able read TRef's correctly. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:316,safety,test,test,316,"> We set fName to a hardcoded constant (empty didn't work) so that we're not dependent on the name of the file on creation. Currently file name stored as before. If one creating file in other directory or with other name - it is already not exactly same code. I guess, one can resolve this problem by writing proper test scripts. Idea of the PR - if exactly same code runs twice, created binary files should be identical. To achieve this, default values for TKey/TDirectory time stamps and UUID are stored. Because of this some ROOT features will not work for such files - one will not be able read TRef's correctly. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:20,security,hardcod,hardcoded,20,"> We set fName to a hardcoded constant (empty didn't work) so that we're not dependent on the name of the file on creation. Currently file name stored as before. If one creating file in other directory or with other name - it is already not exactly same code. I guess, one can resolve this problem by writing proper test scripts. Idea of the PR - if exactly same code runs twice, created binary files should be identical. To achieve this, default values for TKey/TDirectory time stamps and UUID are stored. Because of this some ROOT features will not work for such files - one will not be able read TRef's correctly. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:411,security,ident,identical,411,"> We set fName to a hardcoded constant (empty didn't work) so that we're not dependent on the name of the file on creation. Currently file name stored as before. If one creating file in other directory or with other name - it is already not exactly same code. I guess, one can resolve this problem by writing proper test scripts. Idea of the PR - if exactly same code runs twice, created binary files should be identical. To achieve this, default values for TKey/TDirectory time stamps and UUID are stored. Because of this some ROOT features will not work for such files - one will not be able read TRef's correctly. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:77,testability,depend,dependent,77,"> We set fName to a hardcoded constant (empty didn't work) so that we're not dependent on the name of the file on creation. Currently file name stored as before. If one creating file in other directory or with other name - it is already not exactly same code. I guess, one can resolve this problem by writing proper test scripts. Idea of the PR - if exactly same code runs twice, created binary files should be identical. To achieve this, default values for TKey/TDirectory time stamps and UUID are stored. Because of this some ROOT features will not work for such files - one will not be able read TRef's correctly. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:316,testability,test,test,316,"> We set fName to a hardcoded constant (empty didn't work) so that we're not dependent on the name of the file on creation. Currently file name stored as before. If one creating file in other directory or with other name - it is already not exactly same code. I guess, one can resolve this problem by writing proper test scripts. Idea of the PR - if exactly same code runs twice, created binary files should be identical. To achieve this, default values for TKey/TDirectory time stamps and UUID are stored. Because of this some ROOT features will not work for such files - one will not be able read TRef's correctly. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:515,availability,operat,operation,515,"> Idea of the PR - if exactly same code runs twice, created binary files should be identical. Yes, but realistically the exact same code can be run on different machines in different directories. It shouldn't make a difference whether I run something in /home/username/ or in /tmp/tmpdir_q4qw3/sandbox. and usually to ensure atomic file updates I would even prefer to not be forced to create ROOT files with the final file name but be able to create the file with a temporary name and then rename them in an atomic operation after finishing creation. How about just adding an optional name to the option? ```. new TFile(""name.root?reproducible=somename"",""recreate""). ```. and then I can choose the name to be stored in the file or, if just `?reproducible` is present the normal behavior is kept? Of course this could also be decoupled from the reproducible feature by having this in a different option. ```. new TFile(""name.root?reproducible&fname=somename"",""recreate""). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:337,deployability,updat,updates,337,"> Idea of the PR - if exactly same code runs twice, created binary files should be identical. Yes, but realistically the exact same code can be run on different machines in different directories. It shouldn't make a difference whether I run something in /home/username/ or in /tmp/tmpdir_q4qw3/sandbox. and usually to ensure atomic file updates I would even prefer to not be forced to create ROOT files with the final file name but be able to create the file with a temporary name and then rename them in an atomic operation after finishing creation. How about just adding an optional name to the option? ```. new TFile(""name.root?reproducible=somename"",""recreate""). ```. and then I can choose the name to be stored in the file or, if just `?reproducible` is present the normal behavior is kept? Of course this could also be decoupled from the reproducible feature by having this in a different option. ```. new TFile(""name.root?reproducible&fname=somename"",""recreate""). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:825,modifiability,deco,decoupled,825,"> Idea of the PR - if exactly same code runs twice, created binary files should be identical. Yes, but realistically the exact same code can be run on different machines in different directories. It shouldn't make a difference whether I run something in /home/username/ or in /tmp/tmpdir_q4qw3/sandbox. and usually to ensure atomic file updates I would even prefer to not be forced to create ROOT files with the final file name but be able to create the file with a temporary name and then rename them in an atomic operation after finishing creation. How about just adding an optional name to the option? ```. new TFile(""name.root?reproducible=somename"",""recreate""). ```. and then I can choose the name to be stored in the file or, if just `?reproducible` is present the normal behavior is kept? Of course this could also be decoupled from the reproducible feature by having this in a different option. ```. new TFile(""name.root?reproducible&fname=somename"",""recreate""). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:337,safety,updat,updates,337,"> Idea of the PR - if exactly same code runs twice, created binary files should be identical. Yes, but realistically the exact same code can be run on different machines in different directories. It shouldn't make a difference whether I run something in /home/username/ or in /tmp/tmpdir_q4qw3/sandbox. and usually to ensure atomic file updates I would even prefer to not be forced to create ROOT files with the final file name but be able to create the file with a temporary name and then rename them in an atomic operation after finishing creation. How about just adding an optional name to the option? ```. new TFile(""name.root?reproducible=somename"",""recreate""). ```. and then I can choose the name to be stored in the file or, if just `?reproducible` is present the normal behavior is kept? Of course this could also be decoupled from the reproducible feature by having this in a different option. ```. new TFile(""name.root?reproducible&fname=somename"",""recreate""). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:83,security,ident,identical,83,"> Idea of the PR - if exactly same code runs twice, created binary files should be identical. Yes, but realistically the exact same code can be run on different machines in different directories. It shouldn't make a difference whether I run something in /home/username/ or in /tmp/tmpdir_q4qw3/sandbox. and usually to ensure atomic file updates I would even prefer to not be forced to create ROOT files with the final file name but be able to create the file with a temporary name and then rename them in an atomic operation after finishing creation. How about just adding an optional name to the option? ```. new TFile(""name.root?reproducible=somename"",""recreate""). ```. and then I can choose the name to be stored in the file or, if just `?reproducible` is present the normal behavior is kept? Of course this could also be decoupled from the reproducible feature by having this in a different option. ```. new TFile(""name.root?reproducible&fname=somename"",""recreate""). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:294,security,sandbox,sandbox,294,"> Idea of the PR - if exactly same code runs twice, created binary files should be identical. Yes, but realistically the exact same code can be run on different machines in different directories. It shouldn't make a difference whether I run something in /home/username/ or in /tmp/tmpdir_q4qw3/sandbox. and usually to ensure atomic file updates I would even prefer to not be forced to create ROOT files with the final file name but be able to create the file with a temporary name and then rename them in an atomic operation after finishing creation. How about just adding an optional name to the option? ```. new TFile(""name.root?reproducible=somename"",""recreate""). ```. and then I can choose the name to be stored in the file or, if just `?reproducible` is present the normal behavior is kept? Of course this could also be decoupled from the reproducible feature by having this in a different option. ```. new TFile(""name.root?reproducible&fname=somename"",""recreate""). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:337,security,updat,updates,337,"> Idea of the PR - if exactly same code runs twice, created binary files should be identical. Yes, but realistically the exact same code can be run on different machines in different directories. It shouldn't make a difference whether I run something in /home/username/ or in /tmp/tmpdir_q4qw3/sandbox. and usually to ensure atomic file updates I would even prefer to not be forced to create ROOT files with the final file name but be able to create the file with a temporary name and then rename them in an atomic operation after finishing creation. How about just adding an optional name to the option? ```. new TFile(""name.root?reproducible=somename"",""recreate""). ```. and then I can choose the name to be stored in the file or, if just `?reproducible` is present the normal behavior is kept? Of course this could also be decoupled from the reproducible feature by having this in a different option. ```. new TFile(""name.root?reproducible&fname=somename"",""recreate""). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:260,usability,user,username,260,"> Idea of the PR - if exactly same code runs twice, created binary files should be identical. Yes, but realistically the exact same code can be run on different machines in different directories. It shouldn't make a difference whether I run something in /home/username/ or in /tmp/tmpdir_q4qw3/sandbox. and usually to ensure atomic file updates I would even prefer to not be forced to create ROOT files with the final file name but be able to create the file with a temporary name and then rename them in an atomic operation after finishing creation. How about just adding an optional name to the option? ```. new TFile(""name.root?reproducible=somename"",""recreate""). ```. and then I can choose the name to be stored in the file or, if just `?reproducible` is present the normal behavior is kept? Of course this could also be decoupled from the reproducible feature by having this in a different option. ```. new TFile(""name.root?reproducible&fname=somename"",""recreate""). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:358,usability,prefer,prefer,358,"> Idea of the PR - if exactly same code runs twice, created binary files should be identical. Yes, but realistically the exact same code can be run on different machines in different directories. It shouldn't make a difference whether I run something in /home/username/ or in /tmp/tmpdir_q4qw3/sandbox. and usually to ensure atomic file updates I would even prefer to not be forced to create ROOT files with the final file name but be able to create the file with a temporary name and then rename them in an atomic operation after finishing creation. How about just adding an optional name to the option? ```. new TFile(""name.root?reproducible=somename"",""recreate""). ```. and then I can choose the name to be stored in the file or, if just `?reproducible` is present the normal behavior is kept? Of course this could also be decoupled from the reproducible feature by having this in a different option. ```. new TFile(""name.root?reproducible&fname=somename"",""recreate""). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:778,usability,behavi,behavior,778,"> Idea of the PR - if exactly same code runs twice, created binary files should be identical. Yes, but realistically the exact same code can be run on different machines in different directories. It shouldn't make a difference whether I run something in /home/username/ or in /tmp/tmpdir_q4qw3/sandbox. and usually to ensure atomic file updates I would even prefer to not be forced to create ROOT files with the final file name but be able to create the file with a temporary name and then rename them in an atomic operation after finishing creation. How about just adding an optional name to the option? ```. new TFile(""name.root?reproducible=somename"",""recreate""). ```. and then I can choose the name to be stored in the file or, if just `?reproducible` is present the normal behavior is kept? Of course this could also be decoupled from the reproducible feature by having this in a different option. ```. new TFile(""name.root?reproducible&fname=somename"",""recreate""). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:202,security,sandbox,sandbox,202,"> Yes, but realistically the exact same code can be run on different machines in different directories. It shouldn't make a difference whether I run something in /home/username/ or in /tmp/tmpdir_q4qw3/sandbox. Just do not use absolute path name when creating file. If you are using constructor:. ```. new TFile(""name.root?reproducible"",""recreate""). ```. `name.root` will be stored in file header. And it can be reproduced on all nodes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:168,usability,user,username,168,"> Yes, but realistically the exact same code can be run on different machines in different directories. It shouldn't make a difference whether I run something in /home/username/ or in /tmp/tmpdir_q4qw3/sandbox. Just do not use absolute path name when creating file. If you are using constructor:. ```. new TFile(""name.root?reproducible"",""recreate""). ```. `name.root` will be stored in file header. And it can be reproduced on all nodes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:103,integrability,sub,submitted,103,@pcanal . I also have correspondent code for TXMLFile - it can be used exactly same way. But it can be submitted after merging this PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:365,integrability,interfac,interface,365,"> One good option of Init is to:. > have a non virtual function call InitImpl that is called in the constructor. > keep the Init virtual function but have it call InitImpl. You just proposing the way to trick out clang-tidy analyzer, but not how to solve the problem. I guess, all this can be postponed to other, more fundamental PRs - if we decide to change TFile interface. For now I do not see efficient solution without significant changes in TFile interface.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:453,integrability,interfac,interface,453,"> One good option of Init is to:. > have a non virtual function call InitImpl that is called in the constructor. > keep the Init virtual function but have it call InitImpl. You just proposing the way to trick out clang-tidy analyzer, but not how to solve the problem. I guess, all this can be postponed to other, more fundamental PRs - if we decide to change TFile interface. For now I do not see efficient solution without significant changes in TFile interface.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:365,interoperability,interfac,interface,365,"> One good option of Init is to:. > have a non virtual function call InitImpl that is called in the constructor. > keep the Init virtual function but have it call InitImpl. You just proposing the way to trick out clang-tidy analyzer, but not how to solve the problem. I guess, all this can be postponed to other, more fundamental PRs - if we decide to change TFile interface. For now I do not see efficient solution without significant changes in TFile interface.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:453,interoperability,interfac,interface,453,"> One good option of Init is to:. > have a non virtual function call InitImpl that is called in the constructor. > keep the Init virtual function but have it call InitImpl. You just proposing the way to trick out clang-tidy analyzer, but not how to solve the problem. I guess, all this can be postponed to other, more fundamental PRs - if we decide to change TFile interface. For now I do not see efficient solution without significant changes in TFile interface.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:365,modifiability,interfac,interface,365,"> One good option of Init is to:. > have a non virtual function call InitImpl that is called in the constructor. > keep the Init virtual function but have it call InitImpl. You just proposing the way to trick out clang-tidy analyzer, but not how to solve the problem. I guess, all this can be postponed to other, more fundamental PRs - if we decide to change TFile interface. For now I do not see efficient solution without significant changes in TFile interface.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:453,modifiability,interfac,interface,453,"> One good option of Init is to:. > have a non virtual function call InitImpl that is called in the constructor. > keep the Init virtual function but have it call InitImpl. You just proposing the way to trick out clang-tidy analyzer, but not how to solve the problem. I guess, all this can be postponed to other, more fundamental PRs - if we decide to change TFile interface. For now I do not see efficient solution without significant changes in TFile interface.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:424,security,sign,significant,424,"> One good option of Init is to:. > have a non virtual function call InitImpl that is called in the constructor. > keep the Init virtual function but have it call InitImpl. You just proposing the way to trick out clang-tidy analyzer, but not how to solve the problem. I guess, all this can be postponed to other, more fundamental PRs - if we decide to change TFile interface. For now I do not see efficient solution without significant changes in TFile interface.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:397,usability,efficien,efficient,397,"> One good option of Init is to:. > have a non virtual function call InitImpl that is called in the constructor. > keep the Init virtual function but have it call InitImpl. You just proposing the way to trick out clang-tidy analyzer, but not how to solve the problem. I guess, all this can be postponed to other, more fundamental PRs - if we decide to change TFile interface. For now I do not see efficient solution without significant changes in TFile interface.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:129,safety,compl,complains,129,You are right. Those changes are out-of-scope of this PR. In first approximation (however bad it may be) the behavior clang-tidy complains about is 'intentional' (i.e. as long as the derive call Init in their own constructor rather than through the base class constructor everything ends up executed 'as intended'). So disabling lint is likely the best solution.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:129,security,compl,complains,129,You are right. Those changes are out-of-scope of this PR. In first approximation (however bad it may be) the behavior clang-tidy complains about is 'intentional' (i.e. as long as the derive call Init in their own constructor rather than through the base class constructor everything ends up executed 'as intended'). So disabling lint is likely the best solution.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:109,usability,behavi,behavior,109,You are right. Those changes are out-of-scope of this PR. In first approximation (however bad it may be) the behavior clang-tidy complains about is 'intentional' (i.e. as long as the derive call Init in their own constructor rather than through the base class constructor everything ends up executed 'as intended'). So disabling lint is likely the best solution.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:64,testability,simpl,simple,64,Last question before we merge :) ... how confident are we that (simple) files with that option are indeed 'reproducible' (i.e. is there more field to handle?),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:64,usability,simpl,simple,64,Last question before we merge :) ... how confident are we that (simple) files with that option are indeed 'reproducible' (i.e. is there more field to handle?),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:127,safety,test,testing,127,"> how confident are we that (simple) files with that option are indeed 'reproducible' (i.e. is there more field to handle?). I testing file with TH1 and with TTree (10K entries, 4 branches). . Binary compare shows no difference. Once option is there, we can try to apply it in several places in roottest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:29,testability,simpl,simple,29,"> how confident are we that (simple) files with that option are indeed 'reproducible' (i.e. is there more field to handle?). I testing file with TH1 and with TTree (10K entries, 4 branches). . Binary compare shows no difference. Once option is there, we can try to apply it in several places in roottest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:127,testability,test,testing,127,"> how confident are we that (simple) files with that option are indeed 'reproducible' (i.e. is there more field to handle?). I testing file with TH1 and with TTree (10K entries, 4 branches). . Binary compare shows no difference. Once option is there, we can try to apply it in several places in roottest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:29,usability,simpl,simple,29,"> how confident are we that (simple) files with that option are indeed 'reproducible' (i.e. is there more field to handle?). I testing file with TH1 and with TTree (10K entries, 4 branches). . Binary compare shows no difference. Once option is there, we can try to apply it in several places in roottest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:11,safety,test,test,11,Here is my test macro:. [repr.C.txt](https://github.com/root-project/root/files/3542745/repr.C.txt).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:11,testability,test,test,11,Here is my test macro:. [repr.C.txt](https://github.com/root-project/root/files/3542745/repr.C.txt).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:15,deployability,updat,update,15,Could you also update the Release Notes and the TFIle documentation to announce this feature?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:26,deployability,Releas,Release,26,Could you also update the Release Notes and the TFIle documentation to announce this feature?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:15,safety,updat,update,15,Could you also update the Release Notes and the TFIle documentation to announce this feature?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:15,security,updat,update,15,Could you also update the Release Notes and the TFIle documentation to announce this feature?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4253:54,usability,document,documentation,54,Could you also update the Release Notes and the TFIle documentation to announce this feature?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4253
https://github.com/root-project/root/pull/4254:29,availability,failur,failure,29,I do not see how the rtensor failure is connected to this pr.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4254
https://github.com/root-project/root/pull/4254:29,deployability,fail,failure,29,I do not see how the rtensor failure is connected to this pr.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4254
https://github.com/root-project/root/pull/4254:29,performance,failur,failure,29,I do not see how the rtensor failure is connected to this pr.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4254
https://github.com/root-project/root/pull/4254:29,reliability,fail,failure,29,I do not see how the rtensor failure is connected to this pr.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4254
https://github.com/root-project/root/pull/4260:0,availability,Failur,Failure,0,Failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4260
https://github.com/root-project/root/pull/4260:0,deployability,Fail,Failure,0,Failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4260
https://github.com/root-project/root/pull/4260:0,performance,Failur,Failure,0,Failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4260
https://github.com/root-project/root/pull/4260:0,reliability,Fail,Failure,0,Failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4260
https://github.com/root-project/root/pull/4262:0,availability,failur,failures,0,failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4262
https://github.com/root-project/root/pull/4262:0,deployability,fail,failures,0,failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4262
https://github.com/root-project/root/pull/4262:0,performance,failur,failures,0,failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4262
https://github.com/root-project/root/pull/4262:0,reliability,fail,failures,0,failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4262
https://github.com/root-project/root/pull/4264:5,availability,failur,failure,5,Test failure fixed by push to https://github.com/root-project/roottest/pull/374 (builds are ok there).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:5,deployability,fail,failure,5,Test failure fixed by push to https://github.com/root-project/roottest/pull/374 (builds are ok there).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:81,deployability,build,builds,81,Test failure fixed by push to https://github.com/root-project/roottest/pull/374 (builds are ok there).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:5,performance,failur,failure,5,Test failure fixed by push to https://github.com/root-project/roottest/pull/374 (builds are ok there).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:5,reliability,fail,failure,5,Test failure fixed by push to https://github.com/root-project/roottest/pull/374 (builds are ok there).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:0,safety,Test,Test,0,Test failure fixed by push to https://github.com/root-project/roottest/pull/374 (builds are ok there).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4264:0,testability,Test,Test,0,Test failure fixed by push to https://github.com/root-project/roottest/pull/374 (builds are ok there).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4264
https://github.com/root-project/root/pull/4265:0,availability,Failur,Failure,0,Failure is unrelated ( stressgraphics complains about duplicated symbols in the interpreter ).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4265
https://github.com/root-project/root/pull/4265:0,deployability,Fail,Failure,0,Failure is unrelated ( stressgraphics complains about duplicated symbols in the interpreter ).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4265
https://github.com/root-project/root/pull/4265:0,performance,Failur,Failure,0,Failure is unrelated ( stressgraphics complains about duplicated symbols in the interpreter ).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4265
https://github.com/root-project/root/pull/4265:0,reliability,Fail,Failure,0,Failure is unrelated ( stressgraphics complains about duplicated symbols in the interpreter ).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4265
https://github.com/root-project/root/pull/4265:38,safety,compl,complains,38,Failure is unrelated ( stressgraphics complains about duplicated symbols in the interpreter ).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4265
https://github.com/root-project/root/pull/4265:38,security,compl,complains,38,Failure is unrelated ( stressgraphics complains about duplicated symbols in the interpreter ).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4265
https://github.com/root-project/root/pull/4266:5,availability,failur,failure,5,The 'failure' is:. ```. 21:04:55 Build failed because: org.jenkinsci.plugins.workflow.job.WorkflowRun. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4266
https://github.com/root-project/root/pull/4266:5,deployability,fail,failure,5,The 'failure' is:. ```. 21:04:55 Build failed because: org.jenkinsci.plugins.workflow.job.WorkflowRun. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4266
https://github.com/root-project/root/pull/4266:33,deployability,Build,Build,33,The 'failure' is:. ```. 21:04:55 Build failed because: org.jenkinsci.plugins.workflow.job.WorkflowRun. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4266
https://github.com/root-project/root/pull/4266:39,deployability,fail,failed,39,The 'failure' is:. ```. 21:04:55 Build failed because: org.jenkinsci.plugins.workflow.job.WorkflowRun. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4266
https://github.com/root-project/root/pull/4266:69,interoperability,plug,plugins,69,The 'failure' is:. ```. 21:04:55 Build failed because: org.jenkinsci.plugins.workflow.job.WorkflowRun. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4266
https://github.com/root-project/root/pull/4266:5,performance,failur,failure,5,The 'failure' is:. ```. 21:04:55 Build failed because: org.jenkinsci.plugins.workflow.job.WorkflowRun. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4266
https://github.com/root-project/root/pull/4266:5,reliability,fail,failure,5,The 'failure' is:. ```. 21:04:55 Build failed because: org.jenkinsci.plugins.workflow.job.WorkflowRun. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4266
https://github.com/root-project/root/pull/4266:39,reliability,fail,failed,39,The 'failure' is:. ```. 21:04:55 Build failed because: org.jenkinsci.plugins.workflow.job.WorkflowRun. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4266
https://github.com/root-project/root/pull/4266:77,usability,workflow,workflow,77,The 'failure' is:. ```. 21:04:55 Build failed because: org.jenkinsci.plugins.workflow.job.WorkflowRun. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4266
https://github.com/root-project/root/pull/4266:90,usability,Workflow,WorkflowRun,90,The 'failure' is:. ```. 21:04:55 Build failed because: org.jenkinsci.plugins.workflow.job.WorkflowRun. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4266
https://github.com/root-project/root/pull/4268:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=14,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4268
https://github.com/root-project/root/pull/4271:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4271
https://github.com/root-project/root/pull/4272:12,interoperability,conflict,conflict,12,This PR has conflict,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4272
https://github.com/root-project/root/pull/4275:90,safety,detect,detect,90,"Thanks @Ask149 for your contribution, that's a good change! Out of curiosity, how did you detect this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4275
https://github.com/root-project/root/pull/4275:90,security,detect,detect,90,"Thanks @Ask149 for your contribution, that's a good change! Out of curiosity, how did you detect this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4275
https://github.com/root-project/root/pull/4275:154,availability,error,error,154,"> Thanks @Ask149 for your contribution, that's a good change! Out of curiosity, how did you detect this? @Axel-Naumann I encountered a Travis clang build error specifying 'Call to a virtual function in destructor' in my previous pull request #4164, so, while resolving the same, I found the above issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4275
https://github.com/root-project/root/pull/4275:148,deployability,build,build,148,"> Thanks @Ask149 for your contribution, that's a good change! Out of curiosity, how did you detect this? @Axel-Naumann I encountered a Travis clang build error specifying 'Call to a virtual function in destructor' in my previous pull request #4164, so, while resolving the same, I found the above issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4275
https://github.com/root-project/root/pull/4275:160,interoperability,specif,specifying,160,"> Thanks @Ask149 for your contribution, that's a good change! Out of curiosity, how did you detect this? @Axel-Naumann I encountered a Travis clang build error specifying 'Call to a virtual function in destructor' in my previous pull request #4164, so, while resolving the same, I found the above issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4275
https://github.com/root-project/root/pull/4275:154,performance,error,error,154,"> Thanks @Ask149 for your contribution, that's a good change! Out of curiosity, how did you detect this? @Axel-Naumann I encountered a Travis clang build error specifying 'Call to a virtual function in destructor' in my previous pull request #4164, so, while resolving the same, I found the above issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4275
https://github.com/root-project/root/pull/4275:92,safety,detect,detect,92,"> Thanks @Ask149 for your contribution, that's a good change! Out of curiosity, how did you detect this? @Axel-Naumann I encountered a Travis clang build error specifying 'Call to a virtual function in destructor' in my previous pull request #4164, so, while resolving the same, I found the above issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4275
https://github.com/root-project/root/pull/4275:154,safety,error,error,154,"> Thanks @Ask149 for your contribution, that's a good change! Out of curiosity, how did you detect this? @Axel-Naumann I encountered a Travis clang build error specifying 'Call to a virtual function in destructor' in my previous pull request #4164, so, while resolving the same, I found the above issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4275
https://github.com/root-project/root/pull/4275:92,security,detect,detect,92,"> Thanks @Ask149 for your contribution, that's a good change! Out of curiosity, how did you detect this? @Axel-Naumann I encountered a Travis clang build error specifying 'Call to a virtual function in destructor' in my previous pull request #4164, so, while resolving the same, I found the above issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4275
https://github.com/root-project/root/pull/4275:154,usability,error,error,154,"> Thanks @Ask149 for your contribution, that's a good change! Out of curiosity, how did you detect this? @Axel-Naumann I encountered a Travis clang build error specifying 'Call to a virtual function in destructor' in my previous pull request #4164, so, while resolving the same, I found the above issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4275
https://github.com/root-project/root/pull/4275:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4275
https://github.com/root-project/root/pull/4277:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4277
https://github.com/root-project/root/pull/4277:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4277
https://github.com/root-project/root/pull/4277:11,deployability,build,build,11,@phsft-bot build just on windows10/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4277
https://github.com/root-project/root/pull/4277:11,deployability,build,build,11,"@phsft-bot build on ROOT-performance-centos7-multicore/default, ROOT-fedora27/noimt, ROOT-fedora29/python3, ROOT-ubuntu16/rtcxxmod, mac1014/cxx17, windows10/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4277
https://github.com/root-project/root/pull/4277:25,performance,perform,performance-,25,"@phsft-bot build on ROOT-performance-centos7-multicore/default, ROOT-fedora27/noimt, ROOT-fedora29/python3, ROOT-ubuntu16/rtcxxmod, mac1014/cxx17, windows10/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4277
https://github.com/root-project/root/pull/4277:25,usability,perform,performance-,25,"@phsft-bot build on ROOT-performance-centos7-multicore/default, ROOT-fedora27/noimt, ROOT-fedora29/python3, ROOT-ubuntu16/rtcxxmod, mac1014/cxx17, windows10/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4277
https://github.com/root-project/root/pull/4278:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4278
https://github.com/root-project/root/pull/4279:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:36,deployability,instal,installation,36,"There is still the possibility that installation, etc, may have an issue, but I think that for the most part this should be ready to go. Thanks a lot for working on it!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:11,deployability,build,build,11,@phsft-bot build with flags -Dpyroot_experimental=ON just on mac1014/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:11,deployability,build,build,11,@phsft-bot build just on mac1014/cxx17 with flags -Dpyroot_experimental=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:11,deployability,build,build,11,@phsft-bot build just on mac1014/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:11,deployability,build,build,11,@phsft-bot build with flags -Dpyroot_experimental=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:11,deployability,build,build,11,@phsft-bot build with flags -Dpyroot_exeperimental=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:11,deployability,build,build,11,@phsft-bot build with flags -Dpyroot_experimental=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:11,deployability,build,build,11,@phsft-bot build with flags -Dpyroot_experimental=ON -Druntime_cxxmodules=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:11,deployability,build,build,11,@phsft-bot build with flags -Droottest=ON -Dtesting=ON -Dpyroot_experimental=ON -Druntime_cxxmodules=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:11,deployability,build,build,11,@phsft-bot build with flags -Droottest=ON -Dtesting=ON -Dpyroot_experimental=ON -Druntime_cxxmodules=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:11,deployability,build,build,11,@phsft-bot build with flags -Droottest=ON -Dtesting=ON -Dpyroot_experimental=ON -Druntime_cxxmodules=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:11,deployability,build,build,11,@phsft-bot build with flags -Dpyroot_experimental=ON -Druntime_cxxmodules=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:11,deployability,build,build,11,@phsft-bot build with flags -Dpyroot_experimental=ON -Druntime_cxxmodules=OFF -Dcxx17=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:11,deployability,build,build,11,@phsft-bot build with flags -Dpyroot_experimental=ON -Druntime_cxxmodules=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:140,availability,Error,Errors,140,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:159,availability,Error,Error,159,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:231,availability,Error,Error,231,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:2,deployability,Build,Build,2,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:8,deployability,fail,failed,8,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:108,deployability,build,build,108,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:174,deployability,modul,modules,174,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:241,deployability,build,build,241,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:283,deployability,build,build,283,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:310,deployability,build,build,310,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:381,deployability,build,build,381,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:423,deployability,build,build,423,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:450,deployability,build,build,450,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:478,deployability,Fail,Fails,478,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:665,deployability,build,build,665,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:210,integrability,messag,message,210,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:327,integrability,messag,message,327,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:467,integrability,messag,message,467,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:495,integrability,configur,configures,495,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:210,interoperability,messag,message,210,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:327,interoperability,messag,message,327,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:467,interoperability,messag,message,467,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:586,interoperability,specif,specify,586,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:174,modifiability,modul,modules,174,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:495,modifiability,configur,configures,495,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:140,performance,Error,Errors,140,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:159,performance,Error,Error,159,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:231,performance,Error,Error,231,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:8,reliability,fail,failed,8,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:478,reliability,Fail,Fails,478,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:140,safety,Error,Errors,140,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:159,safety,Error,Error,159,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:174,safety,modul,modules,174,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:231,safety,Error,Error,231,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:495,security,configur,configures,495,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:140,usability,Error,Errors,140,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:159,usability,Error,Error,159,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:231,usability,Error,Error,231,> Build failed on mac1014/cxx17. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console). > . > ### Errors:. > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):. > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. > . > ### Warnings:. > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:2,deployability,Build,Build,2,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:8,deployability,fail,failed,8,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:137,deployability,build,build,137,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:244,deployability,build,build,244,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:271,deployability,build,build,271,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:438,deployability,build,build,438,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:658,deployability,build,build,658,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:842,deployability,build,build,842,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1025,deployability,build,build,1025,"rmance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail als",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1263,deployability,Fail,Failing,1263,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1436,deployability,build,build,1436,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1723,deployability,build,build,1723,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1857,deployability,fail,failing,1857,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:2020,deployability,fail,fail,2020,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:288,integrability,messag,message,288,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:380,integrability,messag,message,380,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:288,interoperability,messag,message,288,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:320,interoperability,bind,bindings,320,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:380,interoperability,messag,message,380,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:449,interoperability,bind,bindings,449,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:669,interoperability,bind,bindings,669,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:853,interoperability,bind,bindings,853,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1036,interoperability,bind,bindings,1036,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1296,interoperability,bind,bindings,1296,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1471,interoperability,bind,bindings,1471,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1578,interoperability,bind,bindings,1578,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1758,interoperability,bind,bindings,1758,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:320,modifiability,bind,bindings,320,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:449,modifiability,bind,bindings,449,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:669,modifiability,bind,bindings,669,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:753,modifiability,paramet,parameter,753,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:783,modifiability,paramet,parameter,783,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:853,modifiability,bind,bindings,853,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:937,modifiability,paramet,parameter,937,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:966,modifiability,paramet,parameter,966,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1036,modifiability,bind,bindings,1036,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1120,modifiability,paramet,parameter,1120,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1148,modifiability,paramet,parameter,1148,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1296,modifiability,bind,bindings,1296,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1471,modifiability,bind,bindings,1471,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1578,modifiability,bind,bindings,1578,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1758,modifiability,bind,bindings,1758,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:23,performance,perform,performance-,23,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:8,reliability,fail,failed,8,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1263,reliability,Fail,Failing,1263,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1857,reliability,fail,failing,1857,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:2020,reliability,fail,fail,2020,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1271,safety,test,tests,1271,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1337,safety,test,test,1337,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1448,safety,test,testReport,1448,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1512,safety,test,test,1512,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1619,safety,test,test,1619,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1735,safety,test,testReport,1735,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1799,safety,test,test,1799,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1865,safety,test,tests,1865,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:2014,safety,test,tests,2014,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1271,testability,test,tests,1271,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1337,testability,test,test,1337,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1448,testability,test,testReport,1448,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1512,testability,test,test,1512,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1619,testability,test,test,1619,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1735,testability,test,testReport,1735,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1799,testability,test,test,1799,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1865,testability,test,tests,1865,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:2014,testability,test,tests,2014,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:23,usability,perform,performance-,23,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1195,usability,command,command,1195,"s7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > * CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:33 (message):. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1695:38: warning: suggest parentheses around ‘&&’ within ‘||’ [-Wparentheses]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyclass’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyname’ [-Wunused-parameter]. > * /data/sftnight/workspace/root-pullrequests-build/root/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPScope.cxx:72:12: warning: unused parameter ‘pyval’ [-Wunused-parameter]. > * cc1plus: warning: unrecognized command line option ""-Wno-register"" [enabled by default]. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71269/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). The failing tests in this machine are not introduced by this PR. . It can be seen in this dummy PR. https://github.com/root-project/root/pull/4576. that the two tests fail also in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:11,deployability,build,build,11,@phsft-bot build with flags -Dpyroot_experimental=ON -Druntime_cxxmodules=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:11,deployability,build,build,11,@phsft-bot build with flags -Dpyroot_experimental=ON -Druntime_cxxmodules=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:2,deployability,Build,Build,2,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:8,deployability,fail,failed,8,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:137,deployability,build,build,137,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:244,deployability,build,build,244,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:271,deployability,build,build,271,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:309,deployability,Fail,Failing,309,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:482,deployability,build,build,482,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:769,deployability,build,build,769,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1022,deployability,build,build,1022,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1120,deployability,fail,failing,1120,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1430,deployability,fail,fail,1430,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:288,integrability,messag,message,288,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:288,interoperability,messag,message,288,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:342,interoperability,bind,bindings,342,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:517,interoperability,bind,bindings,517,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:624,interoperability,bind,bindings,624,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:804,interoperability,bind,bindings,804,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:342,modifiability,bind,bindings,342,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:517,modifiability,bind,bindings,517,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:624,modifiability,bind,bindings,624,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:804,modifiability,bind,bindings,804,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:23,performance,perform,performance-,23,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:8,reliability,fail,failed,8,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:309,reliability,Fail,Failing,309,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1120,reliability,fail,failing,1120,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1430,reliability,fail,fail,1430,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:317,safety,test,tests,317,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:383,safety,test,test,383,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:494,safety,test,testReport,494,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:558,safety,test,test,558,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:665,safety,test,test,665,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:781,safety,test,testReport,781,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:845,safety,test,test,845,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1034,safety,test,testReport,1034,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1128,safety,test,tests,1128,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1280,safety,test,tests,1280,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1424,safety,test,tests,1424,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:317,testability,test,tests,317,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:383,testability,test,test,383,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:494,testability,test,testReport,494,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:558,testability,test,test,558,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:665,testability,test,test,665,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:781,testability,test,testReport,781,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:845,testability,test,test,845,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1034,testability,test,testReport,1034,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1128,testability,test,tests,1128,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1280,testability,test,tests,1280,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:1424,testability,test,tests,1424,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:23,usability,perform,performance-,23,"> Build failed on ROOT-performance-centos7-multicore/default. > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console). > . > ### Warnings:. > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. > . > ### Failing tests:. > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/). > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/). > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:11,deployability,build,build,11,@phsft-bot build with flags -Dpyroot_experimental=ON -Druntime_cxxmodules=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:11,deployability,build,build,11,@phsft-bot build with flags -Dpyroot_experimental=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:11,deployability,build,build,11,@phsft-bot build with flags -Dpyroot_experimental=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:11,deployability,build,build,11,@phsft-bot build with flags -Dpyroot_experimental=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:4,deployability,version,version,4,New version coming,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:4,integrability,version,version,4,New version coming,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:4,modifiability,version,version,4,New version coming,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4283:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4283
https://github.com/root-project/root/pull/4283:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4283
https://github.com/root-project/root/pull/4283:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4283
https://github.com/root-project/root/pull/4283:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4283
https://github.com/root-project/root/pull/4285:4,availability,failur,failure,4,The failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4285
https://github.com/root-project/root/pull/4285:4,deployability,fail,failure,4,The failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4285
https://github.com/root-project/root/pull/4285:4,performance,failur,failure,4,The failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4285
https://github.com/root-project/root/pull/4285:4,reliability,fail,failure,4,The failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4285
https://github.com/root-project/root/pull/4287:47,deployability,build,builds,47,Trying to add more commit to resurrect jenkins builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4287
https://github.com/root-project/root/pull/4287:4,availability,failur,failures,4,All failures has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4287
https://github.com/root-project/root/pull/4287:4,deployability,fail,failures,4,All failures has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4287
https://github.com/root-project/root/pull/4287:4,performance,failur,failures,4,All failures has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4287
https://github.com/root-project/root/pull/4287:4,reliability,fail,failures,4,All failures has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4287
https://github.com/root-project/root/pull/4288:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4288
https://github.com/root-project/root/pull/4289:8,usability,help,help,8,@pcanal help what am I misunderstanding here?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4289
https://github.com/root-project/root/pull/4289:19,usability,close,close,19,@linev why did you close your PR - it was strictly better! I'm happy to close this one if you reopen/recreate yours.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4289
https://github.com/root-project/root/pull/4289:72,usability,close,close,72,@linev why did you close your PR - it was strictly better! I'm happy to close this one if you reopen/recreate yours.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4289
https://github.com/root-project/root/pull/4293:11,deployability,build,build,11,@phsft-bot build with `-Dpyroot_experimental=ON`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4293
https://github.com/root-project/root/pull/4299:64,deployability,depend,dependencies,64,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:157,deployability,automat,automatically,157,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:254,deployability,depend,dependencies,254,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:358,deployability,depend,dependencies,358,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:455,deployability,depend,dependencies,455,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:637,deployability,DEPEND,DEPENDENCIES,637,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:94,energy efficiency,Core,Core,94,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:179,energy efficiency,Core,Core,179,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:64,integrability,depend,dependencies,64,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:254,integrability,depend,dependencies,254,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:358,integrability,depend,dependencies,358,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:455,integrability,depend,dependencies,455,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:637,integrability,DEPEND,DEPENDENCIES,637,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:119,interoperability,specif,specify,119,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:64,modifiability,depend,dependencies,64,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:254,modifiability,depend,dependencies,254,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:358,modifiability,depend,dependencies,358,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:455,modifiability,depend,dependencies,455,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:637,modifiability,DEPEND,DEPENDENCIES,637,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:321,reliability,diagno,diagnostic,321,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:64,safety,depend,dependencies,64,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:254,safety,depend,dependencies,254,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:358,safety,depend,dependencies,358,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:455,safety,depend,dependencies,455,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:637,safety,DEPEND,DEPENDENCIES,637,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:64,testability,depend,dependencies,64,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:157,testability,automat,automatically,157,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:254,testability,depend,dependencies,254,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:321,testability,diagno,diagnostic,321,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:358,testability,depend,dependencies,358,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:455,testability,depend,dependencies,455,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:637,testability,DEPEND,DEPENDENCIES,637,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:396,usability,user,users,396,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:. ```. set deps(). if (option). set( deps ${deps} libOpt1). endif(option). ... DEPENDENCIES ${deps}. ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:78,deployability,depend,dependencies,78,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:167,deployability,automat,automatically,167,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:198,deployability,depend,dependencies,198,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:282,deployability,depend,dependencies,282,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:438,deployability,depend,dependency,438,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:518,deployability,depend,dependencies,518,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:669,deployability,depend,dependencies,669,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:713,deployability,depend,dependencies,713,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:755,deployability,depend,dependency,755,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:813,deployability,depend,dependency,813,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:107,energy efficiency,Core,Core,107,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:188,energy efficiency,Core,Core,188,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:78,integrability,depend,dependencies,78,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:198,integrability,depend,dependencies,198,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:282,integrability,depend,dependencies,282,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:411,integrability,messag,message,411,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:438,integrability,depend,dependency,438,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:518,integrability,depend,dependencies,518,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:669,integrability,depend,dependencies,669,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:713,integrability,depend,dependencies,713,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:755,integrability,depend,dependency,755,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:813,integrability,depend,dependency,813,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:131,interoperability,specif,specify,131,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:411,interoperability,messag,message,411,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:78,modifiability,depend,dependencies,78,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:198,modifiability,depend,dependencies,198,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:282,modifiability,depend,dependencies,282,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:438,modifiability,depend,dependency,438,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:518,modifiability,depend,dependencies,518,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:669,modifiability,depend,dependencies,669,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:713,modifiability,depend,dependencies,713,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:755,modifiability,depend,dependency,755,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:813,modifiability,depend,dependency,813,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:78,safety,depend,dependencies,78,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:198,safety,depend,dependencies,198,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:282,safety,depend,dependencies,282,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:438,safety,depend,dependency,438,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:518,safety,depend,dependencies,518,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:669,safety,depend,dependencies,669,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:713,safety,depend,dependencies,713,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:755,safety,depend,dependency,755,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:813,safety,depend,dependency,813,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:78,testability,depend,dependencies,78,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:167,testability,automat,automatically,167,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:198,testability,depend,dependencies,198,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:282,testability,depend,dependencies,282,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:438,testability,depend,dependency,438,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:518,testability,depend,dependencies,518,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:669,testability,depend,dependencies,669,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:713,testability,depend,dependencies,713,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:755,testability,depend,dependency,755,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:813,testability,depend,dependency,813,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:574,usability,help,help,574,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:730,usability,help,help,730,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:18,availability,failur,failure,18,Mac has a strange failure:. ```. 14:37:56 CMake Error at interpreter/llvm/src/tools/clang/tools/driver/CMakeLists.txt:120 (file):. 14:37:56 file failed to open for reading (No such file or directory):. 14:37:56 . 14:37:56 /build/jenkins/workspace/root-pullrequests-build/build/interpreter/llvm/src/tools/clang/clang.order. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:48,availability,Error,Error,48,Mac has a strange failure:. ```. 14:37:56 CMake Error at interpreter/llvm/src/tools/clang/tools/driver/CMakeLists.txt:120 (file):. 14:37:56 file failed to open for reading (No such file or directory):. 14:37:56 . 14:37:56 /build/jenkins/workspace/root-pullrequests-build/build/interpreter/llvm/src/tools/clang/clang.order. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:18,deployability,fail,failure,18,Mac has a strange failure:. ```. 14:37:56 CMake Error at interpreter/llvm/src/tools/clang/tools/driver/CMakeLists.txt:120 (file):. 14:37:56 file failed to open for reading (No such file or directory):. 14:37:56 . 14:37:56 /build/jenkins/workspace/root-pullrequests-build/build/interpreter/llvm/src/tools/clang/clang.order. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:145,deployability,fail,failed,145,Mac has a strange failure:. ```. 14:37:56 CMake Error at interpreter/llvm/src/tools/clang/tools/driver/CMakeLists.txt:120 (file):. 14:37:56 file failed to open for reading (No such file or directory):. 14:37:56 . 14:37:56 /build/jenkins/workspace/root-pullrequests-build/build/interpreter/llvm/src/tools/clang/clang.order. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:223,deployability,build,build,223,Mac has a strange failure:. ```. 14:37:56 CMake Error at interpreter/llvm/src/tools/clang/tools/driver/CMakeLists.txt:120 (file):. 14:37:56 file failed to open for reading (No such file or directory):. 14:37:56 . 14:37:56 /build/jenkins/workspace/root-pullrequests-build/build/interpreter/llvm/src/tools/clang/clang.order. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:265,deployability,build,build,265,Mac has a strange failure:. ```. 14:37:56 CMake Error at interpreter/llvm/src/tools/clang/tools/driver/CMakeLists.txt:120 (file):. 14:37:56 file failed to open for reading (No such file or directory):. 14:37:56 . 14:37:56 /build/jenkins/workspace/root-pullrequests-build/build/interpreter/llvm/src/tools/clang/clang.order. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:271,deployability,build,build,271,Mac has a strange failure:. ```. 14:37:56 CMake Error at interpreter/llvm/src/tools/clang/tools/driver/CMakeLists.txt:120 (file):. 14:37:56 file failed to open for reading (No such file or directory):. 14:37:56 . 14:37:56 /build/jenkins/workspace/root-pullrequests-build/build/interpreter/llvm/src/tools/clang/clang.order. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:18,performance,failur,failure,18,Mac has a strange failure:. ```. 14:37:56 CMake Error at interpreter/llvm/src/tools/clang/tools/driver/CMakeLists.txt:120 (file):. 14:37:56 file failed to open for reading (No such file or directory):. 14:37:56 . 14:37:56 /build/jenkins/workspace/root-pullrequests-build/build/interpreter/llvm/src/tools/clang/clang.order. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:48,performance,Error,Error,48,Mac has a strange failure:. ```. 14:37:56 CMake Error at interpreter/llvm/src/tools/clang/tools/driver/CMakeLists.txt:120 (file):. 14:37:56 file failed to open for reading (No such file or directory):. 14:37:56 . 14:37:56 /build/jenkins/workspace/root-pullrequests-build/build/interpreter/llvm/src/tools/clang/clang.order. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:18,reliability,fail,failure,18,Mac has a strange failure:. ```. 14:37:56 CMake Error at interpreter/llvm/src/tools/clang/tools/driver/CMakeLists.txt:120 (file):. 14:37:56 file failed to open for reading (No such file or directory):. 14:37:56 . 14:37:56 /build/jenkins/workspace/root-pullrequests-build/build/interpreter/llvm/src/tools/clang/clang.order. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:145,reliability,fail,failed,145,Mac has a strange failure:. ```. 14:37:56 CMake Error at interpreter/llvm/src/tools/clang/tools/driver/CMakeLists.txt:120 (file):. 14:37:56 file failed to open for reading (No such file or directory):. 14:37:56 . 14:37:56 /build/jenkins/workspace/root-pullrequests-build/build/interpreter/llvm/src/tools/clang/clang.order. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:48,safety,Error,Error,48,Mac has a strange failure:. ```. 14:37:56 CMake Error at interpreter/llvm/src/tools/clang/tools/driver/CMakeLists.txt:120 (file):. 14:37:56 file failed to open for reading (No such file or directory):. 14:37:56 . 14:37:56 /build/jenkins/workspace/root-pullrequests-build/build/interpreter/llvm/src/tools/clang/clang.order. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:48,usability,Error,Error,48,Mac has a strange failure:. ```. 14:37:56 CMake Error at interpreter/llvm/src/tools/clang/tools/driver/CMakeLists.txt:120 (file):. 14:37:56 file failed to open for reading (No such file or directory):. 14:37:56 . 14:37:56 /build/jenkins/workspace/root-pullrequests-build/build/interpreter/llvm/src/tools/clang/clang.order. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:78,usability,tool,tools,78,Mac has a strange failure:. ```. 14:37:56 CMake Error at interpreter/llvm/src/tools/clang/tools/driver/CMakeLists.txt:120 (file):. 14:37:56 file failed to open for reading (No such file or directory):. 14:37:56 . 14:37:56 /build/jenkins/workspace/root-pullrequests-build/build/interpreter/llvm/src/tools/clang/clang.order. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:90,usability,tool,tools,90,Mac has a strange failure:. ```. 14:37:56 CMake Error at interpreter/llvm/src/tools/clang/tools/driver/CMakeLists.txt:120 (file):. 14:37:56 file failed to open for reading (No such file or directory):. 14:37:56 . 14:37:56 /build/jenkins/workspace/root-pullrequests-build/build/interpreter/llvm/src/tools/clang/clang.order. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:298,usability,tool,tools,298,Mac has a strange failure:. ```. 14:37:56 CMake Error at interpreter/llvm/src/tools/clang/tools/driver/CMakeLists.txt:120 (file):. 14:37:56 file failed to open for reading (No such file or directory):. 14:37:56 . 14:37:56 /build/jenkins/workspace/root-pullrequests-build/build/interpreter/llvm/src/tools/clang/clang.order. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:54,availability,avail,available,54,"CMake strikes again, it seems CMP0076 and on are only available with CMake 3.12 and above...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:54,reliability,availab,available,54,"CMake strikes again, it seems CMP0076 and on are only available with CMake 3.12 and above...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:54,safety,avail,available,54,"CMake strikes again, it seems CMP0076 and on are only available with CMake 3.12 and above...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:54,security,availab,available,54,"CMake strikes again, it seems CMP0076 and on are only available with CMake 3.12 and above...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:49,deployability,version,version,49,I'm leaving out the commits that rely on a newer version of CMake to be reviewed later.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:49,integrability,version,version,49,I'm leaving out the commits that rely on a newer version of CMake to be reviewed later.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:49,modifiability,version,version,49,I'm leaving out the commits that rely on a newer version of CMake to be reviewed later.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:72,safety,review,reviewed,72,I'm leaving out the commits that rely on a newer version of CMake to be reviewed later.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:72,testability,review,reviewed,72,I'm leaving out the commits that rely on a newer version of CMake to be reviewed later.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:33,availability,sli,slipped,33,"A change depending on CMake 3.12 slipped through, I removed it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:9,deployability,depend,depending,9,"A change depending on CMake 3.12 slipped through, I removed it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:9,integrability,depend,depending,9,"A change depending on CMake 3.12 slipped through, I removed it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:9,modifiability,depend,depending,9,"A change depending on CMake 3.12 slipped through, I removed it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:33,reliability,sli,slipped,33,"A change depending on CMake 3.12 slipped through, I removed it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:9,safety,depend,depending,9,"A change depending on CMake 3.12 slipped through, I removed it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:9,testability,depend,depending,9,"A change depending on CMake 3.12 slipped through, I removed it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:0,deployability,Fail,Failed,0,"Failed because Windows node seems to be out of space... In any case, this will be addressed in another PR, closing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:0,reliability,Fail,Failed,0,"Failed because Windows node seems to be out of space... In any case, this will be addressed in another PR, closing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4301:33,deployability,build,builds,33,Trivial change - no need to wait builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4301
https://github.com/root-project/root/pull/4303:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4303
https://github.com/root-project/root/pull/4303:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4303
https://github.com/root-project/root/pull/4305:305,deployability,Build,Build,305,"@pcanal . There are two possible issues in these classes. `virtual void TFile::Init(Bool_t)` method hides `void TDirectoryFile::Init(TClass *)` method. Methods are protected, therefore I just propose to rename `TDirectoryFile::Init` to something like `TDirectoryFile::InitDir`. Other issue - `TDirectory::Build` and `TDirectoryFile::Build` are virtual and called from constructors. I see no reason why they should be virtual - they do not used in other virtual methods. Only in `TDirectoryFile::Streamer`. I propose to have protected `BuildImp` methods and call them from constructor and streamer. And keep `Build` methods, calling there `BuildImp` - just for backward compatibility.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:333,deployability,Build,Build,333,"@pcanal . There are two possible issues in these classes. `virtual void TFile::Init(Bool_t)` method hides `void TDirectoryFile::Init(TClass *)` method. Methods are protected, therefore I just propose to rename `TDirectoryFile::Init` to something like `TDirectoryFile::InitDir`. Other issue - `TDirectory::Build` and `TDirectoryFile::Build` are virtual and called from constructors. I see no reason why they should be virtual - they do not used in other virtual methods. Only in `TDirectoryFile::Streamer`. I propose to have protected `BuildImp` methods and call them from constructor and streamer. And keep `Build` methods, calling there `BuildImp` - just for backward compatibility.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:535,deployability,Build,BuildImp,535,"@pcanal . There are two possible issues in these classes. `virtual void TFile::Init(Bool_t)` method hides `void TDirectoryFile::Init(TClass *)` method. Methods are protected, therefore I just propose to rename `TDirectoryFile::Init` to something like `TDirectoryFile::InitDir`. Other issue - `TDirectory::Build` and `TDirectoryFile::Build` are virtual and called from constructors. I see no reason why they should be virtual - they do not used in other virtual methods. Only in `TDirectoryFile::Streamer`. I propose to have protected `BuildImp` methods and call them from constructor and streamer. And keep `Build` methods, calling there `BuildImp` - just for backward compatibility.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:608,deployability,Build,Build,608,"@pcanal . There are two possible issues in these classes. `virtual void TFile::Init(Bool_t)` method hides `void TDirectoryFile::Init(TClass *)` method. Methods are protected, therefore I just propose to rename `TDirectoryFile::Init` to something like `TDirectoryFile::InitDir`. Other issue - `TDirectory::Build` and `TDirectoryFile::Build` are virtual and called from constructors. I see no reason why they should be virtual - they do not used in other virtual methods. Only in `TDirectoryFile::Streamer`. I propose to have protected `BuildImp` methods and call them from constructor and streamer. And keep `Build` methods, calling there `BuildImp` - just for backward compatibility.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:639,deployability,Build,BuildImp,639,"@pcanal . There are two possible issues in these classes. `virtual void TFile::Init(Bool_t)` method hides `void TDirectoryFile::Init(TClass *)` method. Methods are protected, therefore I just propose to rename `TDirectoryFile::Init` to something like `TDirectoryFile::InitDir`. Other issue - `TDirectory::Build` and `TDirectoryFile::Build` are virtual and called from constructors. I see no reason why they should be virtual - they do not used in other virtual methods. Only in `TDirectoryFile::Streamer`. I propose to have protected `BuildImp` methods and call them from constructor and streamer. And keep `Build` methods, calling there `BuildImp` - just for backward compatibility.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:669,interoperability,compatib,compatibility,669,"@pcanal . There are two possible issues in these classes. `virtual void TFile::Init(Bool_t)` method hides `void TDirectoryFile::Init(TClass *)` method. Methods are protected, therefore I just propose to rename `TDirectoryFile::Init` to something like `TDirectoryFile::InitDir`. Other issue - `TDirectory::Build` and `TDirectoryFile::Build` are virtual and called from constructors. I see no reason why they should be virtual - they do not used in other virtual methods. Only in `TDirectoryFile::Streamer`. I propose to have protected `BuildImp` methods and call them from constructor and streamer. And keep `Build` methods, calling there `BuildImp` - just for backward compatibility.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:71,usability,Close,Close,71,Also `TDirectory::CleanTargets` not need to be virtual. It is used in `Close()` methods and in destructor. For now I add `NOIMT:` to suppress clang-tidy warnings.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:86,deployability,Build,Build,86,"@pcanal Should we try to resolve problems with `TDirectoryFile::Init()`, `TDirectory::Build()` and `TDirectory::CleanTargets()` methods, which I point out in my previous posts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:73,usability,Close,Close,73,"> Also `TDirectory::CleanTargets` not need to be virtual. It is used in `Close()` methods and in destructor. For now I add `NOIMT:` to suppress clang-tidy warnings. Indeed since CleanTarget is protected, it could be made non-virtual",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:264,deployability,Build,Build,264,"> `virtual void TFile::Init(Bool_t)` method hides `void TDirectoryFile::Init(TClass *)` method. > Methods are protected, therefore I just propose to rename `TDirectoryFile::Init` to something like `TDirectoryFile::InitDir`. I agree. . > Other issue - `TDirectory::Build` and `TDirectoryFile::Build` are virtual and called from constructors. I see no reason why they should be virtual - they do not used in other virtual methods. Only in `TDirectoryFile::Streamer`. I propose to have protected `BuildImp` methods and call them from constructor and streamer. And keep `Build` methods, calling there `BuildImp` - just for backward compatibility. Sounds good.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:292,deployability,Build,Build,292,"> `virtual void TFile::Init(Bool_t)` method hides `void TDirectoryFile::Init(TClass *)` method. > Methods are protected, therefore I just propose to rename `TDirectoryFile::Init` to something like `TDirectoryFile::InitDir`. I agree. . > Other issue - `TDirectory::Build` and `TDirectoryFile::Build` are virtual and called from constructors. I see no reason why they should be virtual - they do not used in other virtual methods. Only in `TDirectoryFile::Streamer`. I propose to have protected `BuildImp` methods and call them from constructor and streamer. And keep `Build` methods, calling there `BuildImp` - just for backward compatibility. Sounds good.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:494,deployability,Build,BuildImp,494,"> `virtual void TFile::Init(Bool_t)` method hides `void TDirectoryFile::Init(TClass *)` method. > Methods are protected, therefore I just propose to rename `TDirectoryFile::Init` to something like `TDirectoryFile::InitDir`. I agree. . > Other issue - `TDirectory::Build` and `TDirectoryFile::Build` are virtual and called from constructors. I see no reason why they should be virtual - they do not used in other virtual methods. Only in `TDirectoryFile::Streamer`. I propose to have protected `BuildImp` methods and call them from constructor and streamer. And keep `Build` methods, calling there `BuildImp` - just for backward compatibility. Sounds good.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:567,deployability,Build,Build,567,"> `virtual void TFile::Init(Bool_t)` method hides `void TDirectoryFile::Init(TClass *)` method. > Methods are protected, therefore I just propose to rename `TDirectoryFile::Init` to something like `TDirectoryFile::InitDir`. I agree. . > Other issue - `TDirectory::Build` and `TDirectoryFile::Build` are virtual and called from constructors. I see no reason why they should be virtual - they do not used in other virtual methods. Only in `TDirectoryFile::Streamer`. I propose to have protected `BuildImp` methods and call them from constructor and streamer. And keep `Build` methods, calling there `BuildImp` - just for backward compatibility. Sounds good.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:598,deployability,Build,BuildImp,598,"> `virtual void TFile::Init(Bool_t)` method hides `void TDirectoryFile::Init(TClass *)` method. > Methods are protected, therefore I just propose to rename `TDirectoryFile::Init` to something like `TDirectoryFile::InitDir`. I agree. . > Other issue - `TDirectory::Build` and `TDirectoryFile::Build` are virtual and called from constructors. I see no reason why they should be virtual - they do not used in other virtual methods. Only in `TDirectoryFile::Streamer`. I propose to have protected `BuildImp` methods and call them from constructor and streamer. And keep `Build` methods, calling there `BuildImp` - just for backward compatibility. Sounds good.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:628,interoperability,compatib,compatibility,628,"> `virtual void TFile::Init(Bool_t)` method hides `void TDirectoryFile::Init(TClass *)` method. > Methods are protected, therefore I just propose to rename `TDirectoryFile::Init` to something like `TDirectoryFile::InitDir`. I agree. . > Other issue - `TDirectory::Build` and `TDirectoryFile::Build` are virtual and called from constructors. I see no reason why they should be virtual - they do not used in other virtual methods. Only in `TDirectoryFile::Streamer`. I propose to have protected `BuildImp` methods and call them from constructor and streamer. And keep `Build` methods, calling there `BuildImp` - just for backward compatibility. Sounds good.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:41,availability,sli,slightly,41,"> TDirectoryFile::BuildImp ... give them slightly different names. I call them `BuildDirectory` and `BuildDirectoryFile`, and use these names in TROOT and TFile constructors respectively. > Even-though it is not necessary, I would keep the fully qualified name (clearer to read). Done in last commit",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:18,deployability,Build,BuildImp,18,"> TDirectoryFile::BuildImp ... give them slightly different names. I call them `BuildDirectory` and `BuildDirectoryFile`, and use these names in TROOT and TFile constructors respectively. > Even-though it is not necessary, I would keep the fully qualified name (clearer to read). Done in last commit",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:80,deployability,Build,BuildDirectory,80,"> TDirectoryFile::BuildImp ... give them slightly different names. I call them `BuildDirectory` and `BuildDirectoryFile`, and use these names in TROOT and TFile constructors respectively. > Even-though it is not necessary, I would keep the fully qualified name (clearer to read). Done in last commit",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:101,deployability,Build,BuildDirectoryFile,101,"> TDirectoryFile::BuildImp ... give them slightly different names. I call them `BuildDirectory` and `BuildDirectoryFile`, and use these names in TROOT and TFile constructors respectively. > Even-though it is not necessary, I would keep the fully qualified name (clearer to read). Done in last commit",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:41,reliability,sli,slightly,41,"> TDirectoryFile::BuildImp ... give them slightly different names. I call them `BuildDirectory` and `BuildDirectoryFile`, and use these names in TROOT and TFile constructors respectively. > Even-though it is not necessary, I would keep the fully qualified name (clearer to read). Done in last commit",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:262,usability,clear,clearer,262,"> TDirectoryFile::BuildImp ... give them slightly different names. I call them `BuildDirectory` and `BuildDirectoryFile`, and use these names in TROOT and TFile constructors respectively. > Even-though it is not necessary, I would keep the fully qualified name (clearer to read). Done in last commit",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:45,deployability,fail,failing,45,@pcanal I trying to verify that happens with failing test `root-tree-chain`. From the log messages I see that following macro is failing:. https://github.com/root-project/roottest/blob/master/root/tree/chain/execCleanup.C. On mac1014/cxx17 platform I can reproduce behaviour and see file destructor does not call after `gROOT->GetListOfFiles()->Delete()` call.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:86,deployability,log,log,86,@pcanal I trying to verify that happens with failing test `root-tree-chain`. From the log messages I see that following macro is failing:. https://github.com/root-project/roottest/blob/master/root/tree/chain/execCleanup.C. On mac1014/cxx17 platform I can reproduce behaviour and see file destructor does not call after `gROOT->GetListOfFiles()->Delete()` call.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:129,deployability,fail,failing,129,@pcanal I trying to verify that happens with failing test `root-tree-chain`. From the log messages I see that following macro is failing:. https://github.com/root-project/roottest/blob/master/root/tree/chain/execCleanup.C. On mac1014/cxx17 platform I can reproduce behaviour and see file destructor does not call after `gROOT->GetListOfFiles()->Delete()` call.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:90,integrability,messag,messages,90,@pcanal I trying to verify that happens with failing test `root-tree-chain`. From the log messages I see that following macro is failing:. https://github.com/root-project/roottest/blob/master/root/tree/chain/execCleanup.C. On mac1014/cxx17 platform I can reproduce behaviour and see file destructor does not call after `gROOT->GetListOfFiles()->Delete()` call.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:90,interoperability,messag,messages,90,@pcanal I trying to verify that happens with failing test `root-tree-chain`. From the log messages I see that following macro is failing:. https://github.com/root-project/roottest/blob/master/root/tree/chain/execCleanup.C. On mac1014/cxx17 platform I can reproduce behaviour and see file destructor does not call after `gROOT->GetListOfFiles()->Delete()` call.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:240,interoperability,platform,platform,240,@pcanal I trying to verify that happens with failing test `root-tree-chain`. From the log messages I see that following macro is failing:. https://github.com/root-project/roottest/blob/master/root/tree/chain/execCleanup.C. On mac1014/cxx17 platform I can reproduce behaviour and see file destructor does not call after `gROOT->GetListOfFiles()->Delete()` call.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:45,reliability,fail,failing,45,@pcanal I trying to verify that happens with failing test `root-tree-chain`. From the log messages I see that following macro is failing:. https://github.com/root-project/roottest/blob/master/root/tree/chain/execCleanup.C. On mac1014/cxx17 platform I can reproduce behaviour and see file destructor does not call after `gROOT->GetListOfFiles()->Delete()` call.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:129,reliability,fail,failing,129,@pcanal I trying to verify that happens with failing test `root-tree-chain`. From the log messages I see that following macro is failing:. https://github.com/root-project/roottest/blob/master/root/tree/chain/execCleanup.C. On mac1014/cxx17 platform I can reproduce behaviour and see file destructor does not call after `gROOT->GetListOfFiles()->Delete()` call.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:299,reliability,doe,does,299,@pcanal I trying to verify that happens with failing test `root-tree-chain`. From the log messages I see that following macro is failing:. https://github.com/root-project/roottest/blob/master/root/tree/chain/execCleanup.C. On mac1014/cxx17 platform I can reproduce behaviour and see file destructor does not call after `gROOT->GetListOfFiles()->Delete()` call.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:53,safety,test,test,53,@pcanal I trying to verify that happens with failing test `root-tree-chain`. From the log messages I see that following macro is failing:. https://github.com/root-project/roottest/blob/master/root/tree/chain/execCleanup.C. On mac1014/cxx17 platform I can reproduce behaviour and see file destructor does not call after `gROOT->GetListOfFiles()->Delete()` call.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:86,safety,log,log,86,@pcanal I trying to verify that happens with failing test `root-tree-chain`. From the log messages I see that following macro is failing:. https://github.com/root-project/roottest/blob/master/root/tree/chain/execCleanup.C. On mac1014/cxx17 platform I can reproduce behaviour and see file destructor does not call after `gROOT->GetListOfFiles()->Delete()` call.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:86,security,log,log,86,@pcanal I trying to verify that happens with failing test `root-tree-chain`. From the log messages I see that following macro is failing:. https://github.com/root-project/roottest/blob/master/root/tree/chain/execCleanup.C. On mac1014/cxx17 platform I can reproduce behaviour and see file destructor does not call after `gROOT->GetListOfFiles()->Delete()` call.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:20,testability,verif,verify,20,@pcanal I trying to verify that happens with failing test `root-tree-chain`. From the log messages I see that following macro is failing:. https://github.com/root-project/roottest/blob/master/root/tree/chain/execCleanup.C. On mac1014/cxx17 platform I can reproduce behaviour and see file destructor does not call after `gROOT->GetListOfFiles()->Delete()` call.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:53,testability,test,test,53,@pcanal I trying to verify that happens with failing test `root-tree-chain`. From the log messages I see that following macro is failing:. https://github.com/root-project/roottest/blob/master/root/tree/chain/execCleanup.C. On mac1014/cxx17 platform I can reproduce behaviour and see file destructor does not call after `gROOT->GetListOfFiles()->Delete()` call.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:86,testability,log,log,86,@pcanal I trying to verify that happens with failing test `root-tree-chain`. From the log messages I see that following macro is failing:. https://github.com/root-project/roottest/blob/master/root/tree/chain/execCleanup.C. On mac1014/cxx17 platform I can reproduce behaviour and see file destructor does not call after `gROOT->GetListOfFiles()->Delete()` call.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:265,usability,behavi,behaviour,265,@pcanal I trying to verify that happens with failing test `root-tree-chain`. From the log messages I see that following macro is failing:. https://github.com/root-project/roottest/blob/master/root/tree/chain/execCleanup.C. On mac1014/cxx17 platform I can reproduce behaviour and see file destructor does not call after `gROOT->GetListOfFiles()->Delete()` call.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:383,performance,time,time,383,"@pcanal . My finding - on that test machine `c->GetCurrentFile()->IsOnHeap()` returns false. As result - such file is not destroyed when calling `gROOT->GetListOfFiles()->Delete()`. . Actually, it happens already with TDirectoryFile. Just doing:. ```. root [0] auto d = new TDirectoryFile(). (TDirectoryFile *) @0x7ffee3869998. root [1] d->IsOnHeap(). (bool) false. ```. At the same time, creating with some arguments:. ```. root [5] auto ddd = new TDirectoryFile(""aa"",""bb"", ""TDirectoryFile"", nullptr);. root [6] ddd->IsOnHeap(). (bool) true. ```. Seems to be, following construction with c++17 makes problem for TObject::IsOnHeap() detection:. ```. TDirectoryFile() = default;. ```. If I provide dummy implementation - IsOnHeap() works properly. I will add appropriate commit, but such problem should be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:31,safety,test,test,31,"@pcanal . My finding - on that test machine `c->GetCurrentFile()->IsOnHeap()` returns false. As result - such file is not destroyed when calling `gROOT->GetListOfFiles()->Delete()`. . Actually, it happens already with TDirectoryFile. Just doing:. ```. root [0] auto d = new TDirectoryFile(). (TDirectoryFile *) @0x7ffee3869998. root [1] d->IsOnHeap(). (bool) false. ```. At the same time, creating with some arguments:. ```. root [5] auto ddd = new TDirectoryFile(""aa"",""bb"", ""TDirectoryFile"", nullptr);. root [6] ddd->IsOnHeap(). (bool) true. ```. Seems to be, following construction with c++17 makes problem for TObject::IsOnHeap() detection:. ```. TDirectoryFile() = default;. ```. If I provide dummy implementation - IsOnHeap() works properly. I will add appropriate commit, but such problem should be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:633,safety,detect,detection,633,"@pcanal . My finding - on that test machine `c->GetCurrentFile()->IsOnHeap()` returns false. As result - such file is not destroyed when calling `gROOT->GetListOfFiles()->Delete()`. . Actually, it happens already with TDirectoryFile. Just doing:. ```. root [0] auto d = new TDirectoryFile(). (TDirectoryFile *) @0x7ffee3869998. root [1] d->IsOnHeap(). (bool) false. ```. At the same time, creating with some arguments:. ```. root [5] auto ddd = new TDirectoryFile(""aa"",""bb"", ""TDirectoryFile"", nullptr);. root [6] ddd->IsOnHeap(). (bool) true. ```. Seems to be, following construction with c++17 makes problem for TObject::IsOnHeap() detection:. ```. TDirectoryFile() = default;. ```. If I provide dummy implementation - IsOnHeap() works properly. I will add appropriate commit, but such problem should be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:66,security,IsO,IsOnHeap,66,"@pcanal . My finding - on that test machine `c->GetCurrentFile()->IsOnHeap()` returns false. As result - such file is not destroyed when calling `gROOT->GetListOfFiles()->Delete()`. . Actually, it happens already with TDirectoryFile. Just doing:. ```. root [0] auto d = new TDirectoryFile(). (TDirectoryFile *) @0x7ffee3869998. root [1] d->IsOnHeap(). (bool) false. ```. At the same time, creating with some arguments:. ```. root [5] auto ddd = new TDirectoryFile(""aa"",""bb"", ""TDirectoryFile"", nullptr);. root [6] ddd->IsOnHeap(). (bool) true. ```. Seems to be, following construction with c++17 makes problem for TObject::IsOnHeap() detection:. ```. TDirectoryFile() = default;. ```. If I provide dummy implementation - IsOnHeap() works properly. I will add appropriate commit, but such problem should be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:340,security,IsO,IsOnHeap,340,"@pcanal . My finding - on that test machine `c->GetCurrentFile()->IsOnHeap()` returns false. As result - such file is not destroyed when calling `gROOT->GetListOfFiles()->Delete()`. . Actually, it happens already with TDirectoryFile. Just doing:. ```. root [0] auto d = new TDirectoryFile(). (TDirectoryFile *) @0x7ffee3869998. root [1] d->IsOnHeap(). (bool) false. ```. At the same time, creating with some arguments:. ```. root [5] auto ddd = new TDirectoryFile(""aa"",""bb"", ""TDirectoryFile"", nullptr);. root [6] ddd->IsOnHeap(). (bool) true. ```. Seems to be, following construction with c++17 makes problem for TObject::IsOnHeap() detection:. ```. TDirectoryFile() = default;. ```. If I provide dummy implementation - IsOnHeap() works properly. I will add appropriate commit, but such problem should be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:518,security,IsO,IsOnHeap,518,"@pcanal . My finding - on that test machine `c->GetCurrentFile()->IsOnHeap()` returns false. As result - such file is not destroyed when calling `gROOT->GetListOfFiles()->Delete()`. . Actually, it happens already with TDirectoryFile. Just doing:. ```. root [0] auto d = new TDirectoryFile(). (TDirectoryFile *) @0x7ffee3869998. root [1] d->IsOnHeap(). (bool) false. ```. At the same time, creating with some arguments:. ```. root [5] auto ddd = new TDirectoryFile(""aa"",""bb"", ""TDirectoryFile"", nullptr);. root [6] ddd->IsOnHeap(). (bool) true. ```. Seems to be, following construction with c++17 makes problem for TObject::IsOnHeap() detection:. ```. TDirectoryFile() = default;. ```. If I provide dummy implementation - IsOnHeap() works properly. I will add appropriate commit, but such problem should be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:622,security,IsO,IsOnHeap,622,"@pcanal . My finding - on that test machine `c->GetCurrentFile()->IsOnHeap()` returns false. As result - such file is not destroyed when calling `gROOT->GetListOfFiles()->Delete()`. . Actually, it happens already with TDirectoryFile. Just doing:. ```. root [0] auto d = new TDirectoryFile(). (TDirectoryFile *) @0x7ffee3869998. root [1] d->IsOnHeap(). (bool) false. ```. At the same time, creating with some arguments:. ```. root [5] auto ddd = new TDirectoryFile(""aa"",""bb"", ""TDirectoryFile"", nullptr);. root [6] ddd->IsOnHeap(). (bool) true. ```. Seems to be, following construction with c++17 makes problem for TObject::IsOnHeap() detection:. ```. TDirectoryFile() = default;. ```. If I provide dummy implementation - IsOnHeap() works properly. I will add appropriate commit, but such problem should be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:633,security,detect,detection,633,"@pcanal . My finding - on that test machine `c->GetCurrentFile()->IsOnHeap()` returns false. As result - such file is not destroyed when calling `gROOT->GetListOfFiles()->Delete()`. . Actually, it happens already with TDirectoryFile. Just doing:. ```. root [0] auto d = new TDirectoryFile(). (TDirectoryFile *) @0x7ffee3869998. root [1] d->IsOnHeap(). (bool) false. ```. At the same time, creating with some arguments:. ```. root [5] auto ddd = new TDirectoryFile(""aa"",""bb"", ""TDirectoryFile"", nullptr);. root [6] ddd->IsOnHeap(). (bool) true. ```. Seems to be, following construction with c++17 makes problem for TObject::IsOnHeap() detection:. ```. TDirectoryFile() = default;. ```. If I provide dummy implementation - IsOnHeap() works properly. I will add appropriate commit, but such problem should be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:720,security,IsO,IsOnHeap,720,"@pcanal . My finding - on that test machine `c->GetCurrentFile()->IsOnHeap()` returns false. As result - such file is not destroyed when calling `gROOT->GetListOfFiles()->Delete()`. . Actually, it happens already with TDirectoryFile. Just doing:. ```. root [0] auto d = new TDirectoryFile(). (TDirectoryFile *) @0x7ffee3869998. root [1] d->IsOnHeap(). (bool) false. ```. At the same time, creating with some arguments:. ```. root [5] auto ddd = new TDirectoryFile(""aa"",""bb"", ""TDirectoryFile"", nullptr);. root [6] ddd->IsOnHeap(). (bool) true. ```. Seems to be, following construction with c++17 makes problem for TObject::IsOnHeap() detection:. ```. TDirectoryFile() = default;. ```. If I provide dummy implementation - IsOnHeap() works properly. I will add appropriate commit, but such problem should be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:31,testability,test,test,31,"@pcanal . My finding - on that test machine `c->GetCurrentFile()->IsOnHeap()` returns false. As result - such file is not destroyed when calling `gROOT->GetListOfFiles()->Delete()`. . Actually, it happens already with TDirectoryFile. Just doing:. ```. root [0] auto d = new TDirectoryFile(). (TDirectoryFile *) @0x7ffee3869998. root [1] d->IsOnHeap(). (bool) false. ```. At the same time, creating with some arguments:. ```. root [5] auto ddd = new TDirectoryFile(""aa"",""bb"", ""TDirectoryFile"", nullptr);. root [6] ddd->IsOnHeap(). (bool) true. ```. Seems to be, following construction with c++17 makes problem for TObject::IsOnHeap() detection:. ```. TDirectoryFile() = default;. ```. If I provide dummy implementation - IsOnHeap() works properly. I will add appropriate commit, but such problem should be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:108,interoperability,specif,specifier,108,All tests are working now - one can merge PR. Problem with `TObject::IsOnHeap()` connected with `= default` specifier for default object constructor. It MUST be avoided for any ROOT classes derived from TObject. I will provide PR soon,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:4,safety,test,tests,4,All tests are working now - one can merge PR. Problem with `TObject::IsOnHeap()` connected with `= default` specifier for default object constructor. It MUST be avoided for any ROOT classes derived from TObject. I will provide PR soon,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:161,safety,avoid,avoided,161,All tests are working now - one can merge PR. Problem with `TObject::IsOnHeap()` connected with `= default` specifier for default object constructor. It MUST be avoided for any ROOT classes derived from TObject. I will provide PR soon,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:69,security,IsO,IsOnHeap,69,All tests are working now - one can merge PR. Problem with `TObject::IsOnHeap()` connected with `= default` specifier for default object constructor. It MUST be avoided for any ROOT classes derived from TObject. I will provide PR soon,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:4,testability,test,tests,4,All tests are working now - one can merge PR. Problem with `TObject::IsOnHeap()` connected with `= default` specifier for default object constructor. It MUST be avoided for any ROOT classes derived from TObject. I will provide PR soon,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4306:66,availability,failur,failure,66,mac1014/cxx17 'timed-out' in the middle of the build .... windows failure seems like a jenkins failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4306
https://github.com/root-project/root/pull/4306:95,availability,failur,failure,95,mac1014/cxx17 'timed-out' in the middle of the build .... windows failure seems like a jenkins failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4306
https://github.com/root-project/root/pull/4306:47,deployability,build,build,47,mac1014/cxx17 'timed-out' in the middle of the build .... windows failure seems like a jenkins failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4306
https://github.com/root-project/root/pull/4306:66,deployability,fail,failure,66,mac1014/cxx17 'timed-out' in the middle of the build .... windows failure seems like a jenkins failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4306
https://github.com/root-project/root/pull/4306:95,deployability,fail,failure,95,mac1014/cxx17 'timed-out' in the middle of the build .... windows failure seems like a jenkins failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4306
https://github.com/root-project/root/pull/4306:15,performance,time,timed-out,15,mac1014/cxx17 'timed-out' in the middle of the build .... windows failure seems like a jenkins failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4306
https://github.com/root-project/root/pull/4306:66,performance,failur,failure,66,mac1014/cxx17 'timed-out' in the middle of the build .... windows failure seems like a jenkins failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4306
https://github.com/root-project/root/pull/4306:95,performance,failur,failure,95,mac1014/cxx17 'timed-out' in the middle of the build .... windows failure seems like a jenkins failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4306
https://github.com/root-project/root/pull/4306:66,reliability,fail,failure,66,mac1014/cxx17 'timed-out' in the middle of the build .... windows failure seems like a jenkins failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4306
https://github.com/root-project/root/pull/4306:95,reliability,fail,failure,95,mac1014/cxx17 'timed-out' in the middle of the build .... windows failure seems like a jenkins failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4306
https://github.com/root-project/root/pull/4307:0,availability,Failur,Failures,0,Failures seem unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4307
https://github.com/root-project/root/pull/4307:0,deployability,Fail,Failures,0,Failures seem unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4307
https://github.com/root-project/root/pull/4307:0,performance,Failur,Failures,0,Failures seem unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4307
https://github.com/root-project/root/pull/4307:0,reliability,Fail,Failures,0,Failures seem unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4307
https://github.com/root-project/root/pull/4309:65,availability,failur,failure,65,module build is not expected to work (this is v6.14) and jupyter failure are unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4309
https://github.com/root-project/root/pull/4309:0,deployability,modul,module,0,module build is not expected to work (this is v6.14) and jupyter failure are unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4309
https://github.com/root-project/root/pull/4309:7,deployability,build,build,7,module build is not expected to work (this is v6.14) and jupyter failure are unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4309
https://github.com/root-project/root/pull/4309:65,deployability,fail,failure,65,module build is not expected to work (this is v6.14) and jupyter failure are unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4309
https://github.com/root-project/root/pull/4309:0,modifiability,modul,module,0,module build is not expected to work (this is v6.14) and jupyter failure are unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4309
https://github.com/root-project/root/pull/4309:65,performance,failur,failure,65,module build is not expected to work (this is v6.14) and jupyter failure are unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4309
https://github.com/root-project/root/pull/4309:65,reliability,fail,failure,65,module build is not expected to work (this is v6.14) and jupyter failure are unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4309
https://github.com/root-project/root/pull/4309:0,safety,modul,module,0,module build is not expected to work (this is v6.14) and jupyter failure are unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4309
https://github.com/root-project/root/pull/4312:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4312
https://github.com/root-project/root/pull/4312:0,availability,failur,failures,0,failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4312
https://github.com/root-project/root/pull/4312:0,deployability,fail,failures,0,failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4312
https://github.com/root-project/root/pull/4312:0,performance,failur,failures,0,failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4312
https://github.com/root-project/root/pull/4312:0,reliability,fail,failures,0,failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4312
https://github.com/root-project/root/pull/4313:0,availability,failur,failures,0,failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4313
https://github.com/root-project/root/pull/4313:0,deployability,fail,failures,0,failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4313
https://github.com/root-project/root/pull/4313:0,performance,failur,failures,0,failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4313
https://github.com/root-project/root/pull/4313:0,reliability,fail,failures,0,failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4313
https://github.com/root-project/root/pull/4314:0,availability,failur,failures,0,failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4314
https://github.com/root-project/root/pull/4314:0,deployability,fail,failures,0,failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4314
https://github.com/root-project/root/pull/4314:0,performance,failur,failures,0,failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4314
https://github.com/root-project/root/pull/4314:0,reliability,fail,failures,0,failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4314
https://github.com/root-project/root/pull/4317:53,availability,error,error,53,thanks @vgvassilev . Yes I think this should fix the error we see in cmssw IBs. What about recursive symlinks? . /some/path1/symlink.pcm is symlink to /some/path2/symlink.pcm. /some/path2/symlink.pcm is symlink to file /some/path/symlink.pcm.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4317
https://github.com/root-project/root/pull/4317:53,performance,error,error,53,thanks @vgvassilev . Yes I think this should fix the error we see in cmssw IBs. What about recursive symlinks? . /some/path1/symlink.pcm is symlink to /some/path2/symlink.pcm. /some/path2/symlink.pcm is symlink to file /some/path/symlink.pcm.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4317
https://github.com/root-project/root/pull/4317:53,safety,error,error,53,thanks @vgvassilev . Yes I think this should fix the error we see in cmssw IBs. What about recursive symlinks? . /some/path1/symlink.pcm is symlink to /some/path2/symlink.pcm. /some/path2/symlink.pcm is symlink to file /some/path/symlink.pcm.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4317
https://github.com/root-project/root/pull/4317:53,usability,error,error,53,thanks @vgvassilev . Yes I think this should fix the error we see in cmssw IBs. What about recursive symlinks? . /some/path1/symlink.pcm is symlink to /some/path2/symlink.pcm. /some/path2/symlink.pcm is symlink to file /some/path/symlink.pcm.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4317
https://github.com/root-project/root/pull/4317:97,deployability,build,build,97,"Please merge this PR soon, as ROOT is broken without it when using `-Dsoversion=ON` in a `Debug` build type.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4317
https://github.com/root-project/root/pull/4319:46,availability,failur,failures,46,Only ui5/jsroot code is changed - any kind of failures has nothing todo with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4319
https://github.com/root-project/root/pull/4319:46,deployability,fail,failures,46,Only ui5/jsroot code is changed - any kind of failures has nothing todo with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4319
https://github.com/root-project/root/pull/4319:46,performance,failur,failures,46,Only ui5/jsroot code is changed - any kind of failures has nothing todo with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4319
https://github.com/root-project/root/pull/4319:46,reliability,fail,failures,46,Only ui5/jsroot code is changed - any kind of failures has nothing todo with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4319
https://github.com/root-project/root/pull/4320:51,testability,understand,understand,51,Hang on before merging this that I get a change to understand the underlying problem ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4320
https://github.com/root-project/root/pull/4320:119,energy efficiency,optim,optimization,119,> So I think we're generally toast here. But I now understand how removing =default can avoid triggering this compiler optimization. Are there chance to disable such optimization for TObject? . Any kind of compiler flags or compiler macros?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4320
https://github.com/root-project/root/pull/4320:166,energy efficiency,optim,optimization,166,> So I think we're generally toast here. But I now understand how removing =default can avoid triggering this compiler optimization. Are there chance to disable such optimization for TObject? . Any kind of compiler flags or compiler macros?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4320
https://github.com/root-project/root/pull/4320:119,performance,optimiz,optimization,119,> So I think we're generally toast here. But I now understand how removing =default can avoid triggering this compiler optimization. Are there chance to disable such optimization for TObject? . Any kind of compiler flags or compiler macros?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4320
https://github.com/root-project/root/pull/4320:166,performance,optimiz,optimization,166,> So I think we're generally toast here. But I now understand how removing =default can avoid triggering this compiler optimization. Are there chance to disable such optimization for TObject? . Any kind of compiler flags or compiler macros?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4320
https://github.com/root-project/root/pull/4320:88,safety,avoid,avoid,88,> So I think we're generally toast here. But I now understand how removing =default can avoid triggering this compiler optimization. Are there chance to disable such optimization for TObject? . Any kind of compiler flags or compiler macros?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4320
https://github.com/root-project/root/pull/4320:51,testability,understand,understand,51,> So I think we're generally toast here. But I now understand how removing =default can avoid triggering this compiler optimization. Are there chance to disable such optimization for TObject? . Any kind of compiler flags or compiler macros?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4320
https://github.com/root-project/root/pull/4320:68,energy efficiency,optim,optimization,68,I have a decent likelyhood of finding a way to prevent this kind of optimization (i.e. make a change to TObject::TObject rather than all derived classes).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4320
https://github.com/root-project/root/pull/4320:68,performance,optimiz,optimization,68,I have a decent likelyhood of finding a way to prevent this kind of optimization (i.e. make a change to TObject::TObject rather than all derived classes).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4320
https://github.com/root-project/root/pull/4320:47,safety,prevent,prevent,47,I have a decent likelyhood of finding a way to prevent this kind of optimization (i.e. make a change to TObject::TObject rather than all derived classes).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4320
https://github.com/root-project/root/pull/4320:47,security,preven,prevent,47,I have a decent likelyhood of finding a way to prevent this kind of optimization (i.e. make a change to TObject::TObject rather than all derived classes).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4320
https://github.com/root-project/root/pull/4320:574,deployability,build,build,574,"And actually I can not, this is the required standard behavior. See https://en.cppreference.com/w/cpp/language/value_initialization and in particular:. ```. Notes:. ..... Since C++11, value-initializing a class without a user-provided constructor, which has a member of a class type with a user-provided constructor zeroes out the member before calling its constructor:. ```. This is indeed pre-existing behavior:. ```. root [0] l1 = new TLine;. root [1] l2 = new TLine();. root [2] l1->IsOnHeap(). (bool) true. root [3] l2->IsOnHeap(). (bool) false. ```. even with a debug build ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4320
https://github.com/root-project/root/pull/4320:45,interoperability,standard,standard,45,"And actually I can not, this is the required standard behavior. See https://en.cppreference.com/w/cpp/language/value_initialization and in particular:. ```. Notes:. ..... Since C++11, value-initializing a class without a user-provided constructor, which has a member of a class type with a user-provided constructor zeroes out the member before calling its constructor:. ```. This is indeed pre-existing behavior:. ```. root [0] l1 = new TLine;. root [1] l2 = new TLine();. root [2] l1->IsOnHeap(). (bool) true. root [3] l2->IsOnHeap(). (bool) false. ```. even with a debug build ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4320
https://github.com/root-project/root/pull/4320:487,security,IsO,IsOnHeap,487,"And actually I can not, this is the required standard behavior. See https://en.cppreference.com/w/cpp/language/value_initialization and in particular:. ```. Notes:. ..... Since C++11, value-initializing a class without a user-provided constructor, which has a member of a class type with a user-provided constructor zeroes out the member before calling its constructor:. ```. This is indeed pre-existing behavior:. ```. root [0] l1 = new TLine;. root [1] l2 = new TLine();. root [2] l1->IsOnHeap(). (bool) true. root [3] l2->IsOnHeap(). (bool) false. ```. even with a debug build ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4320
https://github.com/root-project/root/pull/4320:525,security,IsO,IsOnHeap,525,"And actually I can not, this is the required standard behavior. See https://en.cppreference.com/w/cpp/language/value_initialization and in particular:. ```. Notes:. ..... Since C++11, value-initializing a class without a user-provided constructor, which has a member of a class type with a user-provided constructor zeroes out the member before calling its constructor:. ```. This is indeed pre-existing behavior:. ```. root [0] l1 = new TLine;. root [1] l2 = new TLine();. root [2] l1->IsOnHeap(). (bool) true. root [3] l2->IsOnHeap(). (bool) false. ```. even with a debug build ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4320
https://github.com/root-project/root/pull/4320:54,usability,behavi,behavior,54,"And actually I can not, this is the required standard behavior. See https://en.cppreference.com/w/cpp/language/value_initialization and in particular:. ```. Notes:. ..... Since C++11, value-initializing a class without a user-provided constructor, which has a member of a class type with a user-provided constructor zeroes out the member before calling its constructor:. ```. This is indeed pre-existing behavior:. ```. root [0] l1 = new TLine;. root [1] l2 = new TLine();. root [2] l1->IsOnHeap(). (bool) true. root [3] l2->IsOnHeap(). (bool) false. ```. even with a debug build ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4320
https://github.com/root-project/root/pull/4320:221,usability,user,user-provided,221,"And actually I can not, this is the required standard behavior. See https://en.cppreference.com/w/cpp/language/value_initialization and in particular:. ```. Notes:. ..... Since C++11, value-initializing a class without a user-provided constructor, which has a member of a class type with a user-provided constructor zeroes out the member before calling its constructor:. ```. This is indeed pre-existing behavior:. ```. root [0] l1 = new TLine;. root [1] l2 = new TLine();. root [2] l1->IsOnHeap(). (bool) true. root [3] l2->IsOnHeap(). (bool) false. ```. even with a debug build ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4320
https://github.com/root-project/root/pull/4320:290,usability,user,user-provided,290,"And actually I can not, this is the required standard behavior. See https://en.cppreference.com/w/cpp/language/value_initialization and in particular:. ```. Notes:. ..... Since C++11, value-initializing a class without a user-provided constructor, which has a member of a class type with a user-provided constructor zeroes out the member before calling its constructor:. ```. This is indeed pre-existing behavior:. ```. root [0] l1 = new TLine;. root [1] l2 = new TLine();. root [2] l1->IsOnHeap(). (bool) true. root [3] l2->IsOnHeap(). (bool) false. ```. even with a debug build ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4320
https://github.com/root-project/root/pull/4320:404,usability,behavi,behavior,404,"And actually I can not, this is the required standard behavior. See https://en.cppreference.com/w/cpp/language/value_initialization and in particular:. ```. Notes:. ..... Since C++11, value-initializing a class without a user-provided constructor, which has a member of a class type with a user-provided constructor zeroes out the member before calling its constructor:. ```. This is indeed pre-existing behavior:. ```. root [0] l1 = new TLine;. root [1] l2 = new TLine();. root [2] l1->IsOnHeap(). (bool) true. root [3] l2->IsOnHeap(). (bool) false. ```. even with a debug build ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4320
https://github.com/root-project/root/pull/4321:25,availability,failur,failure,25,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:25,deployability,fail,failure,25,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:116,deployability,build,build,116,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:178,deployability,build,build,178,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:642,deployability,build,build,642,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:718,energy efficiency,core,core,718,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:94,interoperability,XML,XML-CHAR-,94,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:225,interoperability,XML,XML-CHAR-,225,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:247,interoperability,XML,XML-CHAR-,247,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:283,interoperability,XML,XML-CHAR-,283,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:305,interoperability,XML,XML-CHAR-,305,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:331,interoperability,convers,conversion,331,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:455,interoperability,convers,conversion,455,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:471,interoperability,XML,XML-CHAR-,471,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:537,interoperability,XML,XML-CHAR-,537,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:598,interoperability,XML,XML-CHAR-,598,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:620,interoperability,XML,XML-CHAR-,620,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:758,interoperability,XML,XML-CHAR-,758,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:780,interoperability,XML,XML-CHAR-,780,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:813,interoperability,XML,XML-CHAR-,813,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:943,interoperability,XML,XML-CHAR-,943,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:1027,interoperability,XML,XML-CHAR-,1027,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:1058,interoperability,XML,XML-CHAR-,1058,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:25,performance,failur,failure,25,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:25,reliability,fail,failure,25,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:60,safety,test,tests,60,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:1009,safety,input,input,1009,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:38,testability,assert,assertHumanReadable,38,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:60,testability,test,tests,60,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:723,testability,assert,assertHumanReadable,723,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:1009,usability,input,input,1009,"Trying to solve frequent failure in **assertHumanReadable** tests. Typical output:. ```. [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m. if (v < std::numeric_limits<T>::max()) {. [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~. [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrmaster/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m. auto parseResult = ROOT::FromHumanReadableSize(input,res);. [NON-XML-CHAR-0x1B][0;1;32m ^. [NON-XML-CHAR-0x1B][0m1 warning generated. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:55,availability,error,error,55,"@Axel-Naumann . Should it be picked into 6.18 branch - error appears there time to time. Like recently: https://epsft-jenkins.cern.ch/job/root-incremental-v6-18-00-patches/LABEL=ROOT-ubuntu1804-clangHEAD,SPEC=noimt/119/.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:164,deployability,patch,patches,164,"@Axel-Naumann . Should it be picked into 6.18 branch - error appears there time to time. Like recently: https://epsft-jenkins.cern.ch/job/root-incremental-v6-18-00-patches/LABEL=ROOT-ubuntu1804-clangHEAD,SPEC=noimt/119/.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:55,performance,error,error,55,"@Axel-Naumann . Should it be picked into 6.18 branch - error appears there time to time. Like recently: https://epsft-jenkins.cern.ch/job/root-incremental-v6-18-00-patches/LABEL=ROOT-ubuntu1804-clangHEAD,SPEC=noimt/119/.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:75,performance,time,time,75,"@Axel-Naumann . Should it be picked into 6.18 branch - error appears there time to time. Like recently: https://epsft-jenkins.cern.ch/job/root-incremental-v6-18-00-patches/LABEL=ROOT-ubuntu1804-clangHEAD,SPEC=noimt/119/.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:83,performance,time,time,83,"@Axel-Naumann . Should it be picked into 6.18 branch - error appears there time to time. Like recently: https://epsft-jenkins.cern.ch/job/root-incremental-v6-18-00-patches/LABEL=ROOT-ubuntu1804-clangHEAD,SPEC=noimt/119/.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:55,safety,error,error,55,"@Axel-Naumann . Should it be picked into 6.18 branch - error appears there time to time. Like recently: https://epsft-jenkins.cern.ch/job/root-incremental-v6-18-00-patches/LABEL=ROOT-ubuntu1804-clangHEAD,SPEC=noimt/119/.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:164,safety,patch,patches,164,"@Axel-Naumann . Should it be picked into 6.18 branch - error appears there time to time. Like recently: https://epsft-jenkins.cern.ch/job/root-incremental-v6-18-00-patches/LABEL=ROOT-ubuntu1804-clangHEAD,SPEC=noimt/119/.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:164,security,patch,patches,164,"@Axel-Naumann . Should it be picked into 6.18 branch - error appears there time to time. Like recently: https://epsft-jenkins.cern.ch/job/root-incremental-v6-18-00-patches/LABEL=ROOT-ubuntu1804-clangHEAD,SPEC=noimt/119/.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4321:55,usability,error,error,55,"@Axel-Naumann . Should it be picked into 6.18 branch - error appears there time to time. Like recently: https://epsft-jenkins.cern.ch/job/root-incremental-v6-18-00-patches/LABEL=ROOT-ubuntu1804-clangHEAD,SPEC=noimt/119/.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4323:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_zstd=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_zstd=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:39,deployability,build,build,39,"@Axel-Naumann, @pcanal, actual Jenkins build is green, ""red"" is coming from clang-format warnings for ZSTD builtins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:48,energy efficiency,green,green,48,"@Axel-Naumann, @pcanal, actual Jenkins build is green, ""red"" is coming from clang-format warnings for ZSTD builtins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:82,interoperability,format,format,82,"@Axel-Naumann, @pcanal, actual Jenkins build is green, ""red"" is coming from clang-format warnings for ZSTD builtins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_zstd=ON -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_zstd=ON -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:326,availability,error,error,326,"@Axel-Naumann do you know what means next on ROOT-fedora27/noimt:. `09:35:57 From https://github.com/oshadura/root. 09:35:57 * [new branch] alfonso-zst-final -> oshadura-alfonso-zst-final. 09:35:57 Auto packing the repository in background for optimum performance. 09:35:57 See ""git help gc"" for manual housekeeping. 09:35:57 error: The last gc run reported the following. Please correct the root cause. 09:35:57 and remove .git/gc.log. 09:35:57 Automatic cleanup will not be performed until the file is removed. 09:35:57 . 09:35:57 warning: There are too many unreachable loose objects; run 'git prune' to remove them.`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:432,deployability,log,log,432,"@Axel-Naumann do you know what means next on ROOT-fedora27/noimt:. `09:35:57 From https://github.com/oshadura/root. 09:35:57 * [new branch] alfonso-zst-final -> oshadura-alfonso-zst-final. 09:35:57 Auto packing the repository in background for optimum performance. 09:35:57 See ""git help gc"" for manual housekeeping. 09:35:57 error: The last gc run reported the following. Please correct the root cause. 09:35:57 and remove .git/gc.log. 09:35:57 Automatic cleanup will not be performed until the file is removed. 09:35:57 . 09:35:57 warning: There are too many unreachable loose objects; run 'git prune' to remove them.`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:446,deployability,Automat,Automatic,446,"@Axel-Naumann do you know what means next on ROOT-fedora27/noimt:. `09:35:57 From https://github.com/oshadura/root. 09:35:57 * [new branch] alfonso-zst-final -> oshadura-alfonso-zst-final. 09:35:57 Auto packing the repository in background for optimum performance. 09:35:57 See ""git help gc"" for manual housekeeping. 09:35:57 error: The last gc run reported the following. Please correct the root cause. 09:35:57 and remove .git/gc.log. 09:35:57 Automatic cleanup will not be performed until the file is removed. 09:35:57 . 09:35:57 warning: There are too many unreachable loose objects; run 'git prune' to remove them.`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:244,energy efficiency,optim,optimum,244,"@Axel-Naumann do you know what means next on ROOT-fedora27/noimt:. `09:35:57 From https://github.com/oshadura/root. 09:35:57 * [new branch] alfonso-zst-final -> oshadura-alfonso-zst-final. 09:35:57 Auto packing the repository in background for optimum performance. 09:35:57 See ""git help gc"" for manual housekeeping. 09:35:57 error: The last gc run reported the following. Please correct the root cause. 09:35:57 and remove .git/gc.log. 09:35:57 Automatic cleanup will not be performed until the file is removed. 09:35:57 . 09:35:57 warning: There are too many unreachable loose objects; run 'git prune' to remove them.`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:215,integrability,repositor,repository,215,"@Axel-Naumann do you know what means next on ROOT-fedora27/noimt:. `09:35:57 From https://github.com/oshadura/root. 09:35:57 * [new branch] alfonso-zst-final -> oshadura-alfonso-zst-final. 09:35:57 Auto packing the repository in background for optimum performance. 09:35:57 See ""git help gc"" for manual housekeeping. 09:35:57 error: The last gc run reported the following. Please correct the root cause. 09:35:57 and remove .git/gc.log. 09:35:57 Automatic cleanup will not be performed until the file is removed. 09:35:57 . 09:35:57 warning: There are too many unreachable loose objects; run 'git prune' to remove them.`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:215,interoperability,repositor,repository,215,"@Axel-Naumann do you know what means next on ROOT-fedora27/noimt:. `09:35:57 From https://github.com/oshadura/root. 09:35:57 * [new branch] alfonso-zst-final -> oshadura-alfonso-zst-final. 09:35:57 Auto packing the repository in background for optimum performance. 09:35:57 See ""git help gc"" for manual housekeeping. 09:35:57 error: The last gc run reported the following. Please correct the root cause. 09:35:57 and remove .git/gc.log. 09:35:57 Automatic cleanup will not be performed until the file is removed. 09:35:57 . 09:35:57 warning: There are too many unreachable loose objects; run 'git prune' to remove them.`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:203,modifiability,pac,packing,203,"@Axel-Naumann do you know what means next on ROOT-fedora27/noimt:. `09:35:57 From https://github.com/oshadura/root. 09:35:57 * [new branch] alfonso-zst-final -> oshadura-alfonso-zst-final. 09:35:57 Auto packing the repository in background for optimum performance. 09:35:57 See ""git help gc"" for manual housekeeping. 09:35:57 error: The last gc run reported the following. Please correct the root cause. 09:35:57 and remove .git/gc.log. 09:35:57 Automatic cleanup will not be performed until the file is removed. 09:35:57 . 09:35:57 warning: There are too many unreachable loose objects; run 'git prune' to remove them.`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:244,performance,optimum perform,optimum performance,244,"@Axel-Naumann do you know what means next on ROOT-fedora27/noimt:. `09:35:57 From https://github.com/oshadura/root. 09:35:57 * [new branch] alfonso-zst-final -> oshadura-alfonso-zst-final. 09:35:57 Auto packing the repository in background for optimum performance. 09:35:57 See ""git help gc"" for manual housekeeping. 09:35:57 error: The last gc run reported the following. Please correct the root cause. 09:35:57 and remove .git/gc.log. 09:35:57 Automatic cleanup will not be performed until the file is removed. 09:35:57 . 09:35:57 warning: There are too many unreachable loose objects; run 'git prune' to remove them.`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:326,performance,error,error,326,"@Axel-Naumann do you know what means next on ROOT-fedora27/noimt:. `09:35:57 From https://github.com/oshadura/root. 09:35:57 * [new branch] alfonso-zst-final -> oshadura-alfonso-zst-final. 09:35:57 Auto packing the repository in background for optimum performance. 09:35:57 See ""git help gc"" for manual housekeeping. 09:35:57 error: The last gc run reported the following. Please correct the root cause. 09:35:57 and remove .git/gc.log. 09:35:57 Automatic cleanup will not be performed until the file is removed. 09:35:57 . 09:35:57 warning: There are too many unreachable loose objects; run 'git prune' to remove them.`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:476,performance,perform,performed,476,"@Axel-Naumann do you know what means next on ROOT-fedora27/noimt:. `09:35:57 From https://github.com/oshadura/root. 09:35:57 * [new branch] alfonso-zst-final -> oshadura-alfonso-zst-final. 09:35:57 Auto packing the repository in background for optimum performance. 09:35:57 See ""git help gc"" for manual housekeeping. 09:35:57 error: The last gc run reported the following. Please correct the root cause. 09:35:57 and remove .git/gc.log. 09:35:57 Automatic cleanup will not be performed until the file is removed. 09:35:57 . 09:35:57 warning: There are too many unreachable loose objects; run 'git prune' to remove them.`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:326,safety,error,error,326,"@Axel-Naumann do you know what means next on ROOT-fedora27/noimt:. `09:35:57 From https://github.com/oshadura/root. 09:35:57 * [new branch] alfonso-zst-final -> oshadura-alfonso-zst-final. 09:35:57 Auto packing the repository in background for optimum performance. 09:35:57 See ""git help gc"" for manual housekeeping. 09:35:57 error: The last gc run reported the following. Please correct the root cause. 09:35:57 and remove .git/gc.log. 09:35:57 Automatic cleanup will not be performed until the file is removed. 09:35:57 . 09:35:57 warning: There are too many unreachable loose objects; run 'git prune' to remove them.`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:432,safety,log,log,432,"@Axel-Naumann do you know what means next on ROOT-fedora27/noimt:. `09:35:57 From https://github.com/oshadura/root. 09:35:57 * [new branch] alfonso-zst-final -> oshadura-alfonso-zst-final. 09:35:57 Auto packing the repository in background for optimum performance. 09:35:57 See ""git help gc"" for manual housekeeping. 09:35:57 error: The last gc run reported the following. Please correct the root cause. 09:35:57 and remove .git/gc.log. 09:35:57 Automatic cleanup will not be performed until the file is removed. 09:35:57 . 09:35:57 warning: There are too many unreachable loose objects; run 'git prune' to remove them.`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:432,security,log,log,432,"@Axel-Naumann do you know what means next on ROOT-fedora27/noimt:. `09:35:57 From https://github.com/oshadura/root. 09:35:57 * [new branch] alfonso-zst-final -> oshadura-alfonso-zst-final. 09:35:57 Auto packing the repository in background for optimum performance. 09:35:57 See ""git help gc"" for manual housekeeping. 09:35:57 error: The last gc run reported the following. Please correct the root cause. 09:35:57 and remove .git/gc.log. 09:35:57 Automatic cleanup will not be performed until the file is removed. 09:35:57 . 09:35:57 warning: There are too many unreachable loose objects; run 'git prune' to remove them.`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:432,testability,log,log,432,"@Axel-Naumann do you know what means next on ROOT-fedora27/noimt:. `09:35:57 From https://github.com/oshadura/root. 09:35:57 * [new branch] alfonso-zst-final -> oshadura-alfonso-zst-final. 09:35:57 Auto packing the repository in background for optimum performance. 09:35:57 See ""git help gc"" for manual housekeeping. 09:35:57 error: The last gc run reported the following. Please correct the root cause. 09:35:57 and remove .git/gc.log. 09:35:57 Automatic cleanup will not be performed until the file is removed. 09:35:57 . 09:35:57 warning: There are too many unreachable loose objects; run 'git prune' to remove them.`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:446,testability,Automat,Automatic,446,"@Axel-Naumann do you know what means next on ROOT-fedora27/noimt:. `09:35:57 From https://github.com/oshadura/root. 09:35:57 * [new branch] alfonso-zst-final -> oshadura-alfonso-zst-final. 09:35:57 Auto packing the repository in background for optimum performance. 09:35:57 See ""git help gc"" for manual housekeeping. 09:35:57 error: The last gc run reported the following. Please correct the root cause. 09:35:57 and remove .git/gc.log. 09:35:57 Automatic cleanup will not be performed until the file is removed. 09:35:57 . 09:35:57 warning: There are too many unreachable loose objects; run 'git prune' to remove them.`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:252,usability,perform,performance,252,"@Axel-Naumann do you know what means next on ROOT-fedora27/noimt:. `09:35:57 From https://github.com/oshadura/root. 09:35:57 * [new branch] alfonso-zst-final -> oshadura-alfonso-zst-final. 09:35:57 Auto packing the repository in background for optimum performance. 09:35:57 See ""git help gc"" for manual housekeeping. 09:35:57 error: The last gc run reported the following. Please correct the root cause. 09:35:57 and remove .git/gc.log. 09:35:57 Automatic cleanup will not be performed until the file is removed. 09:35:57 . 09:35:57 warning: There are too many unreachable loose objects; run 'git prune' to remove them.`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:283,usability,help,help,283,"@Axel-Naumann do you know what means next on ROOT-fedora27/noimt:. `09:35:57 From https://github.com/oshadura/root. 09:35:57 * [new branch] alfonso-zst-final -> oshadura-alfonso-zst-final. 09:35:57 Auto packing the repository in background for optimum performance. 09:35:57 See ""git help gc"" for manual housekeeping. 09:35:57 error: The last gc run reported the following. Please correct the root cause. 09:35:57 and remove .git/gc.log. 09:35:57 Automatic cleanup will not be performed until the file is removed. 09:35:57 . 09:35:57 warning: There are too many unreachable loose objects; run 'git prune' to remove them.`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:326,usability,error,error,326,"@Axel-Naumann do you know what means next on ROOT-fedora27/noimt:. `09:35:57 From https://github.com/oshadura/root. 09:35:57 * [new branch] alfonso-zst-final -> oshadura-alfonso-zst-final. 09:35:57 Auto packing the repository in background for optimum performance. 09:35:57 See ""git help gc"" for manual housekeeping. 09:35:57 error: The last gc run reported the following. Please correct the root cause. 09:35:57 and remove .git/gc.log. 09:35:57 Automatic cleanup will not be performed until the file is removed. 09:35:57 . 09:35:57 warning: There are too many unreachable loose objects; run 'git prune' to remove them.`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:476,usability,perform,performed,476,"@Axel-Naumann do you know what means next on ROOT-fedora27/noimt:. `09:35:57 From https://github.com/oshadura/root. 09:35:57 * [new branch] alfonso-zst-final -> oshadura-alfonso-zst-final. 09:35:57 Auto packing the repository in background for optimum performance. 09:35:57 See ""git help gc"" for manual housekeeping. 09:35:57 error: The last gc run reported the following. Please correct the root cause. 09:35:57 and remove .git/gc.log. 09:35:57 Automatic cleanup will not be performed until the file is removed. 09:35:57 . 09:35:57 warning: There are too many unreachable loose objects; run 'git prune' to remove them.`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:33,deployability,build,build,33,@pcanal did you mean `@phsft-bot build with flags -Dbuiltin_zstd=ON -DCTEST_TEST_EXCLUDE_NONE=On`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:4,availability,error,errors,4,The errors contains:. ```. 03:51:11 -- Looking for ZSTD. 03:51:11 CMake Error at /usr/share/cmake3/Modules/FindPackageHandleStandardArgs.cmake:137 (message):. 03:51:11 Could NOT find ZSTD (missing: ZSTD_LIBRARIES ZSTD_INCLUDE_DIR). ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:72,availability,Error,Error,72,The errors contains:. ```. 03:51:11 -- Looking for ZSTD. 03:51:11 CMake Error at /usr/share/cmake3/Modules/FindPackageHandleStandardArgs.cmake:137 (message):. 03:51:11 Could NOT find ZSTD (missing: ZSTD_LIBRARIES ZSTD_INCLUDE_DIR). ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:11,deployability,contain,contains,11,The errors contains:. ```. 03:51:11 -- Looking for ZSTD. 03:51:11 CMake Error at /usr/share/cmake3/Modules/FindPackageHandleStandardArgs.cmake:137 (message):. 03:51:11 Could NOT find ZSTD (missing: ZSTD_LIBRARIES ZSTD_INCLUDE_DIR). ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:99,deployability,Modul,Modules,99,The errors contains:. ```. 03:51:11 -- Looking for ZSTD. 03:51:11 CMake Error at /usr/share/cmake3/Modules/FindPackageHandleStandardArgs.cmake:137 (message):. 03:51:11 Could NOT find ZSTD (missing: ZSTD_LIBRARIES ZSTD_INCLUDE_DIR). ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:148,integrability,messag,message,148,The errors contains:. ```. 03:51:11 -- Looking for ZSTD. 03:51:11 CMake Error at /usr/share/cmake3/Modules/FindPackageHandleStandardArgs.cmake:137 (message):. 03:51:11 Could NOT find ZSTD (missing: ZSTD_LIBRARIES ZSTD_INCLUDE_DIR). ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:86,interoperability,share,share,86,The errors contains:. ```. 03:51:11 -- Looking for ZSTD. 03:51:11 CMake Error at /usr/share/cmake3/Modules/FindPackageHandleStandardArgs.cmake:137 (message):. 03:51:11 Could NOT find ZSTD (missing: ZSTD_LIBRARIES ZSTD_INCLUDE_DIR). ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:148,interoperability,messag,message,148,The errors contains:. ```. 03:51:11 -- Looking for ZSTD. 03:51:11 CMake Error at /usr/share/cmake3/Modules/FindPackageHandleStandardArgs.cmake:137 (message):. 03:51:11 Could NOT find ZSTD (missing: ZSTD_LIBRARIES ZSTD_INCLUDE_DIR). ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:99,modifiability,Modul,Modules,99,The errors contains:. ```. 03:51:11 -- Looking for ZSTD. 03:51:11 CMake Error at /usr/share/cmake3/Modules/FindPackageHandleStandardArgs.cmake:137 (message):. 03:51:11 Could NOT find ZSTD (missing: ZSTD_LIBRARIES ZSTD_INCLUDE_DIR). ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:4,performance,error,errors,4,The errors contains:. ```. 03:51:11 -- Looking for ZSTD. 03:51:11 CMake Error at /usr/share/cmake3/Modules/FindPackageHandleStandardArgs.cmake:137 (message):. 03:51:11 Could NOT find ZSTD (missing: ZSTD_LIBRARIES ZSTD_INCLUDE_DIR). ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:72,performance,Error,Error,72,The errors contains:. ```. 03:51:11 -- Looking for ZSTD. 03:51:11 CMake Error at /usr/share/cmake3/Modules/FindPackageHandleStandardArgs.cmake:137 (message):. 03:51:11 Could NOT find ZSTD (missing: ZSTD_LIBRARIES ZSTD_INCLUDE_DIR). ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:4,safety,error,errors,4,The errors contains:. ```. 03:51:11 -- Looking for ZSTD. 03:51:11 CMake Error at /usr/share/cmake3/Modules/FindPackageHandleStandardArgs.cmake:137 (message):. 03:51:11 Could NOT find ZSTD (missing: ZSTD_LIBRARIES ZSTD_INCLUDE_DIR). ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:72,safety,Error,Error,72,The errors contains:. ```. 03:51:11 -- Looking for ZSTD. 03:51:11 CMake Error at /usr/share/cmake3/Modules/FindPackageHandleStandardArgs.cmake:137 (message):. 03:51:11 Could NOT find ZSTD (missing: ZSTD_LIBRARIES ZSTD_INCLUDE_DIR). ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:99,safety,Modul,Modules,99,The errors contains:. ```. 03:51:11 -- Looking for ZSTD. 03:51:11 CMake Error at /usr/share/cmake3/Modules/FindPackageHandleStandardArgs.cmake:137 (message):. 03:51:11 Could NOT find ZSTD (missing: ZSTD_LIBRARIES ZSTD_INCLUDE_DIR). ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:4,usability,error,errors,4,The errors contains:. ```. 03:51:11 -- Looking for ZSTD. 03:51:11 CMake Error at /usr/share/cmake3/Modules/FindPackageHandleStandardArgs.cmake:137 (message):. 03:51:11 Could NOT find ZSTD (missing: ZSTD_LIBRARIES ZSTD_INCLUDE_DIR). ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:72,usability,Error,Error,72,The errors contains:. ```. 03:51:11 -- Looking for ZSTD. 03:51:11 CMake Error at /usr/share/cmake3/Modules/FindPackageHandleStandardArgs.cmake:137 (message):. 03:51:11 Could NOT find ZSTD (missing: ZSTD_LIBRARIES ZSTD_INCLUDE_DIR). ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:32,deployability,build,build,32,@pcanal did you mean @phsft-bot build with flags -Dbuiltin_zstd=ON -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:110,reliability,doe,does,110,"> @pcanal did you mean ... -Dbuiltin_zstd=ON . Well ... that is one test to run ... but also since without it does not ""work"" , we can't merge ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:68,safety,test,test,68,"> @pcanal did you mean ... -Dbuiltin_zstd=ON . Well ... that is one test to run ... but also since without it does not ""work"" , we can't merge ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:68,testability,test,test,68,"> @pcanal did you mean ... -Dbuiltin_zstd=ON . Well ... that is one test to run ... but also since without it does not ""work"" , we can't merge ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_zstd=ON -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:47,deployability,fail,fail-on-missing,47,"Hi Philippe! About zstd, it is using classical fail-on-missing strategy, which is enabled by default in PRs. Axel will help me to install zstd on PR nodes, so we can test it without builtin_zstd. I tested builds without builtin_zstd and fail-on-missing strategy, it works just fine..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:130,deployability,instal,install,130,"Hi Philippe! About zstd, it is using classical fail-on-missing strategy, which is enabled by default in PRs. Axel will help me to install zstd on PR nodes, so we can test it without builtin_zstd. I tested builds without builtin_zstd and fail-on-missing strategy, it works just fine..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:205,deployability,build,builds,205,"Hi Philippe! About zstd, it is using classical fail-on-missing strategy, which is enabled by default in PRs. Axel will help me to install zstd on PR nodes, so we can test it without builtin_zstd. I tested builds without builtin_zstd and fail-on-missing strategy, it works just fine..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:237,deployability,fail,fail-on-missing,237,"Hi Philippe! About zstd, it is using classical fail-on-missing strategy, which is enabled by default in PRs. Axel will help me to install zstd on PR nodes, so we can test it without builtin_zstd. I tested builds without builtin_zstd and fail-on-missing strategy, it works just fine..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:47,reliability,fail,fail-on-missing,47,"Hi Philippe! About zstd, it is using classical fail-on-missing strategy, which is enabled by default in PRs. Axel will help me to install zstd on PR nodes, so we can test it without builtin_zstd. I tested builds without builtin_zstd and fail-on-missing strategy, it works just fine..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:237,reliability,fail,fail-on-missing,237,"Hi Philippe! About zstd, it is using classical fail-on-missing strategy, which is enabled by default in PRs. Axel will help me to install zstd on PR nodes, so we can test it without builtin_zstd. I tested builds without builtin_zstd and fail-on-missing strategy, it works just fine..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:166,safety,test,test,166,"Hi Philippe! About zstd, it is using classical fail-on-missing strategy, which is enabled by default in PRs. Axel will help me to install zstd on PR nodes, so we can test it without builtin_zstd. I tested builds without builtin_zstd and fail-on-missing strategy, it works just fine..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:198,safety,test,tested,198,"Hi Philippe! About zstd, it is using classical fail-on-missing strategy, which is enabled by default in PRs. Axel will help me to install zstd on PR nodes, so we can test it without builtin_zstd. I tested builds without builtin_zstd and fail-on-missing strategy, it works just fine..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:166,testability,test,test,166,"Hi Philippe! About zstd, it is using classical fail-on-missing strategy, which is enabled by default in PRs. Axel will help me to install zstd on PR nodes, so we can test it without builtin_zstd. I tested builds without builtin_zstd and fail-on-missing strategy, it works just fine..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:198,testability,test,tested,198,"Hi Philippe! About zstd, it is using classical fail-on-missing strategy, which is enabled by default in PRs. Axel will help me to install zstd on PR nodes, so we can test it without builtin_zstd. I tested builds without builtin_zstd and fail-on-missing strategy, it works just fine..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:119,usability,help,help,119,"Hi Philippe! About zstd, it is using classical fail-on-missing strategy, which is enabled by default in PRs. Axel will help me to install zstd on PR nodes, so we can test it without builtin_zstd. I tested builds without builtin_zstd and fail-on-missing strategy, it works just fine..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:8,availability,failur,failure,8,@pcanal failure of projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot is unrelated comparing to my changes,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:8,deployability,fail,failure,8,@pcanal failure of projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot is unrelated comparing to my changes,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:8,performance,failur,failure,8,@pcanal failure of projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot is unrelated comparing to my changes,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:8,reliability,fail,failure,8,@pcanal failure of projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot is unrelated comparing to my changes,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:46,safety,test,test,46,@pcanal failure of projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot is unrelated comparing to my changes,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:46,testability,test,test,46,@pcanal failure of projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot is unrelated comparing to my changes,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:4,availability,failur,failure,4,"The failure of projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot on ROOT-ubuntu16/rtcxxmod does not appear to be related **but** it also succeed consistently with just the master, so we need to understand a bit more why it fails here before merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:172,availability,consist,consistently,172,"The failure of projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot on ROOT-ubuntu16/rtcxxmod does not appear to be related **but** it also succeed consistently with just the master, so we need to understand a bit more why it fails here before merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:4,deployability,fail,failure,4,"The failure of projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot on ROOT-ubuntu16/rtcxxmod does not appear to be related **but** it also succeed consistently with just the master, so we need to understand a bit more why it fails here before merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:250,deployability,fail,fails,250,"The failure of projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot on ROOT-ubuntu16/rtcxxmod does not appear to be related **but** it also succeed consistently with just the master, so we need to understand a bit more why it fails here before merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:4,performance,failur,failure,4,"The failure of projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot on ROOT-ubuntu16/rtcxxmod does not appear to be related **but** it also succeed consistently with just the master, so we need to understand a bit more why it fails here before merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:4,reliability,fail,failure,4,"The failure of projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot on ROOT-ubuntu16/rtcxxmod does not appear to be related **but** it also succeed consistently with just the master, so we need to understand a bit more why it fails here before merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:118,reliability,doe,does,118,"The failure of projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot on ROOT-ubuntu16/rtcxxmod does not appear to be related **but** it also succeed consistently with just the master, so we need to understand a bit more why it fails here before merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:250,reliability,fail,fails,250,"The failure of projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot on ROOT-ubuntu16/rtcxxmod does not appear to be related **but** it also succeed consistently with just the master, so we need to understand a bit more why it fails here before merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:42,safety,test,test,42,"The failure of projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot on ROOT-ubuntu16/rtcxxmod does not appear to be related **but** it also succeed consistently with just the master, so we need to understand a bit more why it fails here before merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:42,testability,test,test,42,"The failure of projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot on ROOT-ubuntu16/rtcxxmod does not appear to be related **but** it also succeed consistently with just the master, so we need to understand a bit more why it fails here before merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:221,testability,understand,understand,221,"The failure of projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot on ROOT-ubuntu16/rtcxxmod does not appear to be related **but** it also succeed consistently with just the master, so we need to understand a bit more why it fails here before merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:172,usability,consist,consistently,172,"The failure of projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot on ROOT-ubuntu16/rtcxxmod does not appear to be related **but** it also succeed consistently with just the master, so we need to understand a bit more why it fails here before merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:11,deployability,build,build,11,@phsft-bot build only on ROOT-ubuntu16/rtcxxmod with flags -DKEEP_PR_BUILDS_FOR_A_DAY=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:11,deployability,build,build,11,@phsft-bot build with flags -DKEEP_PR_BUILDS_FOR_A_DAY=On.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:35,deployability,fail,failing,35,"> Ah no, we can't do this, because failing node is used for releasing ROOT (on Ubuntu 16), so we can't install our own binaries directly there. @Axel-Naumann I think we can do exception here? Axel told me that we can build zstd as a builtin in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:60,deployability,releas,releasing,60,"> Ah no, we can't do this, because failing node is used for releasing ROOT (on Ubuntu 16), so we can't install our own binaries directly there. @Axel-Naumann I think we can do exception here? Axel told me that we can build zstd as a builtin in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:103,deployability,instal,install,103,"> Ah no, we can't do this, because failing node is used for releasing ROOT (on Ubuntu 16), so we can't install our own binaries directly there. @Axel-Naumann I think we can do exception here? Axel told me that we can build zstd as a builtin in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:217,deployability,build,build,217,"> Ah no, we can't do this, because failing node is used for releasing ROOT (on Ubuntu 16), so we can't install our own binaries directly there. @Axel-Naumann I think we can do exception here? Axel told me that we can build zstd as a builtin in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:35,reliability,fail,failing,35,"> Ah no, we can't do this, because failing node is used for releasing ROOT (on Ubuntu 16), so we can't install our own binaries directly there. @Axel-Naumann I think we can do exception here? Axel told me that we can build zstd as a builtin in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:176,safety,except,exception,176,"> Ah no, we can't do this, because failing node is used for releasing ROOT (on Ubuntu 16), so we can't install our own binaries directly there. @Axel-Naumann I think we can do exception here? Axel told me that we can build zstd as a builtin in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:4,availability,failur,failure,4,The failure is 'lost connection' to worker so we don't know the actual result.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:4,deployability,fail,failure,4,The failure is 'lost connection' to worker so we don't know the actual result.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:4,performance,failur,failure,4,The failure is 'lost connection' to worker so we don't know the actual result.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:4,reliability,fail,failure,4,The failure is 'lost connection' to worker so we don't know the actual result.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:8,deployability,updat,update,8,A small update about compressing dictionaries in ZSTD: https://github.com/facebook/zstd/issues/1694#issuecomment-545216804. TL;DR: Improvement when compressing large files with small dictionary.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:8,safety,updat,update,8,A small update about compressing dictionaries in ZSTD: https://github.com/facebook/zstd/issues/1694#issuecomment-545216804. TL;DR: Improvement when compressing large files with small dictionary.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4323:8,security,updat,update,8,A small update about compressing dictionaries in ZSTD: https://github.com/facebook/zstd/issues/1694#issuecomment-545216804. TL;DR: Improvement when compressing large files with small dictionary.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4329:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4329
https://github.com/root-project/root/pull/4329:68,deployability,depend,dependencies,68,"I think this cannot be merged as is, since using the .cxx files for dependencies creates a race condition with the custom command that writes them out (multiple targets depending on the same custom command). I will try to find another solution to this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4329
https://github.com/root-project/root/pull/4329:169,deployability,depend,depending,169,"I think this cannot be merged as is, since using the .cxx files for dependencies creates a race condition with the custom command that writes them out (multiple targets depending on the same custom command). I will try to find another solution to this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4329
https://github.com/root-project/root/pull/4329:68,integrability,depend,dependencies,68,"I think this cannot be merged as is, since using the .cxx files for dependencies creates a race condition with the custom command that writes them out (multiple targets depending on the same custom command). I will try to find another solution to this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4329
https://github.com/root-project/root/pull/4329:169,integrability,depend,depending,169,"I think this cannot be merged as is, since using the .cxx files for dependencies creates a race condition with the custom command that writes them out (multiple targets depending on the same custom command). I will try to find another solution to this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4329
https://github.com/root-project/root/pull/4329:68,modifiability,depend,dependencies,68,"I think this cannot be merged as is, since using the .cxx files for dependencies creates a race condition with the custom command that writes them out (multiple targets depending on the same custom command). I will try to find another solution to this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4329
https://github.com/root-project/root/pull/4329:169,modifiability,depend,depending,169,"I think this cannot be merged as is, since using the .cxx files for dependencies creates a race condition with the custom command that writes them out (multiple targets depending on the same custom command). I will try to find another solution to this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4329
https://github.com/root-project/root/pull/4329:68,safety,depend,dependencies,68,"I think this cannot be merged as is, since using the .cxx files for dependencies creates a race condition with the custom command that writes them out (multiple targets depending on the same custom command). I will try to find another solution to this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4329
https://github.com/root-project/root/pull/4329:169,safety,depend,depending,169,"I think this cannot be merged as is, since using the .cxx files for dependencies creates a race condition with the custom command that writes them out (multiple targets depending on the same custom command). I will try to find another solution to this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4329
https://github.com/root-project/root/pull/4329:68,testability,depend,dependencies,68,"I think this cannot be merged as is, since using the .cxx files for dependencies creates a race condition with the custom command that writes them out (multiple targets depending on the same custom command). I will try to find another solution to this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4329
https://github.com/root-project/root/pull/4329:169,testability,depend,depending,169,"I think this cannot be merged as is, since using the .cxx files for dependencies creates a race condition with the custom command that writes them out (multiple targets depending on the same custom command). I will try to find another solution to this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4329
https://github.com/root-project/root/pull/4329:115,usability,custom,custom,115,"I think this cannot be merged as is, since using the .cxx files for dependencies creates a race condition with the custom command that writes them out (multiple targets depending on the same custom command). I will try to find another solution to this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4329
https://github.com/root-project/root/pull/4329:122,usability,command,command,122,"I think this cannot be merged as is, since using the .cxx files for dependencies creates a race condition with the custom command that writes them out (multiple targets depending on the same custom command). I will try to find another solution to this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4329
https://github.com/root-project/root/pull/4329:191,usability,custom,custom,191,"I think this cannot be merged as is, since using the .cxx files for dependencies creates a race condition with the custom command that writes them out (multiple targets depending on the same custom command). I will try to find another solution to this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4329
https://github.com/root-project/root/pull/4329:198,usability,command,command,198,"I think this cannot be merged as is, since using the .cxx files for dependencies creates a race condition with the custom command that writes them out (multiple targets depending on the same custom command). I will try to find another solution to this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4329
https://github.com/root-project/root/pull/4330:0,availability,Failur,Failures,0,"Failures are due to network problems and timeouts related to that I presume. Building is fine, so I will merge this despite the failures, since they are not related to the changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4330
https://github.com/root-project/root/pull/4330:128,availability,failur,failures,128,"Failures are due to network problems and timeouts related to that I presume. Building is fine, so I will merge this despite the failures, since they are not related to the changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4330
https://github.com/root-project/root/pull/4330:0,deployability,Fail,Failures,0,"Failures are due to network problems and timeouts related to that I presume. Building is fine, so I will merge this despite the failures, since they are not related to the changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4330
https://github.com/root-project/root/pull/4330:77,deployability,Build,Building,77,"Failures are due to network problems and timeouts related to that I presume. Building is fine, so I will merge this despite the failures, since they are not related to the changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4330
https://github.com/root-project/root/pull/4330:128,deployability,fail,failures,128,"Failures are due to network problems and timeouts related to that I presume. Building is fine, so I will merge this despite the failures, since they are not related to the changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4330
https://github.com/root-project/root/pull/4330:0,performance,Failur,Failures,0,"Failures are due to network problems and timeouts related to that I presume. Building is fine, so I will merge this despite the failures, since they are not related to the changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4330
https://github.com/root-project/root/pull/4330:20,performance,network,network,20,"Failures are due to network problems and timeouts related to that I presume. Building is fine, so I will merge this despite the failures, since they are not related to the changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4330
https://github.com/root-project/root/pull/4330:41,performance,time,timeouts,41,"Failures are due to network problems and timeouts related to that I presume. Building is fine, so I will merge this despite the failures, since they are not related to the changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4330
https://github.com/root-project/root/pull/4330:128,performance,failur,failures,128,"Failures are due to network problems and timeouts related to that I presume. Building is fine, so I will merge this despite the failures, since they are not related to the changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4330
https://github.com/root-project/root/pull/4330:0,reliability,Fail,Failures,0,"Failures are due to network problems and timeouts related to that I presume. Building is fine, so I will merge this despite the failures, since they are not related to the changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4330
https://github.com/root-project/root/pull/4330:128,reliability,fail,failures,128,"Failures are due to network problems and timeouts related to that I presume. Building is fine, so I will merge this despite the failures, since they are not related to the changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4330
https://github.com/root-project/root/pull/4330:41,safety,timeout,timeouts,41,"Failures are due to network problems and timeouts related to that I presume. Building is fine, so I will merge this despite the failures, since they are not related to the changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4330
https://github.com/root-project/root/pull/4330:20,security,network,network,20,"Failures are due to network problems and timeouts related to that I presume. Building is fine, so I will merge this despite the failures, since they are not related to the changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4330
https://github.com/root-project/root/pull/4331:144,deployability,build,build,144,"@smuzaffar we'll need your help to know what to do, based on realistic numbers. We would *very* much appreciate if you could compare:. - a ROOT build *without modules*, and *with* this PR (i.e. without rdict.pcm files),. - compared to a ROOT build *without modules* (still!), *without* this PR (i.e. *with* rdict.pcm files). I.e. always non-modularized ROOT, with vs without this PR. We're interested in the change in RSS and real time, for a reco on say a single event with a small event size, e.g. minbias. Do you think you could help us with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:159,deployability,modul,modules,159,"@smuzaffar we'll need your help to know what to do, based on realistic numbers. We would *very* much appreciate if you could compare:. - a ROOT build *without modules*, and *with* this PR (i.e. without rdict.pcm files),. - compared to a ROOT build *without modules* (still!), *without* this PR (i.e. *with* rdict.pcm files). I.e. always non-modularized ROOT, with vs without this PR. We're interested in the change in RSS and real time, for a reco on say a single event with a small event size, e.g. minbias. Do you think you could help us with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:242,deployability,build,build,242,"@smuzaffar we'll need your help to know what to do, based on realistic numbers. We would *very* much appreciate if you could compare:. - a ROOT build *without modules*, and *with* this PR (i.e. without rdict.pcm files),. - compared to a ROOT build *without modules* (still!), *without* this PR (i.e. *with* rdict.pcm files). I.e. always non-modularized ROOT, with vs without this PR. We're interested in the change in RSS and real time, for a reco on say a single event with a small event size, e.g. minbias. Do you think you could help us with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:257,deployability,modul,modules,257,"@smuzaffar we'll need your help to know what to do, based on realistic numbers. We would *very* much appreciate if you could compare:. - a ROOT build *without modules*, and *with* this PR (i.e. without rdict.pcm files),. - compared to a ROOT build *without modules* (still!), *without* this PR (i.e. *with* rdict.pcm files). I.e. always non-modularized ROOT, with vs without this PR. We're interested in the change in RSS and real time, for a reco on say a single event with a small event size, e.g. minbias. Do you think you could help us with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:341,deployability,modul,modularized,341,"@smuzaffar we'll need your help to know what to do, based on realistic numbers. We would *very* much appreciate if you could compare:. - a ROOT build *without modules*, and *with* this PR (i.e. without rdict.pcm files),. - compared to a ROOT build *without modules* (still!), *without* this PR (i.e. *with* rdict.pcm files). I.e. always non-modularized ROOT, with vs without this PR. We're interested in the change in RSS and real time, for a reco on say a single event with a small event size, e.g. minbias. Do you think you could help us with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:341,integrability,modular,modularized,341,"@smuzaffar we'll need your help to know what to do, based on realistic numbers. We would *very* much appreciate if you could compare:. - a ROOT build *without modules*, and *with* this PR (i.e. without rdict.pcm files),. - compared to a ROOT build *without modules* (still!), *without* this PR (i.e. *with* rdict.pcm files). I.e. always non-modularized ROOT, with vs without this PR. We're interested in the change in RSS and real time, for a reco on say a single event with a small event size, e.g. minbias. Do you think you could help us with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:464,integrability,event,event,464,"@smuzaffar we'll need your help to know what to do, based on realistic numbers. We would *very* much appreciate if you could compare:. - a ROOT build *without modules*, and *with* this PR (i.e. without rdict.pcm files),. - compared to a ROOT build *without modules* (still!), *without* this PR (i.e. *with* rdict.pcm files). I.e. always non-modularized ROOT, with vs without this PR. We're interested in the change in RSS and real time, for a reco on say a single event with a small event size, e.g. minbias. Do you think you could help us with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:483,integrability,event,event,483,"@smuzaffar we'll need your help to know what to do, based on realistic numbers. We would *very* much appreciate if you could compare:. - a ROOT build *without modules*, and *with* this PR (i.e. without rdict.pcm files),. - compared to a ROOT build *without modules* (still!), *without* this PR (i.e. *with* rdict.pcm files). I.e. always non-modularized ROOT, with vs without this PR. We're interested in the change in RSS and real time, for a reco on say a single event with a small event size, e.g. minbias. Do you think you could help us with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:159,modifiability,modul,modules,159,"@smuzaffar we'll need your help to know what to do, based on realistic numbers. We would *very* much appreciate if you could compare:. - a ROOT build *without modules*, and *with* this PR (i.e. without rdict.pcm files),. - compared to a ROOT build *without modules* (still!), *without* this PR (i.e. *with* rdict.pcm files). I.e. always non-modularized ROOT, with vs without this PR. We're interested in the change in RSS and real time, for a reco on say a single event with a small event size, e.g. minbias. Do you think you could help us with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:257,modifiability,modul,modules,257,"@smuzaffar we'll need your help to know what to do, based on realistic numbers. We would *very* much appreciate if you could compare:. - a ROOT build *without modules*, and *with* this PR (i.e. without rdict.pcm files),. - compared to a ROOT build *without modules* (still!), *without* this PR (i.e. *with* rdict.pcm files). I.e. always non-modularized ROOT, with vs without this PR. We're interested in the change in RSS and real time, for a reco on say a single event with a small event size, e.g. minbias. Do you think you could help us with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:341,modifiability,modul,modularized,341,"@smuzaffar we'll need your help to know what to do, based on realistic numbers. We would *very* much appreciate if you could compare:. - a ROOT build *without modules*, and *with* this PR (i.e. without rdict.pcm files),. - compared to a ROOT build *without modules* (still!), *without* this PR (i.e. *with* rdict.pcm files). I.e. always non-modularized ROOT, with vs without this PR. We're interested in the change in RSS and real time, for a reco on say a single event with a small event size, e.g. minbias. Do you think you could help us with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:431,performance,time,time,431,"@smuzaffar we'll need your help to know what to do, based on realistic numbers. We would *very* much appreciate if you could compare:. - a ROOT build *without modules*, and *with* this PR (i.e. without rdict.pcm files),. - compared to a ROOT build *without modules* (still!), *without* this PR (i.e. *with* rdict.pcm files). I.e. always non-modularized ROOT, with vs without this PR. We're interested in the change in RSS and real time, for a reco on say a single event with a small event size, e.g. minbias. Do you think you could help us with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:159,safety,modul,modules,159,"@smuzaffar we'll need your help to know what to do, based on realistic numbers. We would *very* much appreciate if you could compare:. - a ROOT build *without modules*, and *with* this PR (i.e. without rdict.pcm files),. - compared to a ROOT build *without modules* (still!), *without* this PR (i.e. *with* rdict.pcm files). I.e. always non-modularized ROOT, with vs without this PR. We're interested in the change in RSS and real time, for a reco on say a single event with a small event size, e.g. minbias. Do you think you could help us with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:257,safety,modul,modules,257,"@smuzaffar we'll need your help to know what to do, based on realistic numbers. We would *very* much appreciate if you could compare:. - a ROOT build *without modules*, and *with* this PR (i.e. without rdict.pcm files),. - compared to a ROOT build *without modules* (still!), *without* this PR (i.e. *with* rdict.pcm files). I.e. always non-modularized ROOT, with vs without this PR. We're interested in the change in RSS and real time, for a reco on say a single event with a small event size, e.g. minbias. Do you think you could help us with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:341,safety,modul,modularized,341,"@smuzaffar we'll need your help to know what to do, based on realistic numbers. We would *very* much appreciate if you could compare:. - a ROOT build *without modules*, and *with* this PR (i.e. without rdict.pcm files),. - compared to a ROOT build *without modules* (still!), *without* this PR (i.e. *with* rdict.pcm files). I.e. always non-modularized ROOT, with vs without this PR. We're interested in the change in RSS and real time, for a reco on say a single event with a small event size, e.g. minbias. Do you think you could help us with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:341,testability,modula,modularized,341,"@smuzaffar we'll need your help to know what to do, based on realistic numbers. We would *very* much appreciate if you could compare:. - a ROOT build *without modules*, and *with* this PR (i.e. without rdict.pcm files),. - compared to a ROOT build *without modules* (still!), *without* this PR (i.e. *with* rdict.pcm files). I.e. always non-modularized ROOT, with vs without this PR. We're interested in the change in RSS and real time, for a reco on say a single event with a small event size, e.g. minbias. Do you think you could help us with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:27,usability,help,help,27,"@smuzaffar we'll need your help to know what to do, based on realistic numbers. We would *very* much appreciate if you could compare:. - a ROOT build *without modules*, and *with* this PR (i.e. without rdict.pcm files),. - compared to a ROOT build *without modules* (still!), *without* this PR (i.e. *with* rdict.pcm files). I.e. always non-modularized ROOT, with vs without this PR. We're interested in the change in RSS and real time, for a reco on say a single event with a small event size, e.g. minbias. Do you think you could help us with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:532,usability,help,help,532,"@smuzaffar we'll need your help to know what to do, based on realistic numbers. We would *very* much appreciate if you could compare:. - a ROOT build *without modules*, and *with* this PR (i.e. without rdict.pcm files),. - compared to a ROOT build *without modules* (still!), *without* this PR (i.e. *with* rdict.pcm files). I.e. always non-modularized ROOT, with vs without this PR. We're interested in the change in RSS and real time, for a reco on say a single event with a small event size, e.g. minbias. Do you think you could help us with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:196,deployability,integr,integrate,196,"@vgvassilev , please open a PR for cms-sw/root branch cmscxx/master/daff082e92 (which is based on root coomit daff082e92 + changes needed for cxxmodules). Once we have the PR then we can test and integrate it in CXXMODULE IBs",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:196,integrability,integr,integrate,196,"@vgvassilev , please open a PR for cms-sw/root branch cmscxx/master/daff082e92 (which is based on root coomit daff082e92 + changes needed for cxxmodules). Once we have the PR then we can test and integrate it in CXXMODULE IBs",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:196,interoperability,integr,integrate,196,"@vgvassilev , please open a PR for cms-sw/root branch cmscxx/master/daff082e92 (which is based on root coomit daff082e92 + changes needed for cxxmodules). Once we have the PR then we can test and integrate it in CXXMODULE IBs",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:196,modifiability,integr,integrate,196,"@vgvassilev , please open a PR for cms-sw/root branch cmscxx/master/daff082e92 (which is based on root coomit daff082e92 + changes needed for cxxmodules). Once we have the PR then we can test and integrate it in CXXMODULE IBs",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:196,reliability,integr,integrate,196,"@vgvassilev , please open a PR for cms-sw/root branch cmscxx/master/daff082e92 (which is based on root coomit daff082e92 + changes needed for cxxmodules). Once we have the PR then we can test and integrate it in CXXMODULE IBs",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:187,safety,test,test,187,"@vgvassilev , please open a PR for cms-sw/root branch cmscxx/master/daff082e92 (which is based on root coomit daff082e92 + changes needed for cxxmodules). Once we have the PR then we can test and integrate it in CXXMODULE IBs",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:196,security,integr,integrate,196,"@vgvassilev , please open a PR for cms-sw/root branch cmscxx/master/daff082e92 (which is based on root coomit daff082e92 + changes needed for cxxmodules). Once we have the PR then we can test and integrate it in CXXMODULE IBs",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:187,testability,test,test,187,"@vgvassilev , please open a PR for cms-sw/root branch cmscxx/master/daff082e92 (which is based on root coomit daff082e92 + changes needed for cxxmodules). Once we have the PR then we can test and integrate it in CXXMODULE IBs",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:196,testability,integr,integrate,196,"@vgvassilev , please open a PR for cms-sw/root branch cmscxx/master/daff082e92 (which is based on root coomit daff082e92 + changes needed for cxxmodules). Once we have the PR then we can test and integrate it in CXXMODULE IBs",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:26,deployability,modul,modules,26,"@smuzaffar, this is not a modules improvement. We are considering dropping the rdict files for ROOT in general. Should I still open it there?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:26,modifiability,modul,modules,26,"@smuzaffar, this is not a modules improvement. We are considering dropping the rdict files for ROOT in general. Should I still open it there?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:26,safety,modul,modules,26,"@smuzaffar, this is not a modules improvement. We are considering dropping the rdict files for ROOT in general. Should I still open it there?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4332:24,deployability,build,build,24,"@oshadura Is any of the build types being removed used by your builds (i.e. modules, rootbench, etc?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4332
https://github.com/root-project/root/pull/4332:63,deployability,build,builds,63,"@oshadura Is any of the build types being removed used by your builds (i.e. modules, rootbench, etc?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4332
https://github.com/root-project/root/pull/4332:76,deployability,modul,modules,76,"@oshadura Is any of the build types being removed used by your builds (i.e. modules, rootbench, etc?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4332
https://github.com/root-project/root/pull/4332:76,modifiability,modul,modules,76,"@oshadura Is any of the build types being removed used by your builds (i.e. modules, rootbench, etc?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4332
https://github.com/root-project/root/pull/4332:76,safety,modul,modules,76,"@oshadura Is any of the build types being removed used by your builds (i.e. modules, rootbench, etc?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4332
https://github.com/root-project/root/pull/4332:4,availability,failur,failure,4,"The failure is from the race condition, which was reverted. I'll re-run Jenkins and merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4332
https://github.com/root-project/root/pull/4332:4,deployability,fail,failure,4,"The failure is from the race condition, which was reverted. I'll re-run Jenkins and merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4332
https://github.com/root-project/root/pull/4332:4,performance,failur,failure,4,"The failure is from the race condition, which was reverted. I'll re-run Jenkins and merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4332
https://github.com/root-project/root/pull/4332:4,reliability,fail,failure,4,"The failure is from the race condition, which was reverted. I'll re-run Jenkins and merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4332
https://github.com/root-project/root/pull/4332:11,deployability,build,build,11,@phsft-bot build just on ROOT-performance-centos7-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4332
https://github.com/root-project/root/pull/4332:30,performance,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4332
https://github.com/root-project/root/pull/4332:30,usability,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4332
https://github.com/root-project/root/pull/4333:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4333
https://github.com/root-project/root/pull/4335:30,deployability,version,version,30,@amadio will propose a better version of this!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4335
https://github.com/root-project/root/pull/4335:30,integrability,version,version,30,@amadio will propose a better version of this!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4335
https://github.com/root-project/root/pull/4335:30,modifiability,version,version,30,@amadio will propose a better version of this!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4335
https://github.com/root-project/root/pull/4336:150,deployability,version,version,150,"Damn I overlooked that, sorry. Do you want to merge #4333 and I merge the other commits from this PR? Those are still relevant. I also like this PR's version of #4333 better: it reports which `symlink` failed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4336
https://github.com/root-project/root/pull/4336:202,deployability,fail,failed,202,"Damn I overlooked that, sorry. Do you want to merge #4333 and I merge the other commits from this PR? Those are still relevant. I also like this PR's version of #4333 better: it reports which `symlink` failed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4336
https://github.com/root-project/root/pull/4336:150,integrability,version,version,150,"Damn I overlooked that, sorry. Do you want to merge #4333 and I merge the other commits from this PR? Those are still relevant. I also like this PR's version of #4333 better: it reports which `symlink` failed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4336
https://github.com/root-project/root/pull/4336:150,modifiability,version,version,150,"Damn I overlooked that, sorry. Do you want to merge #4333 and I merge the other commits from this PR? Those are still relevant. I also like this PR's version of #4333 better: it reports which `symlink` failed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4336
https://github.com/root-project/root/pull/4336:202,reliability,fail,failed,202,"Damn I overlooked that, sorry. Do you want to merge #4333 and I merge the other commits from this PR? Those are still relevant. I also like this PR's version of #4333 better: it reports which `symlink` failed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4336
https://github.com/root-project/root/pull/4338:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4338
https://github.com/root-project/root/pull/4338:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4338
https://github.com/root-project/root/pull/4341:38,safety,test,tested,38,"Trivial changes, code is not directly tested by Jenkins",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4341
https://github.com/root-project/root/pull/4341:38,testability,test,tested,38,"Trivial changes, code is not directly tested by Jenkins",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4341
https://github.com/root-project/root/pull/4342:188,deployability,configurat,configuration,188,"With `-DLLVM_BUILD_TYPE=Debug`. The idea is not to change how things are currently working, just to make it work on Windows, where CMAKE_BUILD_TYPE is ignored since the generator is multi-configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4342
https://github.com/root-project/root/pull/4342:73,energy efficiency,current,currently,73,"With `-DLLVM_BUILD_TYPE=Debug`. The idea is not to change how things are currently working, just to make it work on Windows, where CMAKE_BUILD_TYPE is ignored since the generator is multi-configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4342
https://github.com/root-project/root/pull/4342:188,integrability,configur,configuration,188,"With `-DLLVM_BUILD_TYPE=Debug`. The idea is not to change how things are currently working, just to make it work on Windows, where CMAKE_BUILD_TYPE is ignored since the generator is multi-configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4342
https://github.com/root-project/root/pull/4342:188,modifiability,configur,configuration,188,"With `-DLLVM_BUILD_TYPE=Debug`. The idea is not to change how things are currently working, just to make it work on Windows, where CMAKE_BUILD_TYPE is ignored since the generator is multi-configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4342
https://github.com/root-project/root/pull/4342:188,security,configur,configuration,188,"With `-DLLVM_BUILD_TYPE=Debug`. The idea is not to change how things are currently working, just to make it work on Windows, where CMAKE_BUILD_TYPE is ignored since the generator is multi-configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4342
https://github.com/root-project/root/pull/4342:81,safety,test,test,81,"I think the fixes for threads need more work, I will exclude some commits and re-test. Only the fix to root-config should be strictly required for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4342
https://github.com/root-project/root/pull/4342:81,testability,test,test,81,"I think the fixes for threads need more work, I will exclude some commits and re-test. Only the fix to root-config should be strictly required for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4342
https://github.com/root-project/root/pull/4342:273,performance,time,timescale,273,"@amadio can you please split the llvm debug commit into a separate PR? We need to get this in ASAP to get our windows nodes stable again, and the other changes are a distraction from that. While certainly useful (not preempting Philippe's review), they live on a different timescale than the llvm debug commit. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4342
https://github.com/root-project/root/pull/4342:239,safety,review,review,239,"@amadio can you please split the llvm debug commit into a separate PR? We need to get this in ASAP to get our windows nodes stable again, and the other changes are a distraction from that. While certainly useful (not preempting Philippe's review), they live on a different timescale than the llvm debug commit. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4342
https://github.com/root-project/root/pull/4342:239,testability,review,review,239,"@amadio can you please split the llvm debug commit into a separate PR? We need to get this in ASAP to get our windows nodes stable again, and the other changes are a distraction from that. While certainly useful (not preempting Philippe's review), they live on a different timescale than the llvm debug commit. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4342
https://github.com/root-project/root/pull/4342:19,deployability,build,build,19,"Looks like the mac build just got aborted. I will remove the LLVM change, since it's in a separate PR and re-run Jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4342
https://github.com/root-project/root/pull/4344:113,deployability,Releas,Releasepage,113,"Currently when reading data which isn't of a basic data type, sometimes it calls `PopulatePage` without calling `Releasepage` later. (Making it incompatible with RPageSourceChain). Will investigate this later.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4344
https://github.com/root-project/root/pull/4344:0,energy efficiency,Current,Currently,0,"Currently when reading data which isn't of a basic data type, sometimes it calls `PopulatePage` without calling `Releasepage` later. (Making it incompatible with RPageSourceChain). Will investigate this later.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4344
https://github.com/root-project/root/pull/4344:144,interoperability,incompatib,incompatible,144,"Currently when reading data which isn't of a basic data type, sometimes it calls `PopulatePage` without calling `Releasepage` later. (Making it incompatible with RPageSourceChain). Will investigate this later.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4344
https://github.com/root-project/root/pull/4344:56,performance,cach,cached,56,"The problem was in RPageSourceChain, it can't deal with cached pages.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4344
https://github.com/root-project/root/pull/4345:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4345
https://github.com/root-project/root/pull/4346:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4346
https://github.com/root-project/root/pull/4346:11,deployability,build,build,11,@phsft-bot build with flags -DKEEP_PR_BUILDS_FOR_A_DAY=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4346
https://github.com/root-project/root/pull/4346:11,deployability,build,build,11,@phsft-bot build with flags -DKEEP_PR_BUILDS_FOR_A_DAY=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4346
https://github.com/root-project/root/pull/4346:11,deployability,build,build,11,@phsft-bot build with flags -DKEEP_PR_BUILDS_FOR_A_DAY=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4346
https://github.com/root-project/root/pull/4346:11,deployability,build,build,11,@phsft-bot build with flags -DKEEP_PR_BUILDS_FOR_A_DAY=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4346
https://github.com/root-project/root/pull/4346:11,deployability,build,build,11,@phsft-bot build with flags -DKEEP_PR_BUILDS_FOR_A_DAY=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4346
https://github.com/root-project/root/pull/4346:11,deployability,build,build,11,@phsft-bot build with flags -DKEEP_PR_BUILDS_FOR_A_DAY=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4346
https://github.com/root-project/root/pull/4346:11,deployability,build,build,11,@phsft-bot build with flags -DKEEP_PR_BUILDS_FOR_A_DAY=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4346
https://github.com/root-project/root/pull/4346:11,deployability,build,build,11,@phsft-bot build only on ROOT-ubuntu16/rtcxxmod with flags -DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug -DKEEP_PR_BUILDS_FOR_A_DAY=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4346
https://github.com/root-project/root/pull/4346:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu16/rtcxxmod with flags -DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug -DKEEP_PR_BUILDS_FOR_A_DAY=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4346
https://github.com/root-project/root/pull/4346:11,deployability,build,build,11,"@phsft-bot build on ROOT-performance-centos7-multicore/default, ROOT-fedora27/noimt, ROOT-fedora29/python3, ROOT-ubuntu16/rtcxxmod, mac1014/cxx17, windows10/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4346
https://github.com/root-project/root/pull/4346:25,performance,perform,performance-,25,"@phsft-bot build on ROOT-performance-centos7-multicore/default, ROOT-fedora27/noimt, ROOT-fedora29/python3, ROOT-ubuntu16/rtcxxmod, mac1014/cxx17, windows10/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4346
https://github.com/root-project/root/pull/4346:25,usability,perform,performance-,25,"@phsft-bot build on ROOT-performance-centos7-multicore/default, ROOT-fedora27/noimt, ROOT-fedora29/python3, ROOT-ubuntu16/rtcxxmod, mac1014/cxx17, windows10/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4346
https://github.com/root-project/root/pull/4346:11,deployability,build,build,11,@phsft-bot build only on ROOT-ubuntu16/rtcxxmod with flags -DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug -DKEEP_PR_BUILDS_FOR_A_DAY=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4346
https://github.com/root-project/root/pull/4346:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4346
https://github.com/root-project/root/pull/4346:11,deployability,build,build,11,@phsft-bot build just on windows10/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4346
https://github.com/root-project/root/pull/4349:75,availability,failur,failures,75,This change deals with argument parsing and could not have caused the test failures in the reports.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4349
https://github.com/root-project/root/pull/4349:75,deployability,fail,failures,75,This change deals with argument parsing and could not have caused the test failures in the reports.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4349
https://github.com/root-project/root/pull/4349:75,performance,failur,failures,75,This change deals with argument parsing and could not have caused the test failures in the reports.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4349
https://github.com/root-project/root/pull/4349:75,reliability,fail,failures,75,This change deals with argument parsing and could not have caused the test failures in the reports.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4349
https://github.com/root-project/root/pull/4349:70,safety,test,test,70,This change deals with argument parsing and could not have caused the test failures in the reports.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4349
https://github.com/root-project/root/pull/4349:70,testability,test,test,70,This change deals with argument parsing and could not have caused the test failures in the reports.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4349
https://github.com/root-project/root/pull/4352:47,interoperability,semant,semantics,47,"To summarize our discussion:. 1) We want value semantics:. ```. auto attrs = line.GetAttrs();. attrs.SetWidth(12);. otherLine.SetAttrs(attrs);. yetAnotherLine.SetAttrs(attrs);. ```. i.e. copying the attrs must allow changing the copy and assigning it to a new object. 1) We want reference semantics for getters:. ```. line.GetAttrs().SetWidth(12);. ```. should behave as expected, and the return type of `GetAttrs()` should be `const RAttrLine &` to signal this to users. A possible implementation will copy the values *that have been set* into a separate storage, along with the style `weak_ptr`. 1) The complete and authoritative list of attribute values need not be known by the CSS but must be known by the C++ side. 1) A C++ function will return a ""completely filled"" attribute, providing the complete set of value names. 1) The default will use a function with a static variable which is `=` initialized to the defaults (`AttrType sVar = ...`) such that the initialization is thread-guarded. (I.e. not use `if (sVar.empty())`). 1) `RColor` should be split in RGB and *optional* alpha: if alpha wasn't set it should be inheritable, i.e. the attribute needs to know whether alpha was set by the user or not. Did I get this right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:289,interoperability,semant,semantics,289,"To summarize our discussion:. 1) We want value semantics:. ```. auto attrs = line.GetAttrs();. attrs.SetWidth(12);. otherLine.SetAttrs(attrs);. yetAnotherLine.SetAttrs(attrs);. ```. i.e. copying the attrs must allow changing the copy and assigning it to a new object. 1) We want reference semantics for getters:. ```. line.GetAttrs().SetWidth(12);. ```. should behave as expected, and the return type of `GetAttrs()` should be `const RAttrLine &` to signal this to users. A possible implementation will copy the values *that have been set* into a separate storage, along with the style `weak_ptr`. 1) The complete and authoritative list of attribute values need not be known by the CSS but must be known by the C++ side. 1) A C++ function will return a ""completely filled"" attribute, providing the complete set of value names. 1) The default will use a function with a static variable which is `=` initialized to the defaults (`AttrType sVar = ...`) such that the initialization is thread-guarded. (I.e. not use `if (sVar.empty())`). 1) `RColor` should be split in RGB and *optional* alpha: if alpha wasn't set it should be inheritable, i.e. the attribute needs to know whether alpha was set by the user or not. Did I get this right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:876,modifiability,variab,variable,876,"To summarize our discussion:. 1) We want value semantics:. ```. auto attrs = line.GetAttrs();. attrs.SetWidth(12);. otherLine.SetAttrs(attrs);. yetAnotherLine.SetAttrs(attrs);. ```. i.e. copying the attrs must allow changing the copy and assigning it to a new object. 1) We want reference semantics for getters:. ```. line.GetAttrs().SetWidth(12);. ```. should behave as expected, and the return type of `GetAttrs()` should be `const RAttrLine &` to signal this to users. A possible implementation will copy the values *that have been set* into a separate storage, along with the style `weak_ptr`. 1) The complete and authoritative list of attribute values need not be known by the CSS but must be known by the C++ side. 1) A C++ function will return a ""completely filled"" attribute, providing the complete set of value names. 1) The default will use a function with a static variable which is `=` initialized to the defaults (`AttrType sVar = ...`) such that the initialization is thread-guarded. (I.e. not use `if (sVar.empty())`). 1) `RColor` should be split in RGB and *optional* alpha: if alpha wasn't set it should be inheritable, i.e. the attribute needs to know whether alpha was set by the user or not. Did I get this right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:1124,modifiability,inherit,inheritable,1124,"To summarize our discussion:. 1) We want value semantics:. ```. auto attrs = line.GetAttrs();. attrs.SetWidth(12);. otherLine.SetAttrs(attrs);. yetAnotherLine.SetAttrs(attrs);. ```. i.e. copying the attrs must allow changing the copy and assigning it to a new object. 1) We want reference semantics for getters:. ```. line.GetAttrs().SetWidth(12);. ```. should behave as expected, and the return type of `GetAttrs()` should be `const RAttrLine &` to signal this to users. A possible implementation will copy the values *that have been set* into a separate storage, along with the style `weak_ptr`. 1) The complete and authoritative list of attribute values need not be known by the CSS but must be known by the C++ side. 1) A C++ function will return a ""completely filled"" attribute, providing the complete set of value names. 1) The default will use a function with a static variable which is `=` initialized to the defaults (`AttrType sVar = ...`) such that the initialization is thread-guarded. (I.e. not use `if (sVar.empty())`). 1) `RColor` should be split in RGB and *optional* alpha: if alpha wasn't set it should be inheritable, i.e. the attribute needs to know whether alpha was set by the user or not. Did I get this right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:605,safety,compl,complete,605,"To summarize our discussion:. 1) We want value semantics:. ```. auto attrs = line.GetAttrs();. attrs.SetWidth(12);. otherLine.SetAttrs(attrs);. yetAnotherLine.SetAttrs(attrs);. ```. i.e. copying the attrs must allow changing the copy and assigning it to a new object. 1) We want reference semantics for getters:. ```. line.GetAttrs().SetWidth(12);. ```. should behave as expected, and the return type of `GetAttrs()` should be `const RAttrLine &` to signal this to users. A possible implementation will copy the values *that have been set* into a separate storage, along with the style `weak_ptr`. 1) The complete and authoritative list of attribute values need not be known by the CSS but must be known by the C++ side. 1) A C++ function will return a ""completely filled"" attribute, providing the complete set of value names. 1) The default will use a function with a static variable which is `=` initialized to the defaults (`AttrType sVar = ...`) such that the initialization is thread-guarded. (I.e. not use `if (sVar.empty())`). 1) `RColor` should be split in RGB and *optional* alpha: if alpha wasn't set it should be inheritable, i.e. the attribute needs to know whether alpha was set by the user or not. Did I get this right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:754,safety,compl,completely,754,"To summarize our discussion:. 1) We want value semantics:. ```. auto attrs = line.GetAttrs();. attrs.SetWidth(12);. otherLine.SetAttrs(attrs);. yetAnotherLine.SetAttrs(attrs);. ```. i.e. copying the attrs must allow changing the copy and assigning it to a new object. 1) We want reference semantics for getters:. ```. line.GetAttrs().SetWidth(12);. ```. should behave as expected, and the return type of `GetAttrs()` should be `const RAttrLine &` to signal this to users. A possible implementation will copy the values *that have been set* into a separate storage, along with the style `weak_ptr`. 1) The complete and authoritative list of attribute values need not be known by the CSS but must be known by the C++ side. 1) A C++ function will return a ""completely filled"" attribute, providing the complete set of value names. 1) The default will use a function with a static variable which is `=` initialized to the defaults (`AttrType sVar = ...`) such that the initialization is thread-guarded. (I.e. not use `if (sVar.empty())`). 1) `RColor` should be split in RGB and *optional* alpha: if alpha wasn't set it should be inheritable, i.e. the attribute needs to know whether alpha was set by the user or not. Did I get this right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:798,safety,compl,complete,798,"To summarize our discussion:. 1) We want value semantics:. ```. auto attrs = line.GetAttrs();. attrs.SetWidth(12);. otherLine.SetAttrs(attrs);. yetAnotherLine.SetAttrs(attrs);. ```. i.e. copying the attrs must allow changing the copy and assigning it to a new object. 1) We want reference semantics for getters:. ```. line.GetAttrs().SetWidth(12);. ```. should behave as expected, and the return type of `GetAttrs()` should be `const RAttrLine &` to signal this to users. A possible implementation will copy the values *that have been set* into a separate storage, along with the style `weak_ptr`. 1) The complete and authoritative list of attribute values need not be known by the CSS but must be known by the C++ side. 1) A C++ function will return a ""completely filled"" attribute, providing the complete set of value names. 1) The default will use a function with a static variable which is `=` initialized to the defaults (`AttrType sVar = ...`) such that the initialization is thread-guarded. (I.e. not use `if (sVar.empty())`). 1) `RColor` should be split in RGB and *optional* alpha: if alpha wasn't set it should be inheritable, i.e. the attribute needs to know whether alpha was set by the user or not. Did I get this right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:450,security,sign,signal,450,"To summarize our discussion:. 1) We want value semantics:. ```. auto attrs = line.GetAttrs();. attrs.SetWidth(12);. otherLine.SetAttrs(attrs);. yetAnotherLine.SetAttrs(attrs);. ```. i.e. copying the attrs must allow changing the copy and assigning it to a new object. 1) We want reference semantics for getters:. ```. line.GetAttrs().SetWidth(12);. ```. should behave as expected, and the return type of `GetAttrs()` should be `const RAttrLine &` to signal this to users. A possible implementation will copy the values *that have been set* into a separate storage, along with the style `weak_ptr`. 1) The complete and authoritative list of attribute values need not be known by the CSS but must be known by the C++ side. 1) A C++ function will return a ""completely filled"" attribute, providing the complete set of value names. 1) The default will use a function with a static variable which is `=` initialized to the defaults (`AttrType sVar = ...`) such that the initialization is thread-guarded. (I.e. not use `if (sVar.empty())`). 1) `RColor` should be split in RGB and *optional* alpha: if alpha wasn't set it should be inheritable, i.e. the attribute needs to know whether alpha was set by the user or not. Did I get this right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:605,security,compl,complete,605,"To summarize our discussion:. 1) We want value semantics:. ```. auto attrs = line.GetAttrs();. attrs.SetWidth(12);. otherLine.SetAttrs(attrs);. yetAnotherLine.SetAttrs(attrs);. ```. i.e. copying the attrs must allow changing the copy and assigning it to a new object. 1) We want reference semantics for getters:. ```. line.GetAttrs().SetWidth(12);. ```. should behave as expected, and the return type of `GetAttrs()` should be `const RAttrLine &` to signal this to users. A possible implementation will copy the values *that have been set* into a separate storage, along with the style `weak_ptr`. 1) The complete and authoritative list of attribute values need not be known by the CSS but must be known by the C++ side. 1) A C++ function will return a ""completely filled"" attribute, providing the complete set of value names. 1) The default will use a function with a static variable which is `=` initialized to the defaults (`AttrType sVar = ...`) such that the initialization is thread-guarded. (I.e. not use `if (sVar.empty())`). 1) `RColor` should be split in RGB and *optional* alpha: if alpha wasn't set it should be inheritable, i.e. the attribute needs to know whether alpha was set by the user or not. Did I get this right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:618,security,auth,authoritative,618,"To summarize our discussion:. 1) We want value semantics:. ```. auto attrs = line.GetAttrs();. attrs.SetWidth(12);. otherLine.SetAttrs(attrs);. yetAnotherLine.SetAttrs(attrs);. ```. i.e. copying the attrs must allow changing the copy and assigning it to a new object. 1) We want reference semantics for getters:. ```. line.GetAttrs().SetWidth(12);. ```. should behave as expected, and the return type of `GetAttrs()` should be `const RAttrLine &` to signal this to users. A possible implementation will copy the values *that have been set* into a separate storage, along with the style `weak_ptr`. 1) The complete and authoritative list of attribute values need not be known by the CSS but must be known by the C++ side. 1) A C++ function will return a ""completely filled"" attribute, providing the complete set of value names. 1) The default will use a function with a static variable which is `=` initialized to the defaults (`AttrType sVar = ...`) such that the initialization is thread-guarded. (I.e. not use `if (sVar.empty())`). 1) `RColor` should be split in RGB and *optional* alpha: if alpha wasn't set it should be inheritable, i.e. the attribute needs to know whether alpha was set by the user or not. Did I get this right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:754,security,compl,completely,754,"To summarize our discussion:. 1) We want value semantics:. ```. auto attrs = line.GetAttrs();. attrs.SetWidth(12);. otherLine.SetAttrs(attrs);. yetAnotherLine.SetAttrs(attrs);. ```. i.e. copying the attrs must allow changing the copy and assigning it to a new object. 1) We want reference semantics for getters:. ```. line.GetAttrs().SetWidth(12);. ```. should behave as expected, and the return type of `GetAttrs()` should be `const RAttrLine &` to signal this to users. A possible implementation will copy the values *that have been set* into a separate storage, along with the style `weak_ptr`. 1) The complete and authoritative list of attribute values need not be known by the CSS but must be known by the C++ side. 1) A C++ function will return a ""completely filled"" attribute, providing the complete set of value names. 1) The default will use a function with a static variable which is `=` initialized to the defaults (`AttrType sVar = ...`) such that the initialization is thread-guarded. (I.e. not use `if (sVar.empty())`). 1) `RColor` should be split in RGB and *optional* alpha: if alpha wasn't set it should be inheritable, i.e. the attribute needs to know whether alpha was set by the user or not. Did I get this right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:798,security,compl,complete,798,"To summarize our discussion:. 1) We want value semantics:. ```. auto attrs = line.GetAttrs();. attrs.SetWidth(12);. otherLine.SetAttrs(attrs);. yetAnotherLine.SetAttrs(attrs);. ```. i.e. copying the attrs must allow changing the copy and assigning it to a new object. 1) We want reference semantics for getters:. ```. line.GetAttrs().SetWidth(12);. ```. should behave as expected, and the return type of `GetAttrs()` should be `const RAttrLine &` to signal this to users. A possible implementation will copy the values *that have been set* into a separate storage, along with the style `weak_ptr`. 1) The complete and authoritative list of attribute values need not be known by the CSS but must be known by the C++ side. 1) A C++ function will return a ""completely filled"" attribute, providing the complete set of value names. 1) The default will use a function with a static variable which is `=` initialized to the defaults (`AttrType sVar = ...`) such that the initialization is thread-guarded. (I.e. not use `if (sVar.empty())`). 1) `RColor` should be split in RGB and *optional* alpha: if alpha wasn't set it should be inheritable, i.e. the attribute needs to know whether alpha was set by the user or not. Did I get this right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:465,usability,user,users,465,"To summarize our discussion:. 1) We want value semantics:. ```. auto attrs = line.GetAttrs();. attrs.SetWidth(12);. otherLine.SetAttrs(attrs);. yetAnotherLine.SetAttrs(attrs);. ```. i.e. copying the attrs must allow changing the copy and assigning it to a new object. 1) We want reference semantics for getters:. ```. line.GetAttrs().SetWidth(12);. ```. should behave as expected, and the return type of `GetAttrs()` should be `const RAttrLine &` to signal this to users. A possible implementation will copy the values *that have been set* into a separate storage, along with the style `weak_ptr`. 1) The complete and authoritative list of attribute values need not be known by the CSS but must be known by the C++ side. 1) A C++ function will return a ""completely filled"" attribute, providing the complete set of value names. 1) The default will use a function with a static variable which is `=` initialized to the defaults (`AttrType sVar = ...`) such that the initialization is thread-guarded. (I.e. not use `if (sVar.empty())`). 1) `RColor` should be split in RGB and *optional* alpha: if alpha wasn't set it should be inheritable, i.e. the attribute needs to know whether alpha was set by the user or not. Did I get this right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:1199,usability,user,user,1199,"To summarize our discussion:. 1) We want value semantics:. ```. auto attrs = line.GetAttrs();. attrs.SetWidth(12);. otherLine.SetAttrs(attrs);. yetAnotherLine.SetAttrs(attrs);. ```. i.e. copying the attrs must allow changing the copy and assigning it to a new object. 1) We want reference semantics for getters:. ```. line.GetAttrs().SetWidth(12);. ```. should behave as expected, and the return type of `GetAttrs()` should be `const RAttrLine &` to signal this to users. A possible implementation will copy the values *that have been set* into a separate storage, along with the style `weak_ptr`. 1) The complete and authoritative list of attribute values need not be known by the CSS but must be known by the C++ side. 1) A C++ function will return a ""completely filled"" attribute, providing the complete set of value names. 1) The default will use a function with a static variable which is `=` initialized to the defaults (`AttrType sVar = ...`) such that the initialization is thread-guarded. (I.e. not use `if (sVar.empty())`). 1) `RColor` should be split in RGB and *optional* alpha: if alpha wasn't set it should be inheritable, i.e. the attribute needs to know whether alpha was set by the user or not. Did I get this right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:48,availability,operat,operator,48,"I agree with value semantic. Any kind of assign operator just makes deep copy of container - making it independent from original object. We can even provide such functionality:. ```. auto attrs = line.Attrs();. attrs.SetWidth(12);. otherLine.Attrs().Set(attrs);. yetAnotherLine.Attrs().Set(attrs);. ```. With reference semantic - we need const and non-const version - returning `const RAttrLine &` and `RAttrLine &`, otherwise we cannot implement setters. All other points are OK",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:81,deployability,contain,container,81,"I agree with value semantic. Any kind of assign operator just makes deep copy of container - making it independent from original object. We can even provide such functionality:. ```. auto attrs = line.Attrs();. attrs.SetWidth(12);. otherLine.Attrs().Set(attrs);. yetAnotherLine.Attrs().Set(attrs);. ```. With reference semantic - we need const and non-const version - returning `const RAttrLine &` and `RAttrLine &`, otherwise we cannot implement setters. All other points are OK",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:358,deployability,version,version,358,"I agree with value semantic. Any kind of assign operator just makes deep copy of container - making it independent from original object. We can even provide such functionality:. ```. auto attrs = line.Attrs();. attrs.SetWidth(12);. otherLine.Attrs().Set(attrs);. yetAnotherLine.Attrs().Set(attrs);. ```. With reference semantic - we need const and non-const version - returning `const RAttrLine &` and `RAttrLine &`, otherwise we cannot implement setters. All other points are OK",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:358,integrability,version,version,358,"I agree with value semantic. Any kind of assign operator just makes deep copy of container - making it independent from original object. We can even provide such functionality:. ```. auto attrs = line.Attrs();. attrs.SetWidth(12);. otherLine.Attrs().Set(attrs);. yetAnotherLine.Attrs().Set(attrs);. ```. With reference semantic - we need const and non-const version - returning `const RAttrLine &` and `RAttrLine &`, otherwise we cannot implement setters. All other points are OK",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:19,interoperability,semant,semantic,19,"I agree with value semantic. Any kind of assign operator just makes deep copy of container - making it independent from original object. We can even provide such functionality:. ```. auto attrs = line.Attrs();. attrs.SetWidth(12);. otherLine.Attrs().Set(attrs);. yetAnotherLine.Attrs().Set(attrs);. ```. With reference semantic - we need const and non-const version - returning `const RAttrLine &` and `RAttrLine &`, otherwise we cannot implement setters. All other points are OK",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:319,interoperability,semant,semantic,319,"I agree with value semantic. Any kind of assign operator just makes deep copy of container - making it independent from original object. We can even provide such functionality:. ```. auto attrs = line.Attrs();. attrs.SetWidth(12);. otherLine.Attrs().Set(attrs);. yetAnotherLine.Attrs().Set(attrs);. ```. With reference semantic - we need const and non-const version - returning `const RAttrLine &` and `RAttrLine &`, otherwise we cannot implement setters. All other points are OK",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:358,modifiability,version,version,358,"I agree with value semantic. Any kind of assign operator just makes deep copy of container - making it independent from original object. We can even provide such functionality:. ```. auto attrs = line.Attrs();. attrs.SetWidth(12);. otherLine.Attrs().Set(attrs);. yetAnotherLine.Attrs().Set(attrs);. ```. With reference semantic - we need const and non-const version - returning `const RAttrLine &` and `RAttrLine &`, otherwise we cannot implement setters. All other points are OK",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:490,deployability,contain,container,490,"I adjust code to follow convention we agree:. ```. auto attrs = line.Attrs(); // deep copy. attrs.SetWidth(12); // modify copy . otherLine.Attrs().Copy(attrs); // copy existing values back (delete existing before) . yetAnotherLine.Attrs().Copy(attrs); // copy existing values. ```. I also prototype `RColorNew` and how it can be used inside `RAttrLineNew`. See how it is defined:. ```. class RAttrLineNew : public RAttributesVisitor {. RColorNew fColor{this}; ///<! line color, will access container from line attributes. public:. const RColorNew &Color() const { return fColor; }. RColorNew &Color() { return fColor; }. ```. One can use it with the syntax:. ```. auto col = attr.Color();. col.SetRGB(10,20,30);. attr.Color() = col;. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:407,integrability,pub,public,407,"I adjust code to follow convention we agree:. ```. auto attrs = line.Attrs(); // deep copy. attrs.SetWidth(12); // modify copy . otherLine.Attrs().Copy(attrs); // copy existing values back (delete existing before) . yetAnotherLine.Attrs().Copy(attrs); // copy existing values. ```. I also prototype `RColorNew` and how it can be used inside `RAttrLineNew`. See how it is defined:. ```. class RAttrLineNew : public RAttributesVisitor {. RColorNew fColor{this}; ///<! line color, will access container from line attributes. public:. const RColorNew &Color() const { return fColor; }. RColorNew &Color() { return fColor; }. ```. One can use it with the syntax:. ```. auto col = attr.Color();. col.SetRGB(10,20,30);. attr.Color() = col;. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:522,integrability,pub,public,522,"I adjust code to follow convention we agree:. ```. auto attrs = line.Attrs(); // deep copy. attrs.SetWidth(12); // modify copy . otherLine.Attrs().Copy(attrs); // copy existing values back (delete existing before) . yetAnotherLine.Attrs().Copy(attrs); // copy existing values. ```. I also prototype `RColorNew` and how it can be used inside `RAttrLineNew`. See how it is defined:. ```. class RAttrLineNew : public RAttributesVisitor {. RColorNew fColor{this}; ///<! line color, will access container from line attributes. public:. const RColorNew &Color() const { return fColor; }. RColorNew &Color() { return fColor; }. ```. One can use it with the syntax:. ```. auto col = attr.Color();. col.SetRGB(10,20,30);. attr.Color() = col;. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:115,security,modif,modify,115,"I adjust code to follow convention we agree:. ```. auto attrs = line.Attrs(); // deep copy. attrs.SetWidth(12); // modify copy . otherLine.Attrs().Copy(attrs); // copy existing values back (delete existing before) . yetAnotherLine.Attrs().Copy(attrs); // copy existing values. ```. I also prototype `RColorNew` and how it can be used inside `RAttrLineNew`. See how it is defined:. ```. class RAttrLineNew : public RAttributesVisitor {. RColorNew fColor{this}; ///<! line color, will access container from line attributes. public:. const RColorNew &Color() const { return fColor; }. RColorNew &Color() { return fColor; }. ```. One can use it with the syntax:. ```. auto col = attr.Color();. col.SetRGB(10,20,30);. attr.Color() = col;. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:483,security,access,access,483,"I adjust code to follow convention we agree:. ```. auto attrs = line.Attrs(); // deep copy. attrs.SetWidth(12); // modify copy . otherLine.Attrs().Copy(attrs); // copy existing values back (delete existing before) . yetAnotherLine.Attrs().Copy(attrs); // copy existing values. ```. I also prototype `RColorNew` and how it can be used inside `RAttrLineNew`. See how it is defined:. ```. class RAttrLineNew : public RAttributesVisitor {. RColorNew fColor{this}; ///<! line color, will access container from line attributes. public:. const RColorNew &Color() const { return fColor; }. RColorNew &Color() { return fColor; }. ```. One can use it with the syntax:. ```. auto col = attr.Color();. col.SetRGB(10,20,30);. attr.Color() = col;. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:289,usability,prototyp,prototype,289,"I adjust code to follow convention we agree:. ```. auto attrs = line.Attrs(); // deep copy. attrs.SetWidth(12); // modify copy . otherLine.Attrs().Copy(attrs); // copy existing values back (delete existing before) . yetAnotherLine.Attrs().Copy(attrs); // copy existing values. ```. I also prototype `RColorNew` and how it can be used inside `RAttrLineNew`. See how it is defined:. ```. class RAttrLineNew : public RAttributesVisitor {. RColorNew fColor{this}; ///<! line color, will access container from line attributes. public:. const RColorNew &Color() const { return fColor; }. RColorNew &Color() { return fColor; }. ```. One can use it with the syntax:. ```. auto col = attr.Color();. col.SetRGB(10,20,30);. attr.Color() = col;. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:92,energy efficiency,draw,drawables,92,Main changes are done - I fully remove RDrawingOpts and simplify class organizations around drawables. I need some more days to make I/O for RCanvas . I introduced RIOShared class for that. It is wrapper for shared_ptr. There is method with collects all these objects from RCanvas and one could reassign shared_ptr after reading of RCanvas. This is the idea. Half of tutorials already works,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:196,integrability,wrap,wrapper,196,Main changes are done - I fully remove RDrawingOpts and simplify class organizations around drawables. I need some more days to make I/O for RCanvas . I introduced RIOShared class for that. It is wrapper for shared_ptr. There is method with collects all these objects from RCanvas and one could reassign shared_ptr after reading of RCanvas. This is the idea. Half of tutorials already works,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:196,interoperability,wrapper,wrapper,196,Main changes are done - I fully remove RDrawingOpts and simplify class organizations around drawables. I need some more days to make I/O for RCanvas . I introduced RIOShared class for that. It is wrapper for shared_ptr. There is method with collects all these objects from RCanvas and one could reassign shared_ptr after reading of RCanvas. This is the idea. Half of tutorials already works,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:133,performance,I/O,I/O,133,Main changes are done - I fully remove RDrawingOpts and simplify class organizations around drawables. I need some more days to make I/O for RCanvas . I introduced RIOShared class for that. It is wrapper for shared_ptr. There is method with collects all these objects from RCanvas and one could reassign shared_ptr after reading of RCanvas. This is the idea. Half of tutorials already works,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:141,reliability,RCa,RCanvas,141,Main changes are done - I fully remove RDrawingOpts and simplify class organizations around drawables. I need some more days to make I/O for RCanvas . I introduced RIOShared class for that. It is wrapper for shared_ptr. There is method with collects all these objects from RCanvas and one could reassign shared_ptr after reading of RCanvas. This is the idea. Half of tutorials already works,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:273,reliability,RCa,RCanvas,273,Main changes are done - I fully remove RDrawingOpts and simplify class organizations around drawables. I need some more days to make I/O for RCanvas . I introduced RIOShared class for that. It is wrapper for shared_ptr. There is method with collects all these objects from RCanvas and one could reassign shared_ptr after reading of RCanvas. This is the idea. Half of tutorials already works,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:332,reliability,RCa,RCanvas,332,Main changes are done - I fully remove RDrawingOpts and simplify class organizations around drawables. I need some more days to make I/O for RCanvas . I introduced RIOShared class for that. It is wrapper for shared_ptr. There is method with collects all these objects from RCanvas and one could reassign shared_ptr after reading of RCanvas. This is the idea. Half of tutorials already works,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:56,testability,simpl,simplify,56,Main changes are done - I fully remove RDrawingOpts and simplify class organizations around drawables. I need some more days to make I/O for RCanvas . I introduced RIOShared class for that. It is wrapper for shared_ptr. There is method with collects all these objects from RCanvas and one could reassign shared_ptr after reading of RCanvas. This is the idea. Half of tutorials already works,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:56,usability,simpl,simplify,56,Main changes are done - I fully remove RDrawingOpts and simplify class organizations around drawables. I need some more days to make I/O for RCanvas . I introduced RIOShared class for that. It is wrapper for shared_ptr. There is method with collects all these objects from RCanvas and one could reassign shared_ptr after reading of RCanvas. This is the idea. Half of tutorials already works,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:20,availability,state,state,20,This is not a final state - many other changes are coming...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:20,integrability,state,state,20,This is not a final state - many other changes are coming...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4354:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4354
https://github.com/root-project/root/pull/4354:4,availability,failur,failures,4,The failures seem to be unrelated. They are in coming from a previous changes to span.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4354
https://github.com/root-project/root/pull/4354:4,deployability,fail,failures,4,The failures seem to be unrelated. They are in coming from a previous changes to span.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4354
https://github.com/root-project/root/pull/4354:4,performance,failur,failures,4,The failures seem to be unrelated. They are in coming from a previous changes to span.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4354
https://github.com/root-project/root/pull/4354:4,reliability,fail,failures,4,The failures seem to be unrelated. They are in coming from a previous changes to span.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4354
https://github.com/root-project/root/pull/4355:11,deployability,build,build,11,@phsft-bot build just on ROOT-performance-centos7-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:30,performance,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:30,usability,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:22,deployability,build,build,22,"Using highly parallel build as sentinel, once that passes, I'll run a full build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:75,deployability,build,build,75,"Using highly parallel build as sentinel, once that passes, I'll run a full build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:13,performance,parallel,parallel,13,"Using highly parallel build as sentinel, once that passes, I'll run a full build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4356:147,availability,error,errors,147,"Thanks, Vassil, I think this was the right way forward. Once people remove CXXFLAGS from their rootcling calls, then we can turn the warnings into errors. Cheers,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4356
https://github.com/root-project/root/pull/4356:147,performance,error,errors,147,"Thanks, Vassil, I think this was the right way forward. Once people remove CXXFLAGS from their rootcling calls, then we can turn the warnings into errors. Cheers,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4356
https://github.com/root-project/root/pull/4356:147,safety,error,errors,147,"Thanks, Vassil, I think this was the right way forward. Once people remove CXXFLAGS from their rootcling calls, then we can turn the warnings into errors. Cheers,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4356
https://github.com/root-project/root/pull/4356:147,usability,error,errors,147,"Thanks, Vassil, I think this was the right way forward. Once people remove CXXFLAGS from their rootcling calls, then we can turn the warnings into errors. Cheers,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4356
https://github.com/root-project/root/pull/4358:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4358
https://github.com/root-project/root/pull/4358:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4358
https://github.com/root-project/root/pull/4358:4,availability,error,error,4,The error are pre-existing (the v7 macos error have been fixed by another PR).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4358
https://github.com/root-project/root/pull/4358:41,availability,error,error,41,The error are pre-existing (the v7 macos error have been fixed by another PR).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4358
https://github.com/root-project/root/pull/4358:4,performance,error,error,4,The error are pre-existing (the v7 macos error have been fixed by another PR).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4358
https://github.com/root-project/root/pull/4358:41,performance,error,error,41,The error are pre-existing (the v7 macos error have been fixed by another PR).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4358
https://github.com/root-project/root/pull/4358:4,safety,error,error,4,The error are pre-existing (the v7 macos error have been fixed by another PR).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4358
https://github.com/root-project/root/pull/4358:41,safety,error,error,41,The error are pre-existing (the v7 macos error have been fixed by another PR).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4358
https://github.com/root-project/root/pull/4358:4,usability,error,error,4,The error are pre-existing (the v7 macos error have been fixed by another PR).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4358
https://github.com/root-project/root/pull/4358:41,usability,error,error,41,The error are pre-existing (the v7 macos error have been fixed by another PR).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4358
https://github.com/root-project/root/pull/4360:20,availability,failur,failure,20,The modules related failure is not caused by this pr.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4360
https://github.com/root-project/root/pull/4360:4,deployability,modul,modules,4,The modules related failure is not caused by this pr.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4360
https://github.com/root-project/root/pull/4360:20,deployability,fail,failure,20,The modules related failure is not caused by this pr.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4360
https://github.com/root-project/root/pull/4360:4,modifiability,modul,modules,4,The modules related failure is not caused by this pr.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4360
https://github.com/root-project/root/pull/4360:20,performance,failur,failure,20,The modules related failure is not caused by this pr.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4360
https://github.com/root-project/root/pull/4360:20,reliability,fail,failure,20,The modules related failure is not caused by this pr.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4360
https://github.com/root-project/root/pull/4360:4,safety,modul,modules,4,The modules related failure is not caused by this pr.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4360
https://github.com/root-project/root/pull/4360:99,deployability,releas,release,99,When did we visibly (eg through a warning message) deprecate `-c`? We need at least one production release where this was deprecated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4360
https://github.com/root-project/root/pull/4360:42,integrability,messag,message,42,When did we visibly (eg through a warning message) deprecate `-c`? We need at least one production release where this was deprecated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4360
https://github.com/root-project/root/pull/4360:42,interoperability,messag,message,42,When did we visibly (eg through a warning message) deprecate `-c`? We need at least one production release where this was deprecated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4360
https://github.com/root-project/root/pull/4360:105,deployability,continu,continues,105,"I misunderstood the intent: you did not remove the previously deprecated option - it is still there, and continues to print a warning. You simply don't pass it anymore in one of the invocations. Sorry for the noise!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4360
https://github.com/root-project/root/pull/4360:139,testability,simpl,simply,139,"I misunderstood the intent: you did not remove the previously deprecated option - it is still there, and continues to print a warning. You simply don't pass it anymore in one of the invocations. Sorry for the noise!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4360
https://github.com/root-project/root/pull/4360:139,usability,simpl,simply,139,"I misunderstood the intent: you did not remove the previously deprecated option - it is still there, and continues to print a warning. You simply don't pass it anymore in one of the invocations. Sorry for the noise!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4360
https://github.com/root-project/root/pull/4361:130,usability,close,close,130,"@pcanal . Are we agree that this functionality has to be solved on other level by introducing write rules in LinkDef? Then I will close this PR. Actually, for problem I have I will try to use custom streamer solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4361
https://github.com/root-project/root/pull/4361:192,usability,custom,custom,192,"@pcanal . Are we agree that this functionality has to be solved on other level by introducing write rules in LinkDef? Then I will close this PR. Actually, for problem I have I will try to use custom streamer solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4361
https://github.com/root-project/root/pull/4363:11,deployability,build,build,11,"@phsft-bot build with flags -Droot7=ON -DCMAKE_CXX_STANDARD=""14""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4363
https://github.com/root-project/root/pull/4363:11,deployability,build,build,11,@phsft-bot build with flags -Droot7=ON -DCMAKE_CXX_STANDARD=14,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4363
https://github.com/root-project/root/pull/4364:111,deployability,patch,patches,111,https://github.com/root-project/root/commit/8870ef500b270d95c12952e4d16a8044ed1a0c89 also merged into v6-18-00-patches.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4364
https://github.com/root-project/root/pull/4364:111,safety,patch,patches,111,https://github.com/root-project/root/commit/8870ef500b270d95c12952e4d16a8044ed1a0c89 also merged into v6-18-00-patches.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4364
https://github.com/root-project/root/pull/4364:111,security,patch,patches,111,https://github.com/root-project/root/commit/8870ef500b270d95c12952e4d16a8044ed1a0c89 also merged into v6-18-00-patches.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4364
https://github.com/root-project/root/pull/4365:5,availability,failur,failure,5,Test failure is unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4365
https://github.com/root-project/root/pull/4365:5,deployability,fail,failure,5,Test failure is unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4365
https://github.com/root-project/root/pull/4365:5,performance,failur,failure,5,Test failure is unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4365
https://github.com/root-project/root/pull/4365:5,reliability,fail,failure,5,Test failure is unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4365
https://github.com/root-project/root/pull/4365:0,safety,Test,Test,0,Test failure is unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4365
https://github.com/root-project/root/pull/4365:0,testability,Test,Test,0,Test failure is unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4365
https://github.com/root-project/root/pull/4369:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4369
https://github.com/root-project/root/pull/4371:0,availability,failur,failure,0,failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4371
https://github.com/root-project/root/pull/4371:0,deployability,fail,failure,0,failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4371
https://github.com/root-project/root/pull/4371:0,performance,failur,failure,0,failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4371
https://github.com/root-project/root/pull/4371:0,reliability,fail,failure,0,failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4371
https://github.com/root-project/root/pull/4372:5,availability,failur,failure,5,Test failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4372
https://github.com/root-project/root/pull/4372:5,deployability,fail,failure,5,Test failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4372
https://github.com/root-project/root/pull/4372:5,performance,failur,failure,5,Test failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4372
https://github.com/root-project/root/pull/4372:5,reliability,fail,failure,5,Test failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4372
https://github.com/root-project/root/pull/4372:0,safety,Test,Test,0,Test failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4372
https://github.com/root-project/root/pull/4372:0,testability,Test,Test,0,Test failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4372
https://github.com/root-project/root/pull/4375:30,deployability,updat,updated,30,The commit history need to be updated to remove the merge commit. (and replace them with rebasing only upstream),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:30,safety,updat,updated,30,The commit history need to be updated to remove the merge commit. (and replace them with rebasing only upstream),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:30,security,updat,updated,30,The commit history need to be updated to remove the merge commit. (and replace them with rebasing only upstream),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:67,safety,avoid,avoid,67,"It would be better, if you rename TClientInfo -> TMPIClientInfo to avoid confusion",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:87,deployability,instal,installed,87,"@pcanal As I can see - TMPIFile disable by default. To compile it, you should have MPI installed on the system and use ""-Dmpi=ON"" compilation flag",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On -Dmpi=ON -Dfail-on-missing=ON -Dminuit2_mpi=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:32,deployability,instal,install,32,@PointKernel We do not have mpi install on any of the build node. What needs to be installed (package name I guess)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:54,deployability,build,build,54,@PointKernel We do not have mpi install on any of the build node. What needs to be installed (package name I guess)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:83,deployability,instal,installed,83,@PointKernel We do not have mpi install on any of the build node. What needs to be installed (package name I guess)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:94,modifiability,pac,package,94,@PointKernel We do not have mpi install on any of the build node. What needs to be installed (package name I guess)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:21,deployability,build,building,21,We now have one node building with mpi on,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:23,interoperability,format,formatting,23,"Please squash all code formatting, cleanups, and bug fixes into the commits that introduce the changes being fixed later. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:11,deployability,build,build,11,@phsft-bot build. checking if any bot had mpi on by default.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:70,deployability,instal,installed,70,still no MPI by default ... let's check if some node have the library installed. @phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On -Dmpi=ON -Dfail-on-missing=ON -Dminuit2_mpi=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:92,deployability,build,build,92,still no MPI by default ... let's check if some node have the library installed. @phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On -Dmpi=ON -Dfail-on-missing=ON -Dminuit2_mpi=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On -Dmpi=ON -Dfail-on-missing=ON -Dminuit2_mpi=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora29/python3 with flags -DCTEST_TEST_EXCLUDE_NONE=On -Dmpi=ON -Dfail-on-missing=ON -Dminuit2_mpi=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora29/python3 with flags -DCTEST_TEST_EXCLUDE_NONE=On -Dmpi=ON -Dfail-on-missing=ON -Dminuit2_mpi=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora29/python3 with flags -DCTEST_TEST_EXCLUDE_NONE=On -Dmpi=ON -Dfail-on-missing=ON -Dminuit2_mpi=ON -DCMAKE_PREFIX_PATH=/usr/lib64/mpich,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora29/python3 with flags -DCTEST_TEST_EXCLUDE_NONE=On -Dmpi=ON -Dfail-on-missing=ON -Dminuit2_mpi=ON -DCMAKE_PREFIX_PATH=/usr/lib64/mpich/lib/CMake/MPI,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora29/python3 with flags -DCMAKE_PREFIX_PATH=/usr/lib64/mpich/lib/CMake/MPI -DCTEST_TEST_EXCLUDE_NONE=On -Dmpi=ON -Dfail-on-missing=ON -Dminuit2_mpi=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora29/python3 -Dmpi=ON -Dfail-on-missing=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora29/python3 with flags -Dmpi=ON -Dfail-on-missing=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:128,deployability,updat,update,128,"> we still need that line for the node that do not have MPI enabled, dont't we? yes sir, it's not finished yet. I still need to update several CMake files in both root and roottest. Will let you know when it's ready.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:128,safety,updat,update,128,"> we still need that line for the node that do not have MPI enabled, dont't we? yes sir, it's not finished yet. I still need to update several CMake files in both root and roottest. Will let you know when it's ready.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:128,security,updat,update,128,"> we still need that line for the node that do not have MPI enabled, dont't we? yes sir, it's not finished yet. I still need to update several CMake files in both root and roottest. Will let you know when it's ready.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora29/python3 with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora29/python3 with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4375:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora29/python3 with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4375
https://github.com/root-project/root/pull/4376:11,deployability,build,build,11,"@phsft-bot build just on mac1014/cxx17, windows10/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4380:74,interoperability,platform,platform,74,"@Axel-Naumann . Please merge it. And again - we need at least one jenkins platform where root7 are enabled. For instance, mac",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4380
https://github.com/root-project/root/pull/4380:109,availability,error,error,109,> We have root7 enabled on mac1014/cxx17. What make you think we don't? But how it not recognize such simple error?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4380
https://github.com/root-project/root/pull/4380:109,performance,error,error,109,> We have root7 enabled on mac1014/cxx17. What make you think we don't? But how it not recognize such simple error?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4380
https://github.com/root-project/root/pull/4380:109,safety,error,error,109,> We have root7 enabled on mac1014/cxx17. What make you think we don't? But how it not recognize such simple error?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4380
https://github.com/root-project/root/pull/4380:102,testability,simpl,simple,102,> We have root7 enabled on mac1014/cxx17. What make you think we don't? But how it not recognize such simple error?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4380
https://github.com/root-project/root/pull/4380:102,usability,simpl,simple,102,> We have root7 enabled on mac1014/cxx17. What make you think we don't? But how it not recognize such simple error?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4380
https://github.com/root-project/root/pull/4380:109,usability,error,error,109,> We have root7 enabled on mac1014/cxx17. What make you think we don't? But how it not recognize such simple error?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4380
https://github.com/root-project/root/pull/4380:39,availability,error,error,39,> But how it not recognize such simple error? Likely because the includes happen to be ordered such that `vector` etc are included before that header gets included.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4380
https://github.com/root-project/root/pull/4380:39,performance,error,error,39,> But how it not recognize such simple error? Likely because the includes happen to be ordered such that `vector` etc are included before that header gets included.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4380
https://github.com/root-project/root/pull/4380:39,safety,error,error,39,> But how it not recognize such simple error? Likely because the includes happen to be ordered such that `vector` etc are included before that header gets included.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4380
https://github.com/root-project/root/pull/4380:32,testability,simpl,simple,32,> But how it not recognize such simple error? Likely because the includes happen to be ordered such that `vector` etc are included before that header gets included.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4380
https://github.com/root-project/root/pull/4380:32,usability,simpl,simple,32,> But how it not recognize such simple error? Likely because the includes happen to be ordered such that `vector` etc are included before that header gets included.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4380
https://github.com/root-project/root/pull/4380:39,usability,error,error,39,> But how it not recognize such simple error? Likely because the includes happen to be ordered such that `vector` etc are included before that header gets included.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4380
https://github.com/root-project/root/pull/4381:11,deployability,build,build,11,@phsft-bot build just on on mac1014/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:11,deployability,build,build,11,@phsft-bot build just on mac1014/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4385:11,deployability,build,build,11,@phsft-bot build just on windows10/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4385
https://github.com/root-project/root/pull/4385:37,deployability,fail,fail,37,There is actually no way for this to fail on windows because it is a cxxmodules-related change and we do not support that on windows. I am merging this now while the build is not yet finished to catch the nightlies.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4385
https://github.com/root-project/root/pull/4385:166,deployability,build,build,166,There is actually no way for this to fail on windows because it is a cxxmodules-related change and we do not support that on windows. I am merging this now while the build is not yet finished to catch the nightlies.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4385
https://github.com/root-project/root/pull/4385:37,reliability,fail,fail,37,There is actually no way for this to fail on windows because it is a cxxmodules-related change and we do not support that on windows. I am merging this now while the build is not yet finished to catch the nightlies.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4385
https://github.com/root-project/root/pull/4385:109,usability,support,support,109,There is actually no way for this to fail on windows because it is a cxxmodules-related change and we do not support that on windows. I am merging this now while the build is not yet finished to catch the nightlies.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4385
https://github.com/root-project/root/pull/4386:5,availability,failur,failure,5,Test failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4386:5,deployability,fail,failure,5,Test failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4386:5,performance,failur,failure,5,Test failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4386:5,reliability,fail,failure,5,Test failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4386:0,safety,Test,Test,0,Test failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4386:0,testability,Test,Test,0,Test failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4388:0,availability,Failur,Failure,0,Failure on windows has nothing to do with submitted code,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4388
https://github.com/root-project/root/pull/4388:0,deployability,Fail,Failure,0,Failure on windows has nothing to do with submitted code,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4388
https://github.com/root-project/root/pull/4388:42,integrability,sub,submitted,42,Failure on windows has nothing to do with submitted code,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4388
https://github.com/root-project/root/pull/4388:0,performance,Failur,Failure,0,Failure on windows has nothing to do with submitted code,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4388
https://github.com/root-project/root/pull/4388:0,reliability,Fail,Failure,0,Failure on windows has nothing to do with submitted code,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4388
https://github.com/root-project/root/pull/4389:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4395:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:11,deployability,build,build,11,@phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug -DKEEP_PR_BUILDS_FOR_A_DAY=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:30,performance,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug -DKEEP_PR_BUILDS_FOR_A_DAY=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:30,usability,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug -DKEEP_PR_BUILDS_FOR_A_DAY=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:11,deployability,build,build,11,@phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DCMAKE_BUILD_TYPE=Debug -DKEEP_PR_BUILDS_FOR_A_DAY=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:30,performance,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DCMAKE_BUILD_TYPE=Debug -DKEEP_PR_BUILDS_FOR_A_DAY=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:30,usability,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DCMAKE_BUILD_TYPE=Debug -DKEEP_PR_BUILDS_FOR_A_DAY=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:11,deployability,build,build,11,@phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DKEEP_PR_BUILDS_FOR_A_DAY=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:30,performance,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DKEEP_PR_BUILDS_FOR_A_DAY=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:30,usability,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DKEEP_PR_BUILDS_FOR_A_DAY=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:11,deployability,build,build,11,@phsft-bot build just on ROOT-performance-centos7-multicore/default with flags,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:30,performance,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default with flags,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:30,usability,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default with flags,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:11,deployability,build,build,11,"@phsft-bot build on ROOT-performance-centos7-multicore/default, ROOT-fedora27/noimt, ROOT-fedora29/python3, ROOT-ubuntu16/rtcxxmod, mac1014/cxx17, windows10/default with flags -DCTEST_TEST_EXCLUDE_NONE=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:25,performance,perform,performance-,25,"@phsft-bot build on ROOT-performance-centos7-multicore/default, ROOT-fedora27/noimt, ROOT-fedora29/python3, ROOT-ubuntu16/rtcxxmod, mac1014/cxx17, windows10/default with flags -DCTEST_TEST_EXCLUDE_NONE=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:25,usability,perform,performance-,25,"@phsft-bot build on ROOT-performance-centos7-multicore/default, ROOT-fedora27/noimt, ROOT-fedora29/python3, ROOT-ubuntu16/rtcxxmod, mac1014/cxx17, windows10/default with flags -DCTEST_TEST_EXCLUDE_NONE=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4396:11,deployability,build,build,11,@phsft-bot build just on windows10/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4396
https://github.com/root-project/root/pull/4399:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4399
https://github.com/root-project/root/pull/4399:28,availability,failur,failure,28,The ROOT-ubuntu16/rtcxxmod. failure is due to 'stale' dependencies in the build system (the file has been removed from the repository).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4399
https://github.com/root-project/root/pull/4399:28,deployability,fail,failure,28,The ROOT-ubuntu16/rtcxxmod. failure is due to 'stale' dependencies in the build system (the file has been removed from the repository).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4399
https://github.com/root-project/root/pull/4399:54,deployability,depend,dependencies,54,The ROOT-ubuntu16/rtcxxmod. failure is due to 'stale' dependencies in the build system (the file has been removed from the repository).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4399
https://github.com/root-project/root/pull/4399:74,deployability,build,build,74,The ROOT-ubuntu16/rtcxxmod. failure is due to 'stale' dependencies in the build system (the file has been removed from the repository).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4399
https://github.com/root-project/root/pull/4399:54,integrability,depend,dependencies,54,The ROOT-ubuntu16/rtcxxmod. failure is due to 'stale' dependencies in the build system (the file has been removed from the repository).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4399
https://github.com/root-project/root/pull/4399:123,integrability,repositor,repository,123,The ROOT-ubuntu16/rtcxxmod. failure is due to 'stale' dependencies in the build system (the file has been removed from the repository).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4399
https://github.com/root-project/root/pull/4399:123,interoperability,repositor,repository,123,The ROOT-ubuntu16/rtcxxmod. failure is due to 'stale' dependencies in the build system (the file has been removed from the repository).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4399
https://github.com/root-project/root/pull/4399:54,modifiability,depend,dependencies,54,The ROOT-ubuntu16/rtcxxmod. failure is due to 'stale' dependencies in the build system (the file has been removed from the repository).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4399
https://github.com/root-project/root/pull/4399:28,performance,failur,failure,28,The ROOT-ubuntu16/rtcxxmod. failure is due to 'stale' dependencies in the build system (the file has been removed from the repository).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4399
https://github.com/root-project/root/pull/4399:28,reliability,fail,failure,28,The ROOT-ubuntu16/rtcxxmod. failure is due to 'stale' dependencies in the build system (the file has been removed from the repository).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4399
https://github.com/root-project/root/pull/4399:54,safety,depend,dependencies,54,The ROOT-ubuntu16/rtcxxmod. failure is due to 'stale' dependencies in the build system (the file has been removed from the repository).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4399
https://github.com/root-project/root/pull/4399:54,testability,depend,dependencies,54,The ROOT-ubuntu16/rtcxxmod. failure is due to 'stale' dependencies in the build system (the file has been removed from the repository).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4399
https://github.com/root-project/root/pull/4401:11,deployability,build,build,11,@phsft-bot build with `-Dpyroot_experimental=ON`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4401
https://github.com/root-project/root/pull/4401:11,deployability,build,build,11,@phsft-bot build with `-Dpyroot_experimental=ON`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4401
https://github.com/root-project/root/pull/4401:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4401
https://github.com/root-project/root/pull/4401:11,deployability,build,build,11,@phsft-bot build with `-Dpyroot_experimental=ON`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4401
https://github.com/root-project/root/pull/4402:11,deployability,build,build,11,@phsft-bot build only on ROOT-ubuntu18.04-i386/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4402
https://github.com/root-project/root/pull/4402:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu18.04-i386/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4402
https://github.com/root-project/root/pull/4403:105,deployability,version,version,105,@couet could you have a look on this pull request. This would be a nice feature to have in the next ROOT version.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4403
https://github.com/root-project/root/pull/4403:105,integrability,version,version,105,@couet could you have a look on this pull request. This would be a nice feature to have in the next ROOT version.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4403
https://github.com/root-project/root/pull/4403:105,modifiability,version,version,105,@couet could you have a look on this pull request. This would be a nice feature to have in the next ROOT version.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4403
https://github.com/root-project/root/pull/4403:37,safety,review,reviewers,37,Sorry I missed it as I was no in the reviewers. Looking at it now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4403
https://github.com/root-project/root/pull/4403:37,testability,review,reviewers,37,Sorry I missed it as I was no in the reviewers. Looking at it now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4403
https://github.com/root-project/root/pull/4405:4,availability,failur,failures,4,"The failures seem to be in davix, and not related to vetoing the RMVA module.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4405
https://github.com/root-project/root/pull/4405:4,deployability,fail,failures,4,"The failures seem to be in davix, and not related to vetoing the RMVA module.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4405
https://github.com/root-project/root/pull/4405:70,deployability,modul,module,70,"The failures seem to be in davix, and not related to vetoing the RMVA module.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4405
https://github.com/root-project/root/pull/4405:70,modifiability,modul,module,70,"The failures seem to be in davix, and not related to vetoing the RMVA module.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4405
https://github.com/root-project/root/pull/4405:4,performance,failur,failures,4,"The failures seem to be in davix, and not related to vetoing the RMVA module.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4405
https://github.com/root-project/root/pull/4405:4,reliability,fail,failures,4,"The failures seem to be in davix, and not related to vetoing the RMVA module.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4405
https://github.com/root-project/root/pull/4405:70,safety,modul,module,70,"The failures seem to be in davix, and not related to vetoing the RMVA module.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4405
https://github.com/root-project/root/pull/4407:10,deployability,build,build,10,phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:10,deployability,build,build,10,phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4408:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4408
https://github.com/root-project/root/pull/4411:11,deployability,build,build,11,@phsft-bot build just on windows10/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4411
https://github.com/root-project/root/pull/4411:11,deployability,build,build,11,"@phsft-bot build on ROOT-performance-centos7-multicore/default, ROOT-fedora27/noimt, ROOT-fedora29/python3, ROOT-ubuntu16/rtcxxmod, mac1014/cxx17, windows10/default with flags -DCTEST_TEST_EXCLUDE_NONE=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4411
https://github.com/root-project/root/pull/4411:25,performance,perform,performance-,25,"@phsft-bot build on ROOT-performance-centos7-multicore/default, ROOT-fedora27/noimt, ROOT-fedora29/python3, ROOT-ubuntu16/rtcxxmod, mac1014/cxx17, windows10/default with flags -DCTEST_TEST_EXCLUDE_NONE=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4411
https://github.com/root-project/root/pull/4411:25,usability,perform,performance-,25,"@phsft-bot build on ROOT-performance-centos7-multicore/default, ROOT-fedora27/noimt, ROOT-fedora29/python3, ROOT-ubuntu16/rtcxxmod, mac1014/cxx17, windows10/default with flags -DCTEST_TEST_EXCLUDE_NONE=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4411
https://github.com/root-project/root/pull/4414:9,availability,failur,failure,9,The test failure is unrelated. Merging...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4414
https://github.com/root-project/root/pull/4414:9,deployability,fail,failure,9,The test failure is unrelated. Merging...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4414
https://github.com/root-project/root/pull/4414:9,performance,failur,failure,9,The test failure is unrelated. Merging...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4414
https://github.com/root-project/root/pull/4414:9,reliability,fail,failure,9,The test failure is unrelated. Merging...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4414
https://github.com/root-project/root/pull/4414:4,safety,test,test,4,The test failure is unrelated. Merging...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4414
https://github.com/root-project/root/pull/4414:4,testability,test,test,4,The test failure is unrelated. Merging...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4414
https://github.com/root-project/root/pull/4415:0,availability,failur,failure,0,failure on windows is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4415
https://github.com/root-project/root/pull/4415:0,deployability,fail,failure,0,failure on windows is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4415
https://github.com/root-project/root/pull/4415:0,performance,failur,failure,0,failure on windows is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4415
https://github.com/root-project/root/pull/4415:0,reliability,fail,failure,0,failure on windows is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4415
https://github.com/root-project/root/pull/4416:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4416
https://github.com/root-project/root/pull/4417:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4417
https://github.com/root-project/root/pull/4420:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4420
https://github.com/root-project/root/pull/4422:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4422
https://github.com/root-project/root/pull/4422:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4422
https://github.com/root-project/root/pull/4424:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4424
https://github.com/root-project/root/pull/4424:4,deployability,patch,patch,4,"The patch is fine. Maybe we should add also as a comment that PxPyPxEVector and XYZTVector are the same type, just a different name",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4424
https://github.com/root-project/root/pull/4424:4,safety,patch,patch,4,"The patch is fine. Maybe we should add also as a comment that PxPyPxEVector and XYZTVector are the same type, just a different name",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4424
https://github.com/root-project/root/pull/4424:4,security,patch,patch,4,"The patch is fine. Maybe we should add also as a comment that PxPyPxEVector and XYZTVector are the same type, just a different name",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4424
https://github.com/root-project/root/pull/4424:18,deployability,updat,update,18,Thank you for the update and for providing this patch. I will then merge it in the ROOT master,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4424
https://github.com/root-project/root/pull/4424:48,deployability,patch,patch,48,Thank you for the update and for providing this patch. I will then merge it in the ROOT master,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4424
https://github.com/root-project/root/pull/4424:18,safety,updat,update,18,Thank you for the update and for providing this patch. I will then merge it in the ROOT master,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4424
https://github.com/root-project/root/pull/4424:48,safety,patch,patch,48,Thank you for the update and for providing this patch. I will then merge it in the ROOT master,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4424
https://github.com/root-project/root/pull/4424:18,security,updat,update,18,Thank you for the update and for providing this patch. I will then merge it in the ROOT master,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4424
https://github.com/root-project/root/pull/4424:48,security,patch,patch,48,Thank you for the update and for providing this patch. I will then merge it in the ROOT master,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4424
https://github.com/root-project/root/pull/4425:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4425
https://github.com/root-project/root/pull/4425:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4425
https://github.com/root-project/root/pull/4425:4,availability,failur,failure,4,The failure are infrastructure related.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4425
https://github.com/root-project/root/pull/4425:4,deployability,fail,failure,4,The failure are infrastructure related.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4425
https://github.com/root-project/root/pull/4425:16,deployability,infrastructur,infrastructure,16,The failure are infrastructure related.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4425
https://github.com/root-project/root/pull/4425:4,performance,failur,failure,4,The failure are infrastructure related.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4425
https://github.com/root-project/root/pull/4425:4,reliability,fail,failure,4,The failure are infrastructure related.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4425
https://github.com/root-project/root/pull/4426:8,availability,failur,failure,8,windows failure is infrastructure (git lock file lingering and blocking ...),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4426
https://github.com/root-project/root/pull/4426:8,deployability,fail,failure,8,windows failure is infrastructure (git lock file lingering and blocking ...),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4426
https://github.com/root-project/root/pull/4426:19,deployability,infrastructur,infrastructure,19,windows failure is infrastructure (git lock file lingering and blocking ...),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4426
https://github.com/root-project/root/pull/4426:8,performance,failur,failure,8,windows failure is infrastructure (git lock file lingering and blocking ...),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4426
https://github.com/root-project/root/pull/4426:39,performance,lock,lock,39,windows failure is infrastructure (git lock file lingering and blocking ...),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4426
https://github.com/root-project/root/pull/4426:8,reliability,fail,failure,8,windows failure is infrastructure (git lock file lingering and blocking ...),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4426
https://github.com/root-project/root/pull/4426:39,security,lock,lock,39,windows failure is infrastructure (git lock file lingering and blocking ...),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4426
https://github.com/root-project/root/pull/4426:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4426
https://github.com/root-project/root/pull/4426:8,availability,failur,failure,8,Windows failure is a problem with the infrastructure,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4426
https://github.com/root-project/root/pull/4426:8,deployability,fail,failure,8,Windows failure is a problem with the infrastructure,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4426
https://github.com/root-project/root/pull/4426:38,deployability,infrastructur,infrastructure,38,Windows failure is a problem with the infrastructure,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4426
https://github.com/root-project/root/pull/4426:8,performance,failur,failure,8,Windows failure is a problem with the infrastructure,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4426
https://github.com/root-project/root/pull/4426:8,reliability,fail,failure,8,Windows failure is a problem with the infrastructure,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4426
https://github.com/root-project/root/pull/4427:255,deployability,Integr,Integral,255,"Hi, . I will revert the change. Actually GetBInErrorUp/Low(int bin) should be visible and not hidden for a TH2 and TH3 since they can be called with a global bin number, as you are doing in your example. However this is not the case for the other method (Integral and IntegralAndError). . I will make a new PR changing this . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:268,deployability,Integr,IntegralAndError,268,"Hi, . I will revert the change. Actually GetBInErrorUp/Low(int bin) should be visible and not hidden for a TH2 and TH3 since they can be called with a global bin number, as you are doing in your example. However this is not the case for the other method (Integral and IntegralAndError). . I will make a new PR changing this . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:255,integrability,Integr,Integral,255,"Hi, . I will revert the change. Actually GetBInErrorUp/Low(int bin) should be visible and not hidden for a TH2 and TH3 since they can be called with a global bin number, as you are doing in your example. However this is not the case for the other method (Integral and IntegralAndError). . I will make a new PR changing this . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:268,integrability,Integr,IntegralAndError,268,"Hi, . I will revert the change. Actually GetBInErrorUp/Low(int bin) should be visible and not hidden for a TH2 and TH3 since they can be called with a global bin number, as you are doing in your example. However this is not the case for the other method (Integral and IntegralAndError). . I will make a new PR changing this . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:255,interoperability,Integr,Integral,255,"Hi, . I will revert the change. Actually GetBInErrorUp/Low(int bin) should be visible and not hidden for a TH2 and TH3 since they can be called with a global bin number, as you are doing in your example. However this is not the case for the other method (Integral and IntegralAndError). . I will make a new PR changing this . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:268,interoperability,Integr,IntegralAndError,268,"Hi, . I will revert the change. Actually GetBInErrorUp/Low(int bin) should be visible and not hidden for a TH2 and TH3 since they can be called with a global bin number, as you are doing in your example. However this is not the case for the other method (Integral and IntegralAndError). . I will make a new PR changing this . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:255,modifiability,Integr,Integral,255,"Hi, . I will revert the change. Actually GetBInErrorUp/Low(int bin) should be visible and not hidden for a TH2 and TH3 since they can be called with a global bin number, as you are doing in your example. However this is not the case for the other method (Integral and IntegralAndError). . I will make a new PR changing this . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:268,modifiability,Integr,IntegralAndError,268,"Hi, . I will revert the change. Actually GetBInErrorUp/Low(int bin) should be visible and not hidden for a TH2 and TH3 since they can be called with a global bin number, as you are doing in your example. However this is not the case for the other method (Integral and IntegralAndError). . I will make a new PR changing this . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:255,reliability,Integr,Integral,255,"Hi, . I will revert the change. Actually GetBInErrorUp/Low(int bin) should be visible and not hidden for a TH2 and TH3 since they can be called with a global bin number, as you are doing in your example. However this is not the case for the other method (Integral and IntegralAndError). . I will make a new PR changing this . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:268,reliability,Integr,IntegralAndError,268,"Hi, . I will revert the change. Actually GetBInErrorUp/Low(int bin) should be visible and not hidden for a TH2 and TH3 since they can be called with a global bin number, as you are doing in your example. However this is not the case for the other method (Integral and IntegralAndError). . I will make a new PR changing this . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:255,security,Integr,Integral,255,"Hi, . I will revert the change. Actually GetBInErrorUp/Low(int bin) should be visible and not hidden for a TH2 and TH3 since they can be called with a global bin number, as you are doing in your example. However this is not the case for the other method (Integral and IntegralAndError). . I will make a new PR changing this . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:268,security,Integr,IntegralAndError,268,"Hi, . I will revert the change. Actually GetBInErrorUp/Low(int bin) should be visible and not hidden for a TH2 and TH3 since they can be called with a global bin number, as you are doing in your example. However this is not the case for the other method (Integral and IntegralAndError). . I will make a new PR changing this . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:255,testability,Integr,Integral,255,"Hi, . I will revert the change. Actually GetBInErrorUp/Low(int bin) should be visible and not hidden for a TH2 and TH3 since they can be called with a global bin number, as you are doing in your example. However this is not the case for the other method (Integral and IntegralAndError). . I will make a new PR changing this . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:268,testability,Integr,IntegralAndError,268,"Hi, . I will revert the change. Actually GetBInErrorUp/Low(int bin) should be visible and not hidden for a TH2 and TH3 since they can be called with a global bin number, as you are doing in your example. However this is not the case for the other method (Integral and IntegralAndError). . I will make a new PR changing this . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4428:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4428
https://github.com/root-project/root/pull/4428:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4428
https://github.com/root-project/root/pull/4429:48,deployability,version,version,48,Could you augment the commit to include the new version number and maybe even a link to the LZ4 release notes? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4429
https://github.com/root-project/root/pull/4429:96,deployability,releas,release,96,Could you augment the commit to include the new version number and maybe even a link to the LZ4 release notes? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4429
https://github.com/root-project/root/pull/4429:48,integrability,version,version,48,Could you augment the commit to include the new version number and maybe even a link to the LZ4 release notes? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4429
https://github.com/root-project/root/pull/4429:48,modifiability,version,version,48,Could you augment the commit to include the new version number and maybe even a link to the LZ4 release notes? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4429
https://github.com/root-project/root/pull/4429:55,availability,error,errors,55,@pcanal should I apply clang-format and fix clang-tidy errors for LZ4 codebase?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4429
https://github.com/root-project/root/pull/4429:29,interoperability,format,format,29,@pcanal should I apply clang-format and fix clang-tidy errors for LZ4 codebase?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4429
https://github.com/root-project/root/pull/4429:55,performance,error,errors,55,@pcanal should I apply clang-format and fix clang-tidy errors for LZ4 codebase?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4429
https://github.com/root-project/root/pull/4429:55,safety,error,errors,55,@pcanal should I apply clang-format and fix clang-tidy errors for LZ4 codebase?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4429
https://github.com/root-project/root/pull/4429:55,usability,error,errors,55,@pcanal should I apply clang-format and fix clang-tidy errors for LZ4 codebase?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4429
https://github.com/root-project/root/pull/4429:39,interoperability,format,format,39,"@oshadura, no, we should not use clang-format on code we do not own, otherwise it's hard to know what's different with upstream. That's valid for all builtins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4429
https://github.com/root-project/root/pull/4429:136,safety,valid,valid,136,"@oshadura, no, we should not use clang-format on code we do not own, otherwise it's hard to know what's different with upstream. That's valid for all builtins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4429
https://github.com/root-project/root/pull/4429:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4429
https://github.com/root-project/root/pull/4430:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:4,availability,failur,failure,4,The failure is independent to this PR. The test tries to open something on http and fails.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:4,deployability,fail,failure,4,The failure is independent to this PR. The test tries to open something on http and fails.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:84,deployability,fail,fails,84,The failure is independent to this PR. The test tries to open something on http and fails.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:4,performance,failur,failure,4,The failure is independent to this PR. The test tries to open something on http and fails.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:4,reliability,fail,failure,4,The failure is independent to this PR. The test tries to open something on http and fails.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:84,reliability,fail,fails,84,The failure is independent to this PR. The test tries to open something on http and fails.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:43,safety,test,test,43,The failure is independent to this PR. The test tries to open something on http and fails.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:43,testability,test,test,43,The failure is independent to this PR. The test tries to open something on http and fails.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4431:11,deployability,build,build,11,@phsft-bot build just on windows10/default with flags -Dtmva=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4431
https://github.com/root-project/root/pull/4431:11,deployability,build,build,11,@phsft-bot build just on windows10/default with flags -Dtmva=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4431
https://github.com/root-project/root/pull/4433:167,deployability,version,version,167,"@alja, you could try it for all your applications. Seems to be, it was enough to provide dummy function in our list binding. One still should be able to use older ui5 version if required",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4433
https://github.com/root-project/root/pull/4433:167,integrability,version,version,167,"@alja, you could try it for all your applications. Seems to be, it was enough to provide dummy function in our list binding. One still should be able to use older ui5 version if required",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4433
https://github.com/root-project/root/pull/4433:116,interoperability,bind,binding,116,"@alja, you could try it for all your applications. Seems to be, it was enough to provide dummy function in our list binding. One still should be able to use older ui5 version if required",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4433
https://github.com/root-project/root/pull/4433:116,modifiability,bind,binding,116,"@alja, you could try it for all your applications. Seems to be, it was enough to provide dummy function in our list binding. One still should be able to use older ui5 version if required",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4433
https://github.com/root-project/root/pull/4433:167,modifiability,version,version,167,"@alja, you could try it for all your applications. Seems to be, it was enough to provide dummy function in our list binding. One still should be able to use older ui5 version if required",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4433
https://github.com/root-project/root/pull/4433:97,deployability,version,version,97,@linev Thanks Sergey! I'm looking forward to optimized openui5 table redraws that come with this version.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4433
https://github.com/root-project/root/pull/4433:45,energy efficiency,optim,optimized,45,@linev Thanks Sergey! I'm looking forward to optimized openui5 table redraws that come with this version.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4433
https://github.com/root-project/root/pull/4433:97,integrability,version,version,97,@linev Thanks Sergey! I'm looking forward to optimized openui5 table redraws that come with this version.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4433
https://github.com/root-project/root/pull/4433:97,modifiability,version,version,97,@linev Thanks Sergey! I'm looking forward to optimized openui5 table redraws that come with this version.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4433
https://github.com/root-project/root/pull/4433:45,performance,optimiz,optimized,45,@linev Thanks Sergey! I'm looking forward to optimized openui5 table redraws that come with this version.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4433
https://github.com/root-project/root/pull/4433:36,safety,test,tests,36,@alja Can you confirm that all your tests working now?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4433
https://github.com/root-project/root/pull/4433:36,testability,test,tests,36,@alja Can you confirm that all your tests working now?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4433
https://github.com/root-project/root/pull/4433:14,usability,confirm,confirm,14,@alja Can you confirm that all your tests working now?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4433
https://github.com/root-project/root/pull/4435:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4435
https://github.com/root-project/root/pull/4435:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4435
https://github.com/root-project/root/pull/4435:8,availability,failur,failure,8,Windows failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4435
https://github.com/root-project/root/pull/4435:8,deployability,fail,failure,8,Windows failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4435
https://github.com/root-project/root/pull/4435:8,performance,failur,failure,8,Windows failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4435
https://github.com/root-project/root/pull/4435:8,reliability,fail,failure,8,Windows failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4435
https://github.com/root-project/root/pull/4440:51,safety,test,tests,51,"@manolismih Can you please rebase, so we could run tests on CI? Thanks a lot!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4440
https://github.com/root-project/root/pull/4440:51,testability,test,tests,51,"@manolismih Can you please rebase, so we could run tests on CI? Thanks a lot!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4440
https://github.com/root-project/root/pull/4440:174,deployability,fail,fail,174,"Hello Oksana, . I'm afraid I don't have the code locally for RooKeysPDF, I worked on it . last summer but as far as I remember the job is not complete, so it will . probably fail the tests. Could you drop my changes on this file? My . supervisor on this project was Stephan Hagebock. Let me know if there's . anything I can do. Kind regards,. Manos. On Τετάρτη, 5 Αυγούστου 2020 11:25:19 Π.Μ. EEST, Oksana Shadura wrote:. > @manolismih Can you please rebase, so we could run tests on CI? . > Thanks a lot! >. > —. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub, or unsubscribe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4440
https://github.com/root-project/root/pull/4440:174,reliability,fail,fail,174,"Hello Oksana, . I'm afraid I don't have the code locally for RooKeysPDF, I worked on it . last summer but as far as I remember the job is not complete, so it will . probably fail the tests. Could you drop my changes on this file? My . supervisor on this project was Stephan Hagebock. Let me know if there's . anything I can do. Kind regards,. Manos. On Τετάρτη, 5 Αυγούστου 2020 11:25:19 Π.Μ. EEST, Oksana Shadura wrote:. > @manolismih Can you please rebase, so we could run tests on CI? . > Thanks a lot! >. > —. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub, or unsubscribe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4440
https://github.com/root-project/root/pull/4440:118,safety,reme,remember,118,"Hello Oksana, . I'm afraid I don't have the code locally for RooKeysPDF, I worked on it . last summer but as far as I remember the job is not complete, so it will . probably fail the tests. Could you drop my changes on this file? My . supervisor on this project was Stephan Hagebock. Let me know if there's . anything I can do. Kind regards,. Manos. On Τετάρτη, 5 Αυγούστου 2020 11:25:19 Π.Μ. EEST, Oksana Shadura wrote:. > @manolismih Can you please rebase, so we could run tests on CI? . > Thanks a lot! >. > —. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub, or unsubscribe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4440
https://github.com/root-project/root/pull/4440:142,safety,compl,complete,142,"Hello Oksana, . I'm afraid I don't have the code locally for RooKeysPDF, I worked on it . last summer but as far as I remember the job is not complete, so it will . probably fail the tests. Could you drop my changes on this file? My . supervisor on this project was Stephan Hagebock. Let me know if there's . anything I can do. Kind regards,. Manos. On Τετάρτη, 5 Αυγούστου 2020 11:25:19 Π.Μ. EEST, Oksana Shadura wrote:. > @manolismih Can you please rebase, so we could run tests on CI? . > Thanks a lot! >. > —. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub, or unsubscribe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4440
https://github.com/root-project/root/pull/4440:183,safety,test,tests,183,"Hello Oksana, . I'm afraid I don't have the code locally for RooKeysPDF, I worked on it . last summer but as far as I remember the job is not complete, so it will . probably fail the tests. Could you drop my changes on this file? My . supervisor on this project was Stephan Hagebock. Let me know if there's . anything I can do. Kind regards,. Manos. On Τετάρτη, 5 Αυγούστου 2020 11:25:19 Π.Μ. EEST, Oksana Shadura wrote:. > @manolismih Can you please rebase, so we could run tests on CI? . > Thanks a lot! >. > —. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub, or unsubscribe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4440
https://github.com/root-project/root/pull/4440:475,safety,test,tests,475,"Hello Oksana, . I'm afraid I don't have the code locally for RooKeysPDF, I worked on it . last summer but as far as I remember the job is not complete, so it will . probably fail the tests. Could you drop my changes on this file? My . supervisor on this project was Stephan Hagebock. Let me know if there's . anything I can do. Kind regards,. Manos. On Τετάρτη, 5 Αυγούστου 2020 11:25:19 Π.Μ. EEST, Oksana Shadura wrote:. > @manolismih Can you please rebase, so we could run tests on CI? . > Thanks a lot! >. > —. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub, or unsubscribe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4440
https://github.com/root-project/root/pull/4440:142,security,compl,complete,142,"Hello Oksana, . I'm afraid I don't have the code locally for RooKeysPDF, I worked on it . last summer but as far as I remember the job is not complete, so it will . probably fail the tests. Could you drop my changes on this file? My . supervisor on this project was Stephan Hagebock. Let me know if there's . anything I can do. Kind regards,. Manos. On Τετάρτη, 5 Αυγούστου 2020 11:25:19 Π.Μ. EEST, Oksana Shadura wrote:. > @manolismih Can you please rebase, so we could run tests on CI? . > Thanks a lot! >. > —. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub, or unsubscribe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4440
https://github.com/root-project/root/pull/4440:183,testability,test,tests,183,"Hello Oksana, . I'm afraid I don't have the code locally for RooKeysPDF, I worked on it . last summer but as far as I remember the job is not complete, so it will . probably fail the tests. Could you drop my changes on this file? My . supervisor on this project was Stephan Hagebock. Let me know if there's . anything I can do. Kind regards,. Manos. On Τετάρτη, 5 Αυγούστου 2020 11:25:19 Π.Μ. EEST, Oksana Shadura wrote:. > @manolismih Can you please rebase, so we could run tests on CI? . > Thanks a lot! >. > —. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub, or unsubscribe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4440
https://github.com/root-project/root/pull/4440:475,testability,test,tests,475,"Hello Oksana, . I'm afraid I don't have the code locally for RooKeysPDF, I worked on it . last summer but as far as I remember the job is not complete, so it will . probably fail the tests. Could you drop my changes on this file? My . supervisor on this project was Stephan Hagebock. Let me know if there's . anything I can do. Kind regards,. Manos. On Τετάρτη, 5 Αυγούστου 2020 11:25:19 Π.Μ. EEST, Oksana Shadura wrote:. > @manolismih Can you please rebase, so we could run tests on CI? . > Thanks a lot! >. > —. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub, or unsubscribe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4440
https://github.com/root-project/root/pull/4440:36,usability,progress,progress,36,"Converted to draft because ""work in progress"" label will be discarded.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4440
https://github.com/root-project/root/pull/4441:38,security,modif,modify,38,"From Wile_E: In the new regex, please modify [eE] into [eEdDqQ] (single-, double-, quad- precision). See https://root-forum.cern.ch/t/exponential-form-in-csv-to-dataframe/36189/2",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4441
https://github.com/root-project/root/pull/4441:0,modifiability,Exten,Extended,0,"Extended the syntax as requested in the forum post, waiting for a final round of tests to merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4441
https://github.com/root-project/root/pull/4441:81,safety,test,tests,81,"Extended the syntax as requested in the forum post, waiting for a final round of tests to merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4441
https://github.com/root-project/root/pull/4441:81,testability,test,tests,81,"Extended the syntax as requested in the forum post, waiting for a final round of tests to merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4441
https://github.com/root-project/root/pull/4444:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4444
https://github.com/root-project/root/pull/4444:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4444
https://github.com/root-project/root/pull/4445:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4445
https://github.com/root-project/root/pull/4445:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4445
https://github.com/root-project/root/pull/4446:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4446
https://github.com/root-project/root/pull/4446:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4446
https://github.com/root-project/root/pull/4446:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4446
https://github.com/root-project/root/pull/4446:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4446
https://github.com/root-project/root/pull/4446:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4446
https://github.com/root-project/root/pull/4446:46,safety,test,test,46,"Looks good, thanks! Could you create a little test for ROOT that exercises this uncaching? Please just send it to me, or open a new PR for it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4446
https://github.com/root-project/root/pull/4446:46,testability,test,test,46,"Looks good, thanks! Could you create a little test for ROOT that exercises this uncaching? Please just send it to me, or open a new PR for it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4446
https://github.com/root-project/root/pull/4447:11,deployability,build,build,11,@phsft-bot build! Why the first instantiation whose point of instantiation was in the PCH is not marked to be coming from the AST (why isFromASTFile is not set to true)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4447
https://github.com/root-project/root/pull/4447:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4447
https://github.com/root-project/root/pull/4447:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4447
https://github.com/root-project/root/pull/4448:11,deployability,build,build,11,@phsft-bot build with `-Dpyroot_experimental=ON`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4448
https://github.com/root-project/root/pull/4448:175,deployability,depend,depend,175,"@etejedor I'm a little bit confused how I should implement this: The tutorial should only run if there is XRootD, XGBoost (a Python package) and experimental PyROOT. And they depend on each other and they are mixed in Python and C++. Let's discuss in person how we can put all of this together ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4448
https://github.com/root-project/root/pull/4448:175,integrability,depend,depend,175,"@etejedor I'm a little bit confused how I should implement this: The tutorial should only run if there is XRootD, XGBoost (a Python package) and experimental PyROOT. And they depend on each other and they are mixed in Python and C++. Let's discuss in person how we can put all of this together ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4448
https://github.com/root-project/root/pull/4448:132,modifiability,pac,package,132,"@etejedor I'm a little bit confused how I should implement this: The tutorial should only run if there is XRootD, XGBoost (a Python package) and experimental PyROOT. And they depend on each other and they are mixed in Python and C++. Let's discuss in person how we can put all of this together ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4448
https://github.com/root-project/root/pull/4448:175,modifiability,depend,depend,175,"@etejedor I'm a little bit confused how I should implement this: The tutorial should only run if there is XRootD, XGBoost (a Python package) and experimental PyROOT. And they depend on each other and they are mixed in Python and C++. Let's discuss in person how we can put all of this together ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4448
https://github.com/root-project/root/pull/4448:175,safety,depend,depend,175,"@etejedor I'm a little bit confused how I should implement this: The tutorial should only run if there is XRootD, XGBoost (a Python package) and experimental PyROOT. And they depend on each other and they are mixed in Python and C++. Let's discuss in person how we can put all of this together ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4448
https://github.com/root-project/root/pull/4448:175,testability,depend,depend,175,"@etejedor I'm a little bit confused how I should implement this: The tutorial should only run if there is XRootD, XGBoost (a Python package) and experimental PyROOT. And they depend on each other and they are mixed in Python and C++. Let's discuss in person how we can put all of this together ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4448
https://github.com/root-project/root/pull/4448:251,usability,person,person,251,"@etejedor I'm a little bit confused how I should implement this: The tutorial should only run if there is XRootD, XGBoost (a Python package) and experimental PyROOT. And they depend on each other and they are mixed in Python and C++. Let's discuss in person how we can put all of this together ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4448
https://github.com/root-project/root/pull/4448:11,deployability,build,build,11,@phsft-bot build with `-Dpyroot_experimental=ON`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4448
https://github.com/root-project/root/pull/4448:11,deployability,build,builds,11,"Sucessfull builds with pyroot and experimental pyroot, all green. Going to be merged tonight.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4448
https://github.com/root-project/root/pull/4448:59,energy efficiency,green,green,59,"Sucessfull builds with pyroot and experimental pyroot, all green. Going to be merged tonight.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4448
https://github.com/root-project/root/pull/4452:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4452
https://github.com/root-project/root/pull/4453:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4453
https://github.com/root-project/root/pull/4455:93,deployability,build,build,93,"Bertrand, you have to try code on your machine. I am not sure if I con convince `Jenkins` to build with root7.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4455
https://github.com/root-project/root/pull/4455:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=14 -Droot7=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4455
https://github.com/root-project/root/pull/4455:15,availability,error,error,15,Still the same error...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4455
https://github.com/root-project/root/pull/4455:15,performance,error,error,15,Still the same error...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4455
https://github.com/root-project/root/pull/4455:15,safety,error,error,15,Still the same error...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4455
https://github.com/root-project/root/pull/4455:15,usability,error,error,15,Still the same error...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4455
https://github.com/root-project/root/pull/4456:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=14 -Droot7=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4456
https://github.com/root-project/root/pull/4457:71,availability,error,error,71,"NB: This is maybe not the best solution, but it solves the compilation error...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4457
https://github.com/root-project/root/pull/4457:71,performance,error,error,71,"NB: This is maybe not the best solution, but it solves the compilation error...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4457
https://github.com/root-project/root/pull/4457:71,safety,error,error,71,"NB: This is maybe not the best solution, but it solves the compilation error...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4457
https://github.com/root-project/root/pull/4457:71,usability,error,error,71,"NB: This is maybe not the best solution, but it solves the compilation error...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4457
https://github.com/root-project/root/pull/4457:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=14 -Droot7=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4457
https://github.com/root-project/root/pull/4457:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=14 -Droot7=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4457
https://github.com/root-project/root/pull/4457:11,deployability,build,build,11,@phsft-bot build just on windows10/default with flags -DCMAKE_CXX_STANDARD=14 -Droot7=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4457
https://github.com/root-project/root/pull/4458:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4458
https://github.com/root-project/root/pull/4458:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4458
https://github.com/root-project/root/pull/4458:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4458
https://github.com/root-project/root/pull/4459:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4459
https://github.com/root-project/root/pull/4459:34,deployability,updat,update,34,"Hi @Axel-Naumann ,. Could be this update also included in the next patch tag? We will need this fix for the new VMC packages tags. The commit hash in the master branch is d90fc155397fd8bf986c03d36cd35f9f1a242b40. Thank you,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4459
https://github.com/root-project/root/pull/4459:67,deployability,patch,patch,67,"Hi @Axel-Naumann ,. Could be this update also included in the next patch tag? We will need this fix for the new VMC packages tags. The commit hash in the master branch is d90fc155397fd8bf986c03d36cd35f9f1a242b40. Thank you,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4459
https://github.com/root-project/root/pull/4459:116,modifiability,pac,packages,116,"Hi @Axel-Naumann ,. Could be this update also included in the next patch tag? We will need this fix for the new VMC packages tags. The commit hash in the master branch is d90fc155397fd8bf986c03d36cd35f9f1a242b40. Thank you,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4459
https://github.com/root-project/root/pull/4459:34,safety,updat,update,34,"Hi @Axel-Naumann ,. Could be this update also included in the next patch tag? We will need this fix for the new VMC packages tags. The commit hash in the master branch is d90fc155397fd8bf986c03d36cd35f9f1a242b40. Thank you,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4459
https://github.com/root-project/root/pull/4459:67,safety,patch,patch,67,"Hi @Axel-Naumann ,. Could be this update also included in the next patch tag? We will need this fix for the new VMC packages tags. The commit hash in the master branch is d90fc155397fd8bf986c03d36cd35f9f1a242b40. Thank you,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4459
https://github.com/root-project/root/pull/4459:34,security,updat,update,34,"Hi @Axel-Naumann ,. Could be this update also included in the next patch tag? We will need this fix for the new VMC packages tags. The commit hash in the master branch is d90fc155397fd8bf986c03d36cd35f9f1a242b40. Thank you,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4459
https://github.com/root-project/root/pull/4459:67,security,patch,patch,67,"Hi @Axel-Naumann ,. Could be this update also included in the next patch tag? We will need this fix for the new VMC packages tags. The commit hash in the master branch is d90fc155397fd8bf986c03d36cd35f9f1a242b40. Thank you,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4459
https://github.com/root-project/root/pull/4459:142,security,hash,hash,142,"Hi @Axel-Naumann ,. Could be this update also included in the next patch tag? We will need this fix for the new VMC packages tags. The commit hash in the master branch is d90fc155397fd8bf986c03d36cd35f9f1a242b40. Thank you,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4459
https://github.com/root-project/root/pull/4461:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4461
https://github.com/root-project/root/pull/4461:12,availability,failur,failure,12,The windows failure is due to the 'git lock' ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4461
https://github.com/root-project/root/pull/4461:12,deployability,fail,failure,12,The windows failure is due to the 'git lock' ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4461
https://github.com/root-project/root/pull/4461:12,performance,failur,failure,12,The windows failure is due to the 'git lock' ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4461
https://github.com/root-project/root/pull/4461:39,performance,lock,lock,39,The windows failure is due to the 'git lock' ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4461
https://github.com/root-project/root/pull/4461:12,reliability,fail,failure,12,The windows failure is due to the 'git lock' ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4461
https://github.com/root-project/root/pull/4461:39,security,lock,lock,39,The windows failure is due to the 'git lock' ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4461
https://github.com/root-project/root/pull/4464:11,deployability,build,build,11,@phsft-bot build with `-Dpyroot_experimental=ON`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4464
https://github.com/root-project/root/pull/4464:11,deployability,build,build,11,@phsft-bot build with `-Dpyroot_experimental=ON`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4464
https://github.com/root-project/root/pull/4465:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:61,deployability,depend,dependent,61,A maybe minor change of behavior would be when there is time-dependent static initialization. If the ‘script’ has a static init that gets the current time or looks for files on disk the behavior of the unloading will be unexpected if:. .L script.C. .undo 1. .L script.C. doesn’t rerun static init.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:202,deployability,unload,unloading,202,A maybe minor change of behavior would be when there is time-dependent static initialization. If the ‘script’ has a static init that gets the current time or looks for files on disk the behavior of the unloading will be unexpected if:. .L script.C. .undo 1. .L script.C. doesn’t rerun static init.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:142,energy efficiency,current,current,142,A maybe minor change of behavior would be when there is time-dependent static initialization. If the ‘script’ has a static init that gets the current time or looks for files on disk the behavior of the unloading will be unexpected if:. .L script.C. .undo 1. .L script.C. doesn’t rerun static init.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:61,integrability,depend,dependent,61,A maybe minor change of behavior would be when there is time-dependent static initialization. If the ‘script’ has a static init that gets the current time or looks for files on disk the behavior of the unloading will be unexpected if:. .L script.C. .undo 1. .L script.C. doesn’t rerun static init.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:61,modifiability,depend,dependent,61,A maybe minor change of behavior would be when there is time-dependent static initialization. If the ‘script’ has a static init that gets the current time or looks for files on disk the behavior of the unloading will be unexpected if:. .L script.C. .undo 1. .L script.C. doesn’t rerun static init.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:56,performance,time,time-dependent,56,A maybe minor change of behavior would be when there is time-dependent static initialization. If the ‘script’ has a static init that gets the current time or looks for files on disk the behavior of the unloading will be unexpected if:. .L script.C. .undo 1. .L script.C. doesn’t rerun static init.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:150,performance,time,time,150,A maybe minor change of behavior would be when there is time-dependent static initialization. If the ‘script’ has a static init that gets the current time or looks for files on disk the behavior of the unloading will be unexpected if:. .L script.C. .undo 1. .L script.C. doesn’t rerun static init.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:177,performance,disk,disk,177,A maybe minor change of behavior would be when there is time-dependent static initialization. If the ‘script’ has a static init that gets the current time or looks for files on disk the behavior of the unloading will be unexpected if:. .L script.C. .undo 1. .L script.C. doesn’t rerun static init.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:271,reliability,doe,doesn,271,A maybe minor change of behavior would be when there is time-dependent static initialization. If the ‘script’ has a static init that gets the current time or looks for files on disk the behavior of the unloading will be unexpected if:. .L script.C. .undo 1. .L script.C. doesn’t rerun static init.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:61,safety,depend,dependent,61,A maybe minor change of behavior would be when there is time-dependent static initialization. If the ‘script’ has a static init that gets the current time or looks for files on disk the behavior of the unloading will be unexpected if:. .L script.C. .undo 1. .L script.C. doesn’t rerun static init.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:61,testability,depend,dependent,61,A maybe minor change of behavior would be when there is time-dependent static initialization. If the ‘script’ has a static init that gets the current time or looks for files on disk the behavior of the unloading will be unexpected if:. .L script.C. .undo 1. .L script.C. doesn’t rerun static init.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:24,usability,behavi,behavior,24,A maybe minor change of behavior would be when there is time-dependent static initialization. If the ‘script’ has a static init that gets the current time or looks for files on disk the behavior of the unloading will be unexpected if:. .L script.C. .undo 1. .L script.C. doesn’t rerun static init.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:186,usability,behavi,behavior,186,A maybe minor change of behavior would be when there is time-dependent static initialization. If the ‘script’ has a static init that gets the current time or looks for files on disk the behavior of the unloading will be unexpected if:. .L script.C. .undo 1. .L script.C. doesn’t rerun static init.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:250,usability,undo,undo,250,A maybe minor change of behavior would be when there is time-dependent static initialization. If the ‘script’ has a static init that gets the current time or looks for files on disk the behavior of the unloading will be unexpected if:. .L script.C. .undo 1. .L script.C. doesn’t rerun static init.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:110,usability,close,closed,110,"Good point. In the distant past (CINT), static init wasn't rerun upon reloading, so the PR brings us probably closed to where we were before...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:66,deployability,unload,unload,66,"You are right! I reverted the last commit -so we preserve the old unload+load behaviour-, until we find a fix (if it is worth...). Therefore, I updated the PR title and description, and see if we can get the other changes merged: cleanup, etc. :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:144,deployability,updat,updated,144,"You are right! I reverted the last commit -so we preserve the old unload+load behaviour-, until we find a fix (if it is worth...). Therefore, I updated the PR title and description, and see if we can get the other changes merged: cleanup, etc. :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:73,energy efficiency,load,load,73,"You are right! I reverted the last commit -so we preserve the old unload+load behaviour-, until we find a fix (if it is worth...). Therefore, I updated the PR title and description, and see if we can get the other changes merged: cleanup, etc. :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:73,performance,load,load,73,"You are right! I reverted the last commit -so we preserve the old unload+load behaviour-, until we find a fix (if it is worth...). Therefore, I updated the PR title and description, and see if we can get the other changes merged: cleanup, etc. :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:144,safety,updat,updated,144,"You are right! I reverted the last commit -so we preserve the old unload+load behaviour-, until we find a fix (if it is worth...). Therefore, I updated the PR title and description, and see if we can get the other changes merged: cleanup, etc. :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:144,security,updat,updated,144,"You are right! I reverted the last commit -so we preserve the old unload+load behaviour-, until we find a fix (if it is worth...). Therefore, I updated the PR title and description, and see if we can get the other changes merged: cleanup, etc. :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:78,usability,behavi,behaviour,78,"You are right! I reverted the last commit -so we preserve the old unload+load behaviour-, until we find a fix (if it is worth...). Therefore, I updated the PR title and description, and see if we can get the other changes merged: cleanup, etc. :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:59,integrability,coupl,couple,59,Should we resurrect this PR? It was mainly a refactor of a couple of things. [EDIT: maybe it requires changes after 1.5 years; let's see],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:45,modifiability,refact,refactor,45,Should we resurrect this PR? It was mainly a refactor of a couple of things. [EDIT: maybe it requires changes after 1.5 years; let's see],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:59,modifiability,coupl,couple,59,Should we resurrect this PR? It was mainly a refactor of a couple of things. [EDIT: maybe it requires changes after 1.5 years; let's see],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:93,modifiability,requires chang,requires changes,93,Should we resurrect this PR? It was mainly a refactor of a couple of things. [EDIT: maybe it requires changes after 1.5 years; let's see],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:45,performance,refactor,refactor,45,Should we resurrect this PR? It was mainly a refactor of a couple of things. [EDIT: maybe it requires changes after 1.5 years; let's see],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:59,testability,coupl,couple,59,Should we resurrect this PR? It was mainly a refactor of a couple of things. [EDIT: maybe it requires changes after 1.5 years; let's see],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4466:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4466
https://github.com/root-project/root/pull/4467:28,availability,error,errors,28,We need this to avoid build errors in `yoda` and test root master in CMSSW CXXModules integration builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4467
https://github.com/root-project/root/pull/4467:22,deployability,build,build,22,We need this to avoid build errors in `yoda` and test root master in CMSSW CXXModules integration builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4467
https://github.com/root-project/root/pull/4467:86,deployability,integr,integration,86,We need this to avoid build errors in `yoda` and test root master in CMSSW CXXModules integration builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4467
https://github.com/root-project/root/pull/4467:98,deployability,build,builds,98,We need this to avoid build errors in `yoda` and test root master in CMSSW CXXModules integration builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4467
https://github.com/root-project/root/pull/4467:86,integrability,integr,integration,86,We need this to avoid build errors in `yoda` and test root master in CMSSW CXXModules integration builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4467
https://github.com/root-project/root/pull/4467:86,interoperability,integr,integration,86,We need this to avoid build errors in `yoda` and test root master in CMSSW CXXModules integration builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4467
https://github.com/root-project/root/pull/4467:86,modifiability,integr,integration,86,We need this to avoid build errors in `yoda` and test root master in CMSSW CXXModules integration builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4467
https://github.com/root-project/root/pull/4467:28,performance,error,errors,28,We need this to avoid build errors in `yoda` and test root master in CMSSW CXXModules integration builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4467
https://github.com/root-project/root/pull/4467:86,reliability,integr,integration,86,We need this to avoid build errors in `yoda` and test root master in CMSSW CXXModules integration builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4467
https://github.com/root-project/root/pull/4467:16,safety,avoid,avoid,16,We need this to avoid build errors in `yoda` and test root master in CMSSW CXXModules integration builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4467
https://github.com/root-project/root/pull/4467:28,safety,error,errors,28,We need this to avoid build errors in `yoda` and test root master in CMSSW CXXModules integration builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4467
https://github.com/root-project/root/pull/4467:49,safety,test,test,49,We need this to avoid build errors in `yoda` and test root master in CMSSW CXXModules integration builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4467
https://github.com/root-project/root/pull/4467:86,security,integr,integration,86,We need this to avoid build errors in `yoda` and test root master in CMSSW CXXModules integration builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4467
https://github.com/root-project/root/pull/4467:49,testability,test,test,49,We need this to avoid build errors in `yoda` and test root master in CMSSW CXXModules integration builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4467
https://github.com/root-project/root/pull/4467:86,testability,integr,integration,86,We need this to avoid build errors in `yoda` and test root master in CMSSW CXXModules integration builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4467
https://github.com/root-project/root/pull/4467:28,usability,error,errors,28,We need this to avoid build errors in `yoda` and test root master in CMSSW CXXModules integration builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4467
https://github.com/root-project/root/pull/4468:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=14 -Droot7=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4468
https://github.com/root-project/root/pull/4468:324,deployability,log,logic,324,"Hi @Falcort,. As a **quick & dirty** solution it is ok, but we need much more advanced methods to work with ROOT structures. There are many global lists in ROOT, which should be accessed properly via RBrowser. In ROOT6 there is `TObject::Browse(TBrowser*)` method, which is implemented for many sub-classes. We need similar logic, but for arbitrary c++ classes - not only TObject. One possible solution is implemented for THttpServer - it is so called TRootSniffer. It provides methods to scan many different classes without need to implement specialized `Browse()` method in the class itself. . I hope, we can discuss this topic next week. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4468
https://github.com/root-project/root/pull/4468:295,integrability,sub,sub-classes,295,"Hi @Falcort,. As a **quick & dirty** solution it is ok, but we need much more advanced methods to work with ROOT structures. There are many global lists in ROOT, which should be accessed properly via RBrowser. In ROOT6 there is `TObject::Browse(TBrowser*)` method, which is implemented for many sub-classes. We need similar logic, but for arbitrary c++ classes - not only TObject. One possible solution is implemented for THttpServer - it is so called TRootSniffer. It provides methods to scan many different classes without need to implement specialized `Browse()` method in the class itself. . I hope, we can discuss this topic next week. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4468
https://github.com/root-project/root/pull/4468:624,integrability,topic,topic,624,"Hi @Falcort,. As a **quick & dirty** solution it is ok, but we need much more advanced methods to work with ROOT structures. There are many global lists in ROOT, which should be accessed properly via RBrowser. In ROOT6 there is `TObject::Browse(TBrowser*)` method, which is implemented for many sub-classes. We need similar logic, but for arbitrary c++ classes - not only TObject. One possible solution is implemented for THttpServer - it is so called TRootSniffer. It provides methods to scan many different classes without need to implement specialized `Browse()` method in the class itself. . I hope, we can discuss this topic next week. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4468
https://github.com/root-project/root/pull/4468:324,safety,log,logic,324,"Hi @Falcort,. As a **quick & dirty** solution it is ok, but we need much more advanced methods to work with ROOT structures. There are many global lists in ROOT, which should be accessed properly via RBrowser. In ROOT6 there is `TObject::Browse(TBrowser*)` method, which is implemented for many sub-classes. We need similar logic, but for arbitrary c++ classes - not only TObject. One possible solution is implemented for THttpServer - it is so called TRootSniffer. It provides methods to scan many different classes without need to implement specialized `Browse()` method in the class itself. . I hope, we can discuss this topic next week. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4468
https://github.com/root-project/root/pull/4468:178,security,access,accessed,178,"Hi @Falcort,. As a **quick & dirty** solution it is ok, but we need much more advanced methods to work with ROOT structures. There are many global lists in ROOT, which should be accessed properly via RBrowser. In ROOT6 there is `TObject::Browse(TBrowser*)` method, which is implemented for many sub-classes. We need similar logic, but for arbitrary c++ classes - not only TObject. One possible solution is implemented for THttpServer - it is so called TRootSniffer. It provides methods to scan many different classes without need to implement specialized `Browse()` method in the class itself. . I hope, we can discuss this topic next week. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4468
https://github.com/root-project/root/pull/4468:324,security,log,logic,324,"Hi @Falcort,. As a **quick & dirty** solution it is ok, but we need much more advanced methods to work with ROOT structures. There are many global lists in ROOT, which should be accessed properly via RBrowser. In ROOT6 there is `TObject::Browse(TBrowser*)` method, which is implemented for many sub-classes. We need similar logic, but for arbitrary c++ classes - not only TObject. One possible solution is implemented for THttpServer - it is so called TRootSniffer. It provides methods to scan many different classes without need to implement specialized `Browse()` method in the class itself. . I hope, we can discuss this topic next week. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4468
https://github.com/root-project/root/pull/4468:324,testability,log,logic,324,"Hi @Falcort,. As a **quick & dirty** solution it is ok, but we need much more advanced methods to work with ROOT structures. There are many global lists in ROOT, which should be accessed properly via RBrowser. In ROOT6 there is `TObject::Browse(TBrowser*)` method, which is implemented for many sub-classes. We need similar logic, but for arbitrary c++ classes - not only TObject. One possible solution is implemented for THttpServer - it is so called TRootSniffer. It provides methods to scan many different classes without need to implement specialized `Browse()` method in the class itself. . I hope, we can discuss this topic next week. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4468
https://github.com/root-project/root/pull/4468:312,deployability,log,logic,312,"> As a **quick & dirty** solution it is ok, but we need much more advanced methods to work with ROOT structures. There are many global lists in ROOT, which should be accessed properly via RBrowser. In ROOT6 there is `TObject::Browse(TBrowser*)` method, which is implemented for many sub-classes. We need similar logic, but for arbitrary c++ classes - not only TObject. > . > One possible solution is implemented for THttpServer - it is so called TRootSniffer. It provides methods to scan many different classes without need to implement specialized `Browse()` method in the class itself. > . > I hope, we can discuss this topic next week. This is indeed more a proof of concept than a final solution. I propose to merge it as it is now and then review the whole concept (as several others, like directory navigation) when you'll be around next week. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4468
https://github.com/root-project/root/pull/4468:283,integrability,sub,sub-classes,283,"> As a **quick & dirty** solution it is ok, but we need much more advanced methods to work with ROOT structures. There are many global lists in ROOT, which should be accessed properly via RBrowser. In ROOT6 there is `TObject::Browse(TBrowser*)` method, which is implemented for many sub-classes. We need similar logic, but for arbitrary c++ classes - not only TObject. > . > One possible solution is implemented for THttpServer - it is so called TRootSniffer. It provides methods to scan many different classes without need to implement specialized `Browse()` method in the class itself. > . > I hope, we can discuss this topic next week. This is indeed more a proof of concept than a final solution. I propose to merge it as it is now and then review the whole concept (as several others, like directory navigation) when you'll be around next week. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4468
https://github.com/root-project/root/pull/4468:622,integrability,topic,topic,622,"> As a **quick & dirty** solution it is ok, but we need much more advanced methods to work with ROOT structures. There are many global lists in ROOT, which should be accessed properly via RBrowser. In ROOT6 there is `TObject::Browse(TBrowser*)` method, which is implemented for many sub-classes. We need similar logic, but for arbitrary c++ classes - not only TObject. > . > One possible solution is implemented for THttpServer - it is so called TRootSniffer. It provides methods to scan many different classes without need to implement specialized `Browse()` method in the class itself. > . > I hope, we can discuss this topic next week. This is indeed more a proof of concept than a final solution. I propose to merge it as it is now and then review the whole concept (as several others, like directory navigation) when you'll be around next week. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4468
https://github.com/root-project/root/pull/4468:312,safety,log,logic,312,"> As a **quick & dirty** solution it is ok, but we need much more advanced methods to work with ROOT structures. There are many global lists in ROOT, which should be accessed properly via RBrowser. In ROOT6 there is `TObject::Browse(TBrowser*)` method, which is implemented for many sub-classes. We need similar logic, but for arbitrary c++ classes - not only TObject. > . > One possible solution is implemented for THttpServer - it is so called TRootSniffer. It provides methods to scan many different classes without need to implement specialized `Browse()` method in the class itself. > . > I hope, we can discuss this topic next week. This is indeed more a proof of concept than a final solution. I propose to merge it as it is now and then review the whole concept (as several others, like directory navigation) when you'll be around next week. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4468
https://github.com/root-project/root/pull/4468:745,safety,review,review,745,"> As a **quick & dirty** solution it is ok, but we need much more advanced methods to work with ROOT structures. There are many global lists in ROOT, which should be accessed properly via RBrowser. In ROOT6 there is `TObject::Browse(TBrowser*)` method, which is implemented for many sub-classes. We need similar logic, but for arbitrary c++ classes - not only TObject. > . > One possible solution is implemented for THttpServer - it is so called TRootSniffer. It provides methods to scan many different classes without need to implement specialized `Browse()` method in the class itself. > . > I hope, we can discuss this topic next week. This is indeed more a proof of concept than a final solution. I propose to merge it as it is now and then review the whole concept (as several others, like directory navigation) when you'll be around next week. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4468
https://github.com/root-project/root/pull/4468:166,security,access,accessed,166,"> As a **quick & dirty** solution it is ok, but we need much more advanced methods to work with ROOT structures. There are many global lists in ROOT, which should be accessed properly via RBrowser. In ROOT6 there is `TObject::Browse(TBrowser*)` method, which is implemented for many sub-classes. We need similar logic, but for arbitrary c++ classes - not only TObject. > . > One possible solution is implemented for THttpServer - it is so called TRootSniffer. It provides methods to scan many different classes without need to implement specialized `Browse()` method in the class itself. > . > I hope, we can discuss this topic next week. This is indeed more a proof of concept than a final solution. I propose to merge it as it is now and then review the whole concept (as several others, like directory navigation) when you'll be around next week. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4468
https://github.com/root-project/root/pull/4468:312,security,log,logic,312,"> As a **quick & dirty** solution it is ok, but we need much more advanced methods to work with ROOT structures. There are many global lists in ROOT, which should be accessed properly via RBrowser. In ROOT6 there is `TObject::Browse(TBrowser*)` method, which is implemented for many sub-classes. We need similar logic, but for arbitrary c++ classes - not only TObject. > . > One possible solution is implemented for THttpServer - it is so called TRootSniffer. It provides methods to scan many different classes without need to implement specialized `Browse()` method in the class itself. > . > I hope, we can discuss this topic next week. This is indeed more a proof of concept than a final solution. I propose to merge it as it is now and then review the whole concept (as several others, like directory navigation) when you'll be around next week. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4468
https://github.com/root-project/root/pull/4468:312,testability,log,logic,312,"> As a **quick & dirty** solution it is ok, but we need much more advanced methods to work with ROOT structures. There are many global lists in ROOT, which should be accessed properly via RBrowser. In ROOT6 there is `TObject::Browse(TBrowser*)` method, which is implemented for many sub-classes. We need similar logic, but for arbitrary c++ classes - not only TObject. > . > One possible solution is implemented for THttpServer - it is so called TRootSniffer. It provides methods to scan many different classes without need to implement specialized `Browse()` method in the class itself. > . > I hope, we can discuss this topic next week. This is indeed more a proof of concept than a final solution. I propose to merge it as it is now and then review the whole concept (as several others, like directory navigation) when you'll be around next week. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4468
https://github.com/root-project/root/pull/4468:745,testability,review,review,745,"> As a **quick & dirty** solution it is ok, but we need much more advanced methods to work with ROOT structures. There are many global lists in ROOT, which should be accessed properly via RBrowser. In ROOT6 there is `TObject::Browse(TBrowser*)` method, which is implemented for many sub-classes. We need similar logic, but for arbitrary c++ classes - not only TObject. > . > One possible solution is implemented for THttpServer - it is so called TRootSniffer. It provides methods to scan many different classes without need to implement specialized `Browse()` method in the class itself. > . > I hope, we can discuss this topic next week. This is indeed more a proof of concept than a final solution. I propose to merge it as it is now and then review the whole concept (as several others, like directory navigation) when you'll be around next week. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4468
https://github.com/root-project/root/pull/4468:805,usability,navigat,navigation,805,"> As a **quick & dirty** solution it is ok, but we need much more advanced methods to work with ROOT structures. There are many global lists in ROOT, which should be accessed properly via RBrowser. In ROOT6 there is `TObject::Browse(TBrowser*)` method, which is implemented for many sub-classes. We need similar logic, but for arbitrary c++ classes - not only TObject. > . > One possible solution is implemented for THttpServer - it is so called TRootSniffer. It provides methods to scan many different classes without need to implement specialized `Browse()` method in the class itself. > . > I hope, we can discuss this topic next week. This is indeed more a proof of concept than a final solution. I propose to merge it as it is now and then review the whole concept (as several others, like directory navigation) when you'll be around next week. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4468
https://github.com/root-project/root/pull/4469:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=14 -Droot7=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4469:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=14 -Droot7=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4473:121,deployability,modul,modules,121,You're welcome Sergey. I will merge it now. So you will see tomorrow the new structure in:. https://root.cern/doc/master/modules.html. I have added a section `ROOT7 Graphics`. . I did these changes when I saw `RPad coordinate systems` appearing magically in the `graphics` section.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4473
https://github.com/root-project/root/pull/4473:215,interoperability,coordinat,coordinate,215,You're welcome Sergey. I will merge it now. So you will see tomorrow the new structure in:. https://root.cern/doc/master/modules.html. I have added a section `ROOT7 Graphics`. . I did these changes when I saw `RPad coordinate systems` appearing magically in the `graphics` section.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4473
https://github.com/root-project/root/pull/4473:121,modifiability,modul,modules,121,You're welcome Sergey. I will merge it now. So you will see tomorrow the new structure in:. https://root.cern/doc/master/modules.html. I have added a section `ROOT7 Graphics`. . I did these changes when I saw `RPad coordinate systems` appearing magically in the `graphics` section.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4473
https://github.com/root-project/root/pull/4473:121,safety,modul,modules,121,You're welcome Sergey. I will merge it now. So you will see tomorrow the new structure in:. https://root.cern/doc/master/modules.html. I have added a section `ROOT7 Graphics`. . I did these changes when I saw `RPad coordinate systems` appearing magically in the `graphics` section.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4473
https://github.com/root-project/root/pull/4476:11,deployability,build,build,11,@phsft-bot build with `-Dpyroot_experimental=ON`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4476
https://github.com/root-project/root/pull/4476:11,deployability,build,build,11,@phsft-bot build with -Dpyroot_experimental=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4476
https://github.com/root-project/root/pull/4481:11,deployability,build,build,11,"@phsft-bot build just on ROOT-fedora27/noimt, ROOT-fedora29/python3, ROOT-ubuntu16/rtcxxmod, mac1014/cxx17, windows10/default with flags -DCMAKE_CXX_STANDARD=14 -Droot7=ON",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4481
https://github.com/root-project/root/pull/4481:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=14 -Droot7=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4481
https://github.com/root-project/root/pull/4482:83,energy efficiency,green,green,83,"Hello @amarini,. could you elaborate a bit what the I/O problem is? All tests were green so far. Also, a question to either @pcanal, @linev, @vgvassilev (I don't remember who raised this issue):. There was a discussion about problems when `= default`ing a constructor. Is that still an issue or can we merge this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4482
https://github.com/root-project/root/pull/4482:52,performance,I/O,I/O,52,"Hello @amarini,. could you elaborate a bit what the I/O problem is? All tests were green so far. Also, a question to either @pcanal, @linev, @vgvassilev (I don't remember who raised this issue):. There was a discussion about problems when `= default`ing a constructor. Is that still an issue or can we merge this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4482
https://github.com/root-project/root/pull/4482:72,safety,test,tests,72,"Hello @amarini,. could you elaborate a bit what the I/O problem is? All tests were green so far. Also, a question to either @pcanal, @linev, @vgvassilev (I don't remember who raised this issue):. There was a discussion about problems when `= default`ing a constructor. Is that still an issue or can we merge this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4482
https://github.com/root-project/root/pull/4482:162,safety,reme,remember,162,"Hello @amarini,. could you elaborate a bit what the I/O problem is? All tests were green so far. Also, a question to either @pcanal, @linev, @vgvassilev (I don't remember who raised this issue):. There was a discussion about problems when `= default`ing a constructor. Is that still an issue or can we merge this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4482
https://github.com/root-project/root/pull/4482:72,testability,test,tests,72,"Hello @amarini,. could you elaborate a bit what the I/O problem is? All tests were green so far. Also, a question to either @pcanal, @linev, @vgvassilev (I don't remember who raised this issue):. There was a discussion about problems when `= default`ing a constructor. Is that still an issue or can we merge this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4482
https://github.com/root-project/root/pull/4482:361,deployability,stage,stage,361,"@hageboeck, an constructor w/o arguments (or a more complicate one) is needed to do I/O, for example save a RooWorkspace to file and load it later. I verified the first implementation: . ~~~c++. inline RooGenericPdf(){}. ~~~. I assumed that the =default was behaving the same but looking at the thread it seems not to. . I reverted the =default to the previous stage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4482
https://github.com/root-project/root/pull/4482:133,energy efficiency,load,load,133,"@hageboeck, an constructor w/o arguments (or a more complicate one) is needed to do I/O, for example save a RooWorkspace to file and load it later. I verified the first implementation: . ~~~c++. inline RooGenericPdf(){}. ~~~. I assumed that the =default was behaving the same but looking at the thread it seems not to. . I reverted the =default to the previous stage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4482
https://github.com/root-project/root/pull/4482:84,performance,I/O,I/O,84,"@hageboeck, an constructor w/o arguments (or a more complicate one) is needed to do I/O, for example save a RooWorkspace to file and load it later. I verified the first implementation: . ~~~c++. inline RooGenericPdf(){}. ~~~. I assumed that the =default was behaving the same but looking at the thread it seems not to. . I reverted the =default to the previous stage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4482
https://github.com/root-project/root/pull/4482:133,performance,load,load,133,"@hageboeck, an constructor w/o arguments (or a more complicate one) is needed to do I/O, for example save a RooWorkspace to file and load it later. I verified the first implementation: . ~~~c++. inline RooGenericPdf(){}. ~~~. I assumed that the =default was behaving the same but looking at the thread it seems not to. . I reverted the =default to the previous stage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4482
https://github.com/root-project/root/pull/4482:52,safety,compl,complicate,52,"@hageboeck, an constructor w/o arguments (or a more complicate one) is needed to do I/O, for example save a RooWorkspace to file and load it later. I verified the first implementation: . ~~~c++. inline RooGenericPdf(){}. ~~~. I assumed that the =default was behaving the same but looking at the thread it seems not to. . I reverted the =default to the previous stage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4482
https://github.com/root-project/root/pull/4482:52,security,compl,complicate,52,"@hageboeck, an constructor w/o arguments (or a more complicate one) is needed to do I/O, for example save a RooWorkspace to file and load it later. I verified the first implementation: . ~~~c++. inline RooGenericPdf(){}. ~~~. I assumed that the =default was behaving the same but looking at the thread it seems not to. . I reverted the =default to the previous stage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4482
https://github.com/root-project/root/pull/4482:150,testability,verif,verified,150,"@hageboeck, an constructor w/o arguments (or a more complicate one) is needed to do I/O, for example save a RooWorkspace to file and load it later. I verified the first implementation: . ~~~c++. inline RooGenericPdf(){}. ~~~. I assumed that the =default was behaving the same but looking at the thread it seems not to. . I reverted the =default to the previous stage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4482
https://github.com/root-project/root/pull/4482:258,usability,behavi,behaving,258,"@hageboeck, an constructor w/o arguments (or a more complicate one) is needed to do I/O, for example save a RooWorkspace to file and load it later. I verified the first implementation: . ~~~c++. inline RooGenericPdf(){}. ~~~. I assumed that the =default was behaving the same but looking at the thread it seems not to. . I reverted the =default to the previous stage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4482
https://github.com/root-project/root/pull/4483:226,usability,behavi,behaviour,226,"Could we discuss a bit for which cases this is needed? The problem is as follows:. TObject defines the default as `""""`, whereas here it's defined as `0`. That means that if you use a data hist as a DataHist, you get different behaviour than using it as a `TObject*`. That's inconsistent at best. Would a default of `""""` also work?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4483
https://github.com/root-project/root/pull/4483:119,interoperability,compatib,compatibility,119,"I changed to """" as in TObject. . A use case is to ensure that the RooDataHist is moved from file to memory and to keep compatibility with the TObject calls.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4483
https://github.com/root-project/root/pull/4483:100,performance,memor,memory,100,"I changed to """" as in TObject. . A use case is to ensure that the RooDataHist is moved from file to memory and to keep compatibility with the TObject calls.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4483
https://github.com/root-project/root/pull/4483:100,usability,memor,memory,100,"I changed to """" as in TObject. . A use case is to ensure that the RooDataHist is moved from file to memory and to keep compatibility with the TObject calls.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4483
https://github.com/root-project/root/pull/4485:111,integrability,sub,submit,111,"@pcanal . Philippe, it is up to you if you want to apply PR.Vasil @vgvassilev fixed ROOT-10336 issue. . I will submit other small PR for gui classes - I got other warning from cling there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4485
https://github.com/root-project/root/pull/4485:36,reliability,doe,does,36,Philippe. Should I close the PR? It does not bring much - just several includes less.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4485
https://github.com/root-project/root/pull/4485:19,usability,close,close,19,Philippe. Should I close the PR? It does not bring much - just several includes less.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4485
https://github.com/root-project/root/pull/4486:113,deployability,modul,modules,113,Maybe we should try to remove it altogether. I think it was a workaround of something when *compiling* ROOT with modules. . The reason usually for the infinite loop in rootcling is whenever the libc includes come before the ROOT-specific headers. This happens because clang-5 cannot deduce the owning module correctly.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4486
https://github.com/root-project/root/pull/4486:301,deployability,modul,module,301,Maybe we should try to remove it altogether. I think it was a workaround of something when *compiling* ROOT with modules. . The reason usually for the infinite loop in rootcling is whenever the libc includes come before the ROOT-specific headers. This happens because clang-5 cannot deduce the owning module correctly.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4486
https://github.com/root-project/root/pull/4486:229,interoperability,specif,specific,229,Maybe we should try to remove it altogether. I think it was a workaround of something when *compiling* ROOT with modules. . The reason usually for the infinite loop in rootcling is whenever the libc includes come before the ROOT-specific headers. This happens because clang-5 cannot deduce the owning module correctly.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4486
https://github.com/root-project/root/pull/4486:113,modifiability,modul,modules,113,Maybe we should try to remove it altogether. I think it was a workaround of something when *compiling* ROOT with modules. . The reason usually for the infinite loop in rootcling is whenever the libc includes come before the ROOT-specific headers. This happens because clang-5 cannot deduce the owning module correctly.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4486
https://github.com/root-project/root/pull/4486:301,modifiability,modul,module,301,Maybe we should try to remove it altogether. I think it was a workaround of something when *compiling* ROOT with modules. . The reason usually for the infinite loop in rootcling is whenever the libc includes come before the ROOT-specific headers. This happens because clang-5 cannot deduce the owning module correctly.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4486
https://github.com/root-project/root/pull/4486:113,safety,modul,modules,113,Maybe we should try to remove it altogether. I think it was a workaround of something when *compiling* ROOT with modules. . The reason usually for the infinite loop in rootcling is whenever the libc includes come before the ROOT-specific headers. This happens because clang-5 cannot deduce the owning module correctly.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4486
https://github.com/root-project/root/pull/4486:301,safety,modul,module,301,Maybe we should try to remove it altogether. I think it was a workaround of something when *compiling* ROOT with modules. . The reason usually for the infinite loop in rootcling is whenever the libc includes come before the ROOT-specific headers. This happens because clang-5 cannot deduce the owning module correctly.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4486
https://github.com/root-project/root/pull/4487:0,safety,test,test,0,test to follow,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4487
https://github.com/root-project/root/pull/4487:0,testability,test,test,0,test to follow,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4487
https://github.com/root-project/root/pull/4488:96,usability,prefer,prefer,96,It is a urgent fix and the windows bot seems stuck. I do not expect problems for window s and I prefer to merge it now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4488
https://github.com/root-project/root/pull/4489:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4489
https://github.com/root-project/root/pull/4491:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4491
https://github.com/root-project/root/pull/4491:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On -DCMAKE_CXX_STANDARD=17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4491
https://github.com/root-project/root/pull/4491:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On -DCMAKE_CXX_STANDARD=17 -DLLVM_BUILD_TYPE=Debug,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4491
https://github.com/root-project/root/pull/4491:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On -DCMAKE_CXX_STANDARD=17 -DLLVM_BUILD_TYPE=Release,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4491
https://github.com/root-project/root/pull/4491:99,deployability,Releas,Release,99,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On -DCMAKE_CXX_STANDARD=17 -DLLVM_BUILD_TYPE=Release,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4491
https://github.com/root-project/root/pull/4496:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=14 -Droot7=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4496
https://github.com/root-project/root/pull/4496:0,deployability,Build,Build,0,"Build fails on platform, which does not support c++14, all other are ok",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4496
https://github.com/root-project/root/pull/4496:6,deployability,fail,fails,6,"Build fails on platform, which does not support c++14, all other are ok",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4496
https://github.com/root-project/root/pull/4496:15,interoperability,platform,platform,15,"Build fails on platform, which does not support c++14, all other are ok",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4496
https://github.com/root-project/root/pull/4496:6,reliability,fail,fails,6,"Build fails on platform, which does not support c++14, all other are ok",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4496
https://github.com/root-project/root/pull/4496:31,reliability,doe,does,31,"Build fails on platform, which does not support c++14, all other are ok",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4496
https://github.com/root-project/root/pull/4496:40,usability,support,support,40,"Build fails on platform, which does not support c++14, all other are ok",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4496
https://github.com/root-project/root/pull/4497:64,reliability,doe,does,64,@etejedor Can you check this PR? On my machine ipython notebook does not work - I trying to use python3. Maybe I could try python2 for that.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:15,availability,error,error,15,"I also get the error:. ```. [E 14:44:59.024 NotebookApp] Exception while loading config file /home/etejedor/.rootnb/jupyter_notebook_config.py. Traceback (most recent call last):. File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/application.py"", line 562, in _load_config_files. config = loader.load_config(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 457, in load_config. self._read_file_as_dict(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 489, in _read_file_as_dict. py3compat.execfile(conf_filename, namespace). File ""/home/etejedor/.local/lib/python3.6/site-packages/ipython_genutils/py3compat.py"", line 198, in execfile. exec(compiler(f.read(), fname, 'exec'), glob, loc). File ""/home/etejedor/.rootnb/jupyter_notebook_config.py"", line 9, in <module>. c.NotebookApp.extra_static_paths = ['%s'] % jsrootsys. TypeError: unsupported operand type(s) for %: 'list' and 'str'. ```. The string substitution is not done properly, the % operator needs to be inside the square brackets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:1054,availability,operat,operator,1054,"I also get the error:. ```. [E 14:44:59.024 NotebookApp] Exception while loading config file /home/etejedor/.rootnb/jupyter_notebook_config.py. Traceback (most recent call last):. File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/application.py"", line 562, in _load_config_files. config = loader.load_config(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 457, in load_config. self._read_file_as_dict(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 489, in _read_file_as_dict. py3compat.execfile(conf_filename, namespace). File ""/home/etejedor/.local/lib/python3.6/site-packages/ipython_genutils/py3compat.py"", line 198, in execfile. exec(compiler(f.read(), fname, 'exec'), glob, loc). File ""/home/etejedor/.rootnb/jupyter_notebook_config.py"", line 9, in <module>. c.NotebookApp.extra_static_paths = ['%s'] % jsrootsys. TypeError: unsupported operand type(s) for %: 'list' and 'str'. ```. The string substitution is not done properly, the % operator needs to be inside the square brackets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:312,deployability,loader,loader,312,"I also get the error:. ```. [E 14:44:59.024 NotebookApp] Exception while loading config file /home/etejedor/.rootnb/jupyter_notebook_config.py. Traceback (most recent call last):. File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/application.py"", line 562, in _load_config_files. config = loader.load_config(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 457, in load_config. self._read_file_as_dict(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 489, in _read_file_as_dict. py3compat.execfile(conf_filename, namespace). File ""/home/etejedor/.local/lib/python3.6/site-packages/ipython_genutils/py3compat.py"", line 198, in execfile. exec(compiler(f.read(), fname, 'exec'), glob, loc). File ""/home/etejedor/.rootnb/jupyter_notebook_config.py"", line 9, in <module>. c.NotebookApp.extra_static_paths = ['%s'] % jsrootsys. TypeError: unsupported operand type(s) for %: 'list' and 'str'. ```. The string substitution is not done properly, the % operator needs to be inside the square brackets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:407,deployability,loader,loader,407,"I also get the error:. ```. [E 14:44:59.024 NotebookApp] Exception while loading config file /home/etejedor/.rootnb/jupyter_notebook_config.py. Traceback (most recent call last):. File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/application.py"", line 562, in _load_config_files. config = loader.load_config(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 457, in load_config. self._read_file_as_dict(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 489, in _read_file_as_dict. py3compat.execfile(conf_filename, namespace). File ""/home/etejedor/.local/lib/python3.6/site-packages/ipython_genutils/py3compat.py"", line 198, in execfile. exec(compiler(f.read(), fname, 'exec'), glob, loc). File ""/home/etejedor/.rootnb/jupyter_notebook_config.py"", line 9, in <module>. c.NotebookApp.extra_static_paths = ['%s'] % jsrootsys. TypeError: unsupported operand type(s) for %: 'list' and 'str'. ```. The string substitution is not done properly, the % operator needs to be inside the square brackets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:545,deployability,loader,loader,545,"I also get the error:. ```. [E 14:44:59.024 NotebookApp] Exception while loading config file /home/etejedor/.rootnb/jupyter_notebook_config.py. Traceback (most recent call last):. File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/application.py"", line 562, in _load_config_files. config = loader.load_config(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 457, in load_config. self._read_file_as_dict(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 489, in _read_file_as_dict. py3compat.execfile(conf_filename, namespace). File ""/home/etejedor/.local/lib/python3.6/site-packages/ipython_genutils/py3compat.py"", line 198, in execfile. exec(compiler(f.read(), fname, 'exec'), glob, loc). File ""/home/etejedor/.rootnb/jupyter_notebook_config.py"", line 9, in <module>. c.NotebookApp.extra_static_paths = ['%s'] % jsrootsys. TypeError: unsupported operand type(s) for %: 'list' and 'str'. ```. The string substitution is not done properly, the % operator needs to be inside the square brackets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:869,deployability,modul,module,869,"I also get the error:. ```. [E 14:44:59.024 NotebookApp] Exception while loading config file /home/etejedor/.rootnb/jupyter_notebook_config.py. Traceback (most recent call last):. File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/application.py"", line 562, in _load_config_files. config = loader.load_config(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 457, in load_config. self._read_file_as_dict(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 489, in _read_file_as_dict. py3compat.execfile(conf_filename, namespace). File ""/home/etejedor/.local/lib/python3.6/site-packages/ipython_genutils/py3compat.py"", line 198, in execfile. exec(compiler(f.read(), fname, 'exec'), glob, loc). File ""/home/etejedor/.rootnb/jupyter_notebook_config.py"", line 9, in <module>. c.NotebookApp.extra_static_paths = ['%s'] % jsrootsys. TypeError: unsupported operand type(s) for %: 'list' and 'str'. ```. The string substitution is not done properly, the % operator needs to be inside the square brackets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:73,energy efficiency,load,loading,73,"I also get the error:. ```. [E 14:44:59.024 NotebookApp] Exception while loading config file /home/etejedor/.rootnb/jupyter_notebook_config.py. Traceback (most recent call last):. File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/application.py"", line 562, in _load_config_files. config = loader.load_config(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 457, in load_config. self._read_file_as_dict(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 489, in _read_file_as_dict. py3compat.execfile(conf_filename, namespace). File ""/home/etejedor/.local/lib/python3.6/site-packages/ipython_genutils/py3compat.py"", line 198, in execfile. exec(compiler(f.read(), fname, 'exec'), glob, loc). File ""/home/etejedor/.rootnb/jupyter_notebook_config.py"", line 9, in <module>. c.NotebookApp.extra_static_paths = ['%s'] % jsrootsys. TypeError: unsupported operand type(s) for %: 'list' and 'str'. ```. The string substitution is not done properly, the % operator needs to be inside the square brackets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:312,energy efficiency,load,loader,312,"I also get the error:. ```. [E 14:44:59.024 NotebookApp] Exception while loading config file /home/etejedor/.rootnb/jupyter_notebook_config.py. Traceback (most recent call last):. File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/application.py"", line 562, in _load_config_files. config = loader.load_config(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 457, in load_config. self._read_file_as_dict(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 489, in _read_file_as_dict. py3compat.execfile(conf_filename, namespace). File ""/home/etejedor/.local/lib/python3.6/site-packages/ipython_genutils/py3compat.py"", line 198, in execfile. exec(compiler(f.read(), fname, 'exec'), glob, loc). File ""/home/etejedor/.rootnb/jupyter_notebook_config.py"", line 9, in <module>. c.NotebookApp.extra_static_paths = ['%s'] % jsrootsys. TypeError: unsupported operand type(s) for %: 'list' and 'str'. ```. The string substitution is not done properly, the % operator needs to be inside the square brackets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:407,energy efficiency,load,loader,407,"I also get the error:. ```. [E 14:44:59.024 NotebookApp] Exception while loading config file /home/etejedor/.rootnb/jupyter_notebook_config.py. Traceback (most recent call last):. File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/application.py"", line 562, in _load_config_files. config = loader.load_config(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 457, in load_config. self._read_file_as_dict(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 489, in _read_file_as_dict. py3compat.execfile(conf_filename, namespace). File ""/home/etejedor/.local/lib/python3.6/site-packages/ipython_genutils/py3compat.py"", line 198, in execfile. exec(compiler(f.read(), fname, 'exec'), glob, loc). File ""/home/etejedor/.rootnb/jupyter_notebook_config.py"", line 9, in <module>. c.NotebookApp.extra_static_paths = ['%s'] % jsrootsys. TypeError: unsupported operand type(s) for %: 'list' and 'str'. ```. The string substitution is not done properly, the % operator needs to be inside the square brackets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:545,energy efficiency,load,loader,545,"I also get the error:. ```. [E 14:44:59.024 NotebookApp] Exception while loading config file /home/etejedor/.rootnb/jupyter_notebook_config.py. Traceback (most recent call last):. File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/application.py"", line 562, in _load_config_files. config = loader.load_config(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 457, in load_config. self._read_file_as_dict(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 489, in _read_file_as_dict. py3compat.execfile(conf_filename, namespace). File ""/home/etejedor/.local/lib/python3.6/site-packages/ipython_genutils/py3compat.py"", line 198, in execfile. exec(compiler(f.read(), fname, 'exec'), glob, loc). File ""/home/etejedor/.rootnb/jupyter_notebook_config.py"", line 9, in <module>. c.NotebookApp.extra_static_paths = ['%s'] % jsrootsys. TypeError: unsupported operand type(s) for %: 'list' and 'str'. ```. The string substitution is not done properly, the % operator needs to be inside the square brackets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:1013,integrability,sub,substitution,1013,"I also get the error:. ```. [E 14:44:59.024 NotebookApp] Exception while loading config file /home/etejedor/.rootnb/jupyter_notebook_config.py. Traceback (most recent call last):. File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/application.py"", line 562, in _load_config_files. config = loader.load_config(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 457, in load_config. self._read_file_as_dict(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 489, in _read_file_as_dict. py3compat.execfile(conf_filename, namespace). File ""/home/etejedor/.local/lib/python3.6/site-packages/ipython_genutils/py3compat.py"", line 198, in execfile. exec(compiler(f.read(), fname, 'exec'), glob, loc). File ""/home/etejedor/.rootnb/jupyter_notebook_config.py"", line 9, in <module>. c.NotebookApp.extra_static_paths = ['%s'] % jsrootsys. TypeError: unsupported operand type(s) for %: 'list' and 'str'. ```. The string substitution is not done properly, the % operator needs to be inside the square brackets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:227,modifiability,pac,packages,227,"I also get the error:. ```. [E 14:44:59.024 NotebookApp] Exception while loading config file /home/etejedor/.rootnb/jupyter_notebook_config.py. Traceback (most recent call last):. File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/application.py"", line 562, in _load_config_files. config = loader.load_config(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 457, in load_config. self._read_file_as_dict(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 489, in _read_file_as_dict. py3compat.execfile(conf_filename, namespace). File ""/home/etejedor/.local/lib/python3.6/site-packages/ipython_genutils/py3compat.py"", line 198, in execfile. exec(compiler(f.read(), fname, 'exec'), glob, loc). File ""/home/etejedor/.rootnb/jupyter_notebook_config.py"", line 9, in <module>. c.NotebookApp.extra_static_paths = ['%s'] % jsrootsys. TypeError: unsupported operand type(s) for %: 'list' and 'str'. ```. The string substitution is not done properly, the % operator needs to be inside the square brackets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:381,modifiability,pac,packages,381,"I also get the error:. ```. [E 14:44:59.024 NotebookApp] Exception while loading config file /home/etejedor/.rootnb/jupyter_notebook_config.py. Traceback (most recent call last):. File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/application.py"", line 562, in _load_config_files. config = loader.load_config(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 457, in load_config. self._read_file_as_dict(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 489, in _read_file_as_dict. py3compat.execfile(conf_filename, namespace). File ""/home/etejedor/.local/lib/python3.6/site-packages/ipython_genutils/py3compat.py"", line 198, in execfile. exec(compiler(f.read(), fname, 'exec'), glob, loc). File ""/home/etejedor/.rootnb/jupyter_notebook_config.py"", line 9, in <module>. c.NotebookApp.extra_static_paths = ['%s'] % jsrootsys. TypeError: unsupported operand type(s) for %: 'list' and 'str'. ```. The string substitution is not done properly, the % operator needs to be inside the square brackets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:519,modifiability,pac,packages,519,"I also get the error:. ```. [E 14:44:59.024 NotebookApp] Exception while loading config file /home/etejedor/.rootnb/jupyter_notebook_config.py. Traceback (most recent call last):. File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/application.py"", line 562, in _load_config_files. config = loader.load_config(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 457, in load_config. self._read_file_as_dict(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 489, in _read_file_as_dict. py3compat.execfile(conf_filename, namespace). File ""/home/etejedor/.local/lib/python3.6/site-packages/ipython_genutils/py3compat.py"", line 198, in execfile. exec(compiler(f.read(), fname, 'exec'), glob, loc). File ""/home/etejedor/.rootnb/jupyter_notebook_config.py"", line 9, in <module>. c.NotebookApp.extra_static_paths = ['%s'] % jsrootsys. TypeError: unsupported operand type(s) for %: 'list' and 'str'. ```. The string substitution is not done properly, the % operator needs to be inside the square brackets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:683,modifiability,pac,packages,683,"I also get the error:. ```. [E 14:44:59.024 NotebookApp] Exception while loading config file /home/etejedor/.rootnb/jupyter_notebook_config.py. Traceback (most recent call last):. File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/application.py"", line 562, in _load_config_files. config = loader.load_config(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 457, in load_config. self._read_file_as_dict(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 489, in _read_file_as_dict. py3compat.execfile(conf_filename, namespace). File ""/home/etejedor/.local/lib/python3.6/site-packages/ipython_genutils/py3compat.py"", line 198, in execfile. exec(compiler(f.read(), fname, 'exec'), glob, loc). File ""/home/etejedor/.rootnb/jupyter_notebook_config.py"", line 9, in <module>. c.NotebookApp.extra_static_paths = ['%s'] % jsrootsys. TypeError: unsupported operand type(s) for %: 'list' and 'str'. ```. The string substitution is not done properly, the % operator needs to be inside the square brackets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:869,modifiability,modul,module,869,"I also get the error:. ```. [E 14:44:59.024 NotebookApp] Exception while loading config file /home/etejedor/.rootnb/jupyter_notebook_config.py. Traceback (most recent call last):. File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/application.py"", line 562, in _load_config_files. config = loader.load_config(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 457, in load_config. self._read_file_as_dict(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 489, in _read_file_as_dict. py3compat.execfile(conf_filename, namespace). File ""/home/etejedor/.local/lib/python3.6/site-packages/ipython_genutils/py3compat.py"", line 198, in execfile. exec(compiler(f.read(), fname, 'exec'), glob, loc). File ""/home/etejedor/.rootnb/jupyter_notebook_config.py"", line 9, in <module>. c.NotebookApp.extra_static_paths = ['%s'] % jsrootsys. TypeError: unsupported operand type(s) for %: 'list' and 'str'. ```. The string substitution is not done properly, the % operator needs to be inside the square brackets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:15,performance,error,error,15,"I also get the error:. ```. [E 14:44:59.024 NotebookApp] Exception while loading config file /home/etejedor/.rootnb/jupyter_notebook_config.py. Traceback (most recent call last):. File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/application.py"", line 562, in _load_config_files. config = loader.load_config(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 457, in load_config. self._read_file_as_dict(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 489, in _read_file_as_dict. py3compat.execfile(conf_filename, namespace). File ""/home/etejedor/.local/lib/python3.6/site-packages/ipython_genutils/py3compat.py"", line 198, in execfile. exec(compiler(f.read(), fname, 'exec'), glob, loc). File ""/home/etejedor/.rootnb/jupyter_notebook_config.py"", line 9, in <module>. c.NotebookApp.extra_static_paths = ['%s'] % jsrootsys. TypeError: unsupported operand type(s) for %: 'list' and 'str'. ```. The string substitution is not done properly, the % operator needs to be inside the square brackets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:73,performance,load,loading,73,"I also get the error:. ```. [E 14:44:59.024 NotebookApp] Exception while loading config file /home/etejedor/.rootnb/jupyter_notebook_config.py. Traceback (most recent call last):. File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/application.py"", line 562, in _load_config_files. config = loader.load_config(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 457, in load_config. self._read_file_as_dict(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 489, in _read_file_as_dict. py3compat.execfile(conf_filename, namespace). File ""/home/etejedor/.local/lib/python3.6/site-packages/ipython_genutils/py3compat.py"", line 198, in execfile. exec(compiler(f.read(), fname, 'exec'), glob, loc). File ""/home/etejedor/.rootnb/jupyter_notebook_config.py"", line 9, in <module>. c.NotebookApp.extra_static_paths = ['%s'] % jsrootsys. TypeError: unsupported operand type(s) for %: 'list' and 'str'. ```. The string substitution is not done properly, the % operator needs to be inside the square brackets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:312,performance,load,loader,312,"I also get the error:. ```. [E 14:44:59.024 NotebookApp] Exception while loading config file /home/etejedor/.rootnb/jupyter_notebook_config.py. Traceback (most recent call last):. File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/application.py"", line 562, in _load_config_files. config = loader.load_config(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 457, in load_config. self._read_file_as_dict(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 489, in _read_file_as_dict. py3compat.execfile(conf_filename, namespace). File ""/home/etejedor/.local/lib/python3.6/site-packages/ipython_genutils/py3compat.py"", line 198, in execfile. exec(compiler(f.read(), fname, 'exec'), glob, loc). File ""/home/etejedor/.rootnb/jupyter_notebook_config.py"", line 9, in <module>. c.NotebookApp.extra_static_paths = ['%s'] % jsrootsys. TypeError: unsupported operand type(s) for %: 'list' and 'str'. ```. The string substitution is not done properly, the % operator needs to be inside the square brackets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:407,performance,load,loader,407,"I also get the error:. ```. [E 14:44:59.024 NotebookApp] Exception while loading config file /home/etejedor/.rootnb/jupyter_notebook_config.py. Traceback (most recent call last):. File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/application.py"", line 562, in _load_config_files. config = loader.load_config(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 457, in load_config. self._read_file_as_dict(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 489, in _read_file_as_dict. py3compat.execfile(conf_filename, namespace). File ""/home/etejedor/.local/lib/python3.6/site-packages/ipython_genutils/py3compat.py"", line 198, in execfile. exec(compiler(f.read(), fname, 'exec'), glob, loc). File ""/home/etejedor/.rootnb/jupyter_notebook_config.py"", line 9, in <module>. c.NotebookApp.extra_static_paths = ['%s'] % jsrootsys. TypeError: unsupported operand type(s) for %: 'list' and 'str'. ```. The string substitution is not done properly, the % operator needs to be inside the square brackets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:545,performance,load,loader,545,"I also get the error:. ```. [E 14:44:59.024 NotebookApp] Exception while loading config file /home/etejedor/.rootnb/jupyter_notebook_config.py. Traceback (most recent call last):. File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/application.py"", line 562, in _load_config_files. config = loader.load_config(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 457, in load_config. self._read_file_as_dict(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 489, in _read_file_as_dict. py3compat.execfile(conf_filename, namespace). File ""/home/etejedor/.local/lib/python3.6/site-packages/ipython_genutils/py3compat.py"", line 198, in execfile. exec(compiler(f.read(), fname, 'exec'), glob, loc). File ""/home/etejedor/.rootnb/jupyter_notebook_config.py"", line 9, in <module>. c.NotebookApp.extra_static_paths = ['%s'] % jsrootsys. TypeError: unsupported operand type(s) for %: 'list' and 'str'. ```. The string substitution is not done properly, the % operator needs to be inside the square brackets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:15,safety,error,error,15,"I also get the error:. ```. [E 14:44:59.024 NotebookApp] Exception while loading config file /home/etejedor/.rootnb/jupyter_notebook_config.py. Traceback (most recent call last):. File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/application.py"", line 562, in _load_config_files. config = loader.load_config(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 457, in load_config. self._read_file_as_dict(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 489, in _read_file_as_dict. py3compat.execfile(conf_filename, namespace). File ""/home/etejedor/.local/lib/python3.6/site-packages/ipython_genutils/py3compat.py"", line 198, in execfile. exec(compiler(f.read(), fname, 'exec'), glob, loc). File ""/home/etejedor/.rootnb/jupyter_notebook_config.py"", line 9, in <module>. c.NotebookApp.extra_static_paths = ['%s'] % jsrootsys. TypeError: unsupported operand type(s) for %: 'list' and 'str'. ```. The string substitution is not done properly, the % operator needs to be inside the square brackets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:57,safety,Except,Exception,57,"I also get the error:. ```. [E 14:44:59.024 NotebookApp] Exception while loading config file /home/etejedor/.rootnb/jupyter_notebook_config.py. Traceback (most recent call last):. File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/application.py"", line 562, in _load_config_files. config = loader.load_config(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 457, in load_config. self._read_file_as_dict(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 489, in _read_file_as_dict. py3compat.execfile(conf_filename, namespace). File ""/home/etejedor/.local/lib/python3.6/site-packages/ipython_genutils/py3compat.py"", line 198, in execfile. exec(compiler(f.read(), fname, 'exec'), glob, loc). File ""/home/etejedor/.rootnb/jupyter_notebook_config.py"", line 9, in <module>. c.NotebookApp.extra_static_paths = ['%s'] % jsrootsys. TypeError: unsupported operand type(s) for %: 'list' and 'str'. ```. The string substitution is not done properly, the % operator needs to be inside the square brackets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:869,safety,modul,module,869,"I also get the error:. ```. [E 14:44:59.024 NotebookApp] Exception while loading config file /home/etejedor/.rootnb/jupyter_notebook_config.py. Traceback (most recent call last):. File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/application.py"", line 562, in _load_config_files. config = loader.load_config(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 457, in load_config. self._read_file_as_dict(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 489, in _read_file_as_dict. py3compat.execfile(conf_filename, namespace). File ""/home/etejedor/.local/lib/python3.6/site-packages/ipython_genutils/py3compat.py"", line 198, in execfile. exec(compiler(f.read(), fname, 'exec'), glob, loc). File ""/home/etejedor/.rootnb/jupyter_notebook_config.py"", line 9, in <module>. c.NotebookApp.extra_static_paths = ['%s'] % jsrootsys. TypeError: unsupported operand type(s) for %: 'list' and 'str'. ```. The string substitution is not done properly, the % operator needs to be inside the square brackets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:144,testability,Trace,Traceback,144,"I also get the error:. ```. [E 14:44:59.024 NotebookApp] Exception while loading config file /home/etejedor/.rootnb/jupyter_notebook_config.py. Traceback (most recent call last):. File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/application.py"", line 562, in _load_config_files. config = loader.load_config(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 457, in load_config. self._read_file_as_dict(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 489, in _read_file_as_dict. py3compat.execfile(conf_filename, namespace). File ""/home/etejedor/.local/lib/python3.6/site-packages/ipython_genutils/py3compat.py"", line 198, in execfile. exec(compiler(f.read(), fname, 'exec'), glob, loc). File ""/home/etejedor/.rootnb/jupyter_notebook_config.py"", line 9, in <module>. c.NotebookApp.extra_static_paths = ['%s'] % jsrootsys. TypeError: unsupported operand type(s) for %: 'list' and 'str'. ```. The string substitution is not done properly, the % operator needs to be inside the square brackets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:15,usability,error,error,15,"I also get the error:. ```. [E 14:44:59.024 NotebookApp] Exception while loading config file /home/etejedor/.rootnb/jupyter_notebook_config.py. Traceback (most recent call last):. File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/application.py"", line 562, in _load_config_files. config = loader.load_config(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 457, in load_config. self._read_file_as_dict(). File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 489, in _read_file_as_dict. py3compat.execfile(conf_filename, namespace). File ""/home/etejedor/.local/lib/python3.6/site-packages/ipython_genutils/py3compat.py"", line 198, in execfile. exec(compiler(f.read(), fname, 'exec'), glob, loc). File ""/home/etejedor/.rootnb/jupyter_notebook_config.py"", line 9, in <module>. c.NotebookApp.extra_static_paths = ['%s'] % jsrootsys. TypeError: unsupported operand type(s) for %: 'list' and 'str'. ```. The string substitution is not done properly, the % operator needs to be inside the square brackets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:54,availability,operat,operator,54,"> The string substitution is not done properly, the % operator needs to be inside the square brackets. @etejedor Can you try this? I do not have system where ipython notebooks runs. Once server is up, you should have access to JSROOT files via:. http://server.url:port/static/scripts/JSRootCore.js.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:13,integrability,sub,substitution,13,"> The string substitution is not done properly, the % operator needs to be inside the square brackets. @etejedor Can you try this? I do not have system where ipython notebooks runs. Once server is up, you should have access to JSROOT files via:. http://server.url:port/static/scripts/JSRootCore.js.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:217,security,access,access,217,"> The string substitution is not done properly, the % operator needs to be inside the square brackets. @etejedor Can you try this? I do not have system where ipython notebooks runs. Once server is up, you should have access to JSROOT files via:. http://server.url:port/static/scripts/JSRootCore.js.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:103,reliability,doe,does,103,"@etejedor. Now it works for me. . But there is another problem. ```. c.NotebookApp.ip = '*'. ```. This does not work on my machine. . If I replace address by hand to 127.0.0.1, then notebook starts and I can verify my changes. Should we provide something like:. ```. root --notebook --ip=localhost. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:208,testability,verif,verify,208,"@etejedor. Now it works for me. . But there is another problem. ```. c.NotebookApp.ip = '*'. ```. This does not work on my machine. . If I replace address by hand to 127.0.0.1, then notebook starts and I can verify my changes. Should we provide something like:. ```. root --notebook --ip=localhost. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:27,availability,failur,failure,27,The `NotebookApp.ip = '*'` failure is a bug in older versions of Jupyter:. https://github.com/jupyter/notebook/pull/4139. Moving to a new version should fix the issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:27,deployability,fail,failure,27,The `NotebookApp.ip = '*'` failure is a bug in older versions of Jupyter:. https://github.com/jupyter/notebook/pull/4139. Moving to a new version should fix the issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:53,deployability,version,versions,53,The `NotebookApp.ip = '*'` failure is a bug in older versions of Jupyter:. https://github.com/jupyter/notebook/pull/4139. Moving to a new version should fix the issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:138,deployability,version,version,138,The `NotebookApp.ip = '*'` failure is a bug in older versions of Jupyter:. https://github.com/jupyter/notebook/pull/4139. Moving to a new version should fix the issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:53,integrability,version,versions,53,The `NotebookApp.ip = '*'` failure is a bug in older versions of Jupyter:. https://github.com/jupyter/notebook/pull/4139. Moving to a new version should fix the issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:138,integrability,version,version,138,The `NotebookApp.ip = '*'` failure is a bug in older versions of Jupyter:. https://github.com/jupyter/notebook/pull/4139. Moving to a new version should fix the issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:53,modifiability,version,versions,53,The `NotebookApp.ip = '*'` failure is a bug in older versions of Jupyter:. https://github.com/jupyter/notebook/pull/4139. Moving to a new version should fix the issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:138,modifiability,version,version,138,The `NotebookApp.ip = '*'` failure is a bug in older versions of Jupyter:. https://github.com/jupyter/notebook/pull/4139. Moving to a new version should fix the issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:27,performance,failur,failure,27,The `NotebookApp.ip = '*'` failure is a bug in older versions of Jupyter:. https://github.com/jupyter/notebook/pull/4139. Moving to a new version should fix the issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:27,reliability,fail,failure,27,The `NotebookApp.ip = '*'` failure is a bug in older versions of Jupyter:. https://github.com/jupyter/notebook/pull/4139. Moving to a new version should fix the issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:18,deployability,version,version,18,> Moving to a new version should fix the issue. I have:. ```. % jupyter-notebook --version 5.7.8. ```. Is it old?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:83,deployability,version,version,83,> Moving to a new version should fix the issue. I have:. ```. % jupyter-notebook --version 5.7.8. ```. Is it old?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:18,integrability,version,version,18,> Moving to a new version should fix the issue. I have:. ```. % jupyter-notebook --version 5.7.8. ```. Is it old?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:83,integrability,version,version,83,> Moving to a new version should fix the issue. I have:. ```. % jupyter-notebook --version 5.7.8. ```. Is it old?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:18,modifiability,version,version,18,> Moving to a new version should fix the issue. I have:. ```. % jupyter-notebook --version 5.7.8. ```. Is it old?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:83,modifiability,version,version,83,> Moving to a new version should fix the issue. I have:. ```. % jupyter-notebook --version 5.7.8. ```. Is it old?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:49,deployability,version,version,49,"Seems to be, fix in jupyter is not backported to version 5.7.x and there is still no 5.8 release. I guess, we should provide some reasonable solution for users like me :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:89,deployability,releas,release,89,"Seems to be, fix in jupyter is not backported to version 5.7.x and there is still no 5.8 release. I guess, we should provide some reasonable solution for users like me :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:49,integrability,version,version,49,"Seems to be, fix in jupyter is not backported to version 5.7.x and there is still no 5.8 release. I guess, we should provide some reasonable solution for users like me :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:49,modifiability,version,version,49,"Seems to be, fix in jupyter is not backported to version 5.7.x and there is still no 5.8 release. I guess, we should provide some reasonable solution for users like me :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:154,usability,user,users,154,"Seems to be, fix in jupyter is not backported to version 5.7.x and there is still no 5.8 release. I guess, we should provide some reasonable solution for users like me :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:56,deployability,instal,installation,56,"@etejedor Finally, this PR. . It will work for any ROOT installation, while any ROOT ships correspondent JSROOT version. Use of central web-server is dangerous, while not all ROOT versions can be covered by same JSROOT. Unfortunately, I cannot make it optional - this will require more fundamental changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:112,deployability,version,version,112,"@etejedor Finally, this PR. . It will work for any ROOT installation, while any ROOT ships correspondent JSROOT version. Use of central web-server is dangerous, while not all ROOT versions can be covered by same JSROOT. Unfortunately, I cannot make it optional - this will require more fundamental changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:180,deployability,version,versions,180,"@etejedor Finally, this PR. . It will work for any ROOT installation, while any ROOT ships correspondent JSROOT version. Use of central web-server is dangerous, while not all ROOT versions can be covered by same JSROOT. Unfortunately, I cannot make it optional - this will require more fundamental changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:112,integrability,version,version,112,"@etejedor Finally, this PR. . It will work for any ROOT installation, while any ROOT ships correspondent JSROOT version. Use of central web-server is dangerous, while not all ROOT versions can be covered by same JSROOT. Unfortunately, I cannot make it optional - this will require more fundamental changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:180,integrability,version,versions,180,"@etejedor Finally, this PR. . It will work for any ROOT installation, while any ROOT ships correspondent JSROOT version. Use of central web-server is dangerous, while not all ROOT versions can be covered by same JSROOT. Unfortunately, I cannot make it optional - this will require more fundamental changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:112,modifiability,version,version,112,"@etejedor Finally, this PR. . It will work for any ROOT installation, while any ROOT ships correspondent JSROOT version. Use of central web-server is dangerous, while not all ROOT versions can be covered by same JSROOT. Unfortunately, I cannot make it optional - this will require more fundamental changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:180,modifiability,version,versions,180,"@etejedor Finally, this PR. . It will work for any ROOT installation, while any ROOT ships correspondent JSROOT version. Use of central web-server is dangerous, while not all ROOT versions can be covered by same JSROOT. Unfortunately, I cannot make it optional - this will require more fundamental changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4498:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=14 -Droot7=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4498
https://github.com/root-project/root/pull/4498:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=14 -Droot7=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4498
https://github.com/root-project/root/pull/4499:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=14 -Droot7=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4499
https://github.com/root-project/root/pull/4500:6,availability,failur,failures,6,Build failures has nothing to do with the code,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4500
https://github.com/root-project/root/pull/4500:0,deployability,Build,Build,0,Build failures has nothing to do with the code,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4500
https://github.com/root-project/root/pull/4500:6,deployability,fail,failures,6,Build failures has nothing to do with the code,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4500
https://github.com/root-project/root/pull/4500:6,performance,failur,failures,6,Build failures has nothing to do with the code,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4500
https://github.com/root-project/root/pull/4500:6,reliability,fail,failures,6,Build failures has nothing to do with the code,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4500
https://github.com/root-project/root/pull/4502:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4502
https://github.com/root-project/root/pull/4502:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4502
https://github.com/root-project/root/pull/4502:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4502
https://github.com/root-project/root/pull/4504:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4504
https://github.com/root-project/root/pull/4507:51,safety,review,review,51,"all suggestions implemented now, @hageboeck please review!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4507
https://github.com/root-project/root/pull/4507:51,testability,review,review,51,"all suggestions implemented now, @hageboeck please review!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4507
https://github.com/root-project/root/pull/4509:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4509
https://github.com/root-project/root/pull/4509:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4509
https://github.com/root-project/root/pull/4509:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4509
https://github.com/root-project/root/pull/4510:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=14 -Droot7=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4510
https://github.com/root-project/root/pull/4510:0,availability,Failur,Failures,0,Failures has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4510
https://github.com/root-project/root/pull/4510:0,deployability,Fail,Failures,0,Failures has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4510
https://github.com/root-project/root/pull/4510:0,performance,Failur,Failures,0,Failures has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4510
https://github.com/root-project/root/pull/4510:0,reliability,Fail,Failures,0,Failures has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4510
https://github.com/root-project/root/pull/4511:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=14 -Droot7=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4511
https://github.com/root-project/root/pull/4512:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:0,deployability,Build,Build,0,Build failed because of `Build failed because: org.jenkinsci.plugins.workflow.job.WorkflowRun`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:6,deployability,fail,failed,6,Build failed because of `Build failed because: org.jenkinsci.plugins.workflow.job.WorkflowRun`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:25,deployability,Build,Build,25,Build failed because of `Build failed because: org.jenkinsci.plugins.workflow.job.WorkflowRun`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:31,deployability,fail,failed,31,Build failed because of `Build failed because: org.jenkinsci.plugins.workflow.job.WorkflowRun`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:61,interoperability,plug,plugins,61,Build failed because of `Build failed because: org.jenkinsci.plugins.workflow.job.WorkflowRun`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:6,reliability,fail,failed,6,Build failed because of `Build failed because: org.jenkinsci.plugins.workflow.job.WorkflowRun`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:31,reliability,fail,failed,31,Build failed because of `Build failed because: org.jenkinsci.plugins.workflow.job.WorkflowRun`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:69,usability,workflow,workflow,69,Build failed because of `Build failed because: org.jenkinsci.plugins.workflow.job.WorkflowRun`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:82,usability,Workflow,WorkflowRun,82,Build failed because of `Build failed because: org.jenkinsci.plugins.workflow.job.WorkflowRun`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4515:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=14 -Droot7=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4515
https://github.com/root-project/root/pull/4515:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=14 -Droot7=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4515
https://github.com/root-project/root/pull/4517:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=14 -Droot7=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4517
https://github.com/root-project/root/pull/4518:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=14 -Droot7=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4518
https://github.com/root-project/root/pull/4519:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4519
https://github.com/root-project/root/pull/4523:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=14 -Droot7=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4523
https://github.com/root-project/root/pull/4523:11,deployability,build,build,11,"@phsft-bot build just on ROOT-fedora27/noimt, ROOT-fedora29/python3, ROOT-ubuntu16/rtcxxmod, mac1014/cxx17, windows10/default with flags -Droot7=on",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4523
https://github.com/root-project/root/pull/4523:11,deployability,build,build,11,"@phsft-bot build just on ROOT-fedora27/noimt, ROOT-fedora29/python3, ROOT-ubuntu16/rtcxxmod, mac1014/cxx17, windows10/default with flags -Droot7=on",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4523
https://github.com/root-project/root/pull/4523:4,availability,error,errors,4,All errors has nothing to do with PR - merge,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4523
https://github.com/root-project/root/pull/4523:4,performance,error,errors,4,All errors has nothing to do with PR - merge,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4523
https://github.com/root-project/root/pull/4523:4,safety,error,errors,4,All errors has nothing to do with PR - merge,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4523
https://github.com/root-project/root/pull/4523:4,usability,error,errors,4,All errors has nothing to do with PR - merge,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4523
https://github.com/root-project/root/pull/4524:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4524
https://github.com/root-project/root/pull/4525:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4525
https://github.com/root-project/root/pull/4526:13,safety,test,tested,13,"Macro is not tested by jenbkins, only appears in CDash - merging",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4526
https://github.com/root-project/root/pull/4526:13,testability,test,tested,13,"Macro is not tested by jenbkins, only appears in CDash - merging",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4526
https://github.com/root-project/root/pull/4529:73,availability,error,error,73,@Axel-Naumann: This looks good to merge seems to me. The static analyser error about the missing include file TApplicationCommandLineOptionsHelp.h is because this include is generated at build time and of course not visible when the static analyser ran.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4529
https://github.com/root-project/root/pull/4529:187,deployability,build,build,187,@Axel-Naumann: This looks good to merge seems to me. The static analyser error about the missing include file TApplicationCommandLineOptionsHelp.h is because this include is generated at build time and of course not visible when the static analyser ran.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4529
https://github.com/root-project/root/pull/4529:73,performance,error,error,73,@Axel-Naumann: This looks good to merge seems to me. The static analyser error about the missing include file TApplicationCommandLineOptionsHelp.h is because this include is generated at build time and of course not visible when the static analyser ran.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4529
https://github.com/root-project/root/pull/4529:193,performance,time,time,193,@Axel-Naumann: This looks good to merge seems to me. The static analyser error about the missing include file TApplicationCommandLineOptionsHelp.h is because this include is generated at build time and of course not visible when the static analyser ran.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4529
https://github.com/root-project/root/pull/4529:73,safety,error,error,73,@Axel-Naumann: This looks good to merge seems to me. The static analyser error about the missing include file TApplicationCommandLineOptionsHelp.h is because this include is generated at build time and of course not visible when the static analyser ran.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4529
https://github.com/root-project/root/pull/4529:73,usability,error,error,73,@Axel-Naumann: This looks good to merge seems to me. The static analyser error about the missing include file TApplicationCommandLineOptionsHelp.h is because this include is generated at build time and of course not visible when the static analyser ran.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4529
https://github.com/root-project/root/pull/4529:78,deployability,log,logs,78,"Can we reduce the number of commits, especially the ones with the same commit logs?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4529
https://github.com/root-project/root/pull/4529:7,energy efficiency,reduc,reduce,7,"Can we reduce the number of commits, especially the ones with the same commit logs?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4529
https://github.com/root-project/root/pull/4529:78,safety,log,logs,78,"Can we reduce the number of commits, especially the ones with the same commit logs?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4529
https://github.com/root-project/root/pull/4529:78,security,log,logs,78,"Can we reduce the number of commits, especially the ones with the same commit logs?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4529
https://github.com/root-project/root/pull/4529:78,testability,log,logs,78,"Can we reduce the number of commits, especially the ones with the same commit logs?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4529
https://github.com/root-project/root/pull/4529:2,testability,plan,plan,2,"I plan to do ""Squash and merge"" ... I guess it is fine ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4529
https://github.com/root-project/root/pull/4529:55,deployability,log,log,55,If I remember correctly this would collate the commits log (i.e. ends up with many repeats),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4529
https://github.com/root-project/root/pull/4529:5,safety,reme,remember,5,If I remember correctly this would collate the commits log (i.e. ends up with many repeats),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4529
https://github.com/root-project/root/pull/4529:55,safety,log,log,55,If I remember correctly this would collate the commits log (i.e. ends up with many repeats),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4529
https://github.com/root-project/root/pull/4529:55,security,log,log,55,If I remember correctly this would collate the commits log (i.e. ends up with many repeats),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4529
https://github.com/root-project/root/pull/4529:55,testability,log,log,55,If I remember correctly this would collate the commits log (i.e. ends up with many repeats),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4529
https://github.com/root-project/root/pull/4529:43,deployability,updat,update,43,"We can combine some of the commits, we can update the author - there are many things we can do :-) I can show you tomorrow. Else e.g. Javier or Stephan might be able to show.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4529
https://github.com/root-project/root/pull/4529:43,safety,updat,update,43,"We can combine some of the commits, we can update the author - there are many things we can do :-) I can show you tomorrow. Else e.g. Javier or Stephan might be able to show.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4529
https://github.com/root-project/root/pull/4529:43,security,updat,update,43,"We can combine some of the commits, we can update the author - there are many things we can do :-) I can show you tomorrow. Else e.g. Javier or Stephan might be able to show.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4529
https://github.com/root-project/root/pull/4529:54,security,auth,author,54,"We can combine some of the commits, we can update the author - there are many things we can do :-) I can show you tomorrow. Else e.g. Javier or Stephan might be able to show.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4529
https://github.com/root-project/root/pull/4530:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=14 -Droot7=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4530
https://github.com/root-project/root/pull/4531:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4531
https://github.com/root-project/root/pull/4531:11,deployability,build,build,11,@phsft-bot build !,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4531
https://github.com/root-project/root/pull/4532:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=14 -Droot7=on,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4532
https://github.com/root-project/root/pull/4532:47,deployability,build,build,47,"There are many special cases for ROOT 7 in the build system. If you are going to move the source files, please make sure to fix all those special cases as well. Search for ""v7"" in [RootMacros.cmake](https://github.com/root-project/root/blob/master/cmake/modules/RootMacros.cmake), for example.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4532
https://github.com/root-project/root/pull/4532:254,deployability,modul,modules,254,"There are many special cases for ROOT 7 in the build system. If you are going to move the source files, please make sure to fix all those special cases as well. Search for ""v7"" in [RootMacros.cmake](https://github.com/root-project/root/blob/master/cmake/modules/RootMacros.cmake), for example.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4532
https://github.com/root-project/root/pull/4532:254,modifiability,modul,modules,254,"There are many special cases for ROOT 7 in the build system. If you are going to move the source files, please make sure to fix all those special cases as well. Search for ""v7"" in [RootMacros.cmake](https://github.com/root-project/root/blob/master/cmake/modules/RootMacros.cmake), for example.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4532
https://github.com/root-project/root/pull/4532:254,safety,modul,modules,254,"There are many special cases for ROOT 7 in the build system. If you are going to move the source files, please make sure to fix all those special cases as well. Search for ""v7"" in [RootMacros.cmake](https://github.com/root-project/root/blob/master/cmake/modules/RootMacros.cmake), for example.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4532
https://github.com/root-project/root/pull/4532:20,usability,tip,tip,20,"@amadio, thanks for tip, I will try to check it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4532
https://github.com/root-project/root/pull/4532:292,energy efficiency,core,core,292,"@amadio . As I could see, in all places in RootMacros.cmake ""v7"" appears to handle situation when v7 and non-v7 classes are mixed in same library. In normal situation (only-v7 or only-nonv7 classes) all these workarounds not required. After this PR only place where such mix will remain - is core/base. . But in ""core/base"" one could organize v7 files differently and fully avoid such workaround in cmake.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4532
https://github.com/root-project/root/pull/4532:313,energy efficiency,core,core,313,"@amadio . As I could see, in all places in RootMacros.cmake ""v7"" appears to handle situation when v7 and non-v7 classes are mixed in same library. In normal situation (only-v7 or only-nonv7 classes) all these workarounds not required. After this PR only place where such mix will remain - is core/base. . But in ""core/base"" one could organize v7 files differently and fully avoid such workaround in cmake.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4532
https://github.com/root-project/root/pull/4532:374,safety,avoid,avoid,374,"@amadio . As I could see, in all places in RootMacros.cmake ""v7"" appears to handle situation when v7 and non-v7 classes are mixed in same library. In normal situation (only-v7 or only-nonv7 classes) all these workarounds not required. After this PR only place where such mix will remain - is core/base. . But in ""core/base"" one could organize v7 files differently and fully avoid such workaround in cmake.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4532
https://github.com/root-project/root/pull/4533:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4533
https://github.com/root-project/root/pull/4533:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4533
https://github.com/root-project/root/pull/4536:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4536
https://github.com/root-project/root/pull/4536:11,deployability,build,build,11,@phsft-bot build! rebuilding after making branch with same name in roottest,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4536
https://github.com/root-project/root/pull/4540:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4541:0,security,Expir,Expired,0,"Expired, closing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4541
https://github.com/root-project/root/pull/4542:29,safety,reme,remember,29,"Hi Olivier,. thanks. Otto. I remember at the workshop 2005 Eddy Offermann asked me for that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4542
https://github.com/root-project/root/pull/4542:115,availability,consist,consistent,115,"Hi Otto,. I just tested this new feature. I ran $ROOTSYS/graphs/timeonaxis.C. The display in the status bar is not consistent with what is displayed on the axis. For example the bottom plot show years between 2000 and 2008 whereas. when I move the mouse cursor above the axis it shows dates between 2034 and 2042. Cheers,. Olivier. > On 15 Oct 2019, at 10:53, oschaile <notifications@github.com> wrote:. > . > Hi Olivier,. > thanks. > Otto. > I remember at the workshop 2005 Eddy Offermann asked me for that. > . > —. > You are receiving this because you modified the open/close state. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/4542?email_source=notifications&email_token=ABD25CUDTDC6K3JA7O3EQMDQOWAHFA5CNFSM4JAL6PRKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEBH7DCQ#issuecomment-542110090>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/ABD25CRYSKBHIHWOUDSFD53QOWAHFANCNFSM4JAL6PRA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4542
https://github.com/root-project/root/pull/4542:579,availability,state,state,579,"Hi Otto,. I just tested this new feature. I ran $ROOTSYS/graphs/timeonaxis.C. The display in the status bar is not consistent with what is displayed on the axis. For example the bottom plot show years between 2000 and 2008 whereas. when I move the mouse cursor above the axis it shows dates between 2034 and 2042. Cheers,. Olivier. > On 15 Oct 2019, at 10:53, oschaile <notifications@github.com> wrote:. > . > Hi Olivier,. > thanks. > Otto. > I remember at the workshop 2005 Eddy Offermann asked me for that. > . > —. > You are receiving this because you modified the open/close state. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/4542?email_source=notifications&email_token=ABD25CUDTDC6K3JA7O3EQMDQOWAHFA5CNFSM4JAL6PRKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEBH7DCQ#issuecomment-542110090>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/ABD25CRYSKBHIHWOUDSFD53QOWAHFANCNFSM4JAL6PRA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4542
https://github.com/root-project/root/pull/4542:579,integrability,state,state,579,"Hi Otto,. I just tested this new feature. I ran $ROOTSYS/graphs/timeonaxis.C. The display in the status bar is not consistent with what is displayed on the axis. For example the bottom plot show years between 2000 and 2008 whereas. when I move the mouse cursor above the axis it shows dates between 2034 and 2042. Cheers,. Olivier. > On 15 Oct 2019, at 10:53, oschaile <notifications@github.com> wrote:. > . > Hi Olivier,. > thanks. > Otto. > I remember at the workshop 2005 Eddy Offermann asked me for that. > . > —. > You are receiving this because you modified the open/close state. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/4542?email_source=notifications&email_token=ABD25CUDTDC6K3JA7O3EQMDQOWAHFA5CNFSM4JAL6PRKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEBH7DCQ#issuecomment-542110090>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/ABD25CRYSKBHIHWOUDSFD53QOWAHFANCNFSM4JAL6PRA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4542
https://github.com/root-project/root/pull/4542:64,performance,time,timeonaxis,64,"Hi Otto,. I just tested this new feature. I ran $ROOTSYS/graphs/timeonaxis.C. The display in the status bar is not consistent with what is displayed on the axis. For example the bottom plot show years between 2000 and 2008 whereas. when I move the mouse cursor above the axis it shows dates between 2034 and 2042. Cheers,. Olivier. > On 15 Oct 2019, at 10:53, oschaile <notifications@github.com> wrote:. > . > Hi Olivier,. > thanks. > Otto. > I remember at the workshop 2005 Eddy Offermann asked me for that. > . > —. > You are receiving this because you modified the open/close state. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/4542?email_source=notifications&email_token=ABD25CUDTDC6K3JA7O3EQMDQOWAHFA5CNFSM4JAL6PRKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEBH7DCQ#issuecomment-542110090>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/ABD25CRYSKBHIHWOUDSFD53QOWAHFANCNFSM4JAL6PRA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4542
https://github.com/root-project/root/pull/4542:17,safety,test,tested,17,"Hi Otto,. I just tested this new feature. I ran $ROOTSYS/graphs/timeonaxis.C. The display in the status bar is not consistent with what is displayed on the axis. For example the bottom plot show years between 2000 and 2008 whereas. when I move the mouse cursor above the axis it shows dates between 2034 and 2042. Cheers,. Olivier. > On 15 Oct 2019, at 10:53, oschaile <notifications@github.com> wrote:. > . > Hi Olivier,. > thanks. > Otto. > I remember at the workshop 2005 Eddy Offermann asked me for that. > . > —. > You are receiving this because you modified the open/close state. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/4542?email_source=notifications&email_token=ABD25CUDTDC6K3JA7O3EQMDQOWAHFA5CNFSM4JAL6PRKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEBH7DCQ#issuecomment-542110090>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/ABD25CRYSKBHIHWOUDSFD53QOWAHFANCNFSM4JAL6PRA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4542
https://github.com/root-project/root/pull/4542:445,safety,reme,remember,445,"Hi Otto,. I just tested this new feature. I ran $ROOTSYS/graphs/timeonaxis.C. The display in the status bar is not consistent with what is displayed on the axis. For example the bottom plot show years between 2000 and 2008 whereas. when I move the mouse cursor above the axis it shows dates between 2034 and 2042. Cheers,. Olivier. > On 15 Oct 2019, at 10:53, oschaile <notifications@github.com> wrote:. > . > Hi Olivier,. > thanks. > Otto. > I remember at the workshop 2005 Eddy Offermann asked me for that. > . > —. > You are receiving this because you modified the open/close state. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/4542?email_source=notifications&email_token=ABD25CUDTDC6K3JA7O3EQMDQOWAHFA5CNFSM4JAL6PRKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEBH7DCQ#issuecomment-542110090>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/ABD25CRYSKBHIHWOUDSFD53QOWAHFANCNFSM4JAL6PRA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4542
https://github.com/root-project/root/pull/4542:555,security,modif,modified,555,"Hi Otto,. I just tested this new feature. I ran $ROOTSYS/graphs/timeonaxis.C. The display in the status bar is not consistent with what is displayed on the axis. For example the bottom plot show years between 2000 and 2008 whereas. when I move the mouse cursor above the axis it shows dates between 2034 and 2042. Cheers,. Olivier. > On 15 Oct 2019, at 10:53, oschaile <notifications@github.com> wrote:. > . > Hi Olivier,. > thanks. > Otto. > I remember at the workshop 2005 Eddy Offermann asked me for that. > . > —. > You are receiving this because you modified the open/close state. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/4542?email_source=notifications&email_token=ABD25CUDTDC6K3JA7O3EQMDQOWAHFA5CNFSM4JAL6PRKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEBH7DCQ#issuecomment-542110090>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/ABD25CRYSKBHIHWOUDSFD53QOWAHFANCNFSM4JAL6PRA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4542
https://github.com/root-project/root/pull/4542:921,security,auth,auth,921,"Hi Otto,. I just tested this new feature. I ran $ROOTSYS/graphs/timeonaxis.C. The display in the status bar is not consistent with what is displayed on the axis. For example the bottom plot show years between 2000 and 2008 whereas. when I move the mouse cursor above the axis it shows dates between 2034 and 2042. Cheers,. Olivier. > On 15 Oct 2019, at 10:53, oschaile <notifications@github.com> wrote:. > . > Hi Olivier,. > thanks. > Otto. > I remember at the workshop 2005 Eddy Offermann asked me for that. > . > —. > You are receiving this because you modified the open/close state. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/4542?email_source=notifications&email_token=ABD25CUDTDC6K3JA7O3EQMDQOWAHFA5CNFSM4JAL6PRKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEBH7DCQ#issuecomment-542110090>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/ABD25CRYSKBHIHWOUDSFD53QOWAHFANCNFSM4JAL6PRA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4542
https://github.com/root-project/root/pull/4542:17,testability,test,tested,17,"Hi Otto,. I just tested this new feature. I ran $ROOTSYS/graphs/timeonaxis.C. The display in the status bar is not consistent with what is displayed on the axis. For example the bottom plot show years between 2000 and 2008 whereas. when I move the mouse cursor above the axis it shows dates between 2034 and 2042. Cheers,. Olivier. > On 15 Oct 2019, at 10:53, oschaile <notifications@github.com> wrote:. > . > Hi Olivier,. > thanks. > Otto. > I remember at the workshop 2005 Eddy Offermann asked me for that. > . > —. > You are receiving this because you modified the open/close state. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/4542?email_source=notifications&email_token=ABD25CUDTDC6K3JA7O3EQMDQOWAHFA5CNFSM4JAL6PRKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEBH7DCQ#issuecomment-542110090>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/ABD25CRYSKBHIHWOUDSFD53QOWAHFANCNFSM4JAL6PRA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4542
https://github.com/root-project/root/pull/4542:97,usability,statu,status,97,"Hi Otto,. I just tested this new feature. I ran $ROOTSYS/graphs/timeonaxis.C. The display in the status bar is not consistent with what is displayed on the axis. For example the bottom plot show years between 2000 and 2008 whereas. when I move the mouse cursor above the axis it shows dates between 2034 and 2042. Cheers,. Olivier. > On 15 Oct 2019, at 10:53, oschaile <notifications@github.com> wrote:. > . > Hi Olivier,. > thanks. > Otto. > I remember at the workshop 2005 Eddy Offermann asked me for that. > . > —. > You are receiving this because you modified the open/close state. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/4542?email_source=notifications&email_token=ABD25CUDTDC6K3JA7O3EQMDQOWAHFA5CNFSM4JAL6PRKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEBH7DCQ#issuecomment-542110090>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/ABD25CRYSKBHIHWOUDSFD53QOWAHFANCNFSM4JAL6PRA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4542
https://github.com/root-project/root/pull/4542:115,usability,consist,consistent,115,"Hi Otto,. I just tested this new feature. I ran $ROOTSYS/graphs/timeonaxis.C. The display in the status bar is not consistent with what is displayed on the axis. For example the bottom plot show years between 2000 and 2008 whereas. when I move the mouse cursor above the axis it shows dates between 2034 and 2042. Cheers,. Olivier. > On 15 Oct 2019, at 10:53, oschaile <notifications@github.com> wrote:. > . > Hi Olivier,. > thanks. > Otto. > I remember at the workshop 2005 Eddy Offermann asked me for that. > . > —. > You are receiving this because you modified the open/close state. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/4542?email_source=notifications&email_token=ABD25CUDTDC6K3JA7O3EQMDQOWAHFA5CNFSM4JAL6PRKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEBH7DCQ#issuecomment-542110090>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/ABD25CRYSKBHIHWOUDSFD53QOWAHFANCNFSM4JAL6PRA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4542
https://github.com/root-project/root/pull/4542:248,usability,mous,mouse,248,"Hi Otto,. I just tested this new feature. I ran $ROOTSYS/graphs/timeonaxis.C. The display in the status bar is not consistent with what is displayed on the axis. For example the bottom plot show years between 2000 and 2008 whereas. when I move the mouse cursor above the axis it shows dates between 2034 and 2042. Cheers,. Olivier. > On 15 Oct 2019, at 10:53, oschaile <notifications@github.com> wrote:. > . > Hi Olivier,. > thanks. > Otto. > I remember at the workshop 2005 Eddy Offermann asked me for that. > . > —. > You are receiving this because you modified the open/close state. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/4542?email_source=notifications&email_token=ABD25CUDTDC6K3JA7O3EQMDQOWAHFA5CNFSM4JAL6PRKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEBH7DCQ#issuecomment-542110090>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/ABD25CRYSKBHIHWOUDSFD53QOWAHFANCNFSM4JAL6PRA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4542
https://github.com/root-project/root/pull/4542:254,usability,cursor,cursor,254,"Hi Otto,. I just tested this new feature. I ran $ROOTSYS/graphs/timeonaxis.C. The display in the status bar is not consistent with what is displayed on the axis. For example the bottom plot show years between 2000 and 2008 whereas. when I move the mouse cursor above the axis it shows dates between 2034 and 2042. Cheers,. Olivier. > On 15 Oct 2019, at 10:53, oschaile <notifications@github.com> wrote:. > . > Hi Olivier,. > thanks. > Otto. > I remember at the workshop 2005 Eddy Offermann asked me for that. > . > —. > You are receiving this because you modified the open/close state. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/4542?email_source=notifications&email_token=ABD25CUDTDC6K3JA7O3EQMDQOWAHFA5CNFSM4JAL6PRKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEBH7DCQ#issuecomment-542110090>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/ABD25CRYSKBHIHWOUDSFD53QOWAHFANCNFSM4JAL6PRA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4542
https://github.com/root-project/root/pull/4542:573,usability,close,close,573,"Hi Otto,. I just tested this new feature. I ran $ROOTSYS/graphs/timeonaxis.C. The display in the status bar is not consistent with what is displayed on the axis. For example the bottom plot show years between 2000 and 2008 whereas. when I move the mouse cursor above the axis it shows dates between 2034 and 2042. Cheers,. Olivier. > On 15 Oct 2019, at 10:53, oschaile <notifications@github.com> wrote:. > . > Hi Olivier,. > thanks. > Otto. > I remember at the workshop 2005 Eddy Offermann asked me for that. > . > —. > You are receiving this because you modified the open/close state. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/4542?email_source=notifications&email_token=ABD25CUDTDC6K3JA7O3EQMDQOWAHFA5CNFSM4JAL6PRKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEBH7DCQ#issuecomment-542110090>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/ABD25CRYSKBHIHWOUDSFD53QOWAHFANCNFSM4JAL6PRA>. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4542
https://github.com/root-project/root/pull/4542:226,performance,time,timeonaxis,226,"hoops,. thats strange, for me it worked: . ![meteo01](https://user-images.githubusercontent.com/48549486/66818511-b75ed600-ef3d-11e9-8344-d08af077d5a0.png). I will check the example in the tutorials. $ROOTSYS/tutorials/graphs/timeonaxis.C. Otto",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4542
https://github.com/root-project/root/pull/4542:62,usability,user,user-images,62,"hoops,. thats strange, for me it worked: . ![meteo01](https://user-images.githubusercontent.com/48549486/66818511-b75ed600-ef3d-11e9-8344-d08af077d5a0.png). I will check the example in the tutorials. $ROOTSYS/tutorials/graphs/timeonaxis.C. Otto",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4542
https://github.com/root-project/root/pull/4543:16,testability,understand,understand,16,I'm not sure to understand why all this is needed...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4543
https://github.com/root-project/root/pull/4543:266,deployability,build,build,266,"Bertrand, main reason for this PR - TToggle and TToggleGroup classes situated in core/meta sub-directory, which is absolutely wrong place for them. One either move them to core/base or, like in this PR, group GUI-related classes in core/gui subdirectory. libCore is build as before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4543
https://github.com/root-project/root/pull/4543:81,energy efficiency,core,core,81,"Bertrand, main reason for this PR - TToggle and TToggleGroup classes situated in core/meta sub-directory, which is absolutely wrong place for them. One either move them to core/base or, like in this PR, group GUI-related classes in core/gui subdirectory. libCore is build as before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4543
https://github.com/root-project/root/pull/4543:172,energy efficiency,core,core,172,"Bertrand, main reason for this PR - TToggle and TToggleGroup classes situated in core/meta sub-directory, which is absolutely wrong place for them. One either move them to core/base or, like in this PR, group GUI-related classes in core/gui subdirectory. libCore is build as before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4543
https://github.com/root-project/root/pull/4543:232,energy efficiency,core,core,232,"Bertrand, main reason for this PR - TToggle and TToggleGroup classes situated in core/meta sub-directory, which is absolutely wrong place for them. One either move them to core/base or, like in this PR, group GUI-related classes in core/gui subdirectory. libCore is build as before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4543
https://github.com/root-project/root/pull/4543:91,integrability,sub,sub-directory,91,"Bertrand, main reason for this PR - TToggle and TToggleGroup classes situated in core/meta sub-directory, which is absolutely wrong place for them. One either move them to core/base or, like in this PR, group GUI-related classes in core/gui subdirectory. libCore is build as before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4543
https://github.com/root-project/root/pull/4543:241,integrability,sub,subdirectory,241,"Bertrand, main reason for this PR - TToggle and TToggleGroup classes situated in core/meta sub-directory, which is absolutely wrong place for them. One either move them to core/base or, like in this PR, group GUI-related classes in core/gui subdirectory. libCore is build as before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4543
https://github.com/root-project/root/pull/4543:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4543
https://github.com/root-project/root/pull/4545:4,availability,failur,failure,4,The failure is not related to the PR. This PR has NFC.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4545
https://github.com/root-project/root/pull/4545:4,deployability,fail,failure,4,The failure is not related to the PR. This PR has NFC.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4545
https://github.com/root-project/root/pull/4545:4,performance,failur,failure,4,The failure is not related to the PR. This PR has NFC.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4545
https://github.com/root-project/root/pull/4545:4,reliability,fail,failure,4,The failure is not related to the PR. This PR has NFC.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4545
https://github.com/root-project/root/pull/4546:0,usability,Close,Closed,0,Closed as per discussion with Enrico: will be superseded by bulk processing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4546
https://github.com/root-project/root/pull/4548:44,energy efficiency,current,current,44,@Falcort Can you rebase your branch against current ROOT master and submit again - now there are conflicts and I cannot merge it without manual intervention,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4548
https://github.com/root-project/root/pull/4548:68,integrability,sub,submit,68,@Falcort Can you rebase your branch against current ROOT master and submit again - now there are conflicts and I cannot merge it without manual intervention,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4548
https://github.com/root-project/root/pull/4548:97,interoperability,conflict,conflicts,97,@Falcort Can you rebase your branch against current ROOT master and submit again - now there are conflicts and I cannot merge it without manual intervention,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4548
https://github.com/root-project/root/pull/4548:135,integrability,sub,submit,135,"@Falcort . Are you ready with your changes? If yes, please rebase against master and do `push --force`. Most probably, tomorrow I will submit new RBrowsable code, which fully change server-side implementation of RBrowser",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4548
https://github.com/root-project/root/pull/4548:98,usability,indicat,indicate,98,"@linev I was able to fix all the problems, eveythings is working now. I have used a global var to indicate if the Browser reply need to change the TreeTable of just populate it. You can now change to any directory in your computers",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4548
https://github.com/root-project/root/pull/4548:52,safety,compl,complain,52,@Falcort Did you really rebase branch? github still complain that I cannot do fast-forward rebase and merge with master. Also merge commits should not appear in the list. The only I can do - squash all changes into single commit and merge,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4548
https://github.com/root-project/root/pull/4548:52,security,compl,complain,52,@Falcort Did you really rebase branch? github still complain that I cannot do fast-forward rebase and merge with master. Also merge commits should not appear in the list. The only I can do - squash all changes into single commit and merge,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4548
https://github.com/root-project/root/pull/4548:120,interoperability,conflict,conflicts,120,You just remove commit. One should do something like:. ```. git fetch upstream. git rebase upsteram/master. ... resolve conflicts ... git push --force. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4548
https://github.com/root-project/root/pull/4548:55,safety,test,testing,55,"@linev Thanks, but it's already done ^^. I am actually testing my rebase, and will push soon",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4548
https://github.com/root-project/root/pull/4548:55,testability,test,testing,55,"@linev Thanks, but it's already done ^^. I am actually testing my rebase, and will push soon",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4548
https://github.com/root-project/root/pull/4548:39,deployability,build,building,39,"@linev Sorry, I did have some problems building root, and having troubles with the rebase",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4548
https://github.com/root-project/root/pull/4548:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=14 -Droot7=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4548
https://github.com/root-project/root/pull/4549:11,deployability,build,build,11,@phsft-bot build just on ROOT-performance-centos7-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4549
https://github.com/root-project/root/pull/4549:30,performance,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4549
https://github.com/root-project/root/pull/4549:30,usability,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4549
https://github.com/root-project/root/pull/4549:106,usability,user,user-images,106,"Docs for the workhorse TTree::Branch will now look like this:. <img width=""1117"" alt=""image"" src=""https://user-images.githubusercontent.com/16205615/66833755-aec9c800-ef5c-11e9-93f6-589fdf098cb1.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4549
https://github.com/root-project/root/pull/4551:5,availability,error,errors,5,Test errors has nothing to do with PR - merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4551
https://github.com/root-project/root/pull/4551:5,performance,error,errors,5,Test errors has nothing to do with PR - merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4551
https://github.com/root-project/root/pull/4551:0,safety,Test,Test,0,Test errors has nothing to do with PR - merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4551
https://github.com/root-project/root/pull/4551:5,safety,error,errors,5,Test errors has nothing to do with PR - merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4551
https://github.com/root-project/root/pull/4551:0,testability,Test,Test,0,Test errors has nothing to do with PR - merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4551
https://github.com/root-project/root/pull/4551:5,usability,error,errors,5,Test errors has nothing to do with PR - merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4551
https://github.com/root-project/root/pull/4553:2,availability,error,error,2,> error: The last gc run reported the following. Please correct the root cause. should be fixed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:2,performance,error,error,2,> error: The last gc run reported the following. Please correct the root cause. should be fixed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:2,safety,error,error,2,> error: The last gc run reported the following. Please correct the root cause. should be fixed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:2,usability,error,error,2,> error: The last gc run reported the following. Please correct the root cause. should be fixed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:547,availability,error,errors,547,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:1074,availability,avail,available,1074,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:126,deployability,modul,modulemap,126,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:183,deployability,infrastructur,infrastructure,183,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:251,deployability,modul,modulemaps,251,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:527,deployability,modul,module,527,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:570,deployability,build,builds,570,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:594,deployability,instal,installed,594,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:687,deployability,configurat,configuration,687,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:17,energy efficiency,current,current,17,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:687,integrability,configur,configuration,687,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:126,modifiability,modul,modulemap,126,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:251,modifiability,modul,modulemaps,251,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:527,modifiability,modul,module,527,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:687,modifiability,configur,configuration,687,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:547,performance,error,errors,547,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:1074,reliability,availab,available,1074,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:126,safety,modul,modulemap,126,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:251,safety,modul,modulemaps,251,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:527,safety,modul,module,527,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:547,safety,error,errors,547,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:1074,safety,avail,available,1074,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:1164,safety,detect,detect,1164,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:296,security,control,control,296,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:366,security,control,control,366,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:687,security,configur,configuration,687,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:1074,security,availab,available,1074,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:1164,security,detect,detect,1164,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:49,testability,understand,understanding,49,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:296,testability,control,control,296,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:366,testability,control,control,366,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:547,usability,error,errors,547,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:848,usability,support,support,848,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4554:29,deployability,updat,update,29,"Hi Otto, . Thank you for the update. It works nicely ! I will merge. Cheers,. Olivier",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4554
https://github.com/root-project/root/pull/4554:29,safety,updat,update,29,"Hi Otto, . Thank you for the update. It works nicely ! I will merge. Cheers,. Olivier",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4554
https://github.com/root-project/root/pull/4554:29,security,updat,update,29,"Hi Otto, . Thank you for the update. It works nicely ! I will merge. Cheers,. Olivier",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4554
https://github.com/root-project/root/pull/4555:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=14 -Droot7=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4555
https://github.com/root-project/root/pull/4555:4,deployability,build,build,4,The build on `windows10/default` failed because of a `.lock` file. I just removed it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4555
https://github.com/root-project/root/pull/4555:33,deployability,fail,failed,33,The build on `windows10/default` failed because of a `.lock` file. I just removed it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4555
https://github.com/root-project/root/pull/4555:55,performance,lock,lock,55,The build on `windows10/default` failed because of a `.lock` file. I just removed it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4555
https://github.com/root-project/root/pull/4555:33,reliability,fail,failed,33,The build on `windows10/default` failed because of a `.lock` file. I just removed it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4555
https://github.com/root-project/root/pull/4555:55,security,lock,lock,55,The build on `windows10/default` failed because of a `.lock` file. I just removed it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4555
https://github.com/root-project/root/pull/4555:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4555
https://github.com/root-project/root/pull/4555:139,deployability,updat,update,139,"> include/tbb/concurrent_hash_map.h:127:51: warning: ‘void* memset. @Axel-Naumann . Seems to be, this is resolved in latest tbb. Should we update it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4555
https://github.com/root-project/root/pull/4555:139,safety,updat,update,139,"> include/tbb/concurrent_hash_map.h:127:51: warning: ‘void* memset. @Axel-Naumann . Seems to be, this is resolved in latest tbb. Should we update it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4555
https://github.com/root-project/root/pull/4555:139,security,updat,update,139,"> include/tbb/concurrent_hash_map.h:127:51: warning: ‘void* memset. @Axel-Naumann . Seems to be, this is resolved in latest tbb. Should we update it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4555
https://github.com/root-project/root/pull/4555:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4555
https://github.com/root-project/root/pull/4556:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4556
https://github.com/root-project/root/pull/4557:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4560:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4560
https://github.com/root-project/root/pull/4561:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1080,availability,operat,operations,1080,":thinking: My approach here may be wrong... Looking more at the `CMakeCache.txt` file generated for my build on ARM, I see these values when I set up the build of ROOT 6.18/04 with the system's GCC 6.3:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. ```. While in my GCC 8 build of the master branch I see this:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=. //Test HAVE_CXX_ATOMICS64_WITH_LIB. HAVE_CXX_ATOMICS64_WITH_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. //Have library atomic. HAVE_CXX_LIBATOMICS64:INTERNAL=1. ```. The number of internal CMake variables actually differs between the two cases. In the first case, with the system's GCC 6.3 it does seem to detect things correctly. Since there is no `libatomic.so` file anywhere under `/usr/lib`. But in the second case, with GCC 8, CMake seems to falter. It seems that since only for the 64-bit atomic operations is a library needed, CMake gets confused about how to compile the code. Mind you, I'm pretty sure that the Raspberry Pi has a 32-bit ARM CPU. So I have no clue what the 64-bit atomic operations are doing. :confused:. I also tried to google these cache variables, but surprisingly I didn't find much useful. Still, I can't help but think now that this linking issue in ROOT should rather be attacked by fixing CMake somehow, and not by linking against `libatomic` ourselves. Then again, doing this is definitely getting the job done...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1274,availability,operat,operations,1274,":thinking: My approach here may be wrong... Looking more at the `CMakeCache.txt` file generated for my build on ARM, I see these values when I set up the build of ROOT 6.18/04 with the system's GCC 6.3:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. ```. While in my GCC 8 build of the master branch I see this:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=. //Test HAVE_CXX_ATOMICS64_WITH_LIB. HAVE_CXX_ATOMICS64_WITH_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. //Have library atomic. HAVE_CXX_LIBATOMICS64:INTERNAL=1. ```. The number of internal CMake variables actually differs between the two cases. In the first case, with the system's GCC 6.3 it does seem to detect things correctly. Since there is no `libatomic.so` file anywhere under `/usr/lib`. But in the second case, with GCC 8, CMake seems to falter. It seems that since only for the 64-bit atomic operations is a library needed, CMake gets confused about how to compile the code. Mind you, I'm pretty sure that the Raspberry Pi has a 32-bit ARM CPU. So I have no clue what the 64-bit atomic operations are doing. :confused:. I also tried to google these cache variables, but surprisingly I didn't find much useful. Still, I can't help but think now that this linking issue in ROOT should rather be attacked by fixing CMake somehow, and not by linking against `libatomic` ourselves. Then again, doing this is definitely getting the job done...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:103,deployability,build,build,103,":thinking: My approach here may be wrong... Looking more at the `CMakeCache.txt` file generated for my build on ARM, I see these values when I set up the build of ROOT 6.18/04 with the system's GCC 6.3:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. ```. While in my GCC 8 build of the master branch I see this:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=. //Test HAVE_CXX_ATOMICS64_WITH_LIB. HAVE_CXX_ATOMICS64_WITH_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. //Have library atomic. HAVE_CXX_LIBATOMICS64:INTERNAL=1. ```. The number of internal CMake variables actually differs between the two cases. In the first case, with the system's GCC 6.3 it does seem to detect things correctly. Since there is no `libatomic.so` file anywhere under `/usr/lib`. But in the second case, with GCC 8, CMake seems to falter. It seems that since only for the 64-bit atomic operations is a library needed, CMake gets confused about how to compile the code. Mind you, I'm pretty sure that the Raspberry Pi has a 32-bit ARM CPU. So I have no clue what the 64-bit atomic operations are doing. :confused:. I also tried to google these cache variables, but surprisingly I didn't find much useful. Still, I can't help but think now that this linking issue in ROOT should rather be attacked by fixing CMake somehow, and not by linking against `libatomic` ourselves. Then again, doing this is definitely getting the job done...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:154,deployability,build,build,154,":thinking: My approach here may be wrong... Looking more at the `CMakeCache.txt` file generated for my build on ARM, I see these values when I set up the build of ROOT 6.18/04 with the system's GCC 6.3:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. ```. While in my GCC 8 build of the master branch I see this:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=. //Test HAVE_CXX_ATOMICS64_WITH_LIB. HAVE_CXX_ATOMICS64_WITH_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. //Have library atomic. HAVE_CXX_LIBATOMICS64:INTERNAL=1. ```. The number of internal CMake variables actually differs between the two cases. In the first case, with the system's GCC 6.3 it does seem to detect things correctly. Since there is no `libatomic.so` file anywhere under `/usr/lib`. But in the second case, with GCC 8, CMake seems to falter. It seems that since only for the 64-bit atomic operations is a library needed, CMake gets confused about how to compile the code. Mind you, I'm pretty sure that the Raspberry Pi has a 32-bit ARM CPU. So I have no clue what the 64-bit atomic operations are doing. :confused:. I also tried to google these cache variables, but surprisingly I didn't find much useful. Still, I can't help but think now that this linking issue in ROOT should rather be attacked by fixing CMake somehow, and not by linking against `libatomic` ourselves. Then again, doing this is definitely getting the job done...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:397,deployability,build,build,397,":thinking: My approach here may be wrong... Looking more at the `CMakeCache.txt` file generated for my build on ARM, I see these values when I set up the build of ROOT 6.18/04 with the system's GCC 6.3:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. ```. While in my GCC 8 build of the master branch I see this:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=. //Test HAVE_CXX_ATOMICS64_WITH_LIB. HAVE_CXX_ATOMICS64_WITH_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. //Have library atomic. HAVE_CXX_LIBATOMICS64:INTERNAL=1. ```. The number of internal CMake variables actually differs between the two cases. In the first case, with the system's GCC 6.3 it does seem to detect things correctly. Since there is no `libatomic.so` file anywhere under `/usr/lib`. But in the second case, with GCC 8, CMake seems to falter. It seems that since only for the 64-bit atomic operations is a library needed, CMake gets confused about how to compile the code. Mind you, I'm pretty sure that the Raspberry Pi has a 32-bit ARM CPU. So I have no clue what the 64-bit atomic operations are doing. :confused:. I also tried to google these cache variables, but surprisingly I didn't find much useful. Still, I can't help but think now that this linking issue in ROOT should rather be attacked by fixing CMake somehow, and not by linking against `libatomic` ourselves. Then again, doing this is definitely getting the job done...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1228,energy efficiency,CPU,CPU,1228,":thinking: My approach here may be wrong... Looking more at the `CMakeCache.txt` file generated for my build on ARM, I see these values when I set up the build of ROOT 6.18/04 with the system's GCC 6.3:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. ```. While in my GCC 8 build of the master branch I see this:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=. //Test HAVE_CXX_ATOMICS64_WITH_LIB. HAVE_CXX_ATOMICS64_WITH_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. //Have library atomic. HAVE_CXX_LIBATOMICS64:INTERNAL=1. ```. The number of internal CMake variables actually differs between the two cases. In the first case, with the system's GCC 6.3 it does seem to detect things correctly. Since there is no `libatomic.so` file anywhere under `/usr/lib`. But in the second case, with GCC 8, CMake seems to falter. It seems that since only for the 64-bit atomic operations is a library needed, CMake gets confused about how to compile the code. Mind you, I'm pretty sure that the Raspberry Pi has a 32-bit ARM CPU. So I have no clue what the 64-bit atomic operations are doing. :confused:. I also tried to google these cache variables, but surprisingly I didn't find much useful. Still, I can't help but think now that this linking issue in ROOT should rather be attacked by fixing CMake somehow, and not by linking against `libatomic` ourselves. Then again, doing this is definitely getting the job done...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:773,modifiability,variab,variables,773,":thinking: My approach here may be wrong... Looking more at the `CMakeCache.txt` file generated for my build on ARM, I see these values when I set up the build of ROOT 6.18/04 with the system's GCC 6.3:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. ```. While in my GCC 8 build of the master branch I see this:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=. //Test HAVE_CXX_ATOMICS64_WITH_LIB. HAVE_CXX_ATOMICS64_WITH_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. //Have library atomic. HAVE_CXX_LIBATOMICS64:INTERNAL=1. ```. The number of internal CMake variables actually differs between the two cases. In the first case, with the system's GCC 6.3 it does seem to detect things correctly. Since there is no `libatomic.so` file anywhere under `/usr/lib`. But in the second case, with GCC 8, CMake seems to falter. It seems that since only for the 64-bit atomic operations is a library needed, CMake gets confused about how to compile the code. Mind you, I'm pretty sure that the Raspberry Pi has a 32-bit ARM CPU. So I have no clue what the 64-bit atomic operations are doing. :confused:. I also tried to google these cache variables, but surprisingly I didn't find much useful. Still, I can't help but think now that this linking issue in ROOT should rather be attacked by fixing CMake somehow, and not by linking against `libatomic` ourselves. Then again, doing this is definitely getting the job done...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1343,modifiability,variab,variables,1343,":thinking: My approach here may be wrong... Looking more at the `CMakeCache.txt` file generated for my build on ARM, I see these values when I set up the build of ROOT 6.18/04 with the system's GCC 6.3:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. ```. While in my GCC 8 build of the master branch I see this:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=. //Test HAVE_CXX_ATOMICS64_WITH_LIB. HAVE_CXX_ATOMICS64_WITH_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. //Have library atomic. HAVE_CXX_LIBATOMICS64:INTERNAL=1. ```. The number of internal CMake variables actually differs between the two cases. In the first case, with the system's GCC 6.3 it does seem to detect things correctly. Since there is no `libatomic.so` file anywhere under `/usr/lib`. But in the second case, with GCC 8, CMake seems to falter. It seems that since only for the 64-bit atomic operations is a library needed, CMake gets confused about how to compile the code. Mind you, I'm pretty sure that the Raspberry Pi has a 32-bit ARM CPU. So I have no clue what the 64-bit atomic operations are doing. :confused:. I also tried to google these cache variables, but surprisingly I didn't find much useful. Still, I can't help but think now that this linking issue in ROOT should rather be attacked by fixing CMake somehow, and not by linking against `libatomic` ourselves. Then again, doing this is definitely getting the job done...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1228,performance,CPU,CPU,1228,":thinking: My approach here may be wrong... Looking more at the `CMakeCache.txt` file generated for my build on ARM, I see these values when I set up the build of ROOT 6.18/04 with the system's GCC 6.3:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. ```. While in my GCC 8 build of the master branch I see this:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=. //Test HAVE_CXX_ATOMICS64_WITH_LIB. HAVE_CXX_ATOMICS64_WITH_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. //Have library atomic. HAVE_CXX_LIBATOMICS64:INTERNAL=1. ```. The number of internal CMake variables actually differs between the two cases. In the first case, with the system's GCC 6.3 it does seem to detect things correctly. Since there is no `libatomic.so` file anywhere under `/usr/lib`. But in the second case, with GCC 8, CMake seems to falter. It seems that since only for the 64-bit atomic operations is a library needed, CMake gets confused about how to compile the code. Mind you, I'm pretty sure that the Raspberry Pi has a 32-bit ARM CPU. So I have no clue what the 64-bit atomic operations are doing. :confused:. I also tried to google these cache variables, but surprisingly I didn't find much useful. Still, I can't help but think now that this linking issue in ROOT should rather be attacked by fixing CMake somehow, and not by linking against `libatomic` ourselves. Then again, doing this is definitely getting the job done...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1337,performance,cach,cache,1337,":thinking: My approach here may be wrong... Looking more at the `CMakeCache.txt` file generated for my build on ARM, I see these values when I set up the build of ROOT 6.18/04 with the system's GCC 6.3:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. ```. While in my GCC 8 build of the master branch I see this:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=. //Test HAVE_CXX_ATOMICS64_WITH_LIB. HAVE_CXX_ATOMICS64_WITH_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. //Have library atomic. HAVE_CXX_LIBATOMICS64:INTERNAL=1. ```. The number of internal CMake variables actually differs between the two cases. In the first case, with the system's GCC 6.3 it does seem to detect things correctly. Since there is no `libatomic.so` file anywhere under `/usr/lib`. But in the second case, with GCC 8, CMake seems to falter. It seems that since only for the 64-bit atomic operations is a library needed, CMake gets confused about how to compile the code. Mind you, I'm pretty sure that the Raspberry Pi has a 32-bit ARM CPU. So I have no clue what the 64-bit atomic operations are doing. :confused:. I also tried to google these cache variables, but surprisingly I didn't find much useful. Still, I can't help but think now that this linking issue in ROOT should rather be attacked by fixing CMake somehow, and not by linking against `libatomic` ourselves. Then again, doing this is definitely getting the job done...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:871,reliability,doe,does,871,":thinking: My approach here may be wrong... Looking more at the `CMakeCache.txt` file generated for my build on ARM, I see these values when I set up the build of ROOT 6.18/04 with the system's GCC 6.3:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. ```. While in my GCC 8 build of the master branch I see this:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=. //Test HAVE_CXX_ATOMICS64_WITH_LIB. HAVE_CXX_ATOMICS64_WITH_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. //Have library atomic. HAVE_CXX_LIBATOMICS64:INTERNAL=1. ```. The number of internal CMake variables actually differs between the two cases. In the first case, with the system's GCC 6.3 it does seem to detect things correctly. Since there is no `libatomic.so` file anywhere under `/usr/lib`. But in the second case, with GCC 8, CMake seems to falter. It seems that since only for the 64-bit atomic operations is a library needed, CMake gets confused about how to compile the code. Mind you, I'm pretty sure that the Raspberry Pi has a 32-bit ARM CPU. So I have no clue what the 64-bit atomic operations are doing. :confused:. I also tried to google these cache variables, but surprisingly I didn't find much useful. Still, I can't help but think now that this linking issue in ROOT should rather be attacked by fixing CMake somehow, and not by linking against `libatomic` ourselves. Then again, doing this is definitely getting the job done...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:216,safety,Test,Test,216,":thinking: My approach here may be wrong... Looking more at the `CMakeCache.txt` file generated for my build on ARM, I see these values when I set up the build of ROOT 6.18/04 with the system's GCC 6.3:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. ```. While in my GCC 8 build of the master branch I see this:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=. //Test HAVE_CXX_ATOMICS64_WITH_LIB. HAVE_CXX_ATOMICS64_WITH_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. //Have library atomic. HAVE_CXX_LIBATOMICS64:INTERNAL=1. ```. The number of internal CMake variables actually differs between the two cases. In the first case, with the system's GCC 6.3 it does seem to detect things correctly. Since there is no `libatomic.so` file anywhere under `/usr/lib`. But in the second case, with GCC 8, CMake seems to falter. It seems that since only for the 64-bit atomic operations is a library needed, CMake gets confused about how to compile the code. Mind you, I'm pretty sure that the Raspberry Pi has a 32-bit ARM CPU. So I have no clue what the 64-bit atomic operations are doing. :confused:. I also tried to google these cache variables, but surprisingly I didn't find much useful. Still, I can't help but think now that this linking issue in ROOT should rather be attacked by fixing CMake somehow, and not by linking against `libatomic` ourselves. Then again, doing this is definitely getting the job done...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:298,safety,Test,Test,298,":thinking: My approach here may be wrong... Looking more at the `CMakeCache.txt` file generated for my build on ARM, I see these values when I set up the build of ROOT 6.18/04 with the system's GCC 6.3:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. ```. While in my GCC 8 build of the master branch I see this:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=. //Test HAVE_CXX_ATOMICS64_WITH_LIB. HAVE_CXX_ATOMICS64_WITH_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. //Have library atomic. HAVE_CXX_LIBATOMICS64:INTERNAL=1. ```. The number of internal CMake variables actually differs between the two cases. In the first case, with the system's GCC 6.3 it does seem to detect things correctly. Since there is no `libatomic.so` file anywhere under `/usr/lib`. But in the second case, with GCC 8, CMake seems to falter. It seems that since only for the 64-bit atomic operations is a library needed, CMake gets confused about how to compile the code. Mind you, I'm pretty sure that the Raspberry Pi has a 32-bit ARM CPU. So I have no clue what the 64-bit atomic operations are doing. :confused:. I also tried to google these cache variables, but surprisingly I didn't find much useful. Still, I can't help but think now that this linking issue in ROOT should rather be attacked by fixing CMake somehow, and not by linking against `libatomic` ourselves. Then again, doing this is definitely getting the job done...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:449,safety,Test,Test,449,":thinking: My approach here may be wrong... Looking more at the `CMakeCache.txt` file generated for my build on ARM, I see these values when I set up the build of ROOT 6.18/04 with the system's GCC 6.3:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. ```. While in my GCC 8 build of the master branch I see this:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=. //Test HAVE_CXX_ATOMICS64_WITH_LIB. HAVE_CXX_ATOMICS64_WITH_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. //Have library atomic. HAVE_CXX_LIBATOMICS64:INTERNAL=1. ```. The number of internal CMake variables actually differs between the two cases. In the first case, with the system's GCC 6.3 it does seem to detect things correctly. Since there is no `libatomic.so` file anywhere under `/usr/lib`. But in the second case, with GCC 8, CMake seems to falter. It seems that since only for the 64-bit atomic operations is a library needed, CMake gets confused about how to compile the code. Mind you, I'm pretty sure that the Raspberry Pi has a 32-bit ARM CPU. So I have no clue what the 64-bit atomic operations are doing. :confused:. I also tried to google these cache variables, but surprisingly I didn't find much useful. Still, I can't help but think now that this linking issue in ROOT should rather be attacked by fixing CMake somehow, and not by linking against `libatomic` ourselves. Then again, doing this is definitely getting the job done...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:530,safety,Test,Test,530,":thinking: My approach here may be wrong... Looking more at the `CMakeCache.txt` file generated for my build on ARM, I see these values when I set up the build of ROOT 6.18/04 with the system's GCC 6.3:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. ```. While in my GCC 8 build of the master branch I see this:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=. //Test HAVE_CXX_ATOMICS64_WITH_LIB. HAVE_CXX_ATOMICS64_WITH_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. //Have library atomic. HAVE_CXX_LIBATOMICS64:INTERNAL=1. ```. The number of internal CMake variables actually differs between the two cases. In the first case, with the system's GCC 6.3 it does seem to detect things correctly. Since there is no `libatomic.so` file anywhere under `/usr/lib`. But in the second case, with GCC 8, CMake seems to falter. It seems that since only for the 64-bit atomic operations is a library needed, CMake gets confused about how to compile the code. Mind you, I'm pretty sure that the Raspberry Pi has a 32-bit ARM CPU. So I have no clue what the 64-bit atomic operations are doing. :confused:. I also tried to google these cache variables, but surprisingly I didn't find much useful. Still, I can't help but think now that this linking issue in ROOT should rather be attacked by fixing CMake somehow, and not by linking against `libatomic` ourselves. Then again, doing this is definitely getting the job done...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:606,safety,Test,Test,606,":thinking: My approach here may be wrong... Looking more at the `CMakeCache.txt` file generated for my build on ARM, I see these values when I set up the build of ROOT 6.18/04 with the system's GCC 6.3:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. ```. While in my GCC 8 build of the master branch I see this:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=. //Test HAVE_CXX_ATOMICS64_WITH_LIB. HAVE_CXX_ATOMICS64_WITH_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. //Have library atomic. HAVE_CXX_LIBATOMICS64:INTERNAL=1. ```. The number of internal CMake variables actually differs between the two cases. In the first case, with the system's GCC 6.3 it does seem to detect things correctly. Since there is no `libatomic.so` file anywhere under `/usr/lib`. But in the second case, with GCC 8, CMake seems to falter. It seems that since only for the 64-bit atomic operations is a library needed, CMake gets confused about how to compile the code. Mind you, I'm pretty sure that the Raspberry Pi has a 32-bit ARM CPU. So I have no clue what the 64-bit atomic operations are doing. :confused:. I also tried to google these cache variables, but surprisingly I didn't find much useful. Still, I can't help but think now that this linking issue in ROOT should rather be attacked by fixing CMake somehow, and not by linking against `libatomic` ourselves. Then again, doing this is definitely getting the job done...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:884,safety,detect,detect,884,":thinking: My approach here may be wrong... Looking more at the `CMakeCache.txt` file generated for my build on ARM, I see these values when I set up the build of ROOT 6.18/04 with the system's GCC 6.3:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. ```. While in my GCC 8 build of the master branch I see this:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=. //Test HAVE_CXX_ATOMICS64_WITH_LIB. HAVE_CXX_ATOMICS64_WITH_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. //Have library atomic. HAVE_CXX_LIBATOMICS64:INTERNAL=1. ```. The number of internal CMake variables actually differs between the two cases. In the first case, with the system's GCC 6.3 it does seem to detect things correctly. Since there is no `libatomic.so` file anywhere under `/usr/lib`. But in the second case, with GCC 8, CMake seems to falter. It seems that since only for the 64-bit atomic operations is a library needed, CMake gets confused about how to compile the code. Mind you, I'm pretty sure that the Raspberry Pi has a 32-bit ARM CPU. So I have no clue what the 64-bit atomic operations are doing. :confused:. I also tried to google these cache variables, but surprisingly I didn't find much useful. Still, I can't help but think now that this linking issue in ROOT should rather be attacked by fixing CMake somehow, and not by linking against `libatomic` ourselves. Then again, doing this is definitely getting the job done...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:884,security,detect,detect,884,":thinking: My approach here may be wrong... Looking more at the `CMakeCache.txt` file generated for my build on ARM, I see these values when I set up the build of ROOT 6.18/04 with the system's GCC 6.3:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. ```. While in my GCC 8 build of the master branch I see this:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=. //Test HAVE_CXX_ATOMICS64_WITH_LIB. HAVE_CXX_ATOMICS64_WITH_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. //Have library atomic. HAVE_CXX_LIBATOMICS64:INTERNAL=1. ```. The number of internal CMake variables actually differs between the two cases. In the first case, with the system's GCC 6.3 it does seem to detect things correctly. Since there is no `libatomic.so` file anywhere under `/usr/lib`. But in the second case, with GCC 8, CMake seems to falter. It seems that since only for the 64-bit atomic operations is a library needed, CMake gets confused about how to compile the code. Mind you, I'm pretty sure that the Raspberry Pi has a 32-bit ARM CPU. So I have no clue what the 64-bit atomic operations are doing. :confused:. I also tried to google these cache variables, but surprisingly I didn't find much useful. Still, I can't help but think now that this linking issue in ROOT should rather be attacked by fixing CMake somehow, and not by linking against `libatomic` ourselves. Then again, doing this is definitely getting the job done...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1481,security,attack,attacked,1481,":thinking: My approach here may be wrong... Looking more at the `CMakeCache.txt` file generated for my build on ARM, I see these values when I set up the build of ROOT 6.18/04 with the system's GCC 6.3:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. ```. While in my GCC 8 build of the master branch I see this:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=. //Test HAVE_CXX_ATOMICS64_WITH_LIB. HAVE_CXX_ATOMICS64_WITH_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. //Have library atomic. HAVE_CXX_LIBATOMICS64:INTERNAL=1. ```. The number of internal CMake variables actually differs between the two cases. In the first case, with the system's GCC 6.3 it does seem to detect things correctly. Since there is no `libatomic.so` file anywhere under `/usr/lib`. But in the second case, with GCC 8, CMake seems to falter. It seems that since only for the 64-bit atomic operations is a library needed, CMake gets confused about how to compile the code. Mind you, I'm pretty sure that the Raspberry Pi has a 32-bit ARM CPU. So I have no clue what the 64-bit atomic operations are doing. :confused:. I also tried to google these cache variables, but surprisingly I didn't find much useful. Still, I can't help but think now that this linking issue in ROOT should rather be attacked by fixing CMake somehow, and not by linking against `libatomic` ourselves. Then again, doing this is definitely getting the job done...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:216,testability,Test,Test,216,":thinking: My approach here may be wrong... Looking more at the `CMakeCache.txt` file generated for my build on ARM, I see these values when I set up the build of ROOT 6.18/04 with the system's GCC 6.3:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. ```. While in my GCC 8 build of the master branch I see this:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=. //Test HAVE_CXX_ATOMICS64_WITH_LIB. HAVE_CXX_ATOMICS64_WITH_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. //Have library atomic. HAVE_CXX_LIBATOMICS64:INTERNAL=1. ```. The number of internal CMake variables actually differs between the two cases. In the first case, with the system's GCC 6.3 it does seem to detect things correctly. Since there is no `libatomic.so` file anywhere under `/usr/lib`. But in the second case, with GCC 8, CMake seems to falter. It seems that since only for the 64-bit atomic operations is a library needed, CMake gets confused about how to compile the code. Mind you, I'm pretty sure that the Raspberry Pi has a 32-bit ARM CPU. So I have no clue what the 64-bit atomic operations are doing. :confused:. I also tried to google these cache variables, but surprisingly I didn't find much useful. Still, I can't help but think now that this linking issue in ROOT should rather be attacked by fixing CMake somehow, and not by linking against `libatomic` ourselves. Then again, doing this is definitely getting the job done...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:298,testability,Test,Test,298,":thinking: My approach here may be wrong... Looking more at the `CMakeCache.txt` file generated for my build on ARM, I see these values when I set up the build of ROOT 6.18/04 with the system's GCC 6.3:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. ```. While in my GCC 8 build of the master branch I see this:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=. //Test HAVE_CXX_ATOMICS64_WITH_LIB. HAVE_CXX_ATOMICS64_WITH_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. //Have library atomic. HAVE_CXX_LIBATOMICS64:INTERNAL=1. ```. The number of internal CMake variables actually differs between the two cases. In the first case, with the system's GCC 6.3 it does seem to detect things correctly. Since there is no `libatomic.so` file anywhere under `/usr/lib`. But in the second case, with GCC 8, CMake seems to falter. It seems that since only for the 64-bit atomic operations is a library needed, CMake gets confused about how to compile the code. Mind you, I'm pretty sure that the Raspberry Pi has a 32-bit ARM CPU. So I have no clue what the 64-bit atomic operations are doing. :confused:. I also tried to google these cache variables, but surprisingly I didn't find much useful. Still, I can't help but think now that this linking issue in ROOT should rather be attacked by fixing CMake somehow, and not by linking against `libatomic` ourselves. Then again, doing this is definitely getting the job done...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:449,testability,Test,Test,449,":thinking: My approach here may be wrong... Looking more at the `CMakeCache.txt` file generated for my build on ARM, I see these values when I set up the build of ROOT 6.18/04 with the system's GCC 6.3:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. ```. While in my GCC 8 build of the master branch I see this:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=. //Test HAVE_CXX_ATOMICS64_WITH_LIB. HAVE_CXX_ATOMICS64_WITH_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. //Have library atomic. HAVE_CXX_LIBATOMICS64:INTERNAL=1. ```. The number of internal CMake variables actually differs between the two cases. In the first case, with the system's GCC 6.3 it does seem to detect things correctly. Since there is no `libatomic.so` file anywhere under `/usr/lib`. But in the second case, with GCC 8, CMake seems to falter. It seems that since only for the 64-bit atomic operations is a library needed, CMake gets confused about how to compile the code. Mind you, I'm pretty sure that the Raspberry Pi has a 32-bit ARM CPU. So I have no clue what the 64-bit atomic operations are doing. :confused:. I also tried to google these cache variables, but surprisingly I didn't find much useful. Still, I can't help but think now that this linking issue in ROOT should rather be attacked by fixing CMake somehow, and not by linking against `libatomic` ourselves. Then again, doing this is definitely getting the job done...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:530,testability,Test,Test,530,":thinking: My approach here may be wrong... Looking more at the `CMakeCache.txt` file generated for my build on ARM, I see these values when I set up the build of ROOT 6.18/04 with the system's GCC 6.3:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. ```. While in my GCC 8 build of the master branch I see this:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=. //Test HAVE_CXX_ATOMICS64_WITH_LIB. HAVE_CXX_ATOMICS64_WITH_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. //Have library atomic. HAVE_CXX_LIBATOMICS64:INTERNAL=1. ```. The number of internal CMake variables actually differs between the two cases. In the first case, with the system's GCC 6.3 it does seem to detect things correctly. Since there is no `libatomic.so` file anywhere under `/usr/lib`. But in the second case, with GCC 8, CMake seems to falter. It seems that since only for the 64-bit atomic operations is a library needed, CMake gets confused about how to compile the code. Mind you, I'm pretty sure that the Raspberry Pi has a 32-bit ARM CPU. So I have no clue what the 64-bit atomic operations are doing. :confused:. I also tried to google these cache variables, but surprisingly I didn't find much useful. Still, I can't help but think now that this linking issue in ROOT should rather be attacked by fixing CMake somehow, and not by linking against `libatomic` ourselves. Then again, doing this is definitely getting the job done...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:606,testability,Test,Test,606,":thinking: My approach here may be wrong... Looking more at the `CMakeCache.txt` file generated for my build on ARM, I see these values when I set up the build of ROOT 6.18/04 with the system's GCC 6.3:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. ```. While in my GCC 8 build of the master branch I see this:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=. //Test HAVE_CXX_ATOMICS64_WITH_LIB. HAVE_CXX_ATOMICS64_WITH_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. //Have library atomic. HAVE_CXX_LIBATOMICS64:INTERNAL=1. ```. The number of internal CMake variables actually differs between the two cases. In the first case, with the system's GCC 6.3 it does seem to detect things correctly. Since there is no `libatomic.so` file anywhere under `/usr/lib`. But in the second case, with GCC 8, CMake seems to falter. It seems that since only for the 64-bit atomic operations is a library needed, CMake gets confused about how to compile the code. Mind you, I'm pretty sure that the Raspberry Pi has a 32-bit ARM CPU. So I have no clue what the 64-bit atomic operations are doing. :confused:. I also tried to google these cache variables, but surprisingly I didn't find much useful. Still, I can't help but think now that this linking issue in ROOT should rather be attacked by fixing CMake somehow, and not by linking against `libatomic` ourselves. Then again, doing this is definitely getting the job done...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1413,usability,help,help,1413,":thinking: My approach here may be wrong... Looking more at the `CMakeCache.txt` file generated for my build on ARM, I see these values when I set up the build of ROOT 6.18/04 with the system's GCC 6.3:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. ```. While in my GCC 8 build of the master branch I see this:. ```cmake. //Test HAVE_CXX_ATOMICS64_WITHOUT_LIB. HAVE_CXX_ATOMICS64_WITHOUT_LIB:INTERNAL=. //Test HAVE_CXX_ATOMICS64_WITH_LIB. HAVE_CXX_ATOMICS64_WITH_LIB:INTERNAL=1. //Test HAVE_CXX_ATOMICS_WITHOUT_LIB. HAVE_CXX_ATOMICS_WITHOUT_LIB:INTERNAL=1. //Have library atomic. HAVE_CXX_LIBATOMICS64:INTERNAL=1. ```. The number of internal CMake variables actually differs between the two cases. In the first case, with the system's GCC 6.3 it does seem to detect things correctly. Since there is no `libatomic.so` file anywhere under `/usr/lib`. But in the second case, with GCC 8, CMake seems to falter. It seems that since only for the 64-bit atomic operations is a library needed, CMake gets confused about how to compile the code. Mind you, I'm pretty sure that the Raspberry Pi has a 32-bit ARM CPU. So I have no clue what the 64-bit atomic operations are doing. :confused:. I also tried to google these cache variables, but surprisingly I didn't find much useful. Still, I can't help but think now that this linking issue in ROOT should rather be attacked by fixing CMake somehow, and not by linking against `libatomic` ourselves. Then again, doing this is definitely getting the job done...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:176,deployability,modul,modules,176,"Okay, those cache variables seem to have been a red herring. They don't come from CMake after all, but from LLVM instead. https://github.com/llvm-mirror/llvm/blob/master/cmake/modules/CheckAtomic.cmake. So we shouldn't rely on these after all in the main ROOT configuration. (At least I think not...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:260,deployability,configurat,configuration,260,"Okay, those cache variables seem to have been a red herring. They don't come from CMake after all, but from LLVM instead. https://github.com/llvm-mirror/llvm/blob/master/cmake/modules/CheckAtomic.cmake. So we shouldn't rely on these after all in the main ROOT configuration. (At least I think not...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:260,integrability,configur,configuration,260,"Okay, those cache variables seem to have been a red herring. They don't come from CMake after all, but from LLVM instead. https://github.com/llvm-mirror/llvm/blob/master/cmake/modules/CheckAtomic.cmake. So we shouldn't rely on these after all in the main ROOT configuration. (At least I think not...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:18,modifiability,variab,variables,18,"Okay, those cache variables seem to have been a red herring. They don't come from CMake after all, but from LLVM instead. https://github.com/llvm-mirror/llvm/blob/master/cmake/modules/CheckAtomic.cmake. So we shouldn't rely on these after all in the main ROOT configuration. (At least I think not...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:176,modifiability,modul,modules,176,"Okay, those cache variables seem to have been a red herring. They don't come from CMake after all, but from LLVM instead. https://github.com/llvm-mirror/llvm/blob/master/cmake/modules/CheckAtomic.cmake. So we shouldn't rely on these after all in the main ROOT configuration. (At least I think not...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:260,modifiability,configur,configuration,260,"Okay, those cache variables seem to have been a red herring. They don't come from CMake after all, but from LLVM instead. https://github.com/llvm-mirror/llvm/blob/master/cmake/modules/CheckAtomic.cmake. So we shouldn't rely on these after all in the main ROOT configuration. (At least I think not...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:12,performance,cach,cache,12,"Okay, those cache variables seem to have been a red herring. They don't come from CMake after all, but from LLVM instead. https://github.com/llvm-mirror/llvm/blob/master/cmake/modules/CheckAtomic.cmake. So we shouldn't rely on these after all in the main ROOT configuration. (At least I think not...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:176,safety,modul,modules,176,"Okay, those cache variables seem to have been a red herring. They don't come from CMake after all, but from LLVM instead. https://github.com/llvm-mirror/llvm/blob/master/cmake/modules/CheckAtomic.cmake. So we shouldn't rely on these after all in the main ROOT configuration. (At least I think not...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:260,security,configur,configuration,260,"Okay, those cache variables seem to have been a red herring. They don't come from CMake after all, but from LLVM instead. https://github.com/llvm-mirror/llvm/blob/master/cmake/modules/CheckAtomic.cmake. So we shouldn't rely on these after all in the main ROOT configuration. (At least I think not...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:28,deployability,configurat,configuration,28,Learning from what the LLVM configuration is doing I believe I managed to make my code quite a bit better. :wink: So I'll be curious about any feedback on this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:63,deployability,manag,managed,63,Learning from what the LLVM configuration is doing I believe I managed to make my code quite a bit better. :wink: So I'll be curious about any feedback on this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:63,energy efficiency,manag,managed,63,Learning from what the LLVM configuration is doing I believe I managed to make my code quite a bit better. :wink: So I'll be curious about any feedback on this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:28,integrability,configur,configuration,28,Learning from what the LLVM configuration is doing I believe I managed to make my code quite a bit better. :wink: So I'll be curious about any feedback on this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:28,modifiability,configur,configuration,28,Learning from what the LLVM configuration is doing I believe I managed to make my code quite a bit better. :wink: So I'll be curious about any feedback on this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:63,safety,manag,managed,63,Learning from what the LLVM configuration is doing I believe I managed to make my code quite a bit better. :wink: So I'll be curious about any feedback on this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:28,security,configur,configuration,28,Learning from what the LLVM configuration is doing I believe I managed to make my code quite a bit better. :wink: So I'll be curious about any feedback on this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:0,usability,Learn,Learning,0,Learning from what the LLVM configuration is doing I believe I managed to make my code quite a bit better. :wink: So I'll be curious about any feedback on this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:143,usability,feedback,feedback,143,Learning from what the LLVM configuration is doing I believe I managed to make my code quite a bit better. :wink: So I'll be curious about any feedback on this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:20,energy efficiency,green,green,20,"@Axel-Naumann PR is green (red status of Jenkins is because of outdated Github plugin) and looks good to me, can you check please as well?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:79,interoperability,plug,plugin,79,"@Axel-Naumann PR is green (red status of Jenkins is because of outdated Github plugin) and looks good to me, can you check please as well?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:31,usability,statu,status,31,"@Axel-Naumann PR is green (red status of Jenkins is because of outdated Github plugin) and looks good to me, can you check please as well?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:11,deployability,build,build,11,@phsft-bot build just on windows10/cxx14,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:123,deployability,fail,fails,123,@krasznaa can you do me a favor and just hit fork on https://github.com/root-project/roottest/ ? else our Windows PR check fails - it's a bug on our side...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:123,reliability,fail,fails,123,@krasznaa can you do me a favor and just hit fork on https://github.com/root-project/roottest/ ? else our Windows PR check fails - it's a bug on our side...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:125,deployability,fail,fails,125,> @krasznaa can you do me a favor and just hit fork on https://github.com/root-project/roottest/ ? else our Windows PR check fails - it's a bug on our side... Done. Although this does seem like a serious weakness. What will happen when my fork will inevitably go out of date?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:125,reliability,fail,fails,125,> @krasznaa can you do me a favor and just hit fork on https://github.com/root-project/roottest/ ? else our Windows PR check fails - it's a bug on our side... Done. Although this does seem like a serious weakness. What will happen when my fork will inevitably go out of date?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:179,reliability,doe,does,179,> @krasznaa can you do me a favor and just hit fork on https://github.com/root-project/roottest/ ? else our Windows PR check fails - it's a bug on our side... Done. Although this does seem like a serious weakness. What will happen when my fork will inevitably go out of date?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:11,deployability,build,build,11,@phsft-bot build just on windows10/cxx14,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:11,deployability,build,build,11,@phsft-bot build just on windows10/cxx14,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:502,availability,error,error,502,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:606,availability,Error,Error,606,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:687,availability,Error,Error,687,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:726,availability,Error,Error,726,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:46,deployability,patch,patches,46,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:175,deployability,build,build,175,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:305,deployability,instal,install,305,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:575,deployability,build,build,575,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:905,deployability,build,build,905,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1218,deployability,build,build,1218,"described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/install. LD_LIBRARY_PATH=/home/pi/root/install/lib. And the import ROOT works fine in Jupyter notebook giving: Welcome to JupyROOT 6.22/03",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1229,deployability,instal,install,1229,"described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/install. LD_LIBRARY_PATH=/home/pi/root/install/lib. And the import ROOT works fine in Jupyter notebook giving: Welcome to JupyROOT 6.22/03",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1260,deployability,build,build,1260,"described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/install. LD_LIBRARY_PATH=/home/pi/root/install/lib. And the import ROOT works fine in Jupyter notebook giving: Welcome to JupyROOT 6.22/03",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1414,deployability,instal,install,1414,"described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/install. LD_LIBRARY_PATH=/home/pi/root/install/lib. And the import ROOT works fine in Jupyter notebook giving: Welcome to JupyROOT 6.22/03",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1578,deployability,contain,contained,1578,"described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/install. LD_LIBRARY_PATH=/home/pi/root/install/lib. And the import ROOT works fine in Jupyter notebook giving: Welcome to JupyROOT 6.22/03",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1623,deployability,instal,install,1623,"described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/install. LD_LIBRARY_PATH=/home/pi/root/install/lib. And the import ROOT works fine in Jupyter notebook giving: Welcome to JupyROOT 6.22/03",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1667,deployability,instal,install,1667,"described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/install. LD_LIBRARY_PATH=/home/pi/root/install/lib. And the import ROOT works fine in Jupyter notebook giving: Welcome to JupyROOT 6.22/03",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1756,deployability,instal,install,1756,"described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/install. LD_LIBRARY_PATH=/home/pi/root/install/lib. And the import ROOT works fine in Jupyter notebook giving: Welcome to JupyROOT 6.22/03",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1801,deployability,instal,install,1801,"described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/install. LD_LIBRARY_PATH=/home/pi/root/install/lib. And the import ROOT works fine in Jupyter notebook giving: Welcome to JupyROOT 6.22/03",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1846,deployability,instal,install,1846,"described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/install. LD_LIBRARY_PATH=/home/pi/root/install/lib. And the import ROOT works fine in Jupyter notebook giving: Welcome to JupyROOT 6.22/03",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1880,deployability,instal,install,1880,"described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/install. LD_LIBRARY_PATH=/home/pi/root/install/lib. And the import ROOT works fine in Jupyter notebook giving: Welcome to JupyROOT 6.22/03",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1915,deployability,instal,install,1915,"described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/install. LD_LIBRARY_PATH=/home/pi/root/install/lib. And the import ROOT works fine in Jupyter notebook giving: Welcome to JupyROOT 6.22/03",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1955,deployability,instal,install,1955,"described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/install. LD_LIBRARY_PATH=/home/pi/root/install/lib. And the import ROOT works fine in Jupyter notebook giving: Welcome to JupyROOT 6.22/03",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1999,deployability,instal,install,1999,"described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/install. LD_LIBRARY_PATH=/home/pi/root/install/lib. And the import ROOT works fine in Jupyter notebook giving: Welcome to JupyROOT 6.22/03",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:2038,deployability,instal,install,2038,"described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/install. LD_LIBRARY_PATH=/home/pi/root/install/lib. And the import ROOT works fine in Jupyter notebook giving: Welcome to JupyROOT 6.22/03",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1245,integrability,event,eventually,1245,"described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/install. LD_LIBRARY_PATH=/home/pi/root/install/lib. And the import ROOT works fine in Jupyter notebook giving: Welcome to JupyROOT 6.22/03",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:264,interoperability,standard,standard,264,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1705,interoperability,share,share,1705,"described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/install. LD_LIBRARY_PATH=/home/pi/root/install/lib. And the import ROOT works fine in Jupyter notebook giving: Welcome to JupyROOT 6.22/03",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1720,interoperability,share,share,1720,"described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/install. LD_LIBRARY_PATH=/home/pi/root/install/lib. And the import ROOT works fine in Jupyter notebook giving: Welcome to JupyROOT 6.22/03",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1518,modifiability,variab,variable,1518,"described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/install. LD_LIBRARY_PATH=/home/pi/root/install/lib. And the import ROOT works fine in Jupyter notebook giving: Welcome to JupyROOT 6.22/03",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:502,performance,error,error,502,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:606,performance,Error,Error,606,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:687,performance,Error,Error,687,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:726,performance,Error,Error,726,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:46,safety,patch,patches,46,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:502,safety,error,error,502,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:606,safety,Error,Error,606,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:687,safety,Error,Error,687,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:726,safety,Error,Error,726,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1266,safety,compl,completed,1266,"described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/install. LD_LIBRARY_PATH=/home/pi/root/install/lib. And the import ROOT works fine in Jupyter notebook giving: Welcome to JupyROOT 6.22/03",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:46,security,patch,patches,46,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:114,security,ident,identified,114,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1266,security,compl,completed,1266,"described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/install. LD_LIBRARY_PATH=/home/pi/root/install/lib. And the import ROOT works fine in Jupyter notebook giving: Welcome to JupyROOT 6.22/03",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:222,testability,simpl,simple,222,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:222,usability,simpl,simple,222,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:502,usability,error,error,502,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:528,usability,statu,status,528,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:606,usability,Error,Error,606,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:687,usability,Error,Error,687,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:726,usability,Error,Error,726,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:. TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1. make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2. make: *** [Makefile:152: all] Error 2. I went and added this library to the end of the line in the corresponding link.txt file:. /usr/lib/arm-linux-gnueabihf/libatomic.so.1. for these link.txt files under the build directory:. vi io/io/CMakeFiles/RIO.dir/link.txt. vi net/net/CMakeFiles/Net.dir/link.txt. vi tree/tree/CMakeFiles/Tree.dir/link.txt. vi net/netx/CMakeFiles/Netx.dir/link.txt. vi net/netxng/CMakeFiles/NetxNG.dir/link.txt. vi proof/proof/CMakeFiles/Proof.dir/link.txt. After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully. Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of. source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added . and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf. which contained:. JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook. MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man. SHLIB_PATH=/home/pi/root/install/lib. DYLD_LIBRARY_PATH=/home/pi/root/install/lib. CMAKE_PREFIX_PATH=/home/pi/root/install. PYTHONPATH=/home/pi/root/install/lib. LIBPATH=/home/pi/root/install/lib. JUPYTER_PATH=/home/pi/root/install/etc/notebook. ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:128,deployability,fail,failed,128,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. Traceback (most recent call last):. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA. from libROOTPythonizations import AsRTensor. ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA. raise Exception('Failed to pythonize the namespace TMVA'). Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. >>>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:489,deployability,instal,install,489,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. Traceback (most recent call last):. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA. from libROOTPythonizations import AsRTensor. ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA. raise Exception('Failed to pythonize the namespace TMVA'). Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. >>>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:674,deployability,instal,install,674,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. Traceback (most recent call last):. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA. from libROOTPythonizations import AsRTensor. ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA. raise Exception('Failed to pythonize the namespace TMVA'). Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. >>>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:849,deployability,modul,module,849,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. Traceback (most recent call last):. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA. from libROOTPythonizations import AsRTensor. ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA. raise Exception('Failed to pythonize the namespace TMVA'). Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. >>>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:878,deployability,instal,install,878,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. Traceback (most recent call last):. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA. from libROOTPythonizations import AsRTensor. ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA. raise Exception('Failed to pythonize the namespace TMVA'). Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. >>>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:944,deployability,Fail,Failed,944,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. Traceback (most recent call last):. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA. from libROOTPythonizations import AsRTensor. ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA. raise Exception('Failed to pythonize the namespace TMVA'). Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. >>>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:997,deployability,Fail,Failed,997,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. Traceback (most recent call last):. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA. from libROOTPythonizations import AsRTensor. ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA. raise Exception('Failed to pythonize the namespace TMVA'). Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. >>>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:88,energy efficiency,load,load,88,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. Traceback (most recent call last):. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA. from libROOTPythonizations import AsRTensor. ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA. raise Exception('Failed to pythonize the namespace TMVA'). Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. >>>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:213,energy efficiency,load,loading,213,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. Traceback (most recent call last):. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA. from libROOTPythonizations import AsRTensor. ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA. raise Exception('Failed to pythonize the namespace TMVA'). Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. >>>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:148,integrability,messag,message,148,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. Traceback (most recent call last):. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA. from libROOTPythonizations import AsRTensor. ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA. raise Exception('Failed to pythonize the namespace TMVA'). Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. >>>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:148,interoperability,messag,message,148,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. Traceback (most recent call last):. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA. from libROOTPythonizations import AsRTensor. ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA. raise Exception('Failed to pythonize the namespace TMVA'). Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. >>>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:849,modifiability,modul,module,849,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. Traceback (most recent call last):. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA. from libROOTPythonizations import AsRTensor. ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA. raise Exception('Failed to pythonize the namespace TMVA'). Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. >>>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:88,performance,load,load,88,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. Traceback (most recent call last):. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA. from libROOTPythonizations import AsRTensor. ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA. raise Exception('Failed to pythonize the namespace TMVA'). Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. >>>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:213,performance,load,loading,213,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. Traceback (most recent call last):. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA. from libROOTPythonizations import AsRTensor. ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA. raise Exception('Failed to pythonize the namespace TMVA'). Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. >>>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:128,reliability,fail,failed,128,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. Traceback (most recent call last):. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA. from libROOTPythonizations import AsRTensor. ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA. raise Exception('Failed to pythonize the namespace TMVA'). Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. >>>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:944,reliability,Fail,Failed,944,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. Traceback (most recent call last):. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA. from libROOTPythonizations import AsRTensor. ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA. raise Exception('Failed to pythonize the namespace TMVA'). Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. >>>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:997,reliability,Fail,Failed,997,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. Traceback (most recent call last):. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA. from libROOTPythonizations import AsRTensor. ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA. raise Exception('Failed to pythonize the namespace TMVA'). Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. >>>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:745,safety,except,exception,745,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. Traceback (most recent call last):. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA. from libROOTPythonizations import AsRTensor. ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA. raise Exception('Failed to pythonize the namespace TMVA'). Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. >>>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:764,safety,except,exception,764,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. Traceback (most recent call last):. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA. from libROOTPythonizations import AsRTensor. ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA. raise Exception('Failed to pythonize the namespace TMVA'). Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. >>>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:849,safety,modul,module,849,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. Traceback (most recent call last):. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA. from libROOTPythonizations import AsRTensor. ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA. raise Exception('Failed to pythonize the namespace TMVA'). Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. >>>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:933,safety,Except,Exception,933,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. Traceback (most recent call last):. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA. from libROOTPythonizations import AsRTensor. ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA. raise Exception('Failed to pythonize the namespace TMVA'). Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. >>>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:986,safety,Except,Exception,986,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. Traceback (most recent call last):. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA. from libROOTPythonizations import AsRTensor. ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA. raise Exception('Failed to pythonize the namespace TMVA'). Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. >>>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:433,testability,Trace,Traceback,433,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. Traceback (most recent call last):. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA. from libROOTPythonizations import AsRTensor. ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA. raise Exception('Failed to pythonize the namespace TMVA'). Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. >>>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:785,testability,Trace,Traceback,785,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. Traceback (most recent call last):. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA. from libROOTPythonizations import AsRTensor. ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA. raise Exception('Failed to pythonize the namespace TMVA'). Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. >>>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:324,usability,help,help,324,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. Traceback (most recent call last):. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA. from libROOTPythonizations import AsRTensor. ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA. raise Exception('Failed to pythonize the namespace TMVA'). Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. >>>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:1147,usability,help,help,1147,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. Traceback (most recent call last):. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA. from libROOTPythonizations import AsRTensor. ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA. raise Exception('Failed to pythonize the namespace TMVA'). Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09. Python 3.7.3 (default, Jul 25 2020, 13:03:44). [GCC 8.3.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import ROOT. >>> from ROOT import TMVA. >>>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:43,deployability,fail,failed,43,"@cgtully can you open a new issue for the ""failed to pythonize"" message, please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:64,integrability,messag,message,64,"@cgtully can you open a new issue for the ""failed to pythonize"" message, please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:64,interoperability,messag,message,64,"@cgtully can you open a new issue for the ""failed to pythonize"" message, please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:43,reliability,fail,failed,43,"@cgtully can you open a new issue for the ""failed to pythonize"" message, please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4562:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4562
https://github.com/root-project/root/pull/4562:25,availability,failur,failure,25,Looks like Jenkins setup failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4562
https://github.com/root-project/root/pull/4562:25,deployability,fail,failure,25,Looks like Jenkins setup failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4562
https://github.com/root-project/root/pull/4562:25,performance,failur,failure,25,Looks like Jenkins setup failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4562
https://github.com/root-project/root/pull/4562:25,reliability,fail,failure,25,Looks like Jenkins setup failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4562
https://github.com/root-project/root/pull/4564:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4564
https://github.com/root-project/root/pull/4566:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4566
https://github.com/root-project/root/pull/4568:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4568
https://github.com/root-project/root/pull/4568:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4568
https://github.com/root-project/root/pull/4568:11,deployability,build,build,11,@phsft-bot build only on ROOT-fedora29/python3.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4568
https://github.com/root-project/root/pull/4568:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora29/python3.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4568
https://github.com/root-project/root/pull/4568:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora29/python3,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4568
https://github.com/root-project/root/pull/4568:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora29/python3.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4568
https://github.com/root-project/root/pull/4568:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora29/python3,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4568
https://github.com/root-project/root/pull/4568:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora29/python3,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4568
https://github.com/root-project/root/pull/4568:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora29/python3,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4568
https://github.com/root-project/root/pull/4568:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora29/python3,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4568
https://github.com/root-project/root/pull/4568:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4568
https://github.com/root-project/root/pull/4571:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4571
https://github.com/root-project/root/pull/4573:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4573
https://github.com/root-project/root/pull/4575:11,deployability,build,build,11,@phsft-bot build also on ROOT-fedora30/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4575
https://github.com/root-project/root/pull/4576:11,deployability,build,build,11,"@phsft-bot build with flags -DCMAKE_BUILD_TYPE=""Debug"" -DLLVM_BUILD_TYPE=""Debug"" -Droottest=ON -Dtesting=ON -Dpyroot_experimental=ON -Druntime_cxxmodules=OFF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4576
https://github.com/root-project/root/pull/4576:11,deployability,build,build,11,"@phsft-bot build with flags -DCMAKE_BUILD_TYPE=""Debug"" -DLLVM_BUILD_TYPE=""Debug"" -Droottest=ON -Dtesting=ON -Dpyroot_experimental=ON",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4576
https://github.com/root-project/root/pull/4576:11,deployability,build,build,11,"@phsft-bot build with flags -DCMAKE_BUILD_TYPE=""Debug"" -DLLVM_BUILD_TYPE=""Debug"" -Droottest=ON -Dtesting=ON -Dpyroot_experimental=ON -Druntime_cxxmodules=Off",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4576
https://github.com/root-project/root/pull/4576:11,deployability,build,build,11,@phsft-bot build with flags -Dpyroot_experimental=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4576
https://github.com/root-project/root/pull/4577:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4577
https://github.com/root-project/root/pull/4577:0,availability,ping,ping,0,ping,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4577
https://github.com/root-project/root/pull/4577:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4577
https://github.com/root-project/root/pull/4577:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4577
https://github.com/root-project/root/pull/4577:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4577
https://github.com/root-project/root/pull/4577:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4577
https://github.com/root-project/root/pull/4577:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4577
https://github.com/root-project/root/pull/4577:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4577
https://github.com/root-project/root/pull/4577:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4577
https://github.com/root-project/root/pull/4577:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4577
https://github.com/root-project/root/pull/4577:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4577
https://github.com/root-project/root/pull/4577:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4577
https://github.com/root-project/root/pull/4578:0,usability,close,close,0,close inadvertently created PR ... against the wrong branch.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4578
https://github.com/root-project/root/pull/4579:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4579
https://github.com/root-project/root/pull/4579:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4579
https://github.com/root-project/root/pull/4579:47,deployability,log,logs,47,The github/jenkins connection seems stuck. The logs for the build started at https://github.com/root-project/root/pull/4579#issuecomment-545959752. can be found at https://epsft-jenkins.cern.ch/job/root-pullrequests-handler/11206/console,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4579
https://github.com/root-project/root/pull/4579:60,deployability,build,build,60,The github/jenkins connection seems stuck. The logs for the build started at https://github.com/root-project/root/pull/4579#issuecomment-545959752. can be found at https://epsft-jenkins.cern.ch/job/root-pullrequests-handler/11206/console,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4579
https://github.com/root-project/root/pull/4579:47,safety,log,logs,47,The github/jenkins connection seems stuck. The logs for the build started at https://github.com/root-project/root/pull/4579#issuecomment-545959752. can be found at https://epsft-jenkins.cern.ch/job/root-pullrequests-handler/11206/console,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4579
https://github.com/root-project/root/pull/4579:47,security,log,logs,47,The github/jenkins connection seems stuck. The logs for the build started at https://github.com/root-project/root/pull/4579#issuecomment-545959752. can be found at https://epsft-jenkins.cern.ch/job/root-pullrequests-handler/11206/console,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4579
https://github.com/root-project/root/pull/4579:47,testability,log,logs,47,The github/jenkins connection seems stuck. The logs for the build started at https://github.com/root-project/root/pull/4579#issuecomment-545959752. can be found at https://epsft-jenkins.cern.ch/job/root-pullrequests-handler/11206/console,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4579
https://github.com/root-project/root/pull/4583:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:120,deployability,fail,failed,120,Both. ```. projectroot.tmva.tmva.test.gtest_tmva_tmva_test_rtensor. projectroot.runtutorials.tutorial_v7_line.cxx. ```. failed and then succeeded on the same machine macphsft18 with no changes in code.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:120,reliability,fail,failed,120,Both. ```. projectroot.tmva.tmva.test.gtest_tmva_tmva_test_rtensor. projectroot.runtutorials.tutorial_v7_line.cxx. ```. failed and then succeeded on the same machine macphsft18 with no changes in code.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:33,safety,test,test,33,Both. ```. projectroot.tmva.tmva.test.gtest_tmva_tmva_test_rtensor. projectroot.runtutorials.tutorial_v7_line.cxx. ```. failed and then succeeded on the same machine macphsft18 with no changes in code.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:33,testability,test,test,33,Both. ```. projectroot.tmva.tmva.test.gtest_tmva_tmva_test_rtensor. projectroot.runtutorials.tutorial_v7_line.cxx. ```. failed and then succeeded on the same machine macphsft18 with no changes in code.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:4,availability,failur,failure,4,"The failure is unrelated:. ```. Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:32,availability,Error,Error,32,"The failure is unrelated:. ```. Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:123,availability,Failur,Failure,123,"The failure is unrelated:. ```. Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:4,deployability,fail,failure,4,"The failure is unrelated:. ```. Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:123,deployability,Fail,Failure,123,"The failure is unrelated:. ```. Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:171,deployability,fail,failed,171,"The failure is unrelated:. ```. Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:4,performance,failur,failure,4,"The failure is unrelated:. ```. Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:32,performance,Error,Error,32,"The failure is unrelated:. ```. Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:123,performance,Failur,Failure,123,"The failure is unrelated:. ```. Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:4,reliability,fail,failure,4,"The failure is unrelated:. ```. Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:123,reliability,Fail,Failure,123,"The failure is unrelated:. ```. Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:171,reliability,fail,failed,171,"The failure is unrelated:. ```. Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:32,safety,Error,Error,32,"The failure is unrelated:. ```. Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:146,security,certif,certificate,146,"The failure is unrelated:. ```. Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:193,security,trust,trusted,193,"The failure is unrelated:. ```. Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:158,testability,verif,verification,158,"The failure is unrelated:. ```. Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
